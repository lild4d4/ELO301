
pwm_adc_gpio.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007694  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  0800782c  0800782c  0001782c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007894  08007894  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08007894  08007894  00017894  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800789c  0800789c  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800789c  0800789c  0001789c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080078a0  080078a0  000178a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080078a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000388  20000010  080078b4  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000398  080078b4  00020398  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018dd6  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000034de  00000000  00000000  00038e16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001300  00000000  00000000  0003c2f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001190  00000000  00000000  0003d5f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000261c6  00000000  00000000  0003e788  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018a0e  00000000  00000000  0006494e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e9d0a  00000000  00000000  0007d35c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00167066  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004f08  00000000  00000000  001670b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000010 	.word	0x20000010
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08007814 	.word	0x08007814

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000014 	.word	0x20000014
 80001d4:	08007814 	.word	0x08007814

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__aeabi_d2uiz>:
 8000974:	004a      	lsls	r2, r1, #1
 8000976:	d211      	bcs.n	800099c <__aeabi_d2uiz+0x28>
 8000978:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800097c:	d211      	bcs.n	80009a2 <__aeabi_d2uiz+0x2e>
 800097e:	d50d      	bpl.n	800099c <__aeabi_d2uiz+0x28>
 8000980:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000984:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000988:	d40e      	bmi.n	80009a8 <__aeabi_d2uiz+0x34>
 800098a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800098e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000992:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000996:	fa23 f002 	lsr.w	r0, r3, r2
 800099a:	4770      	bx	lr
 800099c:	f04f 0000 	mov.w	r0, #0
 80009a0:	4770      	bx	lr
 80009a2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009a6:	d102      	bne.n	80009ae <__aeabi_d2uiz+0x3a>
 80009a8:	f04f 30ff 	mov.w	r0, #4294967295
 80009ac:	4770      	bx	lr
 80009ae:	f04f 0000 	mov.w	r0, #0
 80009b2:	4770      	bx	lr

080009b4 <__aeabi_uldivmod>:
 80009b4:	b953      	cbnz	r3, 80009cc <__aeabi_uldivmod+0x18>
 80009b6:	b94a      	cbnz	r2, 80009cc <__aeabi_uldivmod+0x18>
 80009b8:	2900      	cmp	r1, #0
 80009ba:	bf08      	it	eq
 80009bc:	2800      	cmpeq	r0, #0
 80009be:	bf1c      	itt	ne
 80009c0:	f04f 31ff 	movne.w	r1, #4294967295
 80009c4:	f04f 30ff 	movne.w	r0, #4294967295
 80009c8:	f000 b974 	b.w	8000cb4 <__aeabi_idiv0>
 80009cc:	f1ad 0c08 	sub.w	ip, sp, #8
 80009d0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009d4:	f000 f806 	bl	80009e4 <__udivmoddi4>
 80009d8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009dc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009e0:	b004      	add	sp, #16
 80009e2:	4770      	bx	lr

080009e4 <__udivmoddi4>:
 80009e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009e8:	9d08      	ldr	r5, [sp, #32]
 80009ea:	4604      	mov	r4, r0
 80009ec:	468e      	mov	lr, r1
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d14d      	bne.n	8000a8e <__udivmoddi4+0xaa>
 80009f2:	428a      	cmp	r2, r1
 80009f4:	4694      	mov	ip, r2
 80009f6:	d969      	bls.n	8000acc <__udivmoddi4+0xe8>
 80009f8:	fab2 f282 	clz	r2, r2
 80009fc:	b152      	cbz	r2, 8000a14 <__udivmoddi4+0x30>
 80009fe:	fa01 f302 	lsl.w	r3, r1, r2
 8000a02:	f1c2 0120 	rsb	r1, r2, #32
 8000a06:	fa20 f101 	lsr.w	r1, r0, r1
 8000a0a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a0e:	ea41 0e03 	orr.w	lr, r1, r3
 8000a12:	4094      	lsls	r4, r2
 8000a14:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a18:	0c21      	lsrs	r1, r4, #16
 8000a1a:	fbbe f6f8 	udiv	r6, lr, r8
 8000a1e:	fa1f f78c 	uxth.w	r7, ip
 8000a22:	fb08 e316 	mls	r3, r8, r6, lr
 8000a26:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000a2a:	fb06 f107 	mul.w	r1, r6, r7
 8000a2e:	4299      	cmp	r1, r3
 8000a30:	d90a      	bls.n	8000a48 <__udivmoddi4+0x64>
 8000a32:	eb1c 0303 	adds.w	r3, ip, r3
 8000a36:	f106 30ff 	add.w	r0, r6, #4294967295
 8000a3a:	f080 811f 	bcs.w	8000c7c <__udivmoddi4+0x298>
 8000a3e:	4299      	cmp	r1, r3
 8000a40:	f240 811c 	bls.w	8000c7c <__udivmoddi4+0x298>
 8000a44:	3e02      	subs	r6, #2
 8000a46:	4463      	add	r3, ip
 8000a48:	1a5b      	subs	r3, r3, r1
 8000a4a:	b2a4      	uxth	r4, r4
 8000a4c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a50:	fb08 3310 	mls	r3, r8, r0, r3
 8000a54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a58:	fb00 f707 	mul.w	r7, r0, r7
 8000a5c:	42a7      	cmp	r7, r4
 8000a5e:	d90a      	bls.n	8000a76 <__udivmoddi4+0x92>
 8000a60:	eb1c 0404 	adds.w	r4, ip, r4
 8000a64:	f100 33ff 	add.w	r3, r0, #4294967295
 8000a68:	f080 810a 	bcs.w	8000c80 <__udivmoddi4+0x29c>
 8000a6c:	42a7      	cmp	r7, r4
 8000a6e:	f240 8107 	bls.w	8000c80 <__udivmoddi4+0x29c>
 8000a72:	4464      	add	r4, ip
 8000a74:	3802      	subs	r0, #2
 8000a76:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000a7a:	1be4      	subs	r4, r4, r7
 8000a7c:	2600      	movs	r6, #0
 8000a7e:	b11d      	cbz	r5, 8000a88 <__udivmoddi4+0xa4>
 8000a80:	40d4      	lsrs	r4, r2
 8000a82:	2300      	movs	r3, #0
 8000a84:	e9c5 4300 	strd	r4, r3, [r5]
 8000a88:	4631      	mov	r1, r6
 8000a8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a8e:	428b      	cmp	r3, r1
 8000a90:	d909      	bls.n	8000aa6 <__udivmoddi4+0xc2>
 8000a92:	2d00      	cmp	r5, #0
 8000a94:	f000 80ef 	beq.w	8000c76 <__udivmoddi4+0x292>
 8000a98:	2600      	movs	r6, #0
 8000a9a:	e9c5 0100 	strd	r0, r1, [r5]
 8000a9e:	4630      	mov	r0, r6
 8000aa0:	4631      	mov	r1, r6
 8000aa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000aa6:	fab3 f683 	clz	r6, r3
 8000aaa:	2e00      	cmp	r6, #0
 8000aac:	d14a      	bne.n	8000b44 <__udivmoddi4+0x160>
 8000aae:	428b      	cmp	r3, r1
 8000ab0:	d302      	bcc.n	8000ab8 <__udivmoddi4+0xd4>
 8000ab2:	4282      	cmp	r2, r0
 8000ab4:	f200 80f9 	bhi.w	8000caa <__udivmoddi4+0x2c6>
 8000ab8:	1a84      	subs	r4, r0, r2
 8000aba:	eb61 0303 	sbc.w	r3, r1, r3
 8000abe:	2001      	movs	r0, #1
 8000ac0:	469e      	mov	lr, r3
 8000ac2:	2d00      	cmp	r5, #0
 8000ac4:	d0e0      	beq.n	8000a88 <__udivmoddi4+0xa4>
 8000ac6:	e9c5 4e00 	strd	r4, lr, [r5]
 8000aca:	e7dd      	b.n	8000a88 <__udivmoddi4+0xa4>
 8000acc:	b902      	cbnz	r2, 8000ad0 <__udivmoddi4+0xec>
 8000ace:	deff      	udf	#255	; 0xff
 8000ad0:	fab2 f282 	clz	r2, r2
 8000ad4:	2a00      	cmp	r2, #0
 8000ad6:	f040 8092 	bne.w	8000bfe <__udivmoddi4+0x21a>
 8000ada:	eba1 010c 	sub.w	r1, r1, ip
 8000ade:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ae2:	fa1f fe8c 	uxth.w	lr, ip
 8000ae6:	2601      	movs	r6, #1
 8000ae8:	0c20      	lsrs	r0, r4, #16
 8000aea:	fbb1 f3f7 	udiv	r3, r1, r7
 8000aee:	fb07 1113 	mls	r1, r7, r3, r1
 8000af2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000af6:	fb0e f003 	mul.w	r0, lr, r3
 8000afa:	4288      	cmp	r0, r1
 8000afc:	d908      	bls.n	8000b10 <__udivmoddi4+0x12c>
 8000afe:	eb1c 0101 	adds.w	r1, ip, r1
 8000b02:	f103 38ff 	add.w	r8, r3, #4294967295
 8000b06:	d202      	bcs.n	8000b0e <__udivmoddi4+0x12a>
 8000b08:	4288      	cmp	r0, r1
 8000b0a:	f200 80cb 	bhi.w	8000ca4 <__udivmoddi4+0x2c0>
 8000b0e:	4643      	mov	r3, r8
 8000b10:	1a09      	subs	r1, r1, r0
 8000b12:	b2a4      	uxth	r4, r4
 8000b14:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b18:	fb07 1110 	mls	r1, r7, r0, r1
 8000b1c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000b20:	fb0e fe00 	mul.w	lr, lr, r0
 8000b24:	45a6      	cmp	lr, r4
 8000b26:	d908      	bls.n	8000b3a <__udivmoddi4+0x156>
 8000b28:	eb1c 0404 	adds.w	r4, ip, r4
 8000b2c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b30:	d202      	bcs.n	8000b38 <__udivmoddi4+0x154>
 8000b32:	45a6      	cmp	lr, r4
 8000b34:	f200 80bb 	bhi.w	8000cae <__udivmoddi4+0x2ca>
 8000b38:	4608      	mov	r0, r1
 8000b3a:	eba4 040e 	sub.w	r4, r4, lr
 8000b3e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000b42:	e79c      	b.n	8000a7e <__udivmoddi4+0x9a>
 8000b44:	f1c6 0720 	rsb	r7, r6, #32
 8000b48:	40b3      	lsls	r3, r6
 8000b4a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000b4e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000b52:	fa20 f407 	lsr.w	r4, r0, r7
 8000b56:	fa01 f306 	lsl.w	r3, r1, r6
 8000b5a:	431c      	orrs	r4, r3
 8000b5c:	40f9      	lsrs	r1, r7
 8000b5e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000b62:	fa00 f306 	lsl.w	r3, r0, r6
 8000b66:	fbb1 f8f9 	udiv	r8, r1, r9
 8000b6a:	0c20      	lsrs	r0, r4, #16
 8000b6c:	fa1f fe8c 	uxth.w	lr, ip
 8000b70:	fb09 1118 	mls	r1, r9, r8, r1
 8000b74:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b78:	fb08 f00e 	mul.w	r0, r8, lr
 8000b7c:	4288      	cmp	r0, r1
 8000b7e:	fa02 f206 	lsl.w	r2, r2, r6
 8000b82:	d90b      	bls.n	8000b9c <__udivmoddi4+0x1b8>
 8000b84:	eb1c 0101 	adds.w	r1, ip, r1
 8000b88:	f108 3aff 	add.w	sl, r8, #4294967295
 8000b8c:	f080 8088 	bcs.w	8000ca0 <__udivmoddi4+0x2bc>
 8000b90:	4288      	cmp	r0, r1
 8000b92:	f240 8085 	bls.w	8000ca0 <__udivmoddi4+0x2bc>
 8000b96:	f1a8 0802 	sub.w	r8, r8, #2
 8000b9a:	4461      	add	r1, ip
 8000b9c:	1a09      	subs	r1, r1, r0
 8000b9e:	b2a4      	uxth	r4, r4
 8000ba0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ba4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ba8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000bac:	fb00 fe0e 	mul.w	lr, r0, lr
 8000bb0:	458e      	cmp	lr, r1
 8000bb2:	d908      	bls.n	8000bc6 <__udivmoddi4+0x1e2>
 8000bb4:	eb1c 0101 	adds.w	r1, ip, r1
 8000bb8:	f100 34ff 	add.w	r4, r0, #4294967295
 8000bbc:	d26c      	bcs.n	8000c98 <__udivmoddi4+0x2b4>
 8000bbe:	458e      	cmp	lr, r1
 8000bc0:	d96a      	bls.n	8000c98 <__udivmoddi4+0x2b4>
 8000bc2:	3802      	subs	r0, #2
 8000bc4:	4461      	add	r1, ip
 8000bc6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000bca:	fba0 9402 	umull	r9, r4, r0, r2
 8000bce:	eba1 010e 	sub.w	r1, r1, lr
 8000bd2:	42a1      	cmp	r1, r4
 8000bd4:	46c8      	mov	r8, r9
 8000bd6:	46a6      	mov	lr, r4
 8000bd8:	d356      	bcc.n	8000c88 <__udivmoddi4+0x2a4>
 8000bda:	d053      	beq.n	8000c84 <__udivmoddi4+0x2a0>
 8000bdc:	b15d      	cbz	r5, 8000bf6 <__udivmoddi4+0x212>
 8000bde:	ebb3 0208 	subs.w	r2, r3, r8
 8000be2:	eb61 010e 	sbc.w	r1, r1, lr
 8000be6:	fa01 f707 	lsl.w	r7, r1, r7
 8000bea:	fa22 f306 	lsr.w	r3, r2, r6
 8000bee:	40f1      	lsrs	r1, r6
 8000bf0:	431f      	orrs	r7, r3
 8000bf2:	e9c5 7100 	strd	r7, r1, [r5]
 8000bf6:	2600      	movs	r6, #0
 8000bf8:	4631      	mov	r1, r6
 8000bfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bfe:	f1c2 0320 	rsb	r3, r2, #32
 8000c02:	40d8      	lsrs	r0, r3
 8000c04:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c08:	fa21 f303 	lsr.w	r3, r1, r3
 8000c0c:	4091      	lsls	r1, r2
 8000c0e:	4301      	orrs	r1, r0
 8000c10:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c14:	fa1f fe8c 	uxth.w	lr, ip
 8000c18:	fbb3 f0f7 	udiv	r0, r3, r7
 8000c1c:	fb07 3610 	mls	r6, r7, r0, r3
 8000c20:	0c0b      	lsrs	r3, r1, #16
 8000c22:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000c26:	fb00 f60e 	mul.w	r6, r0, lr
 8000c2a:	429e      	cmp	r6, r3
 8000c2c:	fa04 f402 	lsl.w	r4, r4, r2
 8000c30:	d908      	bls.n	8000c44 <__udivmoddi4+0x260>
 8000c32:	eb1c 0303 	adds.w	r3, ip, r3
 8000c36:	f100 38ff 	add.w	r8, r0, #4294967295
 8000c3a:	d22f      	bcs.n	8000c9c <__udivmoddi4+0x2b8>
 8000c3c:	429e      	cmp	r6, r3
 8000c3e:	d92d      	bls.n	8000c9c <__udivmoddi4+0x2b8>
 8000c40:	3802      	subs	r0, #2
 8000c42:	4463      	add	r3, ip
 8000c44:	1b9b      	subs	r3, r3, r6
 8000c46:	b289      	uxth	r1, r1
 8000c48:	fbb3 f6f7 	udiv	r6, r3, r7
 8000c4c:	fb07 3316 	mls	r3, r7, r6, r3
 8000c50:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c54:	fb06 f30e 	mul.w	r3, r6, lr
 8000c58:	428b      	cmp	r3, r1
 8000c5a:	d908      	bls.n	8000c6e <__udivmoddi4+0x28a>
 8000c5c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c60:	f106 38ff 	add.w	r8, r6, #4294967295
 8000c64:	d216      	bcs.n	8000c94 <__udivmoddi4+0x2b0>
 8000c66:	428b      	cmp	r3, r1
 8000c68:	d914      	bls.n	8000c94 <__udivmoddi4+0x2b0>
 8000c6a:	3e02      	subs	r6, #2
 8000c6c:	4461      	add	r1, ip
 8000c6e:	1ac9      	subs	r1, r1, r3
 8000c70:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000c74:	e738      	b.n	8000ae8 <__udivmoddi4+0x104>
 8000c76:	462e      	mov	r6, r5
 8000c78:	4628      	mov	r0, r5
 8000c7a:	e705      	b.n	8000a88 <__udivmoddi4+0xa4>
 8000c7c:	4606      	mov	r6, r0
 8000c7e:	e6e3      	b.n	8000a48 <__udivmoddi4+0x64>
 8000c80:	4618      	mov	r0, r3
 8000c82:	e6f8      	b.n	8000a76 <__udivmoddi4+0x92>
 8000c84:	454b      	cmp	r3, r9
 8000c86:	d2a9      	bcs.n	8000bdc <__udivmoddi4+0x1f8>
 8000c88:	ebb9 0802 	subs.w	r8, r9, r2
 8000c8c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000c90:	3801      	subs	r0, #1
 8000c92:	e7a3      	b.n	8000bdc <__udivmoddi4+0x1f8>
 8000c94:	4646      	mov	r6, r8
 8000c96:	e7ea      	b.n	8000c6e <__udivmoddi4+0x28a>
 8000c98:	4620      	mov	r0, r4
 8000c9a:	e794      	b.n	8000bc6 <__udivmoddi4+0x1e2>
 8000c9c:	4640      	mov	r0, r8
 8000c9e:	e7d1      	b.n	8000c44 <__udivmoddi4+0x260>
 8000ca0:	46d0      	mov	r8, sl
 8000ca2:	e77b      	b.n	8000b9c <__udivmoddi4+0x1b8>
 8000ca4:	3b02      	subs	r3, #2
 8000ca6:	4461      	add	r1, ip
 8000ca8:	e732      	b.n	8000b10 <__udivmoddi4+0x12c>
 8000caa:	4630      	mov	r0, r6
 8000cac:	e709      	b.n	8000ac2 <__udivmoddi4+0xde>
 8000cae:	4464      	add	r4, ip
 8000cb0:	3802      	subs	r0, #2
 8000cb2:	e742      	b.n	8000b3a <__udivmoddi4+0x156>

08000cb4 <__aeabi_idiv0>:
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b086      	sub	sp, #24
 8000cbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000cbe:	463b      	mov	r3, r7
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	601a      	str	r2, [r3, #0]
 8000cc4:	605a      	str	r2, [r3, #4]
 8000cc6:	609a      	str	r2, [r3, #8]
 8000cc8:	60da      	str	r2, [r3, #12]
 8000cca:	611a      	str	r2, [r3, #16]
 8000ccc:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000cce:	4b29      	ldr	r3, [pc, #164]	; (8000d74 <MX_ADC1_Init+0xbc>)
 8000cd0:	4a29      	ldr	r2, [pc, #164]	; (8000d78 <MX_ADC1_Init+0xc0>)
 8000cd2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000cd4:	4b27      	ldr	r3, [pc, #156]	; (8000d74 <MX_ADC1_Init+0xbc>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000cda:	4b26      	ldr	r3, [pc, #152]	; (8000d74 <MX_ADC1_Init+0xbc>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ce0:	4b24      	ldr	r3, [pc, #144]	; (8000d74 <MX_ADC1_Init+0xbc>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000ce6:	4b23      	ldr	r3, [pc, #140]	; (8000d74 <MX_ADC1_Init+0xbc>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000cec:	4b21      	ldr	r3, [pc, #132]	; (8000d74 <MX_ADC1_Init+0xbc>)
 8000cee:	2204      	movs	r2, #4
 8000cf0:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000cf2:	4b20      	ldr	r3, [pc, #128]	; (8000d74 <MX_ADC1_Init+0xbc>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000cf8:	4b1e      	ldr	r3, [pc, #120]	; (8000d74 <MX_ADC1_Init+0xbc>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000cfe:	4b1d      	ldr	r3, [pc, #116]	; (8000d74 <MX_ADC1_Init+0xbc>)
 8000d00:	2201      	movs	r2, #1
 8000d02:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000d04:	4b1b      	ldr	r3, [pc, #108]	; (8000d74 <MX_ADC1_Init+0xbc>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d0c:	4b19      	ldr	r3, [pc, #100]	; (8000d74 <MX_ADC1_Init+0xbc>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000d12:	4b18      	ldr	r3, [pc, #96]	; (8000d74 <MX_ADC1_Init+0xbc>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000d18:	4b16      	ldr	r3, [pc, #88]	; (8000d74 <MX_ADC1_Init+0xbc>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000d20:	4b14      	ldr	r3, [pc, #80]	; (8000d74 <MX_ADC1_Init+0xbc>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000d26:	4b13      	ldr	r3, [pc, #76]	; (8000d74 <MX_ADC1_Init+0xbc>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000d2e:	4811      	ldr	r0, [pc, #68]	; (8000d74 <MX_ADC1_Init+0xbc>)
 8000d30:	f001 f94c 	bl	8001fcc <HAL_ADC_Init>
 8000d34:	4603      	mov	r3, r0
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d001      	beq.n	8000d3e <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 8000d3a:	f000 fb7b 	bl	8001434 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000d3e:	4b0f      	ldr	r3, [pc, #60]	; (8000d7c <MX_ADC1_Init+0xc4>)
 8000d40:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000d42:	2306      	movs	r3, #6
 8000d44:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000d46:	2300      	movs	r3, #0
 8000d48:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000d4a:	237f      	movs	r3, #127	; 0x7f
 8000d4c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000d4e:	2304      	movs	r3, #4
 8000d50:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000d52:	2300      	movs	r3, #0
 8000d54:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d56:	463b      	mov	r3, r7
 8000d58:	4619      	mov	r1, r3
 8000d5a:	4806      	ldr	r0, [pc, #24]	; (8000d74 <MX_ADC1_Init+0xbc>)
 8000d5c:	f001 fb82 	bl	8002464 <HAL_ADC_ConfigChannel>
 8000d60:	4603      	mov	r3, r0
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d001      	beq.n	8000d6a <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000d66:	f000 fb65 	bl	8001434 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000d6a:	bf00      	nop
 8000d6c:	3718      	adds	r7, #24
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bd80      	pop	{r7, pc}
 8000d72:	bf00      	nop
 8000d74:	2000002c 	.word	0x2000002c
 8000d78:	50040000 	.word	0x50040000
 8000d7c:	04300002 	.word	0x04300002

08000d80 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b0a4      	sub	sp, #144	; 0x90
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d88:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	601a      	str	r2, [r3, #0]
 8000d90:	605a      	str	r2, [r3, #4]
 8000d92:	609a      	str	r2, [r3, #8]
 8000d94:	60da      	str	r2, [r3, #12]
 8000d96:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d98:	f107 0314 	add.w	r3, r7, #20
 8000d9c:	2268      	movs	r2, #104	; 0x68
 8000d9e:	2100      	movs	r1, #0
 8000da0:	4618      	mov	r0, r3
 8000da2:	f006 fd2f 	bl	8007804 <memset>
  if(adcHandle->Instance==ADC1)
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	4a26      	ldr	r2, [pc, #152]	; (8000e44 <HAL_ADC_MspInit+0xc4>)
 8000dac:	4293      	cmp	r3, r2
 8000dae:	d144      	bne.n	8000e3a <HAL_ADC_MspInit+0xba>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000db0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000db4:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000db6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000dba:	673b      	str	r3, [r7, #112]	; 0x70
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8000dbc:	2302      	movs	r3, #2
 8000dbe:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000dc0:	2301      	movs	r3, #1
 8000dc2:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8000dc4:	2308      	movs	r3, #8
 8000dc6:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000dc8:	2307      	movs	r3, #7
 8000dca:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000dcc:	2302      	movs	r3, #2
 8000dce:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000dd0:	2302      	movs	r3, #2
 8000dd2:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000dd4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000dd8:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000dda:	f107 0314 	add.w	r3, r7, #20
 8000dde:	4618      	mov	r0, r3
 8000de0:	f003 f998 	bl	8004114 <HAL_RCCEx_PeriphCLKConfig>
 8000de4:	4603      	mov	r3, r0
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d001      	beq.n	8000dee <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 8000dea:	f000 fb23 	bl	8001434 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000dee:	4b16      	ldr	r3, [pc, #88]	; (8000e48 <HAL_ADC_MspInit+0xc8>)
 8000df0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000df2:	4a15      	ldr	r2, [pc, #84]	; (8000e48 <HAL_ADC_MspInit+0xc8>)
 8000df4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000df8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dfa:	4b13      	ldr	r3, [pc, #76]	; (8000e48 <HAL_ADC_MspInit+0xc8>)
 8000dfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dfe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000e02:	613b      	str	r3, [r7, #16]
 8000e04:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e06:	4b10      	ldr	r3, [pc, #64]	; (8000e48 <HAL_ADC_MspInit+0xc8>)
 8000e08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e0a:	4a0f      	ldr	r2, [pc, #60]	; (8000e48 <HAL_ADC_MspInit+0xc8>)
 8000e0c:	f043 0304 	orr.w	r3, r3, #4
 8000e10:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e12:	4b0d      	ldr	r3, [pc, #52]	; (8000e48 <HAL_ADC_MspInit+0xc8>)
 8000e14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e16:	f003 0304 	and.w	r3, r3, #4
 8000e1a:	60fb      	str	r3, [r7, #12]
 8000e1c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000e1e:	2301      	movs	r3, #1
 8000e20:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000e22:	230b      	movs	r3, #11
 8000e24:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e2e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000e32:	4619      	mov	r1, r3
 8000e34:	4805      	ldr	r0, [pc, #20]	; (8000e4c <HAL_ADC_MspInit+0xcc>)
 8000e36:	f002 f927 	bl	8003088 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000e3a:	bf00      	nop
 8000e3c:	3790      	adds	r7, #144	; 0x90
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}
 8000e42:	bf00      	nop
 8000e44:	50040000 	.word	0x50040000
 8000e48:	40021000 	.word	0x40021000
 8000e4c:	48000800 	.word	0x48000800

08000e50 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b08a      	sub	sp, #40	; 0x28
 8000e54:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e56:	f107 0314 	add.w	r3, r7, #20
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	601a      	str	r2, [r3, #0]
 8000e5e:	605a      	str	r2, [r3, #4]
 8000e60:	609a      	str	r2, [r3, #8]
 8000e62:	60da      	str	r2, [r3, #12]
 8000e64:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e66:	4b39      	ldr	r3, [pc, #228]	; (8000f4c <MX_GPIO_Init+0xfc>)
 8000e68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e6a:	4a38      	ldr	r2, [pc, #224]	; (8000f4c <MX_GPIO_Init+0xfc>)
 8000e6c:	f043 0304 	orr.w	r3, r3, #4
 8000e70:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e72:	4b36      	ldr	r3, [pc, #216]	; (8000f4c <MX_GPIO_Init+0xfc>)
 8000e74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e76:	f003 0304 	and.w	r3, r3, #4
 8000e7a:	613b      	str	r3, [r7, #16]
 8000e7c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e7e:	4b33      	ldr	r3, [pc, #204]	; (8000f4c <MX_GPIO_Init+0xfc>)
 8000e80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e82:	4a32      	ldr	r2, [pc, #200]	; (8000f4c <MX_GPIO_Init+0xfc>)
 8000e84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e88:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e8a:	4b30      	ldr	r3, [pc, #192]	; (8000f4c <MX_GPIO_Init+0xfc>)
 8000e8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e92:	60fb      	str	r3, [r7, #12]
 8000e94:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e96:	4b2d      	ldr	r3, [pc, #180]	; (8000f4c <MX_GPIO_Init+0xfc>)
 8000e98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e9a:	4a2c      	ldr	r2, [pc, #176]	; (8000f4c <MX_GPIO_Init+0xfc>)
 8000e9c:	f043 0301 	orr.w	r3, r3, #1
 8000ea0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ea2:	4b2a      	ldr	r3, [pc, #168]	; (8000f4c <MX_GPIO_Init+0xfc>)
 8000ea4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ea6:	f003 0301 	and.w	r3, r3, #1
 8000eaa:	60bb      	str	r3, [r7, #8]
 8000eac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eae:	4b27      	ldr	r3, [pc, #156]	; (8000f4c <MX_GPIO_Init+0xfc>)
 8000eb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eb2:	4a26      	ldr	r2, [pc, #152]	; (8000f4c <MX_GPIO_Init+0xfc>)
 8000eb4:	f043 0302 	orr.w	r3, r3, #2
 8000eb8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000eba:	4b24      	ldr	r3, [pc, #144]	; (8000f4c <MX_GPIO_Init+0xfc>)
 8000ebc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ebe:	f003 0302 	and.w	r3, r3, #2
 8000ec2:	607b      	str	r3, [r7, #4]
 8000ec4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, GPIO_PIN_RESET);
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ecc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ed0:	f002 fa6c 	bl	80033ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000ed4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ed8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000eda:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000ede:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000ee4:	f107 0314 	add.w	r3, r7, #20
 8000ee8:	4619      	mov	r1, r3
 8000eea:	4819      	ldr	r0, [pc, #100]	; (8000f50 <MX_GPIO_Init+0x100>)
 8000eec:	f002 f8cc 	bl	8003088 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = SW4_Pin|SW3_Pin|SW2_Pin;
 8000ef0:	23e0      	movs	r3, #224	; 0xe0
 8000ef2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000efc:	f107 0314 	add.w	r3, r7, #20
 8000f00:	4619      	mov	r1, r3
 8000f02:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f06:	f002 f8bf 	bl	8003088 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = EN_Pin;
 8000f0a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000f0e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f10:	2301      	movs	r3, #1
 8000f12:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f14:	2300      	movs	r3, #0
 8000f16:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(EN_GPIO_Port, &GPIO_InitStruct);
 8000f1c:	f107 0314 	add.w	r3, r7, #20
 8000f20:	4619      	mov	r1, r3
 8000f22:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f26:	f002 f8af 	bl	8003088 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SW1_Pin;
 8000f2a:	2340      	movs	r3, #64	; 0x40
 8000f2c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f32:	2300      	movs	r3, #0
 8000f34:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SW1_GPIO_Port, &GPIO_InitStruct);
 8000f36:	f107 0314 	add.w	r3, r7, #20
 8000f3a:	4619      	mov	r1, r3
 8000f3c:	4805      	ldr	r0, [pc, #20]	; (8000f54 <MX_GPIO_Init+0x104>)
 8000f3e:	f002 f8a3 	bl	8003088 <HAL_GPIO_Init>

}
 8000f42:	bf00      	nop
 8000f44:	3728      	adds	r7, #40	; 0x28
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	40021000 	.word	0x40021000
 8000f50:	48000800 	.word	0x48000800
 8000f54:	48000400 	.word	0x48000400

08000f58 <gpio_if_init>:
/*- PUBLIC_API ---------------------------------------------------------------*/
/*
 * API: gpio_if_init
 */
void gpio_if_init( t_gpio_if *gpio_if, t_gpio_active active, t_gpio_pin *pin, t_gpio_state initial_state )
{
 8000f58:	b480      	push	{r7}
 8000f5a:	b085      	sub	sp, #20
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	60f8      	str	r0, [r7, #12]
 8000f60:	607a      	str	r2, [r7, #4]
 8000f62:	461a      	mov	r2, r3
 8000f64:	460b      	mov	r3, r1
 8000f66:	72fb      	strb	r3, [r7, #11]
 8000f68:	4613      	mov	r3, r2
 8000f6a:	72bb      	strb	r3, [r7, #10]
  gpio_if->active = active;
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	7afa      	ldrb	r2, [r7, #11]
 8000f70:	701a      	strb	r2, [r3, #0]
  gpio_if->pin = pin;
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	687a      	ldr	r2, [r7, #4]
 8000f76:	605a      	str	r2, [r3, #4]
  gpio_if->initial_state = initial_state;
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	7aba      	ldrb	r2, [r7, #10]
 8000f7c:	721a      	strb	r2, [r3, #8]
}
 8000f7e:	bf00      	nop
 8000f80:	3714      	adds	r7, #20
 8000f82:	46bd      	mov	sp, r7
 8000f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f88:	4770      	bx	lr

08000f8a <gpio_if_open>:

/*
 * API: gpio_if_open
 */
t_gpio_if_status gpio_if_open(t_gpio_if *gpio_if)
{
 8000f8a:	b580      	push	{r7, lr}
 8000f8c:	b082      	sub	sp, #8
 8000f8e:	af00      	add	r7, sp, #0
 8000f90:	6078      	str	r0, [r7, #4]
  /* Sanity check */
  if (gpio_if->pin == NULL)
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	685b      	ldr	r3, [r3, #4]
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d101      	bne.n	8000f9e <gpio_if_open+0x14>
  {
    return GPIO_IF_OPEN_FAILURE;
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	e00f      	b.n	8000fbe <gpio_if_open+0x34>
  }

  /* Init variables */

  /* Start peripherals */
  if (gpio_if->initial_state == GPIO_IF_SET)
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	7a1b      	ldrb	r3, [r3, #8]
 8000fa2:	2b01      	cmp	r3, #1
 8000fa4:	d103      	bne.n	8000fae <gpio_if_open+0x24>
  {
    gpio_if_set(gpio_if);
 8000fa6:	6878      	ldr	r0, [r7, #4]
 8000fa8:	f000 f80d 	bl	8000fc6 <gpio_if_set>
 8000fac:	e006      	b.n	8000fbc <gpio_if_open+0x32>
  }
  else if (gpio_if->initial_state == GPIO_IF_CLEAR)
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	7a1b      	ldrb	r3, [r3, #8]
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d102      	bne.n	8000fbc <gpio_if_open+0x32>
  {
    gpio_if_clear(gpio_if);
 8000fb6:	6878      	ldr	r0, [r7, #4]
 8000fb8:	f000 f826 	bl	8001008 <gpio_if_clear>
  else
  {
    /* Nothing to do */
  }

  return GPIO_IF_SUCCESS;
 8000fbc:	2300      	movs	r3, #0
}
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	3708      	adds	r7, #8
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}

08000fc6 <gpio_if_set>:

/*
 * API: gpio_if_set
 */
void gpio_if_set(t_gpio_if *gpio_if)
{
 8000fc6:	b580      	push	{r7, lr}
 8000fc8:	b082      	sub	sp, #8
 8000fca:	af00      	add	r7, sp, #0
 8000fcc:	6078      	str	r0, [r7, #4]
  if (gpio_if->active == ACTIVE_HIGH)
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	781b      	ldrb	r3, [r3, #0]
 8000fd2:	2b01      	cmp	r3, #1
 8000fd4:	d10a      	bne.n	8000fec <gpio_if_set+0x26>
  {
    HAL_GPIO_WritePin(gpio_if->pin->port, gpio_if->pin->pin, GPIO_PIN_SET);
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	685b      	ldr	r3, [r3, #4]
 8000fda:	6818      	ldr	r0, [r3, #0]
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	685b      	ldr	r3, [r3, #4]
 8000fe0:	889b      	ldrh	r3, [r3, #4]
 8000fe2:	2201      	movs	r2, #1
 8000fe4:	4619      	mov	r1, r3
 8000fe6:	f002 f9e1 	bl	80033ac <HAL_GPIO_WritePin>
  }
  else
  {
    HAL_GPIO_WritePin(gpio_if->pin->port, gpio_if->pin->pin, GPIO_PIN_RESET);
  }
}
 8000fea:	e009      	b.n	8001000 <gpio_if_set+0x3a>
    HAL_GPIO_WritePin(gpio_if->pin->port, gpio_if->pin->pin, GPIO_PIN_RESET);
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	685b      	ldr	r3, [r3, #4]
 8000ff0:	6818      	ldr	r0, [r3, #0]
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	685b      	ldr	r3, [r3, #4]
 8000ff6:	889b      	ldrh	r3, [r3, #4]
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	4619      	mov	r1, r3
 8000ffc:	f002 f9d6 	bl	80033ac <HAL_GPIO_WritePin>
}
 8001000:	bf00      	nop
 8001002:	3708      	adds	r7, #8
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}

08001008 <gpio_if_clear>:

/*
 * API: gpio_if_clear
 */
void gpio_if_clear(t_gpio_if *gpio_if)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  if (gpio_if->active == ACTIVE_HIGH)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	781b      	ldrb	r3, [r3, #0]
 8001014:	2b01      	cmp	r3, #1
 8001016:	d10a      	bne.n	800102e <gpio_if_clear+0x26>
  {
    HAL_GPIO_WritePin(gpio_if->pin->port, gpio_if->pin->pin, GPIO_PIN_RESET);
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	685b      	ldr	r3, [r3, #4]
 800101c:	6818      	ldr	r0, [r3, #0]
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	685b      	ldr	r3, [r3, #4]
 8001022:	889b      	ldrh	r3, [r3, #4]
 8001024:	2200      	movs	r2, #0
 8001026:	4619      	mov	r1, r3
 8001028:	f002 f9c0 	bl	80033ac <HAL_GPIO_WritePin>
  }
  else
  {
    HAL_GPIO_WritePin(gpio_if->pin->port, gpio_if->pin->pin, GPIO_PIN_SET);
  }
}
 800102c:	e009      	b.n	8001042 <gpio_if_clear+0x3a>
    HAL_GPIO_WritePin(gpio_if->pin->port, gpio_if->pin->pin, GPIO_PIN_SET);
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	685b      	ldr	r3, [r3, #4]
 8001032:	6818      	ldr	r0, [r3, #0]
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	685b      	ldr	r3, [r3, #4]
 8001038:	889b      	ldrh	r3, [r3, #4]
 800103a:	2201      	movs	r2, #1
 800103c:	4619      	mov	r1, r3
 800103e:	f002 f9b5 	bl	80033ac <HAL_GPIO_WritePin>
}
 8001042:	bf00      	nop
 8001044:	3708      	adds	r7, #8
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}

0800104a <gpio_if_get>:

/*
 * API: gpio_if_get
 */
t_gpio_state gpio_if_get(t_gpio_if *gpio_if)
{
 800104a:	b580      	push	{r7, lr}
 800104c:	b082      	sub	sp, #8
 800104e:	af00      	add	r7, sp, #0
 8001050:	6078      	str	r0, [r7, #4]
  if (gpio_if->active == ACTIVE_HIGH)
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	781b      	ldrb	r3, [r3, #0]
 8001056:	2b01      	cmp	r3, #1
 8001058:	d110      	bne.n	800107c <gpio_if_get+0x32>
  {
    if (HAL_GPIO_ReadPin(gpio_if->pin->port, gpio_if->pin->pin) == GPIO_PIN_SET)
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	685b      	ldr	r3, [r3, #4]
 800105e:	681a      	ldr	r2, [r3, #0]
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	685b      	ldr	r3, [r3, #4]
 8001064:	889b      	ldrh	r3, [r3, #4]
 8001066:	4619      	mov	r1, r3
 8001068:	4610      	mov	r0, r2
 800106a:	f002 f987 	bl	800337c <HAL_GPIO_ReadPin>
 800106e:	4603      	mov	r3, r0
 8001070:	2b01      	cmp	r3, #1
 8001072:	d101      	bne.n	8001078 <gpio_if_get+0x2e>
    {
      return GPIO_IF_SET;
 8001074:	2301      	movs	r3, #1
 8001076:	e011      	b.n	800109c <gpio_if_get+0x52>
    }
    else
    {
      return GPIO_IF_CLEAR;
 8001078:	2300      	movs	r3, #0
 800107a:	e00f      	b.n	800109c <gpio_if_get+0x52>
    }
  }
  else
  {
    if (HAL_GPIO_ReadPin(gpio_if->pin->port, gpio_if->pin->pin) == GPIO_PIN_SET)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	685b      	ldr	r3, [r3, #4]
 8001080:	681a      	ldr	r2, [r3, #0]
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	685b      	ldr	r3, [r3, #4]
 8001086:	889b      	ldrh	r3, [r3, #4]
 8001088:	4619      	mov	r1, r3
 800108a:	4610      	mov	r0, r2
 800108c:	f002 f976 	bl	800337c <HAL_GPIO_ReadPin>
 8001090:	4603      	mov	r3, r0
 8001092:	2b01      	cmp	r3, #1
 8001094:	d101      	bne.n	800109a <gpio_if_get+0x50>
    {
      return GPIO_IF_CLEAR;
 8001096:	2300      	movs	r3, #0
 8001098:	e000      	b.n	800109c <gpio_if_get+0x52>
    }
    else
    {
      return GPIO_IF_SET;
 800109a:	2301      	movs	r3, #1
    }
  }
}
 800109c:	4618      	mov	r0, r3
 800109e:	3708      	adds	r7, #8
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}

080010a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b098      	sub	sp, #96	; 0x60
 80010a8:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */

	/* pines de switches */
	t_gpio_pin user_switch1_pin = {SW1_GPIO_Port, SW1_Pin};
 80010aa:	4a61      	ldr	r2, [pc, #388]	; (8001230 <main+0x18c>)
 80010ac:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80010b0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80010b4:	e883 0003 	stmia.w	r3, {r0, r1}
	t_gpio_if switch_1;
	t_gpio_pin user_switch2_pin = {SW2_GPIO_Port, SW2_Pin};
 80010b8:	4a5e      	ldr	r2, [pc, #376]	; (8001234 <main+0x190>)
 80010ba:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80010be:	e892 0003 	ldmia.w	r2, {r0, r1}
 80010c2:	e883 0003 	stmia.w	r3, {r0, r1}
	t_gpio_if switch_2;
	t_gpio_pin user_switch3_pin = {SW3_GPIO_Port, SW3_Pin};
 80010c6:	4a5c      	ldr	r2, [pc, #368]	; (8001238 <main+0x194>)
 80010c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010cc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80010d0:	e883 0003 	stmia.w	r3, {r0, r1}
	t_gpio_if switch_3;
	t_gpio_pin user_switch4_pin = {SW4_GPIO_Port, SW4_Pin};
 80010d4:	4a59      	ldr	r2, [pc, #356]	; (800123c <main+0x198>)
 80010d6:	f107 0310 	add.w	r3, r7, #16
 80010da:	e892 0003 	ldmia.w	r2, {r0, r1}
 80010de:	e883 0003 	stmia.w	r3, {r0, r1}
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010e2:	f000 fcf9 	bl	8001ad8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010e6:	f000 f8c7 	bl	8001278 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010ea:	f7ff feb1 	bl	8000e50 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80010ee:	f000 fbe7 	bl	80018c0 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80010f2:	f7ff fde1 	bl	8000cb8 <MX_ADC1_Init>
  MX_TIM1_Init();
 80010f6:	f000 fa21 	bl	800153c <MX_TIM1_Init>
  MX_TIM2_Init();
 80010fa:	f000 facd 	bl	8001698 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 80010fe:	f000 fbaf 	bl	8001860 <MX_USART1_UART_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  // Inicialización interrupciones por UART
  HAL_UART_Receive_IT(&huart1, &uart_red, 1);
 8001102:	2201      	movs	r2, #1
 8001104:	494e      	ldr	r1, [pc, #312]	; (8001240 <main+0x19c>)
 8001106:	484f      	ldr	r0, [pc, #316]	; (8001244 <main+0x1a0>)
 8001108:	f004 ff20 	bl	8005f4c <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart2, &uart_pc, 1);
 800110c:	2201      	movs	r2, #1
 800110e:	494e      	ldr	r1, [pc, #312]	; (8001248 <main+0x1a4>)
 8001110:	484e      	ldr	r0, [pc, #312]	; (800124c <main+0x1a8>)
 8001112:	f004 ff1b 	bl	8005f4c <HAL_UART_Receive_IT>

  // Inicialización periféricos GPIO para el DIP switch
  gpio_if_init(&switch_1, ACTIVE_HIGH, &user_switch1_pin, GPIO_IF_INPUT);
 8001116:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 800111a:	f107 0040 	add.w	r0, r7, #64	; 0x40
 800111e:	2302      	movs	r3, #2
 8001120:	2101      	movs	r1, #1
 8001122:	f7ff ff19 	bl	8000f58 <gpio_if_init>
  if (gpio_if_open(&switch_1) != GPIO_IF_SUCCESS)
 8001126:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800112a:	4618      	mov	r0, r3
 800112c:	f7ff ff2d 	bl	8000f8a <gpio_if_open>
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	d001      	beq.n	800113a <main+0x96>
    {
      Error_Handler();
 8001136:	f000 f97d 	bl	8001434 <Error_Handler>
    }
  gpio_if_init(&switch_2, ACTIVE_HIGH, &user_switch2_pin, GPIO_IF_INPUT);
 800113a:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800113e:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8001142:	2302      	movs	r3, #2
 8001144:	2101      	movs	r1, #1
 8001146:	f7ff ff07 	bl	8000f58 <gpio_if_init>
  if (gpio_if_open(&switch_2) != GPIO_IF_SUCCESS)
 800114a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800114e:	4618      	mov	r0, r3
 8001150:	f7ff ff1b 	bl	8000f8a <gpio_if_open>
 8001154:	4603      	mov	r3, r0
 8001156:	2b00      	cmp	r3, #0
 8001158:	d001      	beq.n	800115e <main+0xba>
    {
      Error_Handler();
 800115a:	f000 f96b 	bl	8001434 <Error_Handler>
    }
  gpio_if_init(&switch_3, ACTIVE_HIGH, &user_switch3_pin, GPIO_IF_INPUT);
 800115e:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8001162:	f107 0018 	add.w	r0, r7, #24
 8001166:	2302      	movs	r3, #2
 8001168:	2101      	movs	r1, #1
 800116a:	f7ff fef5 	bl	8000f58 <gpio_if_init>
  if (gpio_if_open(&switch_3) != GPIO_IF_SUCCESS)
 800116e:	f107 0318 	add.w	r3, r7, #24
 8001172:	4618      	mov	r0, r3
 8001174:	f7ff ff09 	bl	8000f8a <gpio_if_open>
 8001178:	4603      	mov	r3, r0
 800117a:	2b00      	cmp	r3, #0
 800117c:	d001      	beq.n	8001182 <main+0xde>
    {
      Error_Handler();
 800117e:	f000 f959 	bl	8001434 <Error_Handler>
    }
  gpio_if_init(&switch_4, ACTIVE_HIGH, &user_switch4_pin, GPIO_IF_INPUT);
 8001182:	f107 0210 	add.w	r2, r7, #16
 8001186:	1d38      	adds	r0, r7, #4
 8001188:	2302      	movs	r3, #2
 800118a:	2101      	movs	r1, #1
 800118c:	f7ff fee4 	bl	8000f58 <gpio_if_init>
  if (gpio_if_open(&switch_4) != GPIO_IF_SUCCESS)
 8001190:	1d3b      	adds	r3, r7, #4
 8001192:	4618      	mov	r0, r3
 8001194:	f7ff fef9 	bl	8000f8a <gpio_if_open>
 8001198:	4603      	mov	r3, r0
 800119a:	2b00      	cmp	r3, #0
 800119c:	d001      	beq.n	80011a2 <main+0xfe>
    {
      Error_Handler();
 800119e:	f000 f949 	bl	8001434 <Error_Handler>
    }

  // Inicialización transceptor
  trans_recep_init(&t_r_red, &huart1);
 80011a2:	4928      	ldr	r1, [pc, #160]	; (8001244 <main+0x1a0>)
 80011a4:	482a      	ldr	r0, [pc, #168]	; (8001250 <main+0x1ac>)
 80011a6:	f006 fabd 	bl	8007724 <trans_recep_init>

  // Inicialización datos de dispositivo según valor del DIP switch
  dip_switch_ports_init(&this_dip, &switch_1, &switch_2, &switch_3, &switch_4);
 80011aa:	f107 0018 	add.w	r0, r7, #24
 80011ae:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80011b2:	f107 0140 	add.w	r1, r7, #64	; 0x40
 80011b6:	1d3b      	adds	r3, r7, #4
 80011b8:	9300      	str	r3, [sp, #0]
 80011ba:	4603      	mov	r3, r0
 80011bc:	4825      	ldr	r0, [pc, #148]	; (8001254 <main+0x1b0>)
 80011be:	f006 f9e9 	bl	8007594 <dip_switch_ports_init>
  int dip_value = get_dip_value(&this_dip);
 80011c2:	4824      	ldr	r0, [pc, #144]	; (8001254 <main+0x1b0>)
 80011c4:	f006 f9ff 	bl	80075c6 <get_dip_value>
 80011c8:	6578      	str	r0, [r7, #84]	; 0x54
  device_if_init(&this_device, dip_value);
 80011ca:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80011cc:	4822      	ldr	r0, [pc, #136]	; (8001258 <main+0x1b4>)
 80011ce:	f006 f9c9 	bl	8007564 <device_if_init>

  // Inicialización de LED (PWM) y potenciómetro (ADC)
  led_init(&this_led, &htim1);
 80011d2:	4922      	ldr	r1, [pc, #136]	; (800125c <main+0x1b8>)
 80011d4:	4822      	ldr	r0, [pc, #136]	; (8001260 <main+0x1bc>)
 80011d6:	f006 fa2d 	bl	8007634 <led_init>
  potenciometro_init(&pot, &hadc1);
 80011da:	4922      	ldr	r1, [pc, #136]	; (8001264 <main+0x1c0>)
 80011dc:	4822      	ldr	r0, [pc, #136]	; (8001268 <main+0x1c4>)
 80011de:	f006 fa56 	bl	800768e <potenciometro_init>

  // Breve animación LED de inicio
  led_set(&this_led, 1960);
 80011e2:	ed9f 0a22 	vldr	s0, [pc, #136]	; 800126c <main+0x1c8>
 80011e6:	481e      	ldr	r0, [pc, #120]	; (8001260 <main+0x1bc>)
 80011e8:	f006 fa3c 	bl	8007664 <led_set>
  HAL_Delay(200);
 80011ec:	20c8      	movs	r0, #200	; 0xc8
 80011ee:	f000 fcef 	bl	8001bd0 <HAL_Delay>
  led_set(&this_led, 0);
 80011f2:	ed9f 0a1f 	vldr	s0, [pc, #124]	; 8001270 <main+0x1cc>
 80011f6:	481a      	ldr	r0, [pc, #104]	; (8001260 <main+0x1bc>)
 80011f8:	f006 fa34 	bl	8007664 <led_set>
  HAL_Delay(200);
 80011fc:	20c8      	movs	r0, #200	; 0xc8
 80011fe:	f000 fce7 	bl	8001bd0 <HAL_Delay>
  led_set(&this_led, 400);
 8001202:	ed9f 0a1c 	vldr	s0, [pc, #112]	; 8001274 <main+0x1d0>
 8001206:	4816      	ldr	r0, [pc, #88]	; (8001260 <main+0x1bc>)
 8001208:	f006 fa2c 	bl	8007664 <led_set>
  HAL_Delay(200);
 800120c:	20c8      	movs	r0, #200	; 0xc8
 800120e:	f000 fcdf 	bl	8001bd0 <HAL_Delay>
  led_set(&this_led, 0);
 8001212:	ed9f 0a17 	vldr	s0, [pc, #92]	; 8001270 <main+0x1cc>
 8001216:	4812      	ldr	r0, [pc, #72]	; (8001260 <main+0x1bc>)
 8001218:	f006 fa24 	bl	8007664 <led_set>
  HAL_Delay(200);
 800121c:	20c8      	movs	r0, #200	; 0xc8
 800121e:	f000 fcd7 	bl	8001bd0 <HAL_Delay>
  led_set(&this_led, 1960);
 8001222:	ed9f 0a12 	vldr	s0, [pc, #72]	; 800126c <main+0x1c8>
 8001226:	480e      	ldr	r0, [pc, #56]	; (8001260 <main+0x1bc>)
 8001228:	f006 fa1c 	bl	8007664 <led_set>

  while (1)
 800122c:	e7fe      	b.n	800122c <main+0x188>
 800122e:	bf00      	nop
 8001230:	0800782c 	.word	0x0800782c
 8001234:	08007834 	.word	0x08007834
 8001238:	0800783c 	.word	0x0800783c
 800123c:	08007844 	.word	0x08007844
 8001240:	200001ed 	.word	0x200001ed
 8001244:	20000288 	.word	0x20000288
 8001248:	200001ec 	.word	0x200001ec
 800124c:	2000030c 	.word	0x2000030c
 8001250:	20000108 	.word	0x20000108
 8001254:	20000190 	.word	0x20000190
 8001258:	20000094 	.word	0x20000094
 800125c:	200001f0 	.word	0x200001f0
 8001260:	200001a0 	.word	0x200001a0
 8001264:	2000002c 	.word	0x2000002c
 8001268:	2000009c 	.word	0x2000009c
 800126c:	44f50000 	.word	0x44f50000
 8001270:	00000000 	.word	0x00000000
 8001274:	43c80000 	.word	0x43c80000

08001278 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b096      	sub	sp, #88	; 0x58
 800127c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800127e:	f107 0314 	add.w	r3, r7, #20
 8001282:	2244      	movs	r2, #68	; 0x44
 8001284:	2100      	movs	r1, #0
 8001286:	4618      	mov	r0, r3
 8001288:	f006 fabc 	bl	8007804 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800128c:	463b      	mov	r3, r7
 800128e:	2200      	movs	r2, #0
 8001290:	601a      	str	r2, [r3, #0]
 8001292:	605a      	str	r2, [r3, #4]
 8001294:	609a      	str	r2, [r3, #8]
 8001296:	60da      	str	r2, [r3, #12]
 8001298:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800129a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800129e:	f002 f8ab 	bl	80033f8 <HAL_PWREx_ControlVoltageScaling>
 80012a2:	4603      	mov	r3, r0
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d001      	beq.n	80012ac <SystemClock_Config+0x34>
  {
    Error_Handler();
 80012a8:	f000 f8c4 	bl	8001434 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80012ac:	2302      	movs	r3, #2
 80012ae:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012b0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80012b4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80012b6:	2340      	movs	r3, #64	; 0x40
 80012b8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012ba:	2302      	movs	r3, #2
 80012bc:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80012be:	2302      	movs	r3, #2
 80012c0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80012c2:	2301      	movs	r3, #1
 80012c4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80012c6:	230a      	movs	r3, #10
 80012c8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80012ca:	2307      	movs	r3, #7
 80012cc:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80012ce:	2302      	movs	r3, #2
 80012d0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80012d2:	2302      	movs	r3, #2
 80012d4:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012d6:	f107 0314 	add.w	r3, r7, #20
 80012da:	4618      	mov	r0, r3
 80012dc:	f002 f8e2 	bl	80034a4 <HAL_RCC_OscConfig>
 80012e0:	4603      	mov	r3, r0
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d001      	beq.n	80012ea <SystemClock_Config+0x72>
  {
    Error_Handler();
 80012e6:	f000 f8a5 	bl	8001434 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012ea:	230f      	movs	r3, #15
 80012ec:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012ee:	2303      	movs	r3, #3
 80012f0:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012f2:	2300      	movs	r3, #0
 80012f4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80012f6:	2300      	movs	r3, #0
 80012f8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012fa:	2300      	movs	r3, #0
 80012fc:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80012fe:	463b      	mov	r3, r7
 8001300:	2104      	movs	r1, #4
 8001302:	4618      	mov	r0, r3
 8001304:	f002 fce2 	bl	8003ccc <HAL_RCC_ClockConfig>
 8001308:	4603      	mov	r3, r0
 800130a:	2b00      	cmp	r3, #0
 800130c:	d001      	beq.n	8001312 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800130e:	f000 f891 	bl	8001434 <Error_Handler>
  }
}
 8001312:	bf00      	nop
 8001314:	3758      	adds	r7, #88	; 0x58
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}
	...

0800131c <HAL_UART_RxCpltCallback>:
// Rutina de interrupción por UART
uint8_t dato_1;
uint8_t dato_2;

void HAL_UART_RxCpltCallback (UART_HandleTypeDef *huart)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b082      	sub	sp, #8
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
	static uint8_t cont = 1;
	device_mode = this_device.modo;
 8001324:	4b37      	ldr	r3, [pc, #220]	; (8001404 <HAL_UART_RxCpltCallback+0xe8>)
 8001326:	781a      	ldrb	r2, [r3, #0]
 8001328:	4b37      	ldr	r3, [pc, #220]	; (8001408 <HAL_UART_RxCpltCallback+0xec>)
 800132a:	701a      	strb	r2, [r3, #0]

	// UART del computador
	if(huart->Instance == USART2)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	4a36      	ldr	r2, [pc, #216]	; (800140c <HAL_UART_RxCpltCallback+0xf0>)
 8001332:	4293      	cmp	r3, r2
 8001334:	d122      	bne.n	800137c <HAL_UART_RxCpltCallback+0x60>
	{
		if (cont == 1)
 8001336:	4b36      	ldr	r3, [pc, #216]	; (8001410 <HAL_UART_RxCpltCallback+0xf4>)
 8001338:	781b      	ldrb	r3, [r3, #0]
 800133a:	2b01      	cmp	r3, #1
 800133c:	d107      	bne.n	800134e <HAL_UART_RxCpltCallback+0x32>
		{
			dato_1 = uart_pc;
 800133e:	4b35      	ldr	r3, [pc, #212]	; (8001414 <HAL_UART_RxCpltCallback+0xf8>)
 8001340:	781a      	ldrb	r2, [r3, #0]
 8001342:	4b35      	ldr	r3, [pc, #212]	; (8001418 <HAL_UART_RxCpltCallback+0xfc>)
 8001344:	701a      	strb	r2, [r3, #0]
			cont = 2;
 8001346:	4b32      	ldr	r3, [pc, #200]	; (8001410 <HAL_UART_RxCpltCallback+0xf4>)
 8001348:	2202      	movs	r2, #2
 800134a:	701a      	strb	r2, [r3, #0]
 800134c:	e016      	b.n	800137c <HAL_UART_RxCpltCallback+0x60>
		}
		else if (cont == 2)
 800134e:	4b30      	ldr	r3, [pc, #192]	; (8001410 <HAL_UART_RxCpltCallback+0xf4>)
 8001350:	781b      	ldrb	r3, [r3, #0]
 8001352:	2b02      	cmp	r3, #2
 8001354:	d112      	bne.n	800137c <HAL_UART_RxCpltCallback+0x60>
		{
			dato_2 = uart_pc;
 8001356:	4b2f      	ldr	r3, [pc, #188]	; (8001414 <HAL_UART_RxCpltCallback+0xf8>)
 8001358:	781a      	ldrb	r2, [r3, #0]
 800135a:	4b30      	ldr	r3, [pc, #192]	; (800141c <HAL_UART_RxCpltCallback+0x100>)
 800135c:	701a      	strb	r2, [r3, #0]
			cont = 1;
 800135e:	4b2c      	ldr	r3, [pc, #176]	; (8001410 <HAL_UART_RxCpltCallback+0xf4>)
 8001360:	2201      	movs	r2, #1
 8001362:	701a      	strb	r2, [r3, #0]
			if (device_mode == MASTER)
 8001364:	4b28      	ldr	r3, [pc, #160]	; (8001408 <HAL_UART_RxCpltCallback+0xec>)
 8001366:	781b      	ldrb	r3, [r3, #0]
 8001368:	2b00      	cmp	r3, #0
 800136a:	d107      	bne.n	800137c <HAL_UART_RxCpltCallback+0x60>
			{
				decode_pc_command(&this_device, dato_1, dato_2);
 800136c:	4b2a      	ldr	r3, [pc, #168]	; (8001418 <HAL_UART_RxCpltCallback+0xfc>)
 800136e:	781b      	ldrb	r3, [r3, #0]
 8001370:	4a2a      	ldr	r2, [pc, #168]	; (800141c <HAL_UART_RxCpltCallback+0x100>)
 8001372:	7812      	ldrb	r2, [r2, #0]
 8001374:	4619      	mov	r1, r3
 8001376:	4823      	ldr	r0, [pc, #140]	; (8001404 <HAL_UART_RxCpltCallback+0xe8>)
 8001378:	f006 f84e 	bl	8007418 <decode_pc_command>
			}
		}
	}

	// UART de la red
	if(huart->Instance == USART1)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	4a27      	ldr	r2, [pc, #156]	; (8001420 <HAL_UART_RxCpltCallback+0x104>)
 8001382:	4293      	cmp	r3, r2
 8001384:	d130      	bne.n	80013e8 <HAL_UART_RxCpltCallback+0xcc>
	{
		if (device_mode == MASTER)
 8001386:	4b20      	ldr	r3, [pc, #128]	; (8001408 <HAL_UART_RxCpltCallback+0xec>)
 8001388:	781b      	ldrb	r3, [r3, #0]
 800138a:	2b00      	cmp	r3, #0
 800138c:	d109      	bne.n	80013a2 <HAL_UART_RxCpltCallback+0x86>
		{
			HAL_UART_Transmit(&huart2, &uart_red, 1, 100);
 800138e:	2364      	movs	r3, #100	; 0x64
 8001390:	2201      	movs	r2, #1
 8001392:	4924      	ldr	r1, [pc, #144]	; (8001424 <HAL_UART_RxCpltCallback+0x108>)
 8001394:	4824      	ldr	r0, [pc, #144]	; (8001428 <HAL_UART_RxCpltCallback+0x10c>)
 8001396:	f004 fd45 	bl	8005e24 <HAL_UART_Transmit>
			HAL_TIM_Base_Stop_IT(&htim2);
 800139a:	4824      	ldr	r0, [pc, #144]	; (800142c <HAL_UART_RxCpltCallback+0x110>)
 800139c:	f003 facc 	bl	8004938 <HAL_TIM_Base_Stop_IT>
 80013a0:	e022      	b.n	80013e8 <HAL_UART_RxCpltCallback+0xcc>
		}
		else
		{
			if (cont == 1)
 80013a2:	4b1b      	ldr	r3, [pc, #108]	; (8001410 <HAL_UART_RxCpltCallback+0xf4>)
 80013a4:	781b      	ldrb	r3, [r3, #0]
 80013a6:	2b01      	cmp	r3, #1
 80013a8:	d107      	bne.n	80013ba <HAL_UART_RxCpltCallback+0x9e>
			{
				dato_1 = uart_red;
 80013aa:	4b1e      	ldr	r3, [pc, #120]	; (8001424 <HAL_UART_RxCpltCallback+0x108>)
 80013ac:	781a      	ldrb	r2, [r3, #0]
 80013ae:	4b1a      	ldr	r3, [pc, #104]	; (8001418 <HAL_UART_RxCpltCallback+0xfc>)
 80013b0:	701a      	strb	r2, [r3, #0]
				cont = 2;
 80013b2:	4b17      	ldr	r3, [pc, #92]	; (8001410 <HAL_UART_RxCpltCallback+0xf4>)
 80013b4:	2202      	movs	r2, #2
 80013b6:	701a      	strb	r2, [r3, #0]
 80013b8:	e016      	b.n	80013e8 <HAL_UART_RxCpltCallback+0xcc>
			}
			else if (cont == 2)
 80013ba:	4b15      	ldr	r3, [pc, #84]	; (8001410 <HAL_UART_RxCpltCallback+0xf4>)
 80013bc:	781b      	ldrb	r3, [r3, #0]
 80013be:	2b02      	cmp	r3, #2
 80013c0:	d112      	bne.n	80013e8 <HAL_UART_RxCpltCallback+0xcc>
			{
				dato_2 = uart_red;
 80013c2:	4b18      	ldr	r3, [pc, #96]	; (8001424 <HAL_UART_RxCpltCallback+0x108>)
 80013c4:	781a      	ldrb	r2, [r3, #0]
 80013c6:	4b15      	ldr	r3, [pc, #84]	; (800141c <HAL_UART_RxCpltCallback+0x100>)
 80013c8:	701a      	strb	r2, [r3, #0]
				cont = 1;
 80013ca:	4b11      	ldr	r3, [pc, #68]	; (8001410 <HAL_UART_RxCpltCallback+0xf4>)
 80013cc:	2201      	movs	r2, #1
 80013ce:	701a      	strb	r2, [r3, #0]
				if (device_mode == SLAVE)
 80013d0:	4b0d      	ldr	r3, [pc, #52]	; (8001408 <HAL_UART_RxCpltCallback+0xec>)
 80013d2:	781b      	ldrb	r3, [r3, #0]
 80013d4:	2b01      	cmp	r3, #1
 80013d6:	d107      	bne.n	80013e8 <HAL_UART_RxCpltCallback+0xcc>
				{
					decode_red_command(&this_device, dato_1, dato_2);
 80013d8:	4b0f      	ldr	r3, [pc, #60]	; (8001418 <HAL_UART_RxCpltCallback+0xfc>)
 80013da:	781b      	ldrb	r3, [r3, #0]
 80013dc:	4a0f      	ldr	r2, [pc, #60]	; (800141c <HAL_UART_RxCpltCallback+0x100>)
 80013de:	7812      	ldrb	r2, [r2, #0]
 80013e0:	4619      	mov	r1, r3
 80013e2:	4808      	ldr	r0, [pc, #32]	; (8001404 <HAL_UART_RxCpltCallback+0xe8>)
 80013e4:	f006 f836 	bl	8007454 <decode_red_command>
			}
		}
	}

	// Reactivar interrupciones UART
	HAL_UART_Receive_IT(&huart2, &uart_pc, 1);
 80013e8:	2201      	movs	r2, #1
 80013ea:	490a      	ldr	r1, [pc, #40]	; (8001414 <HAL_UART_RxCpltCallback+0xf8>)
 80013ec:	480e      	ldr	r0, [pc, #56]	; (8001428 <HAL_UART_RxCpltCallback+0x10c>)
 80013ee:	f004 fdad 	bl	8005f4c <HAL_UART_Receive_IT>
	HAL_UART_Receive_IT(&huart1, &uart_red, 1);
 80013f2:	2201      	movs	r2, #1
 80013f4:	490b      	ldr	r1, [pc, #44]	; (8001424 <HAL_UART_RxCpltCallback+0x108>)
 80013f6:	480e      	ldr	r0, [pc, #56]	; (8001430 <HAL_UART_RxCpltCallback+0x114>)
 80013f8:	f004 fda8 	bl	8005f4c <HAL_UART_Receive_IT>
}
 80013fc:	bf00      	nop
 80013fe:	3708      	adds	r7, #8
 8001400:	46bd      	mov	sp, r7
 8001402:	bd80      	pop	{r7, pc}
 8001404:	20000094 	.word	0x20000094
 8001408:	2000018c 	.word	0x2000018c
 800140c:	40004400 	.word	0x40004400
 8001410:	20000000 	.word	0x20000000
 8001414:	200001ec 	.word	0x200001ec
 8001418:	200001ee 	.word	0x200001ee
 800141c:	200001ef 	.word	0x200001ef
 8001420:	40013800 	.word	0x40013800
 8001424:	200001ed 	.word	0x200001ed
 8001428:	2000030c 	.word	0x2000030c
 800142c:	2000023c 	.word	0x2000023c
 8001430:	20000288 	.word	0x20000288

08001434 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001434:	b480      	push	{r7}
 8001436:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001438:	b672      	cpsid	i
}
 800143a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800143c:	e7fe      	b.n	800143c <Error_Handler+0x8>
	...

08001440 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001440:	b480      	push	{r7}
 8001442:	b083      	sub	sp, #12
 8001444:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001446:	4b0f      	ldr	r3, [pc, #60]	; (8001484 <HAL_MspInit+0x44>)
 8001448:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800144a:	4a0e      	ldr	r2, [pc, #56]	; (8001484 <HAL_MspInit+0x44>)
 800144c:	f043 0301 	orr.w	r3, r3, #1
 8001450:	6613      	str	r3, [r2, #96]	; 0x60
 8001452:	4b0c      	ldr	r3, [pc, #48]	; (8001484 <HAL_MspInit+0x44>)
 8001454:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001456:	f003 0301 	and.w	r3, r3, #1
 800145a:	607b      	str	r3, [r7, #4]
 800145c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800145e:	4b09      	ldr	r3, [pc, #36]	; (8001484 <HAL_MspInit+0x44>)
 8001460:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001462:	4a08      	ldr	r2, [pc, #32]	; (8001484 <HAL_MspInit+0x44>)
 8001464:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001468:	6593      	str	r3, [r2, #88]	; 0x58
 800146a:	4b06      	ldr	r3, [pc, #24]	; (8001484 <HAL_MspInit+0x44>)
 800146c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800146e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001472:	603b      	str	r3, [r7, #0]
 8001474:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001476:	bf00      	nop
 8001478:	370c      	adds	r7, #12
 800147a:	46bd      	mov	sp, r7
 800147c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001480:	4770      	bx	lr
 8001482:	bf00      	nop
 8001484:	40021000 	.word	0x40021000

08001488 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001488:	b480      	push	{r7}
 800148a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800148c:	e7fe      	b.n	800148c <NMI_Handler+0x4>

0800148e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800148e:	b480      	push	{r7}
 8001490:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001492:	e7fe      	b.n	8001492 <HardFault_Handler+0x4>

08001494 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001494:	b480      	push	{r7}
 8001496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001498:	e7fe      	b.n	8001498 <MemManage_Handler+0x4>

0800149a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800149a:	b480      	push	{r7}
 800149c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800149e:	e7fe      	b.n	800149e <BusFault_Handler+0x4>

080014a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014a0:	b480      	push	{r7}
 80014a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014a4:	e7fe      	b.n	80014a4 <UsageFault_Handler+0x4>

080014a6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014a6:	b480      	push	{r7}
 80014a8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014aa:	bf00      	nop
 80014ac:	46bd      	mov	sp, r7
 80014ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b2:	4770      	bx	lr

080014b4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014b4:	b480      	push	{r7}
 80014b6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014b8:	bf00      	nop
 80014ba:	46bd      	mov	sp, r7
 80014bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c0:	4770      	bx	lr

080014c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014c2:	b480      	push	{r7}
 80014c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014c6:	bf00      	nop
 80014c8:	46bd      	mov	sp, r7
 80014ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ce:	4770      	bx	lr

080014d0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014d4:	f000 fb5c 	bl	8001b90 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014d8:	bf00      	nop
 80014da:	bd80      	pop	{r7, pc}

080014dc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80014e0:	4802      	ldr	r0, [pc, #8]	; (80014ec <TIM2_IRQHandler+0x10>)
 80014e2:	f003 fc01 	bl	8004ce8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80014e6:	bf00      	nop
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	bf00      	nop
 80014ec:	2000023c 	.word	0x2000023c

080014f0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80014f4:	4802      	ldr	r0, [pc, #8]	; (8001500 <USART1_IRQHandler+0x10>)
 80014f6:	f004 fd7f 	bl	8005ff8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80014fa:	bf00      	nop
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	20000288 	.word	0x20000288

08001504 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001508:	4802      	ldr	r0, [pc, #8]	; (8001514 <USART2_IRQHandler+0x10>)
 800150a:	f004 fd75 	bl	8005ff8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800150e:	bf00      	nop
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	2000030c 	.word	0x2000030c

08001518 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001518:	b480      	push	{r7}
 800151a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800151c:	4b06      	ldr	r3, [pc, #24]	; (8001538 <SystemInit+0x20>)
 800151e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001522:	4a05      	ldr	r2, [pc, #20]	; (8001538 <SystemInit+0x20>)
 8001524:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001528:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800152c:	bf00      	nop
 800152e:	46bd      	mov	sp, r7
 8001530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001534:	4770      	bx	lr
 8001536:	bf00      	nop
 8001538:	e000ed00 	.word	0xe000ed00

0800153c <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b09a      	sub	sp, #104	; 0x68
 8001540:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001542:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001546:	2200      	movs	r2, #0
 8001548:	601a      	str	r2, [r3, #0]
 800154a:	605a      	str	r2, [r3, #4]
 800154c:	609a      	str	r2, [r3, #8]
 800154e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001550:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001554:	2200      	movs	r2, #0
 8001556:	601a      	str	r2, [r3, #0]
 8001558:	605a      	str	r2, [r3, #4]
 800155a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800155c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001560:	2200      	movs	r2, #0
 8001562:	601a      	str	r2, [r3, #0]
 8001564:	605a      	str	r2, [r3, #4]
 8001566:	609a      	str	r2, [r3, #8]
 8001568:	60da      	str	r2, [r3, #12]
 800156a:	611a      	str	r2, [r3, #16]
 800156c:	615a      	str	r2, [r3, #20]
 800156e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001570:	1d3b      	adds	r3, r7, #4
 8001572:	222c      	movs	r2, #44	; 0x2c
 8001574:	2100      	movs	r1, #0
 8001576:	4618      	mov	r0, r3
 8001578:	f006 f944 	bl	8007804 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800157c:	4b44      	ldr	r3, [pc, #272]	; (8001690 <MX_TIM1_Init+0x154>)
 800157e:	4a45      	ldr	r2, [pc, #276]	; (8001694 <MX_TIM1_Init+0x158>)
 8001580:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 655;
 8001582:	4b43      	ldr	r3, [pc, #268]	; (8001690 <MX_TIM1_Init+0x154>)
 8001584:	f240 228f 	movw	r2, #655	; 0x28f
 8001588:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800158a:	4b41      	ldr	r3, [pc, #260]	; (8001690 <MX_TIM1_Init+0x154>)
 800158c:	2200      	movs	r2, #0
 800158e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1960;
 8001590:	4b3f      	ldr	r3, [pc, #252]	; (8001690 <MX_TIM1_Init+0x154>)
 8001592:	f44f 62f5 	mov.w	r2, #1960	; 0x7a8
 8001596:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001598:	4b3d      	ldr	r3, [pc, #244]	; (8001690 <MX_TIM1_Init+0x154>)
 800159a:	2200      	movs	r2, #0
 800159c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800159e:	4b3c      	ldr	r3, [pc, #240]	; (8001690 <MX_TIM1_Init+0x154>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015a4:	4b3a      	ldr	r3, [pc, #232]	; (8001690 <MX_TIM1_Init+0x154>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80015aa:	4839      	ldr	r0, [pc, #228]	; (8001690 <MX_TIM1_Init+0x154>)
 80015ac:	f003 f910 	bl	80047d0 <HAL_TIM_Base_Init>
 80015b0:	4603      	mov	r3, r0
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d001      	beq.n	80015ba <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 80015b6:	f7ff ff3d 	bl	8001434 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015be:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80015c0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80015c4:	4619      	mov	r1, r3
 80015c6:	4832      	ldr	r0, [pc, #200]	; (8001690 <MX_TIM1_Init+0x154>)
 80015c8:	f003 fe3c 	bl	8005244 <HAL_TIM_ConfigClockSource>
 80015cc:	4603      	mov	r3, r0
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d001      	beq.n	80015d6 <MX_TIM1_Init+0x9a>
  {
    Error_Handler();
 80015d2:	f7ff ff2f 	bl	8001434 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80015d6:	482e      	ldr	r0, [pc, #184]	; (8001690 <MX_TIM1_Init+0x154>)
 80015d8:	f003 fa3e 	bl	8004a58 <HAL_TIM_PWM_Init>
 80015dc:	4603      	mov	r3, r0
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d001      	beq.n	80015e6 <MX_TIM1_Init+0xaa>
  {
    Error_Handler();
 80015e2:	f7ff ff27 	bl	8001434 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015e6:	2300      	movs	r3, #0
 80015e8:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80015ea:	2300      	movs	r3, #0
 80015ec:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015ee:	2300      	movs	r3, #0
 80015f0:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80015f2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80015f6:	4619      	mov	r1, r3
 80015f8:	4825      	ldr	r0, [pc, #148]	; (8001690 <MX_TIM1_Init+0x154>)
 80015fa:	f004 fac1 	bl	8005b80 <HAL_TIMEx_MasterConfigSynchronization>
 80015fe:	4603      	mov	r3, r0
 8001600:	2b00      	cmp	r3, #0
 8001602:	d001      	beq.n	8001608 <MX_TIM1_Init+0xcc>
  {
    Error_Handler();
 8001604:	f7ff ff16 	bl	8001434 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001608:	2360      	movs	r3, #96	; 0x60
 800160a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 800160c:	2300      	movs	r3, #0
 800160e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001610:	2300      	movs	r3, #0
 8001612:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001614:	2300      	movs	r3, #0
 8001616:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001618:	2300      	movs	r3, #0
 800161a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800161c:	2300      	movs	r3, #0
 800161e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001620:	2300      	movs	r3, #0
 8001622:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001624:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001628:	2200      	movs	r2, #0
 800162a:	4619      	mov	r1, r3
 800162c:	4818      	ldr	r0, [pc, #96]	; (8001690 <MX_TIM1_Init+0x154>)
 800162e:	f003 fcf5 	bl	800501c <HAL_TIM_PWM_ConfigChannel>
 8001632:	4603      	mov	r3, r0
 8001634:	2b00      	cmp	r3, #0
 8001636:	d001      	beq.n	800163c <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8001638:	f7ff fefc 	bl	8001434 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800163c:	2300      	movs	r3, #0
 800163e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001640:	2300      	movs	r3, #0
 8001642:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001644:	2300      	movs	r3, #0
 8001646:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001648:	2300      	movs	r3, #0
 800164a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800164c:	2300      	movs	r3, #0
 800164e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001650:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001654:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001656:	2300      	movs	r3, #0
 8001658:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800165a:	2300      	movs	r3, #0
 800165c:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800165e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001662:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001664:	2300      	movs	r3, #0
 8001666:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001668:	2300      	movs	r3, #0
 800166a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800166c:	1d3b      	adds	r3, r7, #4
 800166e:	4619      	mov	r1, r3
 8001670:	4807      	ldr	r0, [pc, #28]	; (8001690 <MX_TIM1_Init+0x154>)
 8001672:	f004 faf3 	bl	8005c5c <HAL_TIMEx_ConfigBreakDeadTime>
 8001676:	4603      	mov	r3, r0
 8001678:	2b00      	cmp	r3, #0
 800167a:	d001      	beq.n	8001680 <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 800167c:	f7ff feda 	bl	8001434 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001680:	4803      	ldr	r0, [pc, #12]	; (8001690 <MX_TIM1_Init+0x154>)
 8001682:	f000 f8b5 	bl	80017f0 <HAL_TIM_MspPostInit>

}
 8001686:	bf00      	nop
 8001688:	3768      	adds	r7, #104	; 0x68
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	200001f0 	.word	0x200001f0
 8001694:	40012c00 	.word	0x40012c00

08001698 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b08e      	sub	sp, #56	; 0x38
 800169c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800169e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80016a2:	2200      	movs	r2, #0
 80016a4:	601a      	str	r2, [r3, #0]
 80016a6:	605a      	str	r2, [r3, #4]
 80016a8:	609a      	str	r2, [r3, #8]
 80016aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016ac:	f107 031c 	add.w	r3, r7, #28
 80016b0:	2200      	movs	r2, #0
 80016b2:	601a      	str	r2, [r3, #0]
 80016b4:	605a      	str	r2, [r3, #4]
 80016b6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80016b8:	463b      	mov	r3, r7
 80016ba:	2200      	movs	r2, #0
 80016bc:	601a      	str	r2, [r3, #0]
 80016be:	605a      	str	r2, [r3, #4]
 80016c0:	609a      	str	r2, [r3, #8]
 80016c2:	60da      	str	r2, [r3, #12]
 80016c4:	611a      	str	r2, [r3, #16]
 80016c6:	615a      	str	r2, [r3, #20]
 80016c8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80016ca:	4b2c      	ldr	r3, [pc, #176]	; (800177c <MX_TIM2_Init+0xe4>)
 80016cc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80016d0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 39999;
 80016d2:	4b2a      	ldr	r3, [pc, #168]	; (800177c <MX_TIM2_Init+0xe4>)
 80016d4:	f649 423f 	movw	r2, #39999	; 0x9c3f
 80016d8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016da:	4b28      	ldr	r3, [pc, #160]	; (800177c <MX_TIM2_Init+0xe4>)
 80016dc:	2200      	movs	r2, #0
 80016de:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 20000-1;
 80016e0:	4b26      	ldr	r3, [pc, #152]	; (800177c <MX_TIM2_Init+0xe4>)
 80016e2:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80016e6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016e8:	4b24      	ldr	r3, [pc, #144]	; (800177c <MX_TIM2_Init+0xe4>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016ee:	4b23      	ldr	r3, [pc, #140]	; (800177c <MX_TIM2_Init+0xe4>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80016f4:	4821      	ldr	r0, [pc, #132]	; (800177c <MX_TIM2_Init+0xe4>)
 80016f6:	f003 f86b 	bl	80047d0 <HAL_TIM_Base_Init>
 80016fa:	4603      	mov	r3, r0
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d001      	beq.n	8001704 <MX_TIM2_Init+0x6c>
  {
    Error_Handler();
 8001700:	f7ff fe98 	bl	8001434 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001704:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001708:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800170a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800170e:	4619      	mov	r1, r3
 8001710:	481a      	ldr	r0, [pc, #104]	; (800177c <MX_TIM2_Init+0xe4>)
 8001712:	f003 fd97 	bl	8005244 <HAL_TIM_ConfigClockSource>
 8001716:	4603      	mov	r3, r0
 8001718:	2b00      	cmp	r3, #0
 800171a:	d001      	beq.n	8001720 <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 800171c:	f7ff fe8a 	bl	8001434 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 8001720:	4816      	ldr	r0, [pc, #88]	; (800177c <MX_TIM2_Init+0xe4>)
 8001722:	f003 f938 	bl	8004996 <HAL_TIM_OC_Init>
 8001726:	4603      	mov	r3, r0
 8001728:	2b00      	cmp	r3, #0
 800172a:	d001      	beq.n	8001730 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 800172c:	f7ff fe82 	bl	8001434 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001730:	2300      	movs	r3, #0
 8001732:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001734:	2300      	movs	r3, #0
 8001736:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001738:	f107 031c 	add.w	r3, r7, #28
 800173c:	4619      	mov	r1, r3
 800173e:	480f      	ldr	r0, [pc, #60]	; (800177c <MX_TIM2_Init+0xe4>)
 8001740:	f004 fa1e 	bl	8005b80 <HAL_TIMEx_MasterConfigSynchronization>
 8001744:	4603      	mov	r3, r0
 8001746:	2b00      	cmp	r3, #0
 8001748:	d001      	beq.n	800174e <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 800174a:	f7ff fe73 	bl	8001434 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800174e:	2300      	movs	r3, #0
 8001750:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001752:	2300      	movs	r3, #0
 8001754:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001756:	2300      	movs	r3, #0
 8001758:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800175a:	2300      	movs	r3, #0
 800175c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800175e:	463b      	mov	r3, r7
 8001760:	2200      	movs	r2, #0
 8001762:	4619      	mov	r1, r3
 8001764:	4805      	ldr	r0, [pc, #20]	; (800177c <MX_TIM2_Init+0xe4>)
 8001766:	f003 fbdf 	bl	8004f28 <HAL_TIM_OC_ConfigChannel>
 800176a:	4603      	mov	r3, r0
 800176c:	2b00      	cmp	r3, #0
 800176e:	d001      	beq.n	8001774 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 8001770:	f7ff fe60 	bl	8001434 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001774:	bf00      	nop
 8001776:	3738      	adds	r7, #56	; 0x38
 8001778:	46bd      	mov	sp, r7
 800177a:	bd80      	pop	{r7, pc}
 800177c:	2000023c 	.word	0x2000023c

08001780 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b084      	sub	sp, #16
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	4a16      	ldr	r2, [pc, #88]	; (80017e8 <HAL_TIM_Base_MspInit+0x68>)
 800178e:	4293      	cmp	r3, r2
 8001790:	d10c      	bne.n	80017ac <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001792:	4b16      	ldr	r3, [pc, #88]	; (80017ec <HAL_TIM_Base_MspInit+0x6c>)
 8001794:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001796:	4a15      	ldr	r2, [pc, #84]	; (80017ec <HAL_TIM_Base_MspInit+0x6c>)
 8001798:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800179c:	6613      	str	r3, [r2, #96]	; 0x60
 800179e:	4b13      	ldr	r3, [pc, #76]	; (80017ec <HAL_TIM_Base_MspInit+0x6c>)
 80017a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80017a6:	60fb      	str	r3, [r7, #12]
 80017a8:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80017aa:	e018      	b.n	80017de <HAL_TIM_Base_MspInit+0x5e>
  else if(tim_baseHandle->Instance==TIM2)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80017b4:	d113      	bne.n	80017de <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80017b6:	4b0d      	ldr	r3, [pc, #52]	; (80017ec <HAL_TIM_Base_MspInit+0x6c>)
 80017b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017ba:	4a0c      	ldr	r2, [pc, #48]	; (80017ec <HAL_TIM_Base_MspInit+0x6c>)
 80017bc:	f043 0301 	orr.w	r3, r3, #1
 80017c0:	6593      	str	r3, [r2, #88]	; 0x58
 80017c2:	4b0a      	ldr	r3, [pc, #40]	; (80017ec <HAL_TIM_Base_MspInit+0x6c>)
 80017c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017c6:	f003 0301 	and.w	r3, r3, #1
 80017ca:	60bb      	str	r3, [r7, #8]
 80017cc:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80017ce:	2200      	movs	r2, #0
 80017d0:	2100      	movs	r1, #0
 80017d2:	201c      	movs	r0, #28
 80017d4:	f001 fba3 	bl	8002f1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80017d8:	201c      	movs	r0, #28
 80017da:	f001 fbbc 	bl	8002f56 <HAL_NVIC_EnableIRQ>
}
 80017de:	bf00      	nop
 80017e0:	3710      	adds	r7, #16
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}
 80017e6:	bf00      	nop
 80017e8:	40012c00 	.word	0x40012c00
 80017ec:	40021000 	.word	0x40021000

080017f0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b088      	sub	sp, #32
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017f8:	f107 030c 	add.w	r3, r7, #12
 80017fc:	2200      	movs	r2, #0
 80017fe:	601a      	str	r2, [r3, #0]
 8001800:	605a      	str	r2, [r3, #4]
 8001802:	609a      	str	r2, [r3, #8]
 8001804:	60da      	str	r2, [r3, #12]
 8001806:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4a12      	ldr	r2, [pc, #72]	; (8001858 <HAL_TIM_MspPostInit+0x68>)
 800180e:	4293      	cmp	r3, r2
 8001810:	d11d      	bne.n	800184e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001812:	4b12      	ldr	r3, [pc, #72]	; (800185c <HAL_TIM_MspPostInit+0x6c>)
 8001814:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001816:	4a11      	ldr	r2, [pc, #68]	; (800185c <HAL_TIM_MspPostInit+0x6c>)
 8001818:	f043 0301 	orr.w	r3, r3, #1
 800181c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800181e:	4b0f      	ldr	r3, [pc, #60]	; (800185c <HAL_TIM_MspPostInit+0x6c>)
 8001820:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001822:	f003 0301 	and.w	r3, r3, #1
 8001826:	60bb      	str	r3, [r7, #8]
 8001828:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800182a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800182e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001830:	2302      	movs	r3, #2
 8001832:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001834:	2300      	movs	r3, #0
 8001836:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001838:	2300      	movs	r3, #0
 800183a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800183c:	2301      	movs	r3, #1
 800183e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001840:	f107 030c 	add.w	r3, r7, #12
 8001844:	4619      	mov	r1, r3
 8001846:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800184a:	f001 fc1d 	bl	8003088 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800184e:	bf00      	nop
 8001850:	3720      	adds	r7, #32
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}
 8001856:	bf00      	nop
 8001858:	40012c00 	.word	0x40012c00
 800185c:	40021000 	.word	0x40021000

08001860 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001864:	4b14      	ldr	r3, [pc, #80]	; (80018b8 <MX_USART1_UART_Init+0x58>)
 8001866:	4a15      	ldr	r2, [pc, #84]	; (80018bc <MX_USART1_UART_Init+0x5c>)
 8001868:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800186a:	4b13      	ldr	r3, [pc, #76]	; (80018b8 <MX_USART1_UART_Init+0x58>)
 800186c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001870:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001872:	4b11      	ldr	r3, [pc, #68]	; (80018b8 <MX_USART1_UART_Init+0x58>)
 8001874:	2200      	movs	r2, #0
 8001876:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001878:	4b0f      	ldr	r3, [pc, #60]	; (80018b8 <MX_USART1_UART_Init+0x58>)
 800187a:	2200      	movs	r2, #0
 800187c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800187e:	4b0e      	ldr	r3, [pc, #56]	; (80018b8 <MX_USART1_UART_Init+0x58>)
 8001880:	2200      	movs	r2, #0
 8001882:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001884:	4b0c      	ldr	r3, [pc, #48]	; (80018b8 <MX_USART1_UART_Init+0x58>)
 8001886:	220c      	movs	r2, #12
 8001888:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800188a:	4b0b      	ldr	r3, [pc, #44]	; (80018b8 <MX_USART1_UART_Init+0x58>)
 800188c:	2200      	movs	r2, #0
 800188e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001890:	4b09      	ldr	r3, [pc, #36]	; (80018b8 <MX_USART1_UART_Init+0x58>)
 8001892:	2200      	movs	r2, #0
 8001894:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001896:	4b08      	ldr	r3, [pc, #32]	; (80018b8 <MX_USART1_UART_Init+0x58>)
 8001898:	2200      	movs	r2, #0
 800189a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800189c:	4b06      	ldr	r3, [pc, #24]	; (80018b8 <MX_USART1_UART_Init+0x58>)
 800189e:	2200      	movs	r2, #0
 80018a0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80018a2:	4805      	ldr	r0, [pc, #20]	; (80018b8 <MX_USART1_UART_Init+0x58>)
 80018a4:	f004 fa70 	bl	8005d88 <HAL_UART_Init>
 80018a8:	4603      	mov	r3, r0
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d001      	beq.n	80018b2 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80018ae:	f7ff fdc1 	bl	8001434 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80018b2:	bf00      	nop
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	bf00      	nop
 80018b8:	20000288 	.word	0x20000288
 80018bc:	40013800 	.word	0x40013800

080018c0 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80018c4:	4b14      	ldr	r3, [pc, #80]	; (8001918 <MX_USART2_UART_Init+0x58>)
 80018c6:	4a15      	ldr	r2, [pc, #84]	; (800191c <MX_USART2_UART_Init+0x5c>)
 80018c8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80018ca:	4b13      	ldr	r3, [pc, #76]	; (8001918 <MX_USART2_UART_Init+0x58>)
 80018cc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80018d0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80018d2:	4b11      	ldr	r3, [pc, #68]	; (8001918 <MX_USART2_UART_Init+0x58>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80018d8:	4b0f      	ldr	r3, [pc, #60]	; (8001918 <MX_USART2_UART_Init+0x58>)
 80018da:	2200      	movs	r2, #0
 80018dc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80018de:	4b0e      	ldr	r3, [pc, #56]	; (8001918 <MX_USART2_UART_Init+0x58>)
 80018e0:	2200      	movs	r2, #0
 80018e2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80018e4:	4b0c      	ldr	r3, [pc, #48]	; (8001918 <MX_USART2_UART_Init+0x58>)
 80018e6:	220c      	movs	r2, #12
 80018e8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018ea:	4b0b      	ldr	r3, [pc, #44]	; (8001918 <MX_USART2_UART_Init+0x58>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80018f0:	4b09      	ldr	r3, [pc, #36]	; (8001918 <MX_USART2_UART_Init+0x58>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80018f6:	4b08      	ldr	r3, [pc, #32]	; (8001918 <MX_USART2_UART_Init+0x58>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80018fc:	4b06      	ldr	r3, [pc, #24]	; (8001918 <MX_USART2_UART_Init+0x58>)
 80018fe:	2200      	movs	r2, #0
 8001900:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001902:	4805      	ldr	r0, [pc, #20]	; (8001918 <MX_USART2_UART_Init+0x58>)
 8001904:	f004 fa40 	bl	8005d88 <HAL_UART_Init>
 8001908:	4603      	mov	r3, r0
 800190a:	2b00      	cmp	r3, #0
 800190c:	d001      	beq.n	8001912 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800190e:	f7ff fd91 	bl	8001434 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001912:	bf00      	nop
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop
 8001918:	2000030c 	.word	0x2000030c
 800191c:	40004400 	.word	0x40004400

08001920 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b0a6      	sub	sp, #152	; 0x98
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001928:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800192c:	2200      	movs	r2, #0
 800192e:	601a      	str	r2, [r3, #0]
 8001930:	605a      	str	r2, [r3, #4]
 8001932:	609a      	str	r2, [r3, #8]
 8001934:	60da      	str	r2, [r3, #12]
 8001936:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001938:	f107 031c 	add.w	r3, r7, #28
 800193c:	2268      	movs	r2, #104	; 0x68
 800193e:	2100      	movs	r1, #0
 8001940:	4618      	mov	r0, r3
 8001942:	f005 ff5f 	bl	8007804 <memset>
  if(uartHandle->Instance==USART1)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	4a4b      	ldr	r2, [pc, #300]	; (8001a78 <HAL_UART_MspInit+0x158>)
 800194c:	4293      	cmp	r3, r2
 800194e:	d145      	bne.n	80019dc <HAL_UART_MspInit+0xbc>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001950:	2301      	movs	r3, #1
 8001952:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001954:	2300      	movs	r3, #0
 8001956:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001958:	f107 031c 	add.w	r3, r7, #28
 800195c:	4618      	mov	r0, r3
 800195e:	f002 fbd9 	bl	8004114 <HAL_RCCEx_PeriphCLKConfig>
 8001962:	4603      	mov	r3, r0
 8001964:	2b00      	cmp	r3, #0
 8001966:	d001      	beq.n	800196c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001968:	f7ff fd64 	bl	8001434 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800196c:	4b43      	ldr	r3, [pc, #268]	; (8001a7c <HAL_UART_MspInit+0x15c>)
 800196e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001970:	4a42      	ldr	r2, [pc, #264]	; (8001a7c <HAL_UART_MspInit+0x15c>)
 8001972:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001976:	6613      	str	r3, [r2, #96]	; 0x60
 8001978:	4b40      	ldr	r3, [pc, #256]	; (8001a7c <HAL_UART_MspInit+0x15c>)
 800197a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800197c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001980:	61bb      	str	r3, [r7, #24]
 8001982:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001984:	4b3d      	ldr	r3, [pc, #244]	; (8001a7c <HAL_UART_MspInit+0x15c>)
 8001986:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001988:	4a3c      	ldr	r2, [pc, #240]	; (8001a7c <HAL_UART_MspInit+0x15c>)
 800198a:	f043 0301 	orr.w	r3, r3, #1
 800198e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001990:	4b3a      	ldr	r3, [pc, #232]	; (8001a7c <HAL_UART_MspInit+0x15c>)
 8001992:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001994:	f003 0301 	and.w	r3, r3, #1
 8001998:	617b      	str	r3, [r7, #20]
 800199a:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800199c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80019a0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019a4:	2302      	movs	r3, #2
 80019a6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019aa:	2300      	movs	r3, #0
 80019ac:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019b0:	2303      	movs	r3, #3
 80019b2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80019b6:	2307      	movs	r3, #7
 80019b8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019bc:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80019c0:	4619      	mov	r1, r3
 80019c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019c6:	f001 fb5f 	bl	8003088 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80019ca:	2200      	movs	r2, #0
 80019cc:	2100      	movs	r1, #0
 80019ce:	2025      	movs	r0, #37	; 0x25
 80019d0:	f001 faa5 	bl	8002f1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80019d4:	2025      	movs	r0, #37	; 0x25
 80019d6:	f001 fabe 	bl	8002f56 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80019da:	e048      	b.n	8001a6e <HAL_UART_MspInit+0x14e>
  else if(uartHandle->Instance==USART2)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4a27      	ldr	r2, [pc, #156]	; (8001a80 <HAL_UART_MspInit+0x160>)
 80019e2:	4293      	cmp	r3, r2
 80019e4:	d143      	bne.n	8001a6e <HAL_UART_MspInit+0x14e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80019e6:	2302      	movs	r3, #2
 80019e8:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80019ea:	2300      	movs	r3, #0
 80019ec:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80019ee:	f107 031c 	add.w	r3, r7, #28
 80019f2:	4618      	mov	r0, r3
 80019f4:	f002 fb8e 	bl	8004114 <HAL_RCCEx_PeriphCLKConfig>
 80019f8:	4603      	mov	r3, r0
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d001      	beq.n	8001a02 <HAL_UART_MspInit+0xe2>
      Error_Handler();
 80019fe:	f7ff fd19 	bl	8001434 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001a02:	4b1e      	ldr	r3, [pc, #120]	; (8001a7c <HAL_UART_MspInit+0x15c>)
 8001a04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a06:	4a1d      	ldr	r2, [pc, #116]	; (8001a7c <HAL_UART_MspInit+0x15c>)
 8001a08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a0c:	6593      	str	r3, [r2, #88]	; 0x58
 8001a0e:	4b1b      	ldr	r3, [pc, #108]	; (8001a7c <HAL_UART_MspInit+0x15c>)
 8001a10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a16:	613b      	str	r3, [r7, #16]
 8001a18:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a1a:	4b18      	ldr	r3, [pc, #96]	; (8001a7c <HAL_UART_MspInit+0x15c>)
 8001a1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a1e:	4a17      	ldr	r2, [pc, #92]	; (8001a7c <HAL_UART_MspInit+0x15c>)
 8001a20:	f043 0301 	orr.w	r3, r3, #1
 8001a24:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a26:	4b15      	ldr	r3, [pc, #84]	; (8001a7c <HAL_UART_MspInit+0x15c>)
 8001a28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a2a:	f003 0301 	and.w	r3, r3, #1
 8001a2e:	60fb      	str	r3, [r7, #12]
 8001a30:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001a32:	230c      	movs	r3, #12
 8001a34:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a38:	2302      	movs	r3, #2
 8001a3a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a44:	2303      	movs	r3, #3
 8001a46:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001a4a:	2307      	movs	r3, #7
 8001a4c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a50:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001a54:	4619      	mov	r1, r3
 8001a56:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a5a:	f001 fb15 	bl	8003088 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001a5e:	2200      	movs	r2, #0
 8001a60:	2100      	movs	r1, #0
 8001a62:	2026      	movs	r0, #38	; 0x26
 8001a64:	f001 fa5b 	bl	8002f1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001a68:	2026      	movs	r0, #38	; 0x26
 8001a6a:	f001 fa74 	bl	8002f56 <HAL_NVIC_EnableIRQ>
}
 8001a6e:	bf00      	nop
 8001a70:	3798      	adds	r7, #152	; 0x98
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}
 8001a76:	bf00      	nop
 8001a78:	40013800 	.word	0x40013800
 8001a7c:	40021000 	.word	0x40021000
 8001a80:	40004400 	.word	0x40004400

08001a84 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001a84:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001abc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001a88:	f7ff fd46 	bl	8001518 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a8c:	480c      	ldr	r0, [pc, #48]	; (8001ac0 <LoopForever+0x6>)
  ldr r1, =_edata
 8001a8e:	490d      	ldr	r1, [pc, #52]	; (8001ac4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001a90:	4a0d      	ldr	r2, [pc, #52]	; (8001ac8 <LoopForever+0xe>)
  movs r3, #0
 8001a92:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a94:	e002      	b.n	8001a9c <LoopCopyDataInit>

08001a96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a9a:	3304      	adds	r3, #4

08001a9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001aa0:	d3f9      	bcc.n	8001a96 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001aa2:	4a0a      	ldr	r2, [pc, #40]	; (8001acc <LoopForever+0x12>)
  ldr r4, =_ebss
 8001aa4:	4c0a      	ldr	r4, [pc, #40]	; (8001ad0 <LoopForever+0x16>)
  movs r3, #0
 8001aa6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001aa8:	e001      	b.n	8001aae <LoopFillZerobss>

08001aaa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001aaa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001aac:	3204      	adds	r2, #4

08001aae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001aae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ab0:	d3fb      	bcc.n	8001aaa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001ab2:	f005 fe75 	bl	80077a0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001ab6:	f7ff faf5 	bl	80010a4 <main>

08001aba <LoopForever>:

LoopForever:
    b LoopForever
 8001aba:	e7fe      	b.n	8001aba <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001abc:	20028000 	.word	0x20028000
  ldr r0, =_sdata
 8001ac0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ac4:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001ac8:	080078a4 	.word	0x080078a4
  ldr r2, =_sbss
 8001acc:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001ad0:	20000398 	.word	0x20000398

08001ad4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001ad4:	e7fe      	b.n	8001ad4 <ADC1_IRQHandler>
	...

08001ad8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b082      	sub	sp, #8
 8001adc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ae2:	4b0c      	ldr	r3, [pc, #48]	; (8001b14 <HAL_Init+0x3c>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	4a0b      	ldr	r2, [pc, #44]	; (8001b14 <HAL_Init+0x3c>)
 8001ae8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001aec:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001aee:	2003      	movs	r0, #3
 8001af0:	f001 fa0a 	bl	8002f08 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001af4:	2000      	movs	r0, #0
 8001af6:	f000 f80f 	bl	8001b18 <HAL_InitTick>
 8001afa:	4603      	mov	r3, r0
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d002      	beq.n	8001b06 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001b00:	2301      	movs	r3, #1
 8001b02:	71fb      	strb	r3, [r7, #7]
 8001b04:	e001      	b.n	8001b0a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001b06:	f7ff fc9b 	bl	8001440 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001b0a:	79fb      	ldrb	r3, [r7, #7]
}
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	3708      	adds	r7, #8
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bd80      	pop	{r7, pc}
 8001b14:	40022000 	.word	0x40022000

08001b18 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b084      	sub	sp, #16
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001b20:	2300      	movs	r3, #0
 8001b22:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001b24:	4b17      	ldr	r3, [pc, #92]	; (8001b84 <HAL_InitTick+0x6c>)
 8001b26:	781b      	ldrb	r3, [r3, #0]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d023      	beq.n	8001b74 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001b2c:	4b16      	ldr	r3, [pc, #88]	; (8001b88 <HAL_InitTick+0x70>)
 8001b2e:	681a      	ldr	r2, [r3, #0]
 8001b30:	4b14      	ldr	r3, [pc, #80]	; (8001b84 <HAL_InitTick+0x6c>)
 8001b32:	781b      	ldrb	r3, [r3, #0]
 8001b34:	4619      	mov	r1, r3
 8001b36:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b3a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b42:	4618      	mov	r0, r3
 8001b44:	f001 fa15 	bl	8002f72 <HAL_SYSTICK_Config>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d10f      	bne.n	8001b6e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	2b0f      	cmp	r3, #15
 8001b52:	d809      	bhi.n	8001b68 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b54:	2200      	movs	r2, #0
 8001b56:	6879      	ldr	r1, [r7, #4]
 8001b58:	f04f 30ff 	mov.w	r0, #4294967295
 8001b5c:	f001 f9df 	bl	8002f1e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001b60:	4a0a      	ldr	r2, [pc, #40]	; (8001b8c <HAL_InitTick+0x74>)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	6013      	str	r3, [r2, #0]
 8001b66:	e007      	b.n	8001b78 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001b68:	2301      	movs	r3, #1
 8001b6a:	73fb      	strb	r3, [r7, #15]
 8001b6c:	e004      	b.n	8001b78 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001b6e:	2301      	movs	r3, #1
 8001b70:	73fb      	strb	r3, [r7, #15]
 8001b72:	e001      	b.n	8001b78 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001b74:	2301      	movs	r3, #1
 8001b76:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001b78:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	3710      	adds	r7, #16
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}
 8001b82:	bf00      	nop
 8001b84:	2000000c 	.word	0x2000000c
 8001b88:	20000004 	.word	0x20000004
 8001b8c:	20000008 	.word	0x20000008

08001b90 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b90:	b480      	push	{r7}
 8001b92:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001b94:	4b06      	ldr	r3, [pc, #24]	; (8001bb0 <HAL_IncTick+0x20>)
 8001b96:	781b      	ldrb	r3, [r3, #0]
 8001b98:	461a      	mov	r2, r3
 8001b9a:	4b06      	ldr	r3, [pc, #24]	; (8001bb4 <HAL_IncTick+0x24>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	4413      	add	r3, r2
 8001ba0:	4a04      	ldr	r2, [pc, #16]	; (8001bb4 <HAL_IncTick+0x24>)
 8001ba2:	6013      	str	r3, [r2, #0]
}
 8001ba4:	bf00      	nop
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bac:	4770      	bx	lr
 8001bae:	bf00      	nop
 8001bb0:	2000000c 	.word	0x2000000c
 8001bb4:	20000390 	.word	0x20000390

08001bb8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	af00      	add	r7, sp, #0
  return uwTick;
 8001bbc:	4b03      	ldr	r3, [pc, #12]	; (8001bcc <HAL_GetTick+0x14>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
}
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc8:	4770      	bx	lr
 8001bca:	bf00      	nop
 8001bcc:	20000390 	.word	0x20000390

08001bd0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b084      	sub	sp, #16
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001bd8:	f7ff ffee 	bl	8001bb8 <HAL_GetTick>
 8001bdc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001be8:	d005      	beq.n	8001bf6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001bea:	4b0a      	ldr	r3, [pc, #40]	; (8001c14 <HAL_Delay+0x44>)
 8001bec:	781b      	ldrb	r3, [r3, #0]
 8001bee:	461a      	mov	r2, r3
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	4413      	add	r3, r2
 8001bf4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001bf6:	bf00      	nop
 8001bf8:	f7ff ffde 	bl	8001bb8 <HAL_GetTick>
 8001bfc:	4602      	mov	r2, r0
 8001bfe:	68bb      	ldr	r3, [r7, #8]
 8001c00:	1ad3      	subs	r3, r2, r3
 8001c02:	68fa      	ldr	r2, [r7, #12]
 8001c04:	429a      	cmp	r2, r3
 8001c06:	d8f7      	bhi.n	8001bf8 <HAL_Delay+0x28>
  {
  }
}
 8001c08:	bf00      	nop
 8001c0a:	bf00      	nop
 8001c0c:	3710      	adds	r7, #16
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd80      	pop	{r7, pc}
 8001c12:	bf00      	nop
 8001c14:	2000000c 	.word	0x2000000c

08001c18 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	b083      	sub	sp, #12
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
 8001c20:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	689b      	ldr	r3, [r3, #8]
 8001c26:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	431a      	orrs	r2, r3
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	609a      	str	r2, [r3, #8]
}
 8001c32:	bf00      	nop
 8001c34:	370c      	adds	r7, #12
 8001c36:	46bd      	mov	sp, r7
 8001c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3c:	4770      	bx	lr

08001c3e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001c3e:	b480      	push	{r7}
 8001c40:	b083      	sub	sp, #12
 8001c42:	af00      	add	r7, sp, #0
 8001c44:	6078      	str	r0, [r7, #4]
 8001c46:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	689b      	ldr	r3, [r3, #8]
 8001c4c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	431a      	orrs	r2, r3
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	609a      	str	r2, [r3, #8]
}
 8001c58:	bf00      	nop
 8001c5a:	370c      	adds	r7, #12
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c62:	4770      	bx	lr

08001c64 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001c64:	b480      	push	{r7}
 8001c66:	b083      	sub	sp, #12
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	689b      	ldr	r3, [r3, #8]
 8001c70:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001c74:	4618      	mov	r0, r3
 8001c76:	370c      	adds	r7, #12
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7e:	4770      	bx	lr

08001c80 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001c80:	b480      	push	{r7}
 8001c82:	b087      	sub	sp, #28
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	60f8      	str	r0, [r7, #12]
 8001c88:	60b9      	str	r1, [r7, #8]
 8001c8a:	607a      	str	r2, [r7, #4]
 8001c8c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	3360      	adds	r3, #96	; 0x60
 8001c92:	461a      	mov	r2, r3
 8001c94:	68bb      	ldr	r3, [r7, #8]
 8001c96:	009b      	lsls	r3, r3, #2
 8001c98:	4413      	add	r3, r2
 8001c9a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001c9c:	697b      	ldr	r3, [r7, #20]
 8001c9e:	681a      	ldr	r2, [r3, #0]
 8001ca0:	4b08      	ldr	r3, [pc, #32]	; (8001cc4 <LL_ADC_SetOffset+0x44>)
 8001ca2:	4013      	ands	r3, r2
 8001ca4:	687a      	ldr	r2, [r7, #4]
 8001ca6:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001caa:	683a      	ldr	r2, [r7, #0]
 8001cac:	430a      	orrs	r2, r1
 8001cae:	4313      	orrs	r3, r2
 8001cb0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001cb4:	697b      	ldr	r3, [r7, #20]
 8001cb6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001cb8:	bf00      	nop
 8001cba:	371c      	adds	r7, #28
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc2:	4770      	bx	lr
 8001cc4:	03fff000 	.word	0x03fff000

08001cc8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	b085      	sub	sp, #20
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
 8001cd0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	3360      	adds	r3, #96	; 0x60
 8001cd6:	461a      	mov	r2, r3
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	009b      	lsls	r3, r3, #2
 8001cdc:	4413      	add	r3, r2
 8001cde:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001ce8:	4618      	mov	r0, r3
 8001cea:	3714      	adds	r7, #20
 8001cec:	46bd      	mov	sp, r7
 8001cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf2:	4770      	bx	lr

08001cf4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	b087      	sub	sp, #28
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	60f8      	str	r0, [r7, #12]
 8001cfc:	60b9      	str	r1, [r7, #8]
 8001cfe:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	3360      	adds	r3, #96	; 0x60
 8001d04:	461a      	mov	r2, r3
 8001d06:	68bb      	ldr	r3, [r7, #8]
 8001d08:	009b      	lsls	r3, r3, #2
 8001d0a:	4413      	add	r3, r2
 8001d0c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001d0e:	697b      	ldr	r3, [r7, #20]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	431a      	orrs	r2, r3
 8001d1a:	697b      	ldr	r3, [r7, #20]
 8001d1c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001d1e:	bf00      	nop
 8001d20:	371c      	adds	r7, #28
 8001d22:	46bd      	mov	sp, r7
 8001d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d28:	4770      	bx	lr

08001d2a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001d2a:	b480      	push	{r7}
 8001d2c:	b083      	sub	sp, #12
 8001d2e:	af00      	add	r7, sp, #0
 8001d30:	6078      	str	r0, [r7, #4]
 8001d32:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	695b      	ldr	r3, [r3, #20]
 8001d38:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	431a      	orrs	r2, r3
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	615a      	str	r2, [r3, #20]
}
 8001d44:	bf00      	nop
 8001d46:	370c      	adds	r7, #12
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4e:	4770      	bx	lr

08001d50 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001d50:	b480      	push	{r7}
 8001d52:	b083      	sub	sp, #12
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	68db      	ldr	r3, [r3, #12]
 8001d5c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d101      	bne.n	8001d68 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001d64:	2301      	movs	r3, #1
 8001d66:	e000      	b.n	8001d6a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001d68:	2300      	movs	r3, #0
}
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	370c      	adds	r7, #12
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d74:	4770      	bx	lr

08001d76 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001d76:	b480      	push	{r7}
 8001d78:	b087      	sub	sp, #28
 8001d7a:	af00      	add	r7, sp, #0
 8001d7c:	60f8      	str	r0, [r7, #12]
 8001d7e:	60b9      	str	r1, [r7, #8]
 8001d80:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	3330      	adds	r3, #48	; 0x30
 8001d86:	461a      	mov	r2, r3
 8001d88:	68bb      	ldr	r3, [r7, #8]
 8001d8a:	0a1b      	lsrs	r3, r3, #8
 8001d8c:	009b      	lsls	r3, r3, #2
 8001d8e:	f003 030c 	and.w	r3, r3, #12
 8001d92:	4413      	add	r3, r2
 8001d94:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001d96:	697b      	ldr	r3, [r7, #20]
 8001d98:	681a      	ldr	r2, [r3, #0]
 8001d9a:	68bb      	ldr	r3, [r7, #8]
 8001d9c:	f003 031f 	and.w	r3, r3, #31
 8001da0:	211f      	movs	r1, #31
 8001da2:	fa01 f303 	lsl.w	r3, r1, r3
 8001da6:	43db      	mvns	r3, r3
 8001da8:	401a      	ands	r2, r3
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	0e9b      	lsrs	r3, r3, #26
 8001dae:	f003 011f 	and.w	r1, r3, #31
 8001db2:	68bb      	ldr	r3, [r7, #8]
 8001db4:	f003 031f 	and.w	r3, r3, #31
 8001db8:	fa01 f303 	lsl.w	r3, r1, r3
 8001dbc:	431a      	orrs	r2, r3
 8001dbe:	697b      	ldr	r3, [r7, #20]
 8001dc0:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001dc2:	bf00      	nop
 8001dc4:	371c      	adds	r7, #28
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dcc:	4770      	bx	lr

08001dce <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001dce:	b480      	push	{r7}
 8001dd0:	b087      	sub	sp, #28
 8001dd2:	af00      	add	r7, sp, #0
 8001dd4:	60f8      	str	r0, [r7, #12]
 8001dd6:	60b9      	str	r1, [r7, #8]
 8001dd8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	3314      	adds	r3, #20
 8001dde:	461a      	mov	r2, r3
 8001de0:	68bb      	ldr	r3, [r7, #8]
 8001de2:	0e5b      	lsrs	r3, r3, #25
 8001de4:	009b      	lsls	r3, r3, #2
 8001de6:	f003 0304 	and.w	r3, r3, #4
 8001dea:	4413      	add	r3, r2
 8001dec:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001dee:	697b      	ldr	r3, [r7, #20]
 8001df0:	681a      	ldr	r2, [r3, #0]
 8001df2:	68bb      	ldr	r3, [r7, #8]
 8001df4:	0d1b      	lsrs	r3, r3, #20
 8001df6:	f003 031f 	and.w	r3, r3, #31
 8001dfa:	2107      	movs	r1, #7
 8001dfc:	fa01 f303 	lsl.w	r3, r1, r3
 8001e00:	43db      	mvns	r3, r3
 8001e02:	401a      	ands	r2, r3
 8001e04:	68bb      	ldr	r3, [r7, #8]
 8001e06:	0d1b      	lsrs	r3, r3, #20
 8001e08:	f003 031f 	and.w	r3, r3, #31
 8001e0c:	6879      	ldr	r1, [r7, #4]
 8001e0e:	fa01 f303 	lsl.w	r3, r1, r3
 8001e12:	431a      	orrs	r2, r3
 8001e14:	697b      	ldr	r3, [r7, #20]
 8001e16:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001e18:	bf00      	nop
 8001e1a:	371c      	adds	r7, #28
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e22:	4770      	bx	lr

08001e24 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001e24:	b480      	push	{r7}
 8001e26:	b085      	sub	sp, #20
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	60f8      	str	r0, [r7, #12]
 8001e2c:	60b9      	str	r1, [r7, #8]
 8001e2e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001e36:	68bb      	ldr	r3, [r7, #8]
 8001e38:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e3c:	43db      	mvns	r3, r3
 8001e3e:	401a      	ands	r2, r3
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	f003 0318 	and.w	r3, r3, #24
 8001e46:	4908      	ldr	r1, [pc, #32]	; (8001e68 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001e48:	40d9      	lsrs	r1, r3
 8001e4a:	68bb      	ldr	r3, [r7, #8]
 8001e4c:	400b      	ands	r3, r1
 8001e4e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e52:	431a      	orrs	r2, r3
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001e5a:	bf00      	nop
 8001e5c:	3714      	adds	r7, #20
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e64:	4770      	bx	lr
 8001e66:	bf00      	nop
 8001e68:	0007ffff 	.word	0x0007ffff

08001e6c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b083      	sub	sp, #12
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	689b      	ldr	r3, [r3, #8]
 8001e78:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001e7c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001e80:	687a      	ldr	r2, [r7, #4]
 8001e82:	6093      	str	r3, [r2, #8]
}
 8001e84:	bf00      	nop
 8001e86:	370c      	adds	r7, #12
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8e:	4770      	bx	lr

08001e90 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001e90:	b480      	push	{r7}
 8001e92:	b083      	sub	sp, #12
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	689b      	ldr	r3, [r3, #8]
 8001e9c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001ea0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001ea4:	d101      	bne.n	8001eaa <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	e000      	b.n	8001eac <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001eaa:	2300      	movs	r3, #0
}
 8001eac:	4618      	mov	r0, r3
 8001eae:	370c      	adds	r7, #12
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb6:	4770      	bx	lr

08001eb8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	b083      	sub	sp, #12
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	689b      	ldr	r3, [r3, #8]
 8001ec4:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001ec8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001ecc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001ed4:	bf00      	nop
 8001ed6:	370c      	adds	r7, #12
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ede:	4770      	bx	lr

08001ee0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	b083      	sub	sp, #12
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	689b      	ldr	r3, [r3, #8]
 8001eec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ef0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001ef4:	d101      	bne.n	8001efa <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	e000      	b.n	8001efc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001efa:	2300      	movs	r3, #0
}
 8001efc:	4618      	mov	r0, r3
 8001efe:	370c      	adds	r7, #12
 8001f00:	46bd      	mov	sp, r7
 8001f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f06:	4770      	bx	lr

08001f08 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	b083      	sub	sp, #12
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	689b      	ldr	r3, [r3, #8]
 8001f14:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001f18:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001f1c:	f043 0201 	orr.w	r2, r3, #1
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001f24:	bf00      	nop
 8001f26:	370c      	adds	r7, #12
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2e:	4770      	bx	lr

08001f30 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001f30:	b480      	push	{r7}
 8001f32:	b083      	sub	sp, #12
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	689b      	ldr	r3, [r3, #8]
 8001f3c:	f003 0301 	and.w	r3, r3, #1
 8001f40:	2b01      	cmp	r3, #1
 8001f42:	d101      	bne.n	8001f48 <LL_ADC_IsEnabled+0x18>
 8001f44:	2301      	movs	r3, #1
 8001f46:	e000      	b.n	8001f4a <LL_ADC_IsEnabled+0x1a>
 8001f48:	2300      	movs	r3, #0
}
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	370c      	adds	r7, #12
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f54:	4770      	bx	lr

08001f56 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001f56:	b480      	push	{r7}
 8001f58:	b083      	sub	sp, #12
 8001f5a:	af00      	add	r7, sp, #0
 8001f5c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	689b      	ldr	r3, [r3, #8]
 8001f62:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001f66:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001f6a:	f043 0204 	orr.w	r2, r3, #4
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001f72:	bf00      	nop
 8001f74:	370c      	adds	r7, #12
 8001f76:	46bd      	mov	sp, r7
 8001f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7c:	4770      	bx	lr

08001f7e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001f7e:	b480      	push	{r7}
 8001f80:	b083      	sub	sp, #12
 8001f82:	af00      	add	r7, sp, #0
 8001f84:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	689b      	ldr	r3, [r3, #8]
 8001f8a:	f003 0304 	and.w	r3, r3, #4
 8001f8e:	2b04      	cmp	r3, #4
 8001f90:	d101      	bne.n	8001f96 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001f92:	2301      	movs	r3, #1
 8001f94:	e000      	b.n	8001f98 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001f96:	2300      	movs	r3, #0
}
 8001f98:	4618      	mov	r0, r3
 8001f9a:	370c      	adds	r7, #12
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa2:	4770      	bx	lr

08001fa4 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	b083      	sub	sp, #12
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	689b      	ldr	r3, [r3, #8]
 8001fb0:	f003 0308 	and.w	r3, r3, #8
 8001fb4:	2b08      	cmp	r3, #8
 8001fb6:	d101      	bne.n	8001fbc <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001fb8:	2301      	movs	r3, #1
 8001fba:	e000      	b.n	8001fbe <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001fbc:	2300      	movs	r3, #0
}
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	370c      	adds	r7, #12
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc8:	4770      	bx	lr
	...

08001fcc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b088      	sub	sp, #32
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d101      	bne.n	8001fe6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	e12f      	b.n	8002246 <HAL_ADC_Init+0x27a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	691b      	ldr	r3, [r3, #16]
 8001fea:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d109      	bne.n	8002008 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001ff4:	6878      	ldr	r0, [r7, #4]
 8001ff6:	f7fe fec3 	bl	8000d80 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2200      	movs	r2, #0
 8002004:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4618      	mov	r0, r3
 800200e:	f7ff ff3f 	bl	8001e90 <LL_ADC_IsDeepPowerDownEnabled>
 8002012:	4603      	mov	r3, r0
 8002014:	2b00      	cmp	r3, #0
 8002016:	d004      	beq.n	8002022 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4618      	mov	r0, r3
 800201e:	f7ff ff25 	bl	8001e6c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4618      	mov	r0, r3
 8002028:	f7ff ff5a 	bl	8001ee0 <LL_ADC_IsInternalRegulatorEnabled>
 800202c:	4603      	mov	r3, r0
 800202e:	2b00      	cmp	r3, #0
 8002030:	d115      	bne.n	800205e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	4618      	mov	r0, r3
 8002038:	f7ff ff3e 	bl	8001eb8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800203c:	4b84      	ldr	r3, [pc, #528]	; (8002250 <HAL_ADC_Init+0x284>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	099b      	lsrs	r3, r3, #6
 8002042:	4a84      	ldr	r2, [pc, #528]	; (8002254 <HAL_ADC_Init+0x288>)
 8002044:	fba2 2303 	umull	r2, r3, r2, r3
 8002048:	099b      	lsrs	r3, r3, #6
 800204a:	3301      	adds	r3, #1
 800204c:	005b      	lsls	r3, r3, #1
 800204e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002050:	e002      	b.n	8002058 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002052:	68bb      	ldr	r3, [r7, #8]
 8002054:	3b01      	subs	r3, #1
 8002056:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002058:	68bb      	ldr	r3, [r7, #8]
 800205a:	2b00      	cmp	r3, #0
 800205c:	d1f9      	bne.n	8002052 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	4618      	mov	r0, r3
 8002064:	f7ff ff3c 	bl	8001ee0 <LL_ADC_IsInternalRegulatorEnabled>
 8002068:	4603      	mov	r3, r0
 800206a:	2b00      	cmp	r3, #0
 800206c:	d10d      	bne.n	800208a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002072:	f043 0210 	orr.w	r2, r3, #16
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800207e:	f043 0201 	orr.w	r2, r3, #1
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002086:	2301      	movs	r3, #1
 8002088:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	4618      	mov	r0, r3
 8002090:	f7ff ff75 	bl	8001f7e <LL_ADC_REG_IsConversionOngoing>
 8002094:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800209a:	f003 0310 	and.w	r3, r3, #16
 800209e:	2b00      	cmp	r3, #0
 80020a0:	f040 80c8 	bne.w	8002234 <HAL_ADC_Init+0x268>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80020a4:	697b      	ldr	r3, [r7, #20]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	f040 80c4 	bne.w	8002234 <HAL_ADC_Init+0x268>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020b0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80020b4:	f043 0202 	orr.w	r2, r3, #2
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4618      	mov	r0, r3
 80020c2:	f7ff ff35 	bl	8001f30 <LL_ADC_IsEnabled>
 80020c6:	4603      	mov	r3, r0
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d10b      	bne.n	80020e4 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80020cc:	4862      	ldr	r0, [pc, #392]	; (8002258 <HAL_ADC_Init+0x28c>)
 80020ce:	f7ff ff2f 	bl	8001f30 <LL_ADC_IsEnabled>
 80020d2:	4603      	mov	r3, r0
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d105      	bne.n	80020e4 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	4619      	mov	r1, r3
 80020de:	485f      	ldr	r0, [pc, #380]	; (800225c <HAL_ADC_Init+0x290>)
 80020e0:	f7ff fd9a 	bl	8001c18 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	7e5b      	ldrb	r3, [r3, #25]
 80020e8:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80020ee:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80020f4:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80020fa:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002102:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002104:	4313      	orrs	r3, r2
 8002106:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800210e:	2b01      	cmp	r3, #1
 8002110:	d106      	bne.n	8002120 <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002116:	3b01      	subs	r3, #1
 8002118:	045b      	lsls	r3, r3, #17
 800211a:	69ba      	ldr	r2, [r7, #24]
 800211c:	4313      	orrs	r3, r2
 800211e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002124:	2b00      	cmp	r3, #0
 8002126:	d009      	beq.n	800213c <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800212c:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002134:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002136:	69ba      	ldr	r2, [r7, #24]
 8002138:	4313      	orrs	r3, r2
 800213a:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	68da      	ldr	r2, [r3, #12]
 8002142:	4b47      	ldr	r3, [pc, #284]	; (8002260 <HAL_ADC_Init+0x294>)
 8002144:	4013      	ands	r3, r2
 8002146:	687a      	ldr	r2, [r7, #4]
 8002148:	6812      	ldr	r2, [r2, #0]
 800214a:	69b9      	ldr	r1, [r7, #24]
 800214c:	430b      	orrs	r3, r1
 800214e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4618      	mov	r0, r3
 8002156:	f7ff ff12 	bl	8001f7e <LL_ADC_REG_IsConversionOngoing>
 800215a:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4618      	mov	r0, r3
 8002162:	f7ff ff1f 	bl	8001fa4 <LL_ADC_INJ_IsConversionOngoing>
 8002166:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002168:	693b      	ldr	r3, [r7, #16]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d140      	bne.n	80021f0 <HAL_ADC_Init+0x224>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	2b00      	cmp	r3, #0
 8002172:	d13d      	bne.n	80021f0 <HAL_ADC_Init+0x224>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	7e1b      	ldrb	r3, [r3, #24]
 800217c:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800217e:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002186:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002188:	4313      	orrs	r3, r2
 800218a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	68db      	ldr	r3, [r3, #12]
 8002192:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002196:	f023 0306 	bic.w	r3, r3, #6
 800219a:	687a      	ldr	r2, [r7, #4]
 800219c:	6812      	ldr	r2, [r2, #0]
 800219e:	69b9      	ldr	r1, [r7, #24]
 80021a0:	430b      	orrs	r3, r1
 80021a2:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80021aa:	2b01      	cmp	r3, #1
 80021ac:	d118      	bne.n	80021e0 <HAL_ADC_Init+0x214>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	691b      	ldr	r3, [r3, #16]
 80021b4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80021b8:	f023 0304 	bic.w	r3, r3, #4
 80021bc:	687a      	ldr	r2, [r7, #4]
 80021be:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80021c0:	687a      	ldr	r2, [r7, #4]
 80021c2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80021c4:	4311      	orrs	r1, r2
 80021c6:	687a      	ldr	r2, [r7, #4]
 80021c8:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80021ca:	4311      	orrs	r1, r2
 80021cc:	687a      	ldr	r2, [r7, #4]
 80021ce:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80021d0:	430a      	orrs	r2, r1
 80021d2:	431a      	orrs	r2, r3
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f042 0201 	orr.w	r2, r2, #1
 80021dc:	611a      	str	r2, [r3, #16]
 80021de:	e007      	b.n	80021f0 <HAL_ADC_Init+0x224>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	691a      	ldr	r2, [r3, #16]
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f022 0201 	bic.w	r2, r2, #1
 80021ee:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	691b      	ldr	r3, [r3, #16]
 80021f4:	2b01      	cmp	r3, #1
 80021f6:	d10c      	bne.n	8002212 <HAL_ADC_Init+0x246>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021fe:	f023 010f 	bic.w	r1, r3, #15
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	69db      	ldr	r3, [r3, #28]
 8002206:	1e5a      	subs	r2, r3, #1
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	430a      	orrs	r2, r1
 800220e:	631a      	str	r2, [r3, #48]	; 0x30
 8002210:	e007      	b.n	8002222 <HAL_ADC_Init+0x256>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f022 020f 	bic.w	r2, r2, #15
 8002220:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002226:	f023 0303 	bic.w	r3, r3, #3
 800222a:	f043 0201 	orr.w	r2, r3, #1
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	659a      	str	r2, [r3, #88]	; 0x58
 8002232:	e007      	b.n	8002244 <HAL_ADC_Init+0x278>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002238:	f043 0210 	orr.w	r2, r3, #16
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002240:	2301      	movs	r3, #1
 8002242:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002244:	7ffb      	ldrb	r3, [r7, #31]
}
 8002246:	4618      	mov	r0, r3
 8002248:	3720      	adds	r7, #32
 800224a:	46bd      	mov	sp, r7
 800224c:	bd80      	pop	{r7, pc}
 800224e:	bf00      	nop
 8002250:	20000004 	.word	0x20000004
 8002254:	053e2d63 	.word	0x053e2d63
 8002258:	50040000 	.word	0x50040000
 800225c:	50040300 	.word	0x50040300
 8002260:	fff0c007 	.word	0xfff0c007

08002264 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b084      	sub	sp, #16
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4618      	mov	r0, r3
 8002272:	f7ff fe84 	bl	8001f7e <LL_ADC_REG_IsConversionOngoing>
 8002276:	4603      	mov	r3, r0
 8002278:	2b00      	cmp	r3, #0
 800227a:	d14f      	bne.n	800231c <HAL_ADC_Start+0xb8>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002282:	2b01      	cmp	r3, #1
 8002284:	d101      	bne.n	800228a <HAL_ADC_Start+0x26>
 8002286:	2302      	movs	r3, #2
 8002288:	e04b      	b.n	8002322 <HAL_ADC_Start+0xbe>
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	2201      	movs	r2, #1
 800228e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002292:	6878      	ldr	r0, [r7, #4]
 8002294:	f000 fce2 	bl	8002c5c <ADC_Enable>
 8002298:	4603      	mov	r3, r0
 800229a:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800229c:	7bfb      	ldrb	r3, [r7, #15]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d137      	bne.n	8002312 <HAL_ADC_Start+0xae>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022a6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80022aa:	f023 0301 	bic.w	r3, r3, #1
 80022ae:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	659a      	str	r2, [r3, #88]	; 0x58
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022ba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80022be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80022c2:	d106      	bne.n	80022d2 <HAL_ADC_Start+0x6e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022c8:	f023 0206 	bic.w	r2, r3, #6
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	65da      	str	r2, [r3, #92]	; 0x5c
 80022d0:	e002      	b.n	80022d8 <HAL_ADC_Start+0x74>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	2200      	movs	r2, #0
 80022d6:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	221c      	movs	r2, #28
 80022de:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2200      	movs	r2, #0
 80022e4:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }

      }
#else
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	68db      	ldr	r3, [r3, #12]
 80022ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d007      	beq.n	8002306 <HAL_ADC_Start+0xa2>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022fa:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80022fe:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4618      	mov	r0, r3
 800230c:	f7ff fe23 	bl	8001f56 <LL_ADC_REG_StartConversion>
 8002310:	e006      	b.n	8002320 <HAL_ADC_Start+0xbc>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	2200      	movs	r2, #0
 8002316:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 800231a:	e001      	b.n	8002320 <HAL_ADC_Start+0xbc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800231c:	2302      	movs	r3, #2
 800231e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 8002320:	7bfb      	ldrb	r3, [r7, #15]
}
 8002322:	4618      	mov	r0, r3
 8002324:	3710      	adds	r7, #16
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}

0800232a <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800232a:	b580      	push	{r7, lr}
 800232c:	b086      	sub	sp, #24
 800232e:	af00      	add	r7, sp, #0
 8002330:	6078      	str	r0, [r7, #4]
 8002332:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	695b      	ldr	r3, [r3, #20]
 8002338:	2b08      	cmp	r3, #8
 800233a:	d102      	bne.n	8002342 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 800233c:	2308      	movs	r3, #8
 800233e:	617b      	str	r3, [r7, #20]
 8002340:	e010      	b.n	8002364 <HAL_ADC_PollForConversion+0x3a>
        tmp_Flag_End = (ADC_FLAG_EOC);
      }
    }
#else
    /* Check ADC DMA mode */
    if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	68db      	ldr	r3, [r3, #12]
 8002348:	f003 0301 	and.w	r3, r3, #1
 800234c:	2b00      	cmp	r3, #0
 800234e:	d007      	beq.n	8002360 <HAL_ADC_PollForConversion+0x36>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002354:	f043 0220 	orr.w	r2, r3, #32
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 800235c:	2301      	movs	r3, #1
 800235e:	e06f      	b.n	8002440 <HAL_ADC_PollForConversion+0x116>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 8002360:	2304      	movs	r3, #4
 8002362:	617b      	str	r3, [r7, #20]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8002364:	f7ff fc28 	bl	8001bb8 <HAL_GetTick>
 8002368:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800236a:	e021      	b.n	80023b0 <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002372:	d01d      	beq.n	80023b0 <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8002374:	f7ff fc20 	bl	8001bb8 <HAL_GetTick>
 8002378:	4602      	mov	r2, r0
 800237a:	693b      	ldr	r3, [r7, #16]
 800237c:	1ad3      	subs	r3, r2, r3
 800237e:	683a      	ldr	r2, [r7, #0]
 8002380:	429a      	cmp	r2, r3
 8002382:	d302      	bcc.n	800238a <HAL_ADC_PollForConversion+0x60>
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d112      	bne.n	80023b0 <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	681a      	ldr	r2, [r3, #0]
 8002390:	697b      	ldr	r3, [r7, #20]
 8002392:	4013      	ands	r3, r2
 8002394:	2b00      	cmp	r3, #0
 8002396:	d10b      	bne.n	80023b0 <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800239c:	f043 0204 	orr.w	r2, r3, #4
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	659a      	str	r2, [r3, #88]	; 0x58

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2200      	movs	r2, #0
 80023a8:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

          return HAL_TIMEOUT;
 80023ac:	2303      	movs	r3, #3
 80023ae:	e047      	b.n	8002440 <HAL_ADC_PollForConversion+0x116>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	681a      	ldr	r2, [r3, #0]
 80023b6:	697b      	ldr	r3, [r7, #20]
 80023b8:	4013      	ands	r3, r2
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d0d6      	beq.n	800236c <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023c2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4618      	mov	r0, r3
 80023d0:	f7ff fcbe 	bl	8001d50 <LL_ADC_REG_IsTriggerSourceSWStart>
 80023d4:	4603      	mov	r3, r0
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d01c      	beq.n	8002414 <HAL_ADC_PollForConversion+0xea>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	7e5b      	ldrb	r3, [r3, #25]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d118      	bne.n	8002414 <HAL_ADC_PollForConversion+0xea>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f003 0308 	and.w	r3, r3, #8
 80023ec:	2b08      	cmp	r3, #8
 80023ee:	d111      	bne.n	8002414 <HAL_ADC_PollForConversion+0xea>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023f4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	659a      	str	r2, [r3, #88]	; 0x58

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002400:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002404:	2b00      	cmp	r3, #0
 8002406:	d105      	bne.n	8002414 <HAL_ADC_PollForConversion+0xea>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800240c:	f043 0201 	orr.w	r2, r3, #1
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	659a      	str	r2, [r3, #88]	; 0x58
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
  }
#else
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	68db      	ldr	r3, [r3, #12]
 800241a:	60fb      	str	r3, [r7, #12]
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 800241c:	697b      	ldr	r3, [r7, #20]
 800241e:	2b08      	cmp	r3, #8
 8002420:	d104      	bne.n	800242c <HAL_ADC_PollForConversion+0x102>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	2208      	movs	r2, #8
 8002428:	601a      	str	r2, [r3, #0]
 800242a:	e008      	b.n	800243e <HAL_ADC_PollForConversion+0x114>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002432:	2b00      	cmp	r3, #0
 8002434:	d103      	bne.n	800243e <HAL_ADC_PollForConversion+0x114>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	220c      	movs	r2, #12
 800243c:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 800243e:	2300      	movs	r3, #0
}
 8002440:	4618      	mov	r0, r3
 8002442:	3718      	adds	r7, #24
 8002444:	46bd      	mov	sp, r7
 8002446:	bd80      	pop	{r7, pc}

08002448 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002448:	b480      	push	{r7}
 800244a:	b083      	sub	sp, #12
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002456:	4618      	mov	r0, r3
 8002458:	370c      	adds	r7, #12
 800245a:	46bd      	mov	sp, r7
 800245c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002460:	4770      	bx	lr
	...

08002464 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b0b6      	sub	sp, #216	; 0xd8
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
 800246c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800246e:	2300      	movs	r3, #0
 8002470:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002474:	2300      	movs	r3, #0
 8002476:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800247e:	2b01      	cmp	r3, #1
 8002480:	d101      	bne.n	8002486 <HAL_ADC_ConfigChannel+0x22>
 8002482:	2302      	movs	r3, #2
 8002484:	e3d5      	b.n	8002c32 <HAL_ADC_ConfigChannel+0x7ce>
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	2201      	movs	r2, #1
 800248a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	4618      	mov	r0, r3
 8002494:	f7ff fd73 	bl	8001f7e <LL_ADC_REG_IsConversionOngoing>
 8002498:	4603      	mov	r3, r0
 800249a:	2b00      	cmp	r3, #0
 800249c:	f040 83ba 	bne.w	8002c14 <HAL_ADC_ConfigChannel+0x7b0>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	2b05      	cmp	r3, #5
 80024a6:	d824      	bhi.n	80024f2 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	3b02      	subs	r3, #2
 80024ae:	2b03      	cmp	r3, #3
 80024b0:	d81b      	bhi.n	80024ea <HAL_ADC_ConfigChannel+0x86>
 80024b2:	a201      	add	r2, pc, #4	; (adr r2, 80024b8 <HAL_ADC_ConfigChannel+0x54>)
 80024b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024b8:	080024c9 	.word	0x080024c9
 80024bc:	080024d1 	.word	0x080024d1
 80024c0:	080024d9 	.word	0x080024d9
 80024c4:	080024e1 	.word	0x080024e1
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	220c      	movs	r2, #12
 80024cc:	605a      	str	r2, [r3, #4]
          break;
 80024ce:	e011      	b.n	80024f4 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	2212      	movs	r2, #18
 80024d4:	605a      	str	r2, [r3, #4]
          break;
 80024d6:	e00d      	b.n	80024f4 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	2218      	movs	r2, #24
 80024dc:	605a      	str	r2, [r3, #4]
          break;
 80024de:	e009      	b.n	80024f4 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80024e6:	605a      	str	r2, [r3, #4]
          break;
 80024e8:	e004      	b.n	80024f4 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	2206      	movs	r2, #6
 80024ee:	605a      	str	r2, [r3, #4]
          break;
 80024f0:	e000      	b.n	80024f4 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 80024f2:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6818      	ldr	r0, [r3, #0]
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	6859      	ldr	r1, [r3, #4]
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	461a      	mov	r2, r3
 8002502:	f7ff fc38 	bl	8001d76 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4618      	mov	r0, r3
 800250c:	f7ff fd37 	bl	8001f7e <LL_ADC_REG_IsConversionOngoing>
 8002510:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4618      	mov	r0, r3
 800251a:	f7ff fd43 	bl	8001fa4 <LL_ADC_INJ_IsConversionOngoing>
 800251e:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002522:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002526:	2b00      	cmp	r3, #0
 8002528:	f040 81c1 	bne.w	80028ae <HAL_ADC_ConfigChannel+0x44a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800252c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002530:	2b00      	cmp	r3, #0
 8002532:	f040 81bc 	bne.w	80028ae <HAL_ADC_ConfigChannel+0x44a>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	689b      	ldr	r3, [r3, #8]
 800253a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800253e:	d10f      	bne.n	8002560 <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6818      	ldr	r0, [r3, #0]
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	2200      	movs	r2, #0
 800254a:	4619      	mov	r1, r3
 800254c:	f7ff fc3f 	bl	8001dce <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8002558:	4618      	mov	r0, r3
 800255a:	f7ff fbe6 	bl	8001d2a <LL_ADC_SetSamplingTimeCommonConfig>
 800255e:	e00e      	b.n	800257e <HAL_ADC_ConfigChannel+0x11a>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6818      	ldr	r0, [r3, #0]
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	6819      	ldr	r1, [r3, #0]
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	689b      	ldr	r3, [r3, #8]
 800256c:	461a      	mov	r2, r3
 800256e:	f7ff fc2e 	bl	8001dce <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	2100      	movs	r1, #0
 8002578:	4618      	mov	r0, r3
 800257a:	f7ff fbd6 	bl	8001d2a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	695a      	ldr	r2, [r3, #20]
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	68db      	ldr	r3, [r3, #12]
 8002588:	08db      	lsrs	r3, r3, #3
 800258a:	f003 0303 	and.w	r3, r3, #3
 800258e:	005b      	lsls	r3, r3, #1
 8002590:	fa02 f303 	lsl.w	r3, r2, r3
 8002594:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	691b      	ldr	r3, [r3, #16]
 800259c:	2b04      	cmp	r3, #4
 800259e:	d00a      	beq.n	80025b6 <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6818      	ldr	r0, [r3, #0]
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	6919      	ldr	r1, [r3, #16]
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	681a      	ldr	r2, [r3, #0]
 80025ac:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80025b0:	f7ff fb66 	bl	8001c80 <LL_ADC_SetOffset>
 80025b4:	e17b      	b.n	80028ae <HAL_ADC_ConfigChannel+0x44a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	2100      	movs	r1, #0
 80025bc:	4618      	mov	r0, r3
 80025be:	f7ff fb83 	bl	8001cc8 <LL_ADC_GetOffsetChannel>
 80025c2:	4603      	mov	r3, r0
 80025c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d10a      	bne.n	80025e2 <HAL_ADC_ConfigChannel+0x17e>
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	2100      	movs	r1, #0
 80025d2:	4618      	mov	r0, r3
 80025d4:	f7ff fb78 	bl	8001cc8 <LL_ADC_GetOffsetChannel>
 80025d8:	4603      	mov	r3, r0
 80025da:	0e9b      	lsrs	r3, r3, #26
 80025dc:	f003 021f 	and.w	r2, r3, #31
 80025e0:	e01e      	b.n	8002620 <HAL_ADC_ConfigChannel+0x1bc>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	2100      	movs	r1, #0
 80025e8:	4618      	mov	r0, r3
 80025ea:	f7ff fb6d 	bl	8001cc8 <LL_ADC_GetOffsetChannel>
 80025ee:	4603      	mov	r3, r0
 80025f0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025f4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80025f8:	fa93 f3a3 	rbit	r3, r3
 80025fc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002600:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002604:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002608:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800260c:	2b00      	cmp	r3, #0
 800260e:	d101      	bne.n	8002614 <HAL_ADC_ConfigChannel+0x1b0>
  {
    return 32U;
 8002610:	2320      	movs	r3, #32
 8002612:	e004      	b.n	800261e <HAL_ADC_ConfigChannel+0x1ba>
  }
  return __builtin_clz(value);
 8002614:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002618:	fab3 f383 	clz	r3, r3
 800261c:	b2db      	uxtb	r3, r3
 800261e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002628:	2b00      	cmp	r3, #0
 800262a:	d105      	bne.n	8002638 <HAL_ADC_ConfigChannel+0x1d4>
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	0e9b      	lsrs	r3, r3, #26
 8002632:	f003 031f 	and.w	r3, r3, #31
 8002636:	e018      	b.n	800266a <HAL_ADC_ConfigChannel+0x206>
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002640:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002644:	fa93 f3a3 	rbit	r3, r3
 8002648:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 800264c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002650:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8002654:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002658:	2b00      	cmp	r3, #0
 800265a:	d101      	bne.n	8002660 <HAL_ADC_ConfigChannel+0x1fc>
    return 32U;
 800265c:	2320      	movs	r3, #32
 800265e:	e004      	b.n	800266a <HAL_ADC_ConfigChannel+0x206>
  return __builtin_clz(value);
 8002660:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002664:	fab3 f383 	clz	r3, r3
 8002668:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800266a:	429a      	cmp	r2, r3
 800266c:	d106      	bne.n	800267c <HAL_ADC_ConfigChannel+0x218>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	2200      	movs	r2, #0
 8002674:	2100      	movs	r1, #0
 8002676:	4618      	mov	r0, r3
 8002678:	f7ff fb3c 	bl	8001cf4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	2101      	movs	r1, #1
 8002682:	4618      	mov	r0, r3
 8002684:	f7ff fb20 	bl	8001cc8 <LL_ADC_GetOffsetChannel>
 8002688:	4603      	mov	r3, r0
 800268a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800268e:	2b00      	cmp	r3, #0
 8002690:	d10a      	bne.n	80026a8 <HAL_ADC_ConfigChannel+0x244>
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	2101      	movs	r1, #1
 8002698:	4618      	mov	r0, r3
 800269a:	f7ff fb15 	bl	8001cc8 <LL_ADC_GetOffsetChannel>
 800269e:	4603      	mov	r3, r0
 80026a0:	0e9b      	lsrs	r3, r3, #26
 80026a2:	f003 021f 	and.w	r2, r3, #31
 80026a6:	e01e      	b.n	80026e6 <HAL_ADC_ConfigChannel+0x282>
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	2101      	movs	r1, #1
 80026ae:	4618      	mov	r0, r3
 80026b0:	f7ff fb0a 	bl	8001cc8 <LL_ADC_GetOffsetChannel>
 80026b4:	4603      	mov	r3, r0
 80026b6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026ba:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80026be:	fa93 f3a3 	rbit	r3, r3
 80026c2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80026c6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80026ca:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80026ce:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d101      	bne.n	80026da <HAL_ADC_ConfigChannel+0x276>
    return 32U;
 80026d6:	2320      	movs	r3, #32
 80026d8:	e004      	b.n	80026e4 <HAL_ADC_ConfigChannel+0x280>
  return __builtin_clz(value);
 80026da:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80026de:	fab3 f383 	clz	r3, r3
 80026e2:	b2db      	uxtb	r3, r3
 80026e4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d105      	bne.n	80026fe <HAL_ADC_ConfigChannel+0x29a>
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	0e9b      	lsrs	r3, r3, #26
 80026f8:	f003 031f 	and.w	r3, r3, #31
 80026fc:	e018      	b.n	8002730 <HAL_ADC_ConfigChannel+0x2cc>
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002706:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800270a:	fa93 f3a3 	rbit	r3, r3
 800270e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002712:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002716:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 800271a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800271e:	2b00      	cmp	r3, #0
 8002720:	d101      	bne.n	8002726 <HAL_ADC_ConfigChannel+0x2c2>
    return 32U;
 8002722:	2320      	movs	r3, #32
 8002724:	e004      	b.n	8002730 <HAL_ADC_ConfigChannel+0x2cc>
  return __builtin_clz(value);
 8002726:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800272a:	fab3 f383 	clz	r3, r3
 800272e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002730:	429a      	cmp	r2, r3
 8002732:	d106      	bne.n	8002742 <HAL_ADC_ConfigChannel+0x2de>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	2200      	movs	r2, #0
 800273a:	2101      	movs	r1, #1
 800273c:	4618      	mov	r0, r3
 800273e:	f7ff fad9 	bl	8001cf4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	2102      	movs	r1, #2
 8002748:	4618      	mov	r0, r3
 800274a:	f7ff fabd 	bl	8001cc8 <LL_ADC_GetOffsetChannel>
 800274e:	4603      	mov	r3, r0
 8002750:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002754:	2b00      	cmp	r3, #0
 8002756:	d10a      	bne.n	800276e <HAL_ADC_ConfigChannel+0x30a>
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	2102      	movs	r1, #2
 800275e:	4618      	mov	r0, r3
 8002760:	f7ff fab2 	bl	8001cc8 <LL_ADC_GetOffsetChannel>
 8002764:	4603      	mov	r3, r0
 8002766:	0e9b      	lsrs	r3, r3, #26
 8002768:	f003 021f 	and.w	r2, r3, #31
 800276c:	e01e      	b.n	80027ac <HAL_ADC_ConfigChannel+0x348>
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	2102      	movs	r1, #2
 8002774:	4618      	mov	r0, r3
 8002776:	f7ff faa7 	bl	8001cc8 <LL_ADC_GetOffsetChannel>
 800277a:	4603      	mov	r3, r0
 800277c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002780:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002784:	fa93 f3a3 	rbit	r3, r3
 8002788:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 800278c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002790:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002794:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002798:	2b00      	cmp	r3, #0
 800279a:	d101      	bne.n	80027a0 <HAL_ADC_ConfigChannel+0x33c>
    return 32U;
 800279c:	2320      	movs	r3, #32
 800279e:	e004      	b.n	80027aa <HAL_ADC_ConfigChannel+0x346>
  return __builtin_clz(value);
 80027a0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80027a4:	fab3 f383 	clz	r3, r3
 80027a8:	b2db      	uxtb	r3, r3
 80027aa:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d105      	bne.n	80027c4 <HAL_ADC_ConfigChannel+0x360>
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	0e9b      	lsrs	r3, r3, #26
 80027be:	f003 031f 	and.w	r3, r3, #31
 80027c2:	e016      	b.n	80027f2 <HAL_ADC_ConfigChannel+0x38e>
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027cc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80027d0:	fa93 f3a3 	rbit	r3, r3
 80027d4:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80027d6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80027d8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80027dc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d101      	bne.n	80027e8 <HAL_ADC_ConfigChannel+0x384>
    return 32U;
 80027e4:	2320      	movs	r3, #32
 80027e6:	e004      	b.n	80027f2 <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 80027e8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80027ec:	fab3 f383 	clz	r3, r3
 80027f0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80027f2:	429a      	cmp	r2, r3
 80027f4:	d106      	bne.n	8002804 <HAL_ADC_ConfigChannel+0x3a0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	2200      	movs	r2, #0
 80027fc:	2102      	movs	r1, #2
 80027fe:	4618      	mov	r0, r3
 8002800:	f7ff fa78 	bl	8001cf4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	2103      	movs	r1, #3
 800280a:	4618      	mov	r0, r3
 800280c:	f7ff fa5c 	bl	8001cc8 <LL_ADC_GetOffsetChannel>
 8002810:	4603      	mov	r3, r0
 8002812:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002816:	2b00      	cmp	r3, #0
 8002818:	d10a      	bne.n	8002830 <HAL_ADC_ConfigChannel+0x3cc>
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	2103      	movs	r1, #3
 8002820:	4618      	mov	r0, r3
 8002822:	f7ff fa51 	bl	8001cc8 <LL_ADC_GetOffsetChannel>
 8002826:	4603      	mov	r3, r0
 8002828:	0e9b      	lsrs	r3, r3, #26
 800282a:	f003 021f 	and.w	r2, r3, #31
 800282e:	e017      	b.n	8002860 <HAL_ADC_ConfigChannel+0x3fc>
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	2103      	movs	r1, #3
 8002836:	4618      	mov	r0, r3
 8002838:	f7ff fa46 	bl	8001cc8 <LL_ADC_GetOffsetChannel>
 800283c:	4603      	mov	r3, r0
 800283e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002840:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002842:	fa93 f3a3 	rbit	r3, r3
 8002846:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002848:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800284a:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 800284c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800284e:	2b00      	cmp	r3, #0
 8002850:	d101      	bne.n	8002856 <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 8002852:	2320      	movs	r3, #32
 8002854:	e003      	b.n	800285e <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 8002856:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002858:	fab3 f383 	clz	r3, r3
 800285c:	b2db      	uxtb	r3, r3
 800285e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002868:	2b00      	cmp	r3, #0
 800286a:	d105      	bne.n	8002878 <HAL_ADC_ConfigChannel+0x414>
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	0e9b      	lsrs	r3, r3, #26
 8002872:	f003 031f 	and.w	r3, r3, #31
 8002876:	e011      	b.n	800289c <HAL_ADC_ConfigChannel+0x438>
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800287e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002880:	fa93 f3a3 	rbit	r3, r3
 8002884:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002886:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002888:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 800288a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800288c:	2b00      	cmp	r3, #0
 800288e:	d101      	bne.n	8002894 <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 8002890:	2320      	movs	r3, #32
 8002892:	e003      	b.n	800289c <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 8002894:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002896:	fab3 f383 	clz	r3, r3
 800289a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800289c:	429a      	cmp	r2, r3
 800289e:	d106      	bne.n	80028ae <HAL_ADC_ConfigChannel+0x44a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	2200      	movs	r2, #0
 80028a6:	2103      	movs	r1, #3
 80028a8:	4618      	mov	r0, r3
 80028aa:	f7ff fa23 	bl	8001cf4 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4618      	mov	r0, r3
 80028b4:	f7ff fb3c 	bl	8001f30 <LL_ADC_IsEnabled>
 80028b8:	4603      	mov	r3, r0
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	f040 8140 	bne.w	8002b40 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6818      	ldr	r0, [r3, #0]
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	6819      	ldr	r1, [r3, #0]
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	68db      	ldr	r3, [r3, #12]
 80028cc:	461a      	mov	r2, r3
 80028ce:	f7ff faa9 	bl	8001e24 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	68db      	ldr	r3, [r3, #12]
 80028d6:	4a8f      	ldr	r2, [pc, #572]	; (8002b14 <HAL_ADC_ConfigChannel+0x6b0>)
 80028d8:	4293      	cmp	r3, r2
 80028da:	f040 8131 	bne.w	8002b40 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d10b      	bne.n	8002906 <HAL_ADC_ConfigChannel+0x4a2>
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	0e9b      	lsrs	r3, r3, #26
 80028f4:	3301      	adds	r3, #1
 80028f6:	f003 031f 	and.w	r3, r3, #31
 80028fa:	2b09      	cmp	r3, #9
 80028fc:	bf94      	ite	ls
 80028fe:	2301      	movls	r3, #1
 8002900:	2300      	movhi	r3, #0
 8002902:	b2db      	uxtb	r3, r3
 8002904:	e019      	b.n	800293a <HAL_ADC_ConfigChannel+0x4d6>
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800290c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800290e:	fa93 f3a3 	rbit	r3, r3
 8002912:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002914:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002916:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002918:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800291a:	2b00      	cmp	r3, #0
 800291c:	d101      	bne.n	8002922 <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 800291e:	2320      	movs	r3, #32
 8002920:	e003      	b.n	800292a <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 8002922:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002924:	fab3 f383 	clz	r3, r3
 8002928:	b2db      	uxtb	r3, r3
 800292a:	3301      	adds	r3, #1
 800292c:	f003 031f 	and.w	r3, r3, #31
 8002930:	2b09      	cmp	r3, #9
 8002932:	bf94      	ite	ls
 8002934:	2301      	movls	r3, #1
 8002936:	2300      	movhi	r3, #0
 8002938:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800293a:	2b00      	cmp	r3, #0
 800293c:	d079      	beq.n	8002a32 <HAL_ADC_ConfigChannel+0x5ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002946:	2b00      	cmp	r3, #0
 8002948:	d107      	bne.n	800295a <HAL_ADC_ConfigChannel+0x4f6>
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	0e9b      	lsrs	r3, r3, #26
 8002950:	3301      	adds	r3, #1
 8002952:	069b      	lsls	r3, r3, #26
 8002954:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002958:	e015      	b.n	8002986 <HAL_ADC_ConfigChannel+0x522>
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002960:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002962:	fa93 f3a3 	rbit	r3, r3
 8002966:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002968:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800296a:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 800296c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800296e:	2b00      	cmp	r3, #0
 8002970:	d101      	bne.n	8002976 <HAL_ADC_ConfigChannel+0x512>
    return 32U;
 8002972:	2320      	movs	r3, #32
 8002974:	e003      	b.n	800297e <HAL_ADC_ConfigChannel+0x51a>
  return __builtin_clz(value);
 8002976:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002978:	fab3 f383 	clz	r3, r3
 800297c:	b2db      	uxtb	r3, r3
 800297e:	3301      	adds	r3, #1
 8002980:	069b      	lsls	r3, r3, #26
 8002982:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800298e:	2b00      	cmp	r3, #0
 8002990:	d109      	bne.n	80029a6 <HAL_ADC_ConfigChannel+0x542>
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	0e9b      	lsrs	r3, r3, #26
 8002998:	3301      	adds	r3, #1
 800299a:	f003 031f 	and.w	r3, r3, #31
 800299e:	2101      	movs	r1, #1
 80029a0:	fa01 f303 	lsl.w	r3, r1, r3
 80029a4:	e017      	b.n	80029d6 <HAL_ADC_ConfigChannel+0x572>
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80029ae:	fa93 f3a3 	rbit	r3, r3
 80029b2:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80029b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80029b6:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80029b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d101      	bne.n	80029c2 <HAL_ADC_ConfigChannel+0x55e>
    return 32U;
 80029be:	2320      	movs	r3, #32
 80029c0:	e003      	b.n	80029ca <HAL_ADC_ConfigChannel+0x566>
  return __builtin_clz(value);
 80029c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80029c4:	fab3 f383 	clz	r3, r3
 80029c8:	b2db      	uxtb	r3, r3
 80029ca:	3301      	adds	r3, #1
 80029cc:	f003 031f 	and.w	r3, r3, #31
 80029d0:	2101      	movs	r1, #1
 80029d2:	fa01 f303 	lsl.w	r3, r1, r3
 80029d6:	ea42 0103 	orr.w	r1, r2, r3
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d10a      	bne.n	80029fc <HAL_ADC_ConfigChannel+0x598>
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	0e9b      	lsrs	r3, r3, #26
 80029ec:	3301      	adds	r3, #1
 80029ee:	f003 021f 	and.w	r2, r3, #31
 80029f2:	4613      	mov	r3, r2
 80029f4:	005b      	lsls	r3, r3, #1
 80029f6:	4413      	add	r3, r2
 80029f8:	051b      	lsls	r3, r3, #20
 80029fa:	e018      	b.n	8002a2e <HAL_ADC_ConfigChannel+0x5ca>
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a04:	fa93 f3a3 	rbit	r3, r3
 8002a08:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002a0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a0c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002a0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d101      	bne.n	8002a18 <HAL_ADC_ConfigChannel+0x5b4>
    return 32U;
 8002a14:	2320      	movs	r3, #32
 8002a16:	e003      	b.n	8002a20 <HAL_ADC_ConfigChannel+0x5bc>
  return __builtin_clz(value);
 8002a18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a1a:	fab3 f383 	clz	r3, r3
 8002a1e:	b2db      	uxtb	r3, r3
 8002a20:	3301      	adds	r3, #1
 8002a22:	f003 021f 	and.w	r2, r3, #31
 8002a26:	4613      	mov	r3, r2
 8002a28:	005b      	lsls	r3, r3, #1
 8002a2a:	4413      	add	r3, r2
 8002a2c:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002a2e:	430b      	orrs	r3, r1
 8002a30:	e081      	b.n	8002b36 <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d107      	bne.n	8002a4e <HAL_ADC_ConfigChannel+0x5ea>
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	0e9b      	lsrs	r3, r3, #26
 8002a44:	3301      	adds	r3, #1
 8002a46:	069b      	lsls	r3, r3, #26
 8002a48:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002a4c:	e015      	b.n	8002a7a <HAL_ADC_ConfigChannel+0x616>
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a56:	fa93 f3a3 	rbit	r3, r3
 8002a5a:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002a5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a5e:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002a60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d101      	bne.n	8002a6a <HAL_ADC_ConfigChannel+0x606>
    return 32U;
 8002a66:	2320      	movs	r3, #32
 8002a68:	e003      	b.n	8002a72 <HAL_ADC_ConfigChannel+0x60e>
  return __builtin_clz(value);
 8002a6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a6c:	fab3 f383 	clz	r3, r3
 8002a70:	b2db      	uxtb	r3, r3
 8002a72:	3301      	adds	r3, #1
 8002a74:	069b      	lsls	r3, r3, #26
 8002a76:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d109      	bne.n	8002a9a <HAL_ADC_ConfigChannel+0x636>
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	0e9b      	lsrs	r3, r3, #26
 8002a8c:	3301      	adds	r3, #1
 8002a8e:	f003 031f 	and.w	r3, r3, #31
 8002a92:	2101      	movs	r1, #1
 8002a94:	fa01 f303 	lsl.w	r3, r1, r3
 8002a98:	e017      	b.n	8002aca <HAL_ADC_ConfigChannel+0x666>
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aa0:	6a3b      	ldr	r3, [r7, #32]
 8002aa2:	fa93 f3a3 	rbit	r3, r3
 8002aa6:	61fb      	str	r3, [r7, #28]
  return result;
 8002aa8:	69fb      	ldr	r3, [r7, #28]
 8002aaa:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d101      	bne.n	8002ab6 <HAL_ADC_ConfigChannel+0x652>
    return 32U;
 8002ab2:	2320      	movs	r3, #32
 8002ab4:	e003      	b.n	8002abe <HAL_ADC_ConfigChannel+0x65a>
  return __builtin_clz(value);
 8002ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ab8:	fab3 f383 	clz	r3, r3
 8002abc:	b2db      	uxtb	r3, r3
 8002abe:	3301      	adds	r3, #1
 8002ac0:	f003 031f 	and.w	r3, r3, #31
 8002ac4:	2101      	movs	r1, #1
 8002ac6:	fa01 f303 	lsl.w	r3, r1, r3
 8002aca:	ea42 0103 	orr.w	r1, r2, r3
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d10d      	bne.n	8002af6 <HAL_ADC_ConfigChannel+0x692>
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	0e9b      	lsrs	r3, r3, #26
 8002ae0:	3301      	adds	r3, #1
 8002ae2:	f003 021f 	and.w	r2, r3, #31
 8002ae6:	4613      	mov	r3, r2
 8002ae8:	005b      	lsls	r3, r3, #1
 8002aea:	4413      	add	r3, r2
 8002aec:	3b1e      	subs	r3, #30
 8002aee:	051b      	lsls	r3, r3, #20
 8002af0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002af4:	e01e      	b.n	8002b34 <HAL_ADC_ConfigChannel+0x6d0>
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002afc:	697b      	ldr	r3, [r7, #20]
 8002afe:	fa93 f3a3 	rbit	r3, r3
 8002b02:	613b      	str	r3, [r7, #16]
  return result;
 8002b04:	693b      	ldr	r3, [r7, #16]
 8002b06:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002b08:	69bb      	ldr	r3, [r7, #24]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d104      	bne.n	8002b18 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8002b0e:	2320      	movs	r3, #32
 8002b10:	e006      	b.n	8002b20 <HAL_ADC_ConfigChannel+0x6bc>
 8002b12:	bf00      	nop
 8002b14:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002b18:	69bb      	ldr	r3, [r7, #24]
 8002b1a:	fab3 f383 	clz	r3, r3
 8002b1e:	b2db      	uxtb	r3, r3
 8002b20:	3301      	adds	r3, #1
 8002b22:	f003 021f 	and.w	r2, r3, #31
 8002b26:	4613      	mov	r3, r2
 8002b28:	005b      	lsls	r3, r3, #1
 8002b2a:	4413      	add	r3, r2
 8002b2c:	3b1e      	subs	r3, #30
 8002b2e:	051b      	lsls	r3, r3, #20
 8002b30:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002b34:	430b      	orrs	r3, r1
 8002b36:	683a      	ldr	r2, [r7, #0]
 8002b38:	6892      	ldr	r2, [r2, #8]
 8002b3a:	4619      	mov	r1, r3
 8002b3c:	f7ff f947 	bl	8001dce <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	681a      	ldr	r2, [r3, #0]
 8002b44:	4b3d      	ldr	r3, [pc, #244]	; (8002c3c <HAL_ADC_ConfigChannel+0x7d8>)
 8002b46:	4013      	ands	r3, r2
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d06c      	beq.n	8002c26 <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002b4c:	483c      	ldr	r0, [pc, #240]	; (8002c40 <HAL_ADC_ConfigChannel+0x7dc>)
 8002b4e:	f7ff f889 	bl	8001c64 <LL_ADC_GetCommonPathInternalCh>
 8002b52:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4a3a      	ldr	r2, [pc, #232]	; (8002c44 <HAL_ADC_ConfigChannel+0x7e0>)
 8002b5c:	4293      	cmp	r3, r2
 8002b5e:	d127      	bne.n	8002bb0 <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002b60:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002b64:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d121      	bne.n	8002bb0 <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4a35      	ldr	r2, [pc, #212]	; (8002c48 <HAL_ADC_ConfigChannel+0x7e4>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d157      	bne.n	8002c26 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002b76:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002b7a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002b7e:	4619      	mov	r1, r3
 8002b80:	482f      	ldr	r0, [pc, #188]	; (8002c40 <HAL_ADC_ConfigChannel+0x7dc>)
 8002b82:	f7ff f85c 	bl	8001c3e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002b86:	4b31      	ldr	r3, [pc, #196]	; (8002c4c <HAL_ADC_ConfigChannel+0x7e8>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	099b      	lsrs	r3, r3, #6
 8002b8c:	4a30      	ldr	r2, [pc, #192]	; (8002c50 <HAL_ADC_ConfigChannel+0x7ec>)
 8002b8e:	fba2 2303 	umull	r2, r3, r2, r3
 8002b92:	099b      	lsrs	r3, r3, #6
 8002b94:	1c5a      	adds	r2, r3, #1
 8002b96:	4613      	mov	r3, r2
 8002b98:	005b      	lsls	r3, r3, #1
 8002b9a:	4413      	add	r3, r2
 8002b9c:	009b      	lsls	r3, r3, #2
 8002b9e:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002ba0:	e002      	b.n	8002ba8 <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	3b01      	subs	r3, #1
 8002ba6:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d1f9      	bne.n	8002ba2 <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002bae:	e03a      	b.n	8002c26 <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4a27      	ldr	r2, [pc, #156]	; (8002c54 <HAL_ADC_ConfigChannel+0x7f0>)
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d113      	bne.n	8002be2 <HAL_ADC_ConfigChannel+0x77e>
 8002bba:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002bbe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d10d      	bne.n	8002be2 <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4a1f      	ldr	r2, [pc, #124]	; (8002c48 <HAL_ADC_ConfigChannel+0x7e4>)
 8002bcc:	4293      	cmp	r3, r2
 8002bce:	d12a      	bne.n	8002c26 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002bd0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002bd4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002bd8:	4619      	mov	r1, r3
 8002bda:	4819      	ldr	r0, [pc, #100]	; (8002c40 <HAL_ADC_ConfigChannel+0x7dc>)
 8002bdc:	f7ff f82f 	bl	8001c3e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002be0:	e021      	b.n	8002c26 <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4a1c      	ldr	r2, [pc, #112]	; (8002c58 <HAL_ADC_ConfigChannel+0x7f4>)
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d11c      	bne.n	8002c26 <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002bec:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002bf0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d116      	bne.n	8002c26 <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4a12      	ldr	r2, [pc, #72]	; (8002c48 <HAL_ADC_ConfigChannel+0x7e4>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d111      	bne.n	8002c26 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002c02:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002c06:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002c0a:	4619      	mov	r1, r3
 8002c0c:	480c      	ldr	r0, [pc, #48]	; (8002c40 <HAL_ADC_ConfigChannel+0x7dc>)
 8002c0e:	f7ff f816 	bl	8001c3e <LL_ADC_SetCommonPathInternalCh>
 8002c12:	e008      	b.n	8002c26 <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c18:	f043 0220 	orr.w	r2, r3, #32
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002c20:	2301      	movs	r3, #1
 8002c22:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2200      	movs	r2, #0
 8002c2a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8002c2e:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002c32:	4618      	mov	r0, r3
 8002c34:	37d8      	adds	r7, #216	; 0xd8
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bd80      	pop	{r7, pc}
 8002c3a:	bf00      	nop
 8002c3c:	80080000 	.word	0x80080000
 8002c40:	50040300 	.word	0x50040300
 8002c44:	c7520000 	.word	0xc7520000
 8002c48:	50040000 	.word	0x50040000
 8002c4c:	20000004 	.word	0x20000004
 8002c50:	053e2d63 	.word	0x053e2d63
 8002c54:	cb840000 	.word	0xcb840000
 8002c58:	80000001 	.word	0x80000001

08002c5c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b084      	sub	sp, #16
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002c64:	2300      	movs	r3, #0
 8002c66:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	f7ff f95f 	bl	8001f30 <LL_ADC_IsEnabled>
 8002c72:	4603      	mov	r3, r0
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d169      	bne.n	8002d4c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	689a      	ldr	r2, [r3, #8]
 8002c7e:	4b36      	ldr	r3, [pc, #216]	; (8002d58 <ADC_Enable+0xfc>)
 8002c80:	4013      	ands	r3, r2
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d00d      	beq.n	8002ca2 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c8a:	f043 0210 	orr.w	r2, r3, #16
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c96:	f043 0201 	orr.w	r2, r3, #1
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	e055      	b.n	8002d4e <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	f7ff f92e 	bl	8001f08 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002cac:	482b      	ldr	r0, [pc, #172]	; (8002d5c <ADC_Enable+0x100>)
 8002cae:	f7fe ffd9 	bl	8001c64 <LL_ADC_GetCommonPathInternalCh>
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d013      	beq.n	8002ce4 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002cbc:	4b28      	ldr	r3, [pc, #160]	; (8002d60 <ADC_Enable+0x104>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	099b      	lsrs	r3, r3, #6
 8002cc2:	4a28      	ldr	r2, [pc, #160]	; (8002d64 <ADC_Enable+0x108>)
 8002cc4:	fba2 2303 	umull	r2, r3, r2, r3
 8002cc8:	099b      	lsrs	r3, r3, #6
 8002cca:	1c5a      	adds	r2, r3, #1
 8002ccc:	4613      	mov	r3, r2
 8002cce:	005b      	lsls	r3, r3, #1
 8002cd0:	4413      	add	r3, r2
 8002cd2:	009b      	lsls	r3, r3, #2
 8002cd4:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8002cd6:	e002      	b.n	8002cde <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8002cd8:	68bb      	ldr	r3, [r7, #8]
 8002cda:	3b01      	subs	r3, #1
 8002cdc:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8002cde:	68bb      	ldr	r3, [r7, #8]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d1f9      	bne.n	8002cd8 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002ce4:	f7fe ff68 	bl	8001bb8 <HAL_GetTick>
 8002ce8:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002cea:	e028      	b.n	8002d3e <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	f7ff f91d 	bl	8001f30 <LL_ADC_IsEnabled>
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d104      	bne.n	8002d06 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4618      	mov	r0, r3
 8002d02:	f7ff f901 	bl	8001f08 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002d06:	f7fe ff57 	bl	8001bb8 <HAL_GetTick>
 8002d0a:	4602      	mov	r2, r0
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	1ad3      	subs	r3, r2, r3
 8002d10:	2b02      	cmp	r3, #2
 8002d12:	d914      	bls.n	8002d3e <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f003 0301 	and.w	r3, r3, #1
 8002d1e:	2b01      	cmp	r3, #1
 8002d20:	d00d      	beq.n	8002d3e <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d26:	f043 0210 	orr.w	r2, r3, #16
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d32:	f043 0201 	orr.w	r2, r3, #1
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	e007      	b.n	8002d4e <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f003 0301 	and.w	r3, r3, #1
 8002d48:	2b01      	cmp	r3, #1
 8002d4a:	d1cf      	bne.n	8002cec <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002d4c:	2300      	movs	r3, #0
}
 8002d4e:	4618      	mov	r0, r3
 8002d50:	3710      	adds	r7, #16
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bd80      	pop	{r7, pc}
 8002d56:	bf00      	nop
 8002d58:	8000003f 	.word	0x8000003f
 8002d5c:	50040300 	.word	0x50040300
 8002d60:	20000004 	.word	0x20000004
 8002d64:	053e2d63 	.word	0x053e2d63

08002d68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	b085      	sub	sp, #20
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	f003 0307 	and.w	r3, r3, #7
 8002d76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d78:	4b0c      	ldr	r3, [pc, #48]	; (8002dac <__NVIC_SetPriorityGrouping+0x44>)
 8002d7a:	68db      	ldr	r3, [r3, #12]
 8002d7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d7e:	68ba      	ldr	r2, [r7, #8]
 8002d80:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002d84:	4013      	ands	r3, r2
 8002d86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d8c:	68bb      	ldr	r3, [r7, #8]
 8002d8e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d90:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002d94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d9a:	4a04      	ldr	r2, [pc, #16]	; (8002dac <__NVIC_SetPriorityGrouping+0x44>)
 8002d9c:	68bb      	ldr	r3, [r7, #8]
 8002d9e:	60d3      	str	r3, [r2, #12]
}
 8002da0:	bf00      	nop
 8002da2:	3714      	adds	r7, #20
 8002da4:	46bd      	mov	sp, r7
 8002da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002daa:	4770      	bx	lr
 8002dac:	e000ed00 	.word	0xe000ed00

08002db0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002db0:	b480      	push	{r7}
 8002db2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002db4:	4b04      	ldr	r3, [pc, #16]	; (8002dc8 <__NVIC_GetPriorityGrouping+0x18>)
 8002db6:	68db      	ldr	r3, [r3, #12]
 8002db8:	0a1b      	lsrs	r3, r3, #8
 8002dba:	f003 0307 	and.w	r3, r3, #7
}
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc6:	4770      	bx	lr
 8002dc8:	e000ed00 	.word	0xe000ed00

08002dcc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002dcc:	b480      	push	{r7}
 8002dce:	b083      	sub	sp, #12
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002dd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	db0b      	blt.n	8002df6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002dde:	79fb      	ldrb	r3, [r7, #7]
 8002de0:	f003 021f 	and.w	r2, r3, #31
 8002de4:	4907      	ldr	r1, [pc, #28]	; (8002e04 <__NVIC_EnableIRQ+0x38>)
 8002de6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dea:	095b      	lsrs	r3, r3, #5
 8002dec:	2001      	movs	r0, #1
 8002dee:	fa00 f202 	lsl.w	r2, r0, r2
 8002df2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002df6:	bf00      	nop
 8002df8:	370c      	adds	r7, #12
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e00:	4770      	bx	lr
 8002e02:	bf00      	nop
 8002e04:	e000e100 	.word	0xe000e100

08002e08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e08:	b480      	push	{r7}
 8002e0a:	b083      	sub	sp, #12
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	4603      	mov	r3, r0
 8002e10:	6039      	str	r1, [r7, #0]
 8002e12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	db0a      	blt.n	8002e32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	b2da      	uxtb	r2, r3
 8002e20:	490c      	ldr	r1, [pc, #48]	; (8002e54 <__NVIC_SetPriority+0x4c>)
 8002e22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e26:	0112      	lsls	r2, r2, #4
 8002e28:	b2d2      	uxtb	r2, r2
 8002e2a:	440b      	add	r3, r1
 8002e2c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e30:	e00a      	b.n	8002e48 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	b2da      	uxtb	r2, r3
 8002e36:	4908      	ldr	r1, [pc, #32]	; (8002e58 <__NVIC_SetPriority+0x50>)
 8002e38:	79fb      	ldrb	r3, [r7, #7]
 8002e3a:	f003 030f 	and.w	r3, r3, #15
 8002e3e:	3b04      	subs	r3, #4
 8002e40:	0112      	lsls	r2, r2, #4
 8002e42:	b2d2      	uxtb	r2, r2
 8002e44:	440b      	add	r3, r1
 8002e46:	761a      	strb	r2, [r3, #24]
}
 8002e48:	bf00      	nop
 8002e4a:	370c      	adds	r7, #12
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e52:	4770      	bx	lr
 8002e54:	e000e100 	.word	0xe000e100
 8002e58:	e000ed00 	.word	0xe000ed00

08002e5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	b089      	sub	sp, #36	; 0x24
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	60f8      	str	r0, [r7, #12]
 8002e64:	60b9      	str	r1, [r7, #8]
 8002e66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	f003 0307 	and.w	r3, r3, #7
 8002e6e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e70:	69fb      	ldr	r3, [r7, #28]
 8002e72:	f1c3 0307 	rsb	r3, r3, #7
 8002e76:	2b04      	cmp	r3, #4
 8002e78:	bf28      	it	cs
 8002e7a:	2304      	movcs	r3, #4
 8002e7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e7e:	69fb      	ldr	r3, [r7, #28]
 8002e80:	3304      	adds	r3, #4
 8002e82:	2b06      	cmp	r3, #6
 8002e84:	d902      	bls.n	8002e8c <NVIC_EncodePriority+0x30>
 8002e86:	69fb      	ldr	r3, [r7, #28]
 8002e88:	3b03      	subs	r3, #3
 8002e8a:	e000      	b.n	8002e8e <NVIC_EncodePriority+0x32>
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e90:	f04f 32ff 	mov.w	r2, #4294967295
 8002e94:	69bb      	ldr	r3, [r7, #24]
 8002e96:	fa02 f303 	lsl.w	r3, r2, r3
 8002e9a:	43da      	mvns	r2, r3
 8002e9c:	68bb      	ldr	r3, [r7, #8]
 8002e9e:	401a      	ands	r2, r3
 8002ea0:	697b      	ldr	r3, [r7, #20]
 8002ea2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ea4:	f04f 31ff 	mov.w	r1, #4294967295
 8002ea8:	697b      	ldr	r3, [r7, #20]
 8002eaa:	fa01 f303 	lsl.w	r3, r1, r3
 8002eae:	43d9      	mvns	r1, r3
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002eb4:	4313      	orrs	r3, r2
         );
}
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	3724      	adds	r7, #36	; 0x24
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec0:	4770      	bx	lr
	...

08002ec4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b082      	sub	sp, #8
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	3b01      	subs	r3, #1
 8002ed0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002ed4:	d301      	bcc.n	8002eda <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	e00f      	b.n	8002efa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002eda:	4a0a      	ldr	r2, [pc, #40]	; (8002f04 <SysTick_Config+0x40>)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	3b01      	subs	r3, #1
 8002ee0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002ee2:	210f      	movs	r1, #15
 8002ee4:	f04f 30ff 	mov.w	r0, #4294967295
 8002ee8:	f7ff ff8e 	bl	8002e08 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002eec:	4b05      	ldr	r3, [pc, #20]	; (8002f04 <SysTick_Config+0x40>)
 8002eee:	2200      	movs	r2, #0
 8002ef0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002ef2:	4b04      	ldr	r3, [pc, #16]	; (8002f04 <SysTick_Config+0x40>)
 8002ef4:	2207      	movs	r2, #7
 8002ef6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002ef8:	2300      	movs	r3, #0
}
 8002efa:	4618      	mov	r0, r3
 8002efc:	3708      	adds	r7, #8
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bd80      	pop	{r7, pc}
 8002f02:	bf00      	nop
 8002f04:	e000e010 	.word	0xe000e010

08002f08 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b082      	sub	sp, #8
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f10:	6878      	ldr	r0, [r7, #4]
 8002f12:	f7ff ff29 	bl	8002d68 <__NVIC_SetPriorityGrouping>
}
 8002f16:	bf00      	nop
 8002f18:	3708      	adds	r7, #8
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bd80      	pop	{r7, pc}

08002f1e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f1e:	b580      	push	{r7, lr}
 8002f20:	b086      	sub	sp, #24
 8002f22:	af00      	add	r7, sp, #0
 8002f24:	4603      	mov	r3, r0
 8002f26:	60b9      	str	r1, [r7, #8]
 8002f28:	607a      	str	r2, [r7, #4]
 8002f2a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002f30:	f7ff ff3e 	bl	8002db0 <__NVIC_GetPriorityGrouping>
 8002f34:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f36:	687a      	ldr	r2, [r7, #4]
 8002f38:	68b9      	ldr	r1, [r7, #8]
 8002f3a:	6978      	ldr	r0, [r7, #20]
 8002f3c:	f7ff ff8e 	bl	8002e5c <NVIC_EncodePriority>
 8002f40:	4602      	mov	r2, r0
 8002f42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f46:	4611      	mov	r1, r2
 8002f48:	4618      	mov	r0, r3
 8002f4a:	f7ff ff5d 	bl	8002e08 <__NVIC_SetPriority>
}
 8002f4e:	bf00      	nop
 8002f50:	3718      	adds	r7, #24
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bd80      	pop	{r7, pc}

08002f56 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f56:	b580      	push	{r7, lr}
 8002f58:	b082      	sub	sp, #8
 8002f5a:	af00      	add	r7, sp, #0
 8002f5c:	4603      	mov	r3, r0
 8002f5e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f64:	4618      	mov	r0, r3
 8002f66:	f7ff ff31 	bl	8002dcc <__NVIC_EnableIRQ>
}
 8002f6a:	bf00      	nop
 8002f6c:	3708      	adds	r7, #8
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bd80      	pop	{r7, pc}

08002f72 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002f72:	b580      	push	{r7, lr}
 8002f74:	b082      	sub	sp, #8
 8002f76:	af00      	add	r7, sp, #0
 8002f78:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002f7a:	6878      	ldr	r0, [r7, #4]
 8002f7c:	f7ff ffa2 	bl	8002ec4 <SysTick_Config>
 8002f80:	4603      	mov	r3, r0
}
 8002f82:	4618      	mov	r0, r3
 8002f84:	3708      	adds	r7, #8
 8002f86:	46bd      	mov	sp, r7
 8002f88:	bd80      	pop	{r7, pc}

08002f8a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002f8a:	b480      	push	{r7}
 8002f8c:	b085      	sub	sp, #20
 8002f8e:	af00      	add	r7, sp, #0
 8002f90:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f92:	2300      	movs	r3, #0
 8002f94:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002f9c:	b2db      	uxtb	r3, r3
 8002f9e:	2b02      	cmp	r3, #2
 8002fa0:	d008      	beq.n	8002fb4 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2204      	movs	r2, #4
 8002fa6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2200      	movs	r2, #0
 8002fac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	e022      	b.n	8002ffa <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	681a      	ldr	r2, [r3, #0]
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f022 020e 	bic.w	r2, r2, #14
 8002fc2:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	681a      	ldr	r2, [r3, #0]
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f022 0201 	bic.w	r2, r2, #1
 8002fd2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fd8:	f003 021c 	and.w	r2, r3, #28
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fe0:	2101      	movs	r1, #1
 8002fe2:	fa01 f202 	lsl.w	r2, r1, r2
 8002fe6:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2201      	movs	r2, #1
 8002fec:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8002ff8:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	3714      	adds	r7, #20
 8002ffe:	46bd      	mov	sp, r7
 8003000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003004:	4770      	bx	lr

08003006 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003006:	b580      	push	{r7, lr}
 8003008:	b084      	sub	sp, #16
 800300a:	af00      	add	r7, sp, #0
 800300c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800300e:	2300      	movs	r3, #0
 8003010:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003018:	b2db      	uxtb	r3, r3
 800301a:	2b02      	cmp	r3, #2
 800301c:	d005      	beq.n	800302a <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2204      	movs	r2, #4
 8003022:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8003024:	2301      	movs	r3, #1
 8003026:	73fb      	strb	r3, [r7, #15]
 8003028:	e029      	b.n	800307e <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	681a      	ldr	r2, [r3, #0]
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f022 020e 	bic.w	r2, r2, #14
 8003038:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	681a      	ldr	r2, [r3, #0]
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f022 0201 	bic.w	r2, r2, #1
 8003048:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800304e:	f003 021c 	and.w	r2, r3, #28
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003056:	2101      	movs	r1, #1
 8003058:	fa01 f202 	lsl.w	r2, r1, r2
 800305c:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2201      	movs	r2, #1
 8003062:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2200      	movs	r2, #0
 800306a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003072:	2b00      	cmp	r3, #0
 8003074:	d003      	beq.n	800307e <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800307a:	6878      	ldr	r0, [r7, #4]
 800307c:	4798      	blx	r3
    }
  }
  return status;
 800307e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003080:	4618      	mov	r0, r3
 8003082:	3710      	adds	r7, #16
 8003084:	46bd      	mov	sp, r7
 8003086:	bd80      	pop	{r7, pc}

08003088 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003088:	b480      	push	{r7}
 800308a:	b087      	sub	sp, #28
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
 8003090:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003092:	2300      	movs	r3, #0
 8003094:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003096:	e154      	b.n	8003342 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	681a      	ldr	r2, [r3, #0]
 800309c:	2101      	movs	r1, #1
 800309e:	697b      	ldr	r3, [r7, #20]
 80030a0:	fa01 f303 	lsl.w	r3, r1, r3
 80030a4:	4013      	ands	r3, r2
 80030a6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	f000 8146 	beq.w	800333c <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	f003 0303 	and.w	r3, r3, #3
 80030b8:	2b01      	cmp	r3, #1
 80030ba:	d005      	beq.n	80030c8 <HAL_GPIO_Init+0x40>
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	f003 0303 	and.w	r3, r3, #3
 80030c4:	2b02      	cmp	r3, #2
 80030c6:	d130      	bne.n	800312a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	689b      	ldr	r3, [r3, #8]
 80030cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80030ce:	697b      	ldr	r3, [r7, #20]
 80030d0:	005b      	lsls	r3, r3, #1
 80030d2:	2203      	movs	r2, #3
 80030d4:	fa02 f303 	lsl.w	r3, r2, r3
 80030d8:	43db      	mvns	r3, r3
 80030da:	693a      	ldr	r2, [r7, #16]
 80030dc:	4013      	ands	r3, r2
 80030de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	68da      	ldr	r2, [r3, #12]
 80030e4:	697b      	ldr	r3, [r7, #20]
 80030e6:	005b      	lsls	r3, r3, #1
 80030e8:	fa02 f303 	lsl.w	r3, r2, r3
 80030ec:	693a      	ldr	r2, [r7, #16]
 80030ee:	4313      	orrs	r3, r2
 80030f0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	693a      	ldr	r2, [r7, #16]
 80030f6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80030fe:	2201      	movs	r2, #1
 8003100:	697b      	ldr	r3, [r7, #20]
 8003102:	fa02 f303 	lsl.w	r3, r2, r3
 8003106:	43db      	mvns	r3, r3
 8003108:	693a      	ldr	r2, [r7, #16]
 800310a:	4013      	ands	r3, r2
 800310c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	685b      	ldr	r3, [r3, #4]
 8003112:	091b      	lsrs	r3, r3, #4
 8003114:	f003 0201 	and.w	r2, r3, #1
 8003118:	697b      	ldr	r3, [r7, #20]
 800311a:	fa02 f303 	lsl.w	r3, r2, r3
 800311e:	693a      	ldr	r2, [r7, #16]
 8003120:	4313      	orrs	r3, r2
 8003122:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	693a      	ldr	r2, [r7, #16]
 8003128:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	f003 0303 	and.w	r3, r3, #3
 8003132:	2b03      	cmp	r3, #3
 8003134:	d017      	beq.n	8003166 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	68db      	ldr	r3, [r3, #12]
 800313a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800313c:	697b      	ldr	r3, [r7, #20]
 800313e:	005b      	lsls	r3, r3, #1
 8003140:	2203      	movs	r2, #3
 8003142:	fa02 f303 	lsl.w	r3, r2, r3
 8003146:	43db      	mvns	r3, r3
 8003148:	693a      	ldr	r2, [r7, #16]
 800314a:	4013      	ands	r3, r2
 800314c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	689a      	ldr	r2, [r3, #8]
 8003152:	697b      	ldr	r3, [r7, #20]
 8003154:	005b      	lsls	r3, r3, #1
 8003156:	fa02 f303 	lsl.w	r3, r2, r3
 800315a:	693a      	ldr	r2, [r7, #16]
 800315c:	4313      	orrs	r3, r2
 800315e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	693a      	ldr	r2, [r7, #16]
 8003164:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	f003 0303 	and.w	r3, r3, #3
 800316e:	2b02      	cmp	r3, #2
 8003170:	d123      	bne.n	80031ba <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003172:	697b      	ldr	r3, [r7, #20]
 8003174:	08da      	lsrs	r2, r3, #3
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	3208      	adds	r2, #8
 800317a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800317e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003180:	697b      	ldr	r3, [r7, #20]
 8003182:	f003 0307 	and.w	r3, r3, #7
 8003186:	009b      	lsls	r3, r3, #2
 8003188:	220f      	movs	r2, #15
 800318a:	fa02 f303 	lsl.w	r3, r2, r3
 800318e:	43db      	mvns	r3, r3
 8003190:	693a      	ldr	r2, [r7, #16]
 8003192:	4013      	ands	r3, r2
 8003194:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	691a      	ldr	r2, [r3, #16]
 800319a:	697b      	ldr	r3, [r7, #20]
 800319c:	f003 0307 	and.w	r3, r3, #7
 80031a0:	009b      	lsls	r3, r3, #2
 80031a2:	fa02 f303 	lsl.w	r3, r2, r3
 80031a6:	693a      	ldr	r2, [r7, #16]
 80031a8:	4313      	orrs	r3, r2
 80031aa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80031ac:	697b      	ldr	r3, [r7, #20]
 80031ae:	08da      	lsrs	r2, r3, #3
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	3208      	adds	r2, #8
 80031b4:	6939      	ldr	r1, [r7, #16]
 80031b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80031c0:	697b      	ldr	r3, [r7, #20]
 80031c2:	005b      	lsls	r3, r3, #1
 80031c4:	2203      	movs	r2, #3
 80031c6:	fa02 f303 	lsl.w	r3, r2, r3
 80031ca:	43db      	mvns	r3, r3
 80031cc:	693a      	ldr	r2, [r7, #16]
 80031ce:	4013      	ands	r3, r2
 80031d0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	685b      	ldr	r3, [r3, #4]
 80031d6:	f003 0203 	and.w	r2, r3, #3
 80031da:	697b      	ldr	r3, [r7, #20]
 80031dc:	005b      	lsls	r3, r3, #1
 80031de:	fa02 f303 	lsl.w	r3, r2, r3
 80031e2:	693a      	ldr	r2, [r7, #16]
 80031e4:	4313      	orrs	r3, r2
 80031e6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	693a      	ldr	r2, [r7, #16]
 80031ec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	f000 80a0 	beq.w	800333c <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80031fc:	4b58      	ldr	r3, [pc, #352]	; (8003360 <HAL_GPIO_Init+0x2d8>)
 80031fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003200:	4a57      	ldr	r2, [pc, #348]	; (8003360 <HAL_GPIO_Init+0x2d8>)
 8003202:	f043 0301 	orr.w	r3, r3, #1
 8003206:	6613      	str	r3, [r2, #96]	; 0x60
 8003208:	4b55      	ldr	r3, [pc, #340]	; (8003360 <HAL_GPIO_Init+0x2d8>)
 800320a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800320c:	f003 0301 	and.w	r3, r3, #1
 8003210:	60bb      	str	r3, [r7, #8]
 8003212:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003214:	4a53      	ldr	r2, [pc, #332]	; (8003364 <HAL_GPIO_Init+0x2dc>)
 8003216:	697b      	ldr	r3, [r7, #20]
 8003218:	089b      	lsrs	r3, r3, #2
 800321a:	3302      	adds	r3, #2
 800321c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003220:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003222:	697b      	ldr	r3, [r7, #20]
 8003224:	f003 0303 	and.w	r3, r3, #3
 8003228:	009b      	lsls	r3, r3, #2
 800322a:	220f      	movs	r2, #15
 800322c:	fa02 f303 	lsl.w	r3, r2, r3
 8003230:	43db      	mvns	r3, r3
 8003232:	693a      	ldr	r2, [r7, #16]
 8003234:	4013      	ands	r3, r2
 8003236:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800323e:	d019      	beq.n	8003274 <HAL_GPIO_Init+0x1ec>
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	4a49      	ldr	r2, [pc, #292]	; (8003368 <HAL_GPIO_Init+0x2e0>)
 8003244:	4293      	cmp	r3, r2
 8003246:	d013      	beq.n	8003270 <HAL_GPIO_Init+0x1e8>
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	4a48      	ldr	r2, [pc, #288]	; (800336c <HAL_GPIO_Init+0x2e4>)
 800324c:	4293      	cmp	r3, r2
 800324e:	d00d      	beq.n	800326c <HAL_GPIO_Init+0x1e4>
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	4a47      	ldr	r2, [pc, #284]	; (8003370 <HAL_GPIO_Init+0x2e8>)
 8003254:	4293      	cmp	r3, r2
 8003256:	d007      	beq.n	8003268 <HAL_GPIO_Init+0x1e0>
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	4a46      	ldr	r2, [pc, #280]	; (8003374 <HAL_GPIO_Init+0x2ec>)
 800325c:	4293      	cmp	r3, r2
 800325e:	d101      	bne.n	8003264 <HAL_GPIO_Init+0x1dc>
 8003260:	2304      	movs	r3, #4
 8003262:	e008      	b.n	8003276 <HAL_GPIO_Init+0x1ee>
 8003264:	2307      	movs	r3, #7
 8003266:	e006      	b.n	8003276 <HAL_GPIO_Init+0x1ee>
 8003268:	2303      	movs	r3, #3
 800326a:	e004      	b.n	8003276 <HAL_GPIO_Init+0x1ee>
 800326c:	2302      	movs	r3, #2
 800326e:	e002      	b.n	8003276 <HAL_GPIO_Init+0x1ee>
 8003270:	2301      	movs	r3, #1
 8003272:	e000      	b.n	8003276 <HAL_GPIO_Init+0x1ee>
 8003274:	2300      	movs	r3, #0
 8003276:	697a      	ldr	r2, [r7, #20]
 8003278:	f002 0203 	and.w	r2, r2, #3
 800327c:	0092      	lsls	r2, r2, #2
 800327e:	4093      	lsls	r3, r2
 8003280:	693a      	ldr	r2, [r7, #16]
 8003282:	4313      	orrs	r3, r2
 8003284:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003286:	4937      	ldr	r1, [pc, #220]	; (8003364 <HAL_GPIO_Init+0x2dc>)
 8003288:	697b      	ldr	r3, [r7, #20]
 800328a:	089b      	lsrs	r3, r3, #2
 800328c:	3302      	adds	r3, #2
 800328e:	693a      	ldr	r2, [r7, #16]
 8003290:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003294:	4b38      	ldr	r3, [pc, #224]	; (8003378 <HAL_GPIO_Init+0x2f0>)
 8003296:	689b      	ldr	r3, [r3, #8]
 8003298:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	43db      	mvns	r3, r3
 800329e:	693a      	ldr	r2, [r7, #16]
 80032a0:	4013      	ands	r3, r2
 80032a2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d003      	beq.n	80032b8 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80032b0:	693a      	ldr	r2, [r7, #16]
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	4313      	orrs	r3, r2
 80032b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80032b8:	4a2f      	ldr	r2, [pc, #188]	; (8003378 <HAL_GPIO_Init+0x2f0>)
 80032ba:	693b      	ldr	r3, [r7, #16]
 80032bc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80032be:	4b2e      	ldr	r3, [pc, #184]	; (8003378 <HAL_GPIO_Init+0x2f0>)
 80032c0:	68db      	ldr	r3, [r3, #12]
 80032c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	43db      	mvns	r3, r3
 80032c8:	693a      	ldr	r2, [r7, #16]
 80032ca:	4013      	ands	r3, r2
 80032cc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	685b      	ldr	r3, [r3, #4]
 80032d2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d003      	beq.n	80032e2 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80032da:	693a      	ldr	r2, [r7, #16]
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	4313      	orrs	r3, r2
 80032e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80032e2:	4a25      	ldr	r2, [pc, #148]	; (8003378 <HAL_GPIO_Init+0x2f0>)
 80032e4:	693b      	ldr	r3, [r7, #16]
 80032e6:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80032e8:	4b23      	ldr	r3, [pc, #140]	; (8003378 <HAL_GPIO_Init+0x2f0>)
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	43db      	mvns	r3, r3
 80032f2:	693a      	ldr	r2, [r7, #16]
 80032f4:	4013      	ands	r3, r2
 80032f6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003300:	2b00      	cmp	r3, #0
 8003302:	d003      	beq.n	800330c <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8003304:	693a      	ldr	r2, [r7, #16]
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	4313      	orrs	r3, r2
 800330a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800330c:	4a1a      	ldr	r2, [pc, #104]	; (8003378 <HAL_GPIO_Init+0x2f0>)
 800330e:	693b      	ldr	r3, [r7, #16]
 8003310:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003312:	4b19      	ldr	r3, [pc, #100]	; (8003378 <HAL_GPIO_Init+0x2f0>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	43db      	mvns	r3, r3
 800331c:	693a      	ldr	r2, [r7, #16]
 800331e:	4013      	ands	r3, r2
 8003320:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	685b      	ldr	r3, [r3, #4]
 8003326:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800332a:	2b00      	cmp	r3, #0
 800332c:	d003      	beq.n	8003336 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800332e:	693a      	ldr	r2, [r7, #16]
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	4313      	orrs	r3, r2
 8003334:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003336:	4a10      	ldr	r2, [pc, #64]	; (8003378 <HAL_GPIO_Init+0x2f0>)
 8003338:	693b      	ldr	r3, [r7, #16]
 800333a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800333c:	697b      	ldr	r3, [r7, #20]
 800333e:	3301      	adds	r3, #1
 8003340:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	681a      	ldr	r2, [r3, #0]
 8003346:	697b      	ldr	r3, [r7, #20]
 8003348:	fa22 f303 	lsr.w	r3, r2, r3
 800334c:	2b00      	cmp	r3, #0
 800334e:	f47f aea3 	bne.w	8003098 <HAL_GPIO_Init+0x10>
  }
}
 8003352:	bf00      	nop
 8003354:	bf00      	nop
 8003356:	371c      	adds	r7, #28
 8003358:	46bd      	mov	sp, r7
 800335a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335e:	4770      	bx	lr
 8003360:	40021000 	.word	0x40021000
 8003364:	40010000 	.word	0x40010000
 8003368:	48000400 	.word	0x48000400
 800336c:	48000800 	.word	0x48000800
 8003370:	48000c00 	.word	0x48000c00
 8003374:	48001000 	.word	0x48001000
 8003378:	40010400 	.word	0x40010400

0800337c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800337c:	b480      	push	{r7}
 800337e:	b085      	sub	sp, #20
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
 8003384:	460b      	mov	r3, r1
 8003386:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	691a      	ldr	r2, [r3, #16]
 800338c:	887b      	ldrh	r3, [r7, #2]
 800338e:	4013      	ands	r3, r2
 8003390:	2b00      	cmp	r3, #0
 8003392:	d002      	beq.n	800339a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003394:	2301      	movs	r3, #1
 8003396:	73fb      	strb	r3, [r7, #15]
 8003398:	e001      	b.n	800339e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800339a:	2300      	movs	r3, #0
 800339c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800339e:	7bfb      	ldrb	r3, [r7, #15]
}
 80033a0:	4618      	mov	r0, r3
 80033a2:	3714      	adds	r7, #20
 80033a4:	46bd      	mov	sp, r7
 80033a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033aa:	4770      	bx	lr

080033ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80033ac:	b480      	push	{r7}
 80033ae:	b083      	sub	sp, #12
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
 80033b4:	460b      	mov	r3, r1
 80033b6:	807b      	strh	r3, [r7, #2]
 80033b8:	4613      	mov	r3, r2
 80033ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80033bc:	787b      	ldrb	r3, [r7, #1]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d003      	beq.n	80033ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80033c2:	887a      	ldrh	r2, [r7, #2]
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80033c8:	e002      	b.n	80033d0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80033ca:	887a      	ldrh	r2, [r7, #2]
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	629a      	str	r2, [r3, #40]	; 0x28
}
 80033d0:	bf00      	nop
 80033d2:	370c      	adds	r7, #12
 80033d4:	46bd      	mov	sp, r7
 80033d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033da:	4770      	bx	lr

080033dc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80033dc:	b480      	push	{r7}
 80033de:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80033e0:	4b04      	ldr	r3, [pc, #16]	; (80033f4 <HAL_PWREx_GetVoltageRange+0x18>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80033e8:	4618      	mov	r0, r3
 80033ea:	46bd      	mov	sp, r7
 80033ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f0:	4770      	bx	lr
 80033f2:	bf00      	nop
 80033f4:	40007000 	.word	0x40007000

080033f8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80033f8:	b480      	push	{r7}
 80033fa:	b085      	sub	sp, #20
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003406:	d130      	bne.n	800346a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003408:	4b23      	ldr	r3, [pc, #140]	; (8003498 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003410:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003414:	d038      	beq.n	8003488 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003416:	4b20      	ldr	r3, [pc, #128]	; (8003498 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800341e:	4a1e      	ldr	r2, [pc, #120]	; (8003498 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003420:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003424:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003426:	4b1d      	ldr	r3, [pc, #116]	; (800349c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	2232      	movs	r2, #50	; 0x32
 800342c:	fb02 f303 	mul.w	r3, r2, r3
 8003430:	4a1b      	ldr	r2, [pc, #108]	; (80034a0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003432:	fba2 2303 	umull	r2, r3, r2, r3
 8003436:	0c9b      	lsrs	r3, r3, #18
 8003438:	3301      	adds	r3, #1
 800343a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800343c:	e002      	b.n	8003444 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	3b01      	subs	r3, #1
 8003442:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003444:	4b14      	ldr	r3, [pc, #80]	; (8003498 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003446:	695b      	ldr	r3, [r3, #20]
 8003448:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800344c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003450:	d102      	bne.n	8003458 <HAL_PWREx_ControlVoltageScaling+0x60>
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	2b00      	cmp	r3, #0
 8003456:	d1f2      	bne.n	800343e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003458:	4b0f      	ldr	r3, [pc, #60]	; (8003498 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800345a:	695b      	ldr	r3, [r3, #20]
 800345c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003460:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003464:	d110      	bne.n	8003488 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003466:	2303      	movs	r3, #3
 8003468:	e00f      	b.n	800348a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800346a:	4b0b      	ldr	r3, [pc, #44]	; (8003498 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003472:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003476:	d007      	beq.n	8003488 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003478:	4b07      	ldr	r3, [pc, #28]	; (8003498 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003480:	4a05      	ldr	r2, [pc, #20]	; (8003498 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003482:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003486:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003488:	2300      	movs	r3, #0
}
 800348a:	4618      	mov	r0, r3
 800348c:	3714      	adds	r7, #20
 800348e:	46bd      	mov	sp, r7
 8003490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003494:	4770      	bx	lr
 8003496:	bf00      	nop
 8003498:	40007000 	.word	0x40007000
 800349c:	20000004 	.word	0x20000004
 80034a0:	431bde83 	.word	0x431bde83

080034a4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b088      	sub	sp, #32
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d102      	bne.n	80034b8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80034b2:	2301      	movs	r3, #1
 80034b4:	f000 bc02 	b.w	8003cbc <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80034b8:	4b96      	ldr	r3, [pc, #600]	; (8003714 <HAL_RCC_OscConfig+0x270>)
 80034ba:	689b      	ldr	r3, [r3, #8]
 80034bc:	f003 030c 	and.w	r3, r3, #12
 80034c0:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80034c2:	4b94      	ldr	r3, [pc, #592]	; (8003714 <HAL_RCC_OscConfig+0x270>)
 80034c4:	68db      	ldr	r3, [r3, #12]
 80034c6:	f003 0303 	and.w	r3, r3, #3
 80034ca:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f003 0310 	and.w	r3, r3, #16
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	f000 80e4 	beq.w	80036a2 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80034da:	69bb      	ldr	r3, [r7, #24]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d007      	beq.n	80034f0 <HAL_RCC_OscConfig+0x4c>
 80034e0:	69bb      	ldr	r3, [r7, #24]
 80034e2:	2b0c      	cmp	r3, #12
 80034e4:	f040 808b 	bne.w	80035fe <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80034e8:	697b      	ldr	r3, [r7, #20]
 80034ea:	2b01      	cmp	r3, #1
 80034ec:	f040 8087 	bne.w	80035fe <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80034f0:	4b88      	ldr	r3, [pc, #544]	; (8003714 <HAL_RCC_OscConfig+0x270>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f003 0302 	and.w	r3, r3, #2
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d005      	beq.n	8003508 <HAL_RCC_OscConfig+0x64>
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	699b      	ldr	r3, [r3, #24]
 8003500:	2b00      	cmp	r3, #0
 8003502:	d101      	bne.n	8003508 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003504:	2301      	movs	r3, #1
 8003506:	e3d9      	b.n	8003cbc <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6a1a      	ldr	r2, [r3, #32]
 800350c:	4b81      	ldr	r3, [pc, #516]	; (8003714 <HAL_RCC_OscConfig+0x270>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f003 0308 	and.w	r3, r3, #8
 8003514:	2b00      	cmp	r3, #0
 8003516:	d004      	beq.n	8003522 <HAL_RCC_OscConfig+0x7e>
 8003518:	4b7e      	ldr	r3, [pc, #504]	; (8003714 <HAL_RCC_OscConfig+0x270>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003520:	e005      	b.n	800352e <HAL_RCC_OscConfig+0x8a>
 8003522:	4b7c      	ldr	r3, [pc, #496]	; (8003714 <HAL_RCC_OscConfig+0x270>)
 8003524:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003528:	091b      	lsrs	r3, r3, #4
 800352a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800352e:	4293      	cmp	r3, r2
 8003530:	d223      	bcs.n	800357a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6a1b      	ldr	r3, [r3, #32]
 8003536:	4618      	mov	r0, r3
 8003538:	f000 fd8c 	bl	8004054 <RCC_SetFlashLatencyFromMSIRange>
 800353c:	4603      	mov	r3, r0
 800353e:	2b00      	cmp	r3, #0
 8003540:	d001      	beq.n	8003546 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8003542:	2301      	movs	r3, #1
 8003544:	e3ba      	b.n	8003cbc <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003546:	4b73      	ldr	r3, [pc, #460]	; (8003714 <HAL_RCC_OscConfig+0x270>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4a72      	ldr	r2, [pc, #456]	; (8003714 <HAL_RCC_OscConfig+0x270>)
 800354c:	f043 0308 	orr.w	r3, r3, #8
 8003550:	6013      	str	r3, [r2, #0]
 8003552:	4b70      	ldr	r3, [pc, #448]	; (8003714 <HAL_RCC_OscConfig+0x270>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6a1b      	ldr	r3, [r3, #32]
 800355e:	496d      	ldr	r1, [pc, #436]	; (8003714 <HAL_RCC_OscConfig+0x270>)
 8003560:	4313      	orrs	r3, r2
 8003562:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003564:	4b6b      	ldr	r3, [pc, #428]	; (8003714 <HAL_RCC_OscConfig+0x270>)
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	69db      	ldr	r3, [r3, #28]
 8003570:	021b      	lsls	r3, r3, #8
 8003572:	4968      	ldr	r1, [pc, #416]	; (8003714 <HAL_RCC_OscConfig+0x270>)
 8003574:	4313      	orrs	r3, r2
 8003576:	604b      	str	r3, [r1, #4]
 8003578:	e025      	b.n	80035c6 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800357a:	4b66      	ldr	r3, [pc, #408]	; (8003714 <HAL_RCC_OscConfig+0x270>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4a65      	ldr	r2, [pc, #404]	; (8003714 <HAL_RCC_OscConfig+0x270>)
 8003580:	f043 0308 	orr.w	r3, r3, #8
 8003584:	6013      	str	r3, [r2, #0]
 8003586:	4b63      	ldr	r3, [pc, #396]	; (8003714 <HAL_RCC_OscConfig+0x270>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6a1b      	ldr	r3, [r3, #32]
 8003592:	4960      	ldr	r1, [pc, #384]	; (8003714 <HAL_RCC_OscConfig+0x270>)
 8003594:	4313      	orrs	r3, r2
 8003596:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003598:	4b5e      	ldr	r3, [pc, #376]	; (8003714 <HAL_RCC_OscConfig+0x270>)
 800359a:	685b      	ldr	r3, [r3, #4]
 800359c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	69db      	ldr	r3, [r3, #28]
 80035a4:	021b      	lsls	r3, r3, #8
 80035a6:	495b      	ldr	r1, [pc, #364]	; (8003714 <HAL_RCC_OscConfig+0x270>)
 80035a8:	4313      	orrs	r3, r2
 80035aa:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80035ac:	69bb      	ldr	r3, [r7, #24]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d109      	bne.n	80035c6 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6a1b      	ldr	r3, [r3, #32]
 80035b6:	4618      	mov	r0, r3
 80035b8:	f000 fd4c 	bl	8004054 <RCC_SetFlashLatencyFromMSIRange>
 80035bc:	4603      	mov	r3, r0
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d001      	beq.n	80035c6 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80035c2:	2301      	movs	r3, #1
 80035c4:	e37a      	b.n	8003cbc <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80035c6:	f000 fc81 	bl	8003ecc <HAL_RCC_GetSysClockFreq>
 80035ca:	4602      	mov	r2, r0
 80035cc:	4b51      	ldr	r3, [pc, #324]	; (8003714 <HAL_RCC_OscConfig+0x270>)
 80035ce:	689b      	ldr	r3, [r3, #8]
 80035d0:	091b      	lsrs	r3, r3, #4
 80035d2:	f003 030f 	and.w	r3, r3, #15
 80035d6:	4950      	ldr	r1, [pc, #320]	; (8003718 <HAL_RCC_OscConfig+0x274>)
 80035d8:	5ccb      	ldrb	r3, [r1, r3]
 80035da:	f003 031f 	and.w	r3, r3, #31
 80035de:	fa22 f303 	lsr.w	r3, r2, r3
 80035e2:	4a4e      	ldr	r2, [pc, #312]	; (800371c <HAL_RCC_OscConfig+0x278>)
 80035e4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80035e6:	4b4e      	ldr	r3, [pc, #312]	; (8003720 <HAL_RCC_OscConfig+0x27c>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4618      	mov	r0, r3
 80035ec:	f7fe fa94 	bl	8001b18 <HAL_InitTick>
 80035f0:	4603      	mov	r3, r0
 80035f2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80035f4:	7bfb      	ldrb	r3, [r7, #15]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d052      	beq.n	80036a0 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80035fa:	7bfb      	ldrb	r3, [r7, #15]
 80035fc:	e35e      	b.n	8003cbc <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	699b      	ldr	r3, [r3, #24]
 8003602:	2b00      	cmp	r3, #0
 8003604:	d032      	beq.n	800366c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003606:	4b43      	ldr	r3, [pc, #268]	; (8003714 <HAL_RCC_OscConfig+0x270>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4a42      	ldr	r2, [pc, #264]	; (8003714 <HAL_RCC_OscConfig+0x270>)
 800360c:	f043 0301 	orr.w	r3, r3, #1
 8003610:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003612:	f7fe fad1 	bl	8001bb8 <HAL_GetTick>
 8003616:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003618:	e008      	b.n	800362c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800361a:	f7fe facd 	bl	8001bb8 <HAL_GetTick>
 800361e:	4602      	mov	r2, r0
 8003620:	693b      	ldr	r3, [r7, #16]
 8003622:	1ad3      	subs	r3, r2, r3
 8003624:	2b02      	cmp	r3, #2
 8003626:	d901      	bls.n	800362c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8003628:	2303      	movs	r3, #3
 800362a:	e347      	b.n	8003cbc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800362c:	4b39      	ldr	r3, [pc, #228]	; (8003714 <HAL_RCC_OscConfig+0x270>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f003 0302 	and.w	r3, r3, #2
 8003634:	2b00      	cmp	r3, #0
 8003636:	d0f0      	beq.n	800361a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003638:	4b36      	ldr	r3, [pc, #216]	; (8003714 <HAL_RCC_OscConfig+0x270>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4a35      	ldr	r2, [pc, #212]	; (8003714 <HAL_RCC_OscConfig+0x270>)
 800363e:	f043 0308 	orr.w	r3, r3, #8
 8003642:	6013      	str	r3, [r2, #0]
 8003644:	4b33      	ldr	r3, [pc, #204]	; (8003714 <HAL_RCC_OscConfig+0x270>)
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6a1b      	ldr	r3, [r3, #32]
 8003650:	4930      	ldr	r1, [pc, #192]	; (8003714 <HAL_RCC_OscConfig+0x270>)
 8003652:	4313      	orrs	r3, r2
 8003654:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003656:	4b2f      	ldr	r3, [pc, #188]	; (8003714 <HAL_RCC_OscConfig+0x270>)
 8003658:	685b      	ldr	r3, [r3, #4]
 800365a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	69db      	ldr	r3, [r3, #28]
 8003662:	021b      	lsls	r3, r3, #8
 8003664:	492b      	ldr	r1, [pc, #172]	; (8003714 <HAL_RCC_OscConfig+0x270>)
 8003666:	4313      	orrs	r3, r2
 8003668:	604b      	str	r3, [r1, #4]
 800366a:	e01a      	b.n	80036a2 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800366c:	4b29      	ldr	r3, [pc, #164]	; (8003714 <HAL_RCC_OscConfig+0x270>)
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	4a28      	ldr	r2, [pc, #160]	; (8003714 <HAL_RCC_OscConfig+0x270>)
 8003672:	f023 0301 	bic.w	r3, r3, #1
 8003676:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003678:	f7fe fa9e 	bl	8001bb8 <HAL_GetTick>
 800367c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800367e:	e008      	b.n	8003692 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003680:	f7fe fa9a 	bl	8001bb8 <HAL_GetTick>
 8003684:	4602      	mov	r2, r0
 8003686:	693b      	ldr	r3, [r7, #16]
 8003688:	1ad3      	subs	r3, r2, r3
 800368a:	2b02      	cmp	r3, #2
 800368c:	d901      	bls.n	8003692 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800368e:	2303      	movs	r3, #3
 8003690:	e314      	b.n	8003cbc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003692:	4b20      	ldr	r3, [pc, #128]	; (8003714 <HAL_RCC_OscConfig+0x270>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f003 0302 	and.w	r3, r3, #2
 800369a:	2b00      	cmp	r3, #0
 800369c:	d1f0      	bne.n	8003680 <HAL_RCC_OscConfig+0x1dc>
 800369e:	e000      	b.n	80036a2 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80036a0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f003 0301 	and.w	r3, r3, #1
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d073      	beq.n	8003796 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80036ae:	69bb      	ldr	r3, [r7, #24]
 80036b0:	2b08      	cmp	r3, #8
 80036b2:	d005      	beq.n	80036c0 <HAL_RCC_OscConfig+0x21c>
 80036b4:	69bb      	ldr	r3, [r7, #24]
 80036b6:	2b0c      	cmp	r3, #12
 80036b8:	d10e      	bne.n	80036d8 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80036ba:	697b      	ldr	r3, [r7, #20]
 80036bc:	2b03      	cmp	r3, #3
 80036be:	d10b      	bne.n	80036d8 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036c0:	4b14      	ldr	r3, [pc, #80]	; (8003714 <HAL_RCC_OscConfig+0x270>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d063      	beq.n	8003794 <HAL_RCC_OscConfig+0x2f0>
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	685b      	ldr	r3, [r3, #4]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d15f      	bne.n	8003794 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80036d4:	2301      	movs	r3, #1
 80036d6:	e2f1      	b.n	8003cbc <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036e0:	d106      	bne.n	80036f0 <HAL_RCC_OscConfig+0x24c>
 80036e2:	4b0c      	ldr	r3, [pc, #48]	; (8003714 <HAL_RCC_OscConfig+0x270>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4a0b      	ldr	r2, [pc, #44]	; (8003714 <HAL_RCC_OscConfig+0x270>)
 80036e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036ec:	6013      	str	r3, [r2, #0]
 80036ee:	e025      	b.n	800373c <HAL_RCC_OscConfig+0x298>
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	685b      	ldr	r3, [r3, #4]
 80036f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80036f8:	d114      	bne.n	8003724 <HAL_RCC_OscConfig+0x280>
 80036fa:	4b06      	ldr	r3, [pc, #24]	; (8003714 <HAL_RCC_OscConfig+0x270>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4a05      	ldr	r2, [pc, #20]	; (8003714 <HAL_RCC_OscConfig+0x270>)
 8003700:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003704:	6013      	str	r3, [r2, #0]
 8003706:	4b03      	ldr	r3, [pc, #12]	; (8003714 <HAL_RCC_OscConfig+0x270>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	4a02      	ldr	r2, [pc, #8]	; (8003714 <HAL_RCC_OscConfig+0x270>)
 800370c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003710:	6013      	str	r3, [r2, #0]
 8003712:	e013      	b.n	800373c <HAL_RCC_OscConfig+0x298>
 8003714:	40021000 	.word	0x40021000
 8003718:	0800784c 	.word	0x0800784c
 800371c:	20000004 	.word	0x20000004
 8003720:	20000008 	.word	0x20000008
 8003724:	4ba0      	ldr	r3, [pc, #640]	; (80039a8 <HAL_RCC_OscConfig+0x504>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4a9f      	ldr	r2, [pc, #636]	; (80039a8 <HAL_RCC_OscConfig+0x504>)
 800372a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800372e:	6013      	str	r3, [r2, #0]
 8003730:	4b9d      	ldr	r3, [pc, #628]	; (80039a8 <HAL_RCC_OscConfig+0x504>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	4a9c      	ldr	r2, [pc, #624]	; (80039a8 <HAL_RCC_OscConfig+0x504>)
 8003736:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800373a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	685b      	ldr	r3, [r3, #4]
 8003740:	2b00      	cmp	r3, #0
 8003742:	d013      	beq.n	800376c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003744:	f7fe fa38 	bl	8001bb8 <HAL_GetTick>
 8003748:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800374a:	e008      	b.n	800375e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800374c:	f7fe fa34 	bl	8001bb8 <HAL_GetTick>
 8003750:	4602      	mov	r2, r0
 8003752:	693b      	ldr	r3, [r7, #16]
 8003754:	1ad3      	subs	r3, r2, r3
 8003756:	2b64      	cmp	r3, #100	; 0x64
 8003758:	d901      	bls.n	800375e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800375a:	2303      	movs	r3, #3
 800375c:	e2ae      	b.n	8003cbc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800375e:	4b92      	ldr	r3, [pc, #584]	; (80039a8 <HAL_RCC_OscConfig+0x504>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003766:	2b00      	cmp	r3, #0
 8003768:	d0f0      	beq.n	800374c <HAL_RCC_OscConfig+0x2a8>
 800376a:	e014      	b.n	8003796 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800376c:	f7fe fa24 	bl	8001bb8 <HAL_GetTick>
 8003770:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003772:	e008      	b.n	8003786 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003774:	f7fe fa20 	bl	8001bb8 <HAL_GetTick>
 8003778:	4602      	mov	r2, r0
 800377a:	693b      	ldr	r3, [r7, #16]
 800377c:	1ad3      	subs	r3, r2, r3
 800377e:	2b64      	cmp	r3, #100	; 0x64
 8003780:	d901      	bls.n	8003786 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003782:	2303      	movs	r3, #3
 8003784:	e29a      	b.n	8003cbc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003786:	4b88      	ldr	r3, [pc, #544]	; (80039a8 <HAL_RCC_OscConfig+0x504>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800378e:	2b00      	cmp	r3, #0
 8003790:	d1f0      	bne.n	8003774 <HAL_RCC_OscConfig+0x2d0>
 8003792:	e000      	b.n	8003796 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003794:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f003 0302 	and.w	r3, r3, #2
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d060      	beq.n	8003864 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80037a2:	69bb      	ldr	r3, [r7, #24]
 80037a4:	2b04      	cmp	r3, #4
 80037a6:	d005      	beq.n	80037b4 <HAL_RCC_OscConfig+0x310>
 80037a8:	69bb      	ldr	r3, [r7, #24]
 80037aa:	2b0c      	cmp	r3, #12
 80037ac:	d119      	bne.n	80037e2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80037ae:	697b      	ldr	r3, [r7, #20]
 80037b0:	2b02      	cmp	r3, #2
 80037b2:	d116      	bne.n	80037e2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80037b4:	4b7c      	ldr	r3, [pc, #496]	; (80039a8 <HAL_RCC_OscConfig+0x504>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d005      	beq.n	80037cc <HAL_RCC_OscConfig+0x328>
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	68db      	ldr	r3, [r3, #12]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d101      	bne.n	80037cc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80037c8:	2301      	movs	r3, #1
 80037ca:	e277      	b.n	8003cbc <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037cc:	4b76      	ldr	r3, [pc, #472]	; (80039a8 <HAL_RCC_OscConfig+0x504>)
 80037ce:	685b      	ldr	r3, [r3, #4]
 80037d0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	691b      	ldr	r3, [r3, #16]
 80037d8:	061b      	lsls	r3, r3, #24
 80037da:	4973      	ldr	r1, [pc, #460]	; (80039a8 <HAL_RCC_OscConfig+0x504>)
 80037dc:	4313      	orrs	r3, r2
 80037de:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80037e0:	e040      	b.n	8003864 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	68db      	ldr	r3, [r3, #12]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d023      	beq.n	8003832 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80037ea:	4b6f      	ldr	r3, [pc, #444]	; (80039a8 <HAL_RCC_OscConfig+0x504>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4a6e      	ldr	r2, [pc, #440]	; (80039a8 <HAL_RCC_OscConfig+0x504>)
 80037f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037f6:	f7fe f9df 	bl	8001bb8 <HAL_GetTick>
 80037fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80037fc:	e008      	b.n	8003810 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80037fe:	f7fe f9db 	bl	8001bb8 <HAL_GetTick>
 8003802:	4602      	mov	r2, r0
 8003804:	693b      	ldr	r3, [r7, #16]
 8003806:	1ad3      	subs	r3, r2, r3
 8003808:	2b02      	cmp	r3, #2
 800380a:	d901      	bls.n	8003810 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800380c:	2303      	movs	r3, #3
 800380e:	e255      	b.n	8003cbc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003810:	4b65      	ldr	r3, [pc, #404]	; (80039a8 <HAL_RCC_OscConfig+0x504>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003818:	2b00      	cmp	r3, #0
 800381a:	d0f0      	beq.n	80037fe <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800381c:	4b62      	ldr	r3, [pc, #392]	; (80039a8 <HAL_RCC_OscConfig+0x504>)
 800381e:	685b      	ldr	r3, [r3, #4]
 8003820:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	691b      	ldr	r3, [r3, #16]
 8003828:	061b      	lsls	r3, r3, #24
 800382a:	495f      	ldr	r1, [pc, #380]	; (80039a8 <HAL_RCC_OscConfig+0x504>)
 800382c:	4313      	orrs	r3, r2
 800382e:	604b      	str	r3, [r1, #4]
 8003830:	e018      	b.n	8003864 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003832:	4b5d      	ldr	r3, [pc, #372]	; (80039a8 <HAL_RCC_OscConfig+0x504>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	4a5c      	ldr	r2, [pc, #368]	; (80039a8 <HAL_RCC_OscConfig+0x504>)
 8003838:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800383c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800383e:	f7fe f9bb 	bl	8001bb8 <HAL_GetTick>
 8003842:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003844:	e008      	b.n	8003858 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003846:	f7fe f9b7 	bl	8001bb8 <HAL_GetTick>
 800384a:	4602      	mov	r2, r0
 800384c:	693b      	ldr	r3, [r7, #16]
 800384e:	1ad3      	subs	r3, r2, r3
 8003850:	2b02      	cmp	r3, #2
 8003852:	d901      	bls.n	8003858 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003854:	2303      	movs	r3, #3
 8003856:	e231      	b.n	8003cbc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003858:	4b53      	ldr	r3, [pc, #332]	; (80039a8 <HAL_RCC_OscConfig+0x504>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003860:	2b00      	cmp	r3, #0
 8003862:	d1f0      	bne.n	8003846 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f003 0308 	and.w	r3, r3, #8
 800386c:	2b00      	cmp	r3, #0
 800386e:	d03c      	beq.n	80038ea <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	695b      	ldr	r3, [r3, #20]
 8003874:	2b00      	cmp	r3, #0
 8003876:	d01c      	beq.n	80038b2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003878:	4b4b      	ldr	r3, [pc, #300]	; (80039a8 <HAL_RCC_OscConfig+0x504>)
 800387a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800387e:	4a4a      	ldr	r2, [pc, #296]	; (80039a8 <HAL_RCC_OscConfig+0x504>)
 8003880:	f043 0301 	orr.w	r3, r3, #1
 8003884:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003888:	f7fe f996 	bl	8001bb8 <HAL_GetTick>
 800388c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800388e:	e008      	b.n	80038a2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003890:	f7fe f992 	bl	8001bb8 <HAL_GetTick>
 8003894:	4602      	mov	r2, r0
 8003896:	693b      	ldr	r3, [r7, #16]
 8003898:	1ad3      	subs	r3, r2, r3
 800389a:	2b02      	cmp	r3, #2
 800389c:	d901      	bls.n	80038a2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800389e:	2303      	movs	r3, #3
 80038a0:	e20c      	b.n	8003cbc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80038a2:	4b41      	ldr	r3, [pc, #260]	; (80039a8 <HAL_RCC_OscConfig+0x504>)
 80038a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80038a8:	f003 0302 	and.w	r3, r3, #2
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d0ef      	beq.n	8003890 <HAL_RCC_OscConfig+0x3ec>
 80038b0:	e01b      	b.n	80038ea <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80038b2:	4b3d      	ldr	r3, [pc, #244]	; (80039a8 <HAL_RCC_OscConfig+0x504>)
 80038b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80038b8:	4a3b      	ldr	r2, [pc, #236]	; (80039a8 <HAL_RCC_OscConfig+0x504>)
 80038ba:	f023 0301 	bic.w	r3, r3, #1
 80038be:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038c2:	f7fe f979 	bl	8001bb8 <HAL_GetTick>
 80038c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80038c8:	e008      	b.n	80038dc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80038ca:	f7fe f975 	bl	8001bb8 <HAL_GetTick>
 80038ce:	4602      	mov	r2, r0
 80038d0:	693b      	ldr	r3, [r7, #16]
 80038d2:	1ad3      	subs	r3, r2, r3
 80038d4:	2b02      	cmp	r3, #2
 80038d6:	d901      	bls.n	80038dc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80038d8:	2303      	movs	r3, #3
 80038da:	e1ef      	b.n	8003cbc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80038dc:	4b32      	ldr	r3, [pc, #200]	; (80039a8 <HAL_RCC_OscConfig+0x504>)
 80038de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80038e2:	f003 0302 	and.w	r3, r3, #2
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d1ef      	bne.n	80038ca <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f003 0304 	and.w	r3, r3, #4
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	f000 80a6 	beq.w	8003a44 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80038f8:	2300      	movs	r3, #0
 80038fa:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80038fc:	4b2a      	ldr	r3, [pc, #168]	; (80039a8 <HAL_RCC_OscConfig+0x504>)
 80038fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003900:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003904:	2b00      	cmp	r3, #0
 8003906:	d10d      	bne.n	8003924 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003908:	4b27      	ldr	r3, [pc, #156]	; (80039a8 <HAL_RCC_OscConfig+0x504>)
 800390a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800390c:	4a26      	ldr	r2, [pc, #152]	; (80039a8 <HAL_RCC_OscConfig+0x504>)
 800390e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003912:	6593      	str	r3, [r2, #88]	; 0x58
 8003914:	4b24      	ldr	r3, [pc, #144]	; (80039a8 <HAL_RCC_OscConfig+0x504>)
 8003916:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003918:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800391c:	60bb      	str	r3, [r7, #8]
 800391e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003920:	2301      	movs	r3, #1
 8003922:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003924:	4b21      	ldr	r3, [pc, #132]	; (80039ac <HAL_RCC_OscConfig+0x508>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800392c:	2b00      	cmp	r3, #0
 800392e:	d118      	bne.n	8003962 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003930:	4b1e      	ldr	r3, [pc, #120]	; (80039ac <HAL_RCC_OscConfig+0x508>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	4a1d      	ldr	r2, [pc, #116]	; (80039ac <HAL_RCC_OscConfig+0x508>)
 8003936:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800393a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800393c:	f7fe f93c 	bl	8001bb8 <HAL_GetTick>
 8003940:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003942:	e008      	b.n	8003956 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003944:	f7fe f938 	bl	8001bb8 <HAL_GetTick>
 8003948:	4602      	mov	r2, r0
 800394a:	693b      	ldr	r3, [r7, #16]
 800394c:	1ad3      	subs	r3, r2, r3
 800394e:	2b02      	cmp	r3, #2
 8003950:	d901      	bls.n	8003956 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003952:	2303      	movs	r3, #3
 8003954:	e1b2      	b.n	8003cbc <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003956:	4b15      	ldr	r3, [pc, #84]	; (80039ac <HAL_RCC_OscConfig+0x508>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800395e:	2b00      	cmp	r3, #0
 8003960:	d0f0      	beq.n	8003944 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	689b      	ldr	r3, [r3, #8]
 8003966:	2b01      	cmp	r3, #1
 8003968:	d108      	bne.n	800397c <HAL_RCC_OscConfig+0x4d8>
 800396a:	4b0f      	ldr	r3, [pc, #60]	; (80039a8 <HAL_RCC_OscConfig+0x504>)
 800396c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003970:	4a0d      	ldr	r2, [pc, #52]	; (80039a8 <HAL_RCC_OscConfig+0x504>)
 8003972:	f043 0301 	orr.w	r3, r3, #1
 8003976:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800397a:	e029      	b.n	80039d0 <HAL_RCC_OscConfig+0x52c>
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	689b      	ldr	r3, [r3, #8]
 8003980:	2b05      	cmp	r3, #5
 8003982:	d115      	bne.n	80039b0 <HAL_RCC_OscConfig+0x50c>
 8003984:	4b08      	ldr	r3, [pc, #32]	; (80039a8 <HAL_RCC_OscConfig+0x504>)
 8003986:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800398a:	4a07      	ldr	r2, [pc, #28]	; (80039a8 <HAL_RCC_OscConfig+0x504>)
 800398c:	f043 0304 	orr.w	r3, r3, #4
 8003990:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003994:	4b04      	ldr	r3, [pc, #16]	; (80039a8 <HAL_RCC_OscConfig+0x504>)
 8003996:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800399a:	4a03      	ldr	r2, [pc, #12]	; (80039a8 <HAL_RCC_OscConfig+0x504>)
 800399c:	f043 0301 	orr.w	r3, r3, #1
 80039a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80039a4:	e014      	b.n	80039d0 <HAL_RCC_OscConfig+0x52c>
 80039a6:	bf00      	nop
 80039a8:	40021000 	.word	0x40021000
 80039ac:	40007000 	.word	0x40007000
 80039b0:	4b9a      	ldr	r3, [pc, #616]	; (8003c1c <HAL_RCC_OscConfig+0x778>)
 80039b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039b6:	4a99      	ldr	r2, [pc, #612]	; (8003c1c <HAL_RCC_OscConfig+0x778>)
 80039b8:	f023 0301 	bic.w	r3, r3, #1
 80039bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80039c0:	4b96      	ldr	r3, [pc, #600]	; (8003c1c <HAL_RCC_OscConfig+0x778>)
 80039c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039c6:	4a95      	ldr	r2, [pc, #596]	; (8003c1c <HAL_RCC_OscConfig+0x778>)
 80039c8:	f023 0304 	bic.w	r3, r3, #4
 80039cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	689b      	ldr	r3, [r3, #8]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d016      	beq.n	8003a06 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039d8:	f7fe f8ee 	bl	8001bb8 <HAL_GetTick>
 80039dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80039de:	e00a      	b.n	80039f6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039e0:	f7fe f8ea 	bl	8001bb8 <HAL_GetTick>
 80039e4:	4602      	mov	r2, r0
 80039e6:	693b      	ldr	r3, [r7, #16]
 80039e8:	1ad3      	subs	r3, r2, r3
 80039ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d901      	bls.n	80039f6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80039f2:	2303      	movs	r3, #3
 80039f4:	e162      	b.n	8003cbc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80039f6:	4b89      	ldr	r3, [pc, #548]	; (8003c1c <HAL_RCC_OscConfig+0x778>)
 80039f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039fc:	f003 0302 	and.w	r3, r3, #2
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d0ed      	beq.n	80039e0 <HAL_RCC_OscConfig+0x53c>
 8003a04:	e015      	b.n	8003a32 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a06:	f7fe f8d7 	bl	8001bb8 <HAL_GetTick>
 8003a0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003a0c:	e00a      	b.n	8003a24 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a0e:	f7fe f8d3 	bl	8001bb8 <HAL_GetTick>
 8003a12:	4602      	mov	r2, r0
 8003a14:	693b      	ldr	r3, [r7, #16]
 8003a16:	1ad3      	subs	r3, r2, r3
 8003a18:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d901      	bls.n	8003a24 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003a20:	2303      	movs	r3, #3
 8003a22:	e14b      	b.n	8003cbc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003a24:	4b7d      	ldr	r3, [pc, #500]	; (8003c1c <HAL_RCC_OscConfig+0x778>)
 8003a26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a2a:	f003 0302 	and.w	r3, r3, #2
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d1ed      	bne.n	8003a0e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003a32:	7ffb      	ldrb	r3, [r7, #31]
 8003a34:	2b01      	cmp	r3, #1
 8003a36:	d105      	bne.n	8003a44 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a38:	4b78      	ldr	r3, [pc, #480]	; (8003c1c <HAL_RCC_OscConfig+0x778>)
 8003a3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a3c:	4a77      	ldr	r2, [pc, #476]	; (8003c1c <HAL_RCC_OscConfig+0x778>)
 8003a3e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a42:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f003 0320 	and.w	r3, r3, #32
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d03c      	beq.n	8003aca <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d01c      	beq.n	8003a92 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003a58:	4b70      	ldr	r3, [pc, #448]	; (8003c1c <HAL_RCC_OscConfig+0x778>)
 8003a5a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003a5e:	4a6f      	ldr	r2, [pc, #444]	; (8003c1c <HAL_RCC_OscConfig+0x778>)
 8003a60:	f043 0301 	orr.w	r3, r3, #1
 8003a64:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a68:	f7fe f8a6 	bl	8001bb8 <HAL_GetTick>
 8003a6c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003a6e:	e008      	b.n	8003a82 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003a70:	f7fe f8a2 	bl	8001bb8 <HAL_GetTick>
 8003a74:	4602      	mov	r2, r0
 8003a76:	693b      	ldr	r3, [r7, #16]
 8003a78:	1ad3      	subs	r3, r2, r3
 8003a7a:	2b02      	cmp	r3, #2
 8003a7c:	d901      	bls.n	8003a82 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8003a7e:	2303      	movs	r3, #3
 8003a80:	e11c      	b.n	8003cbc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003a82:	4b66      	ldr	r3, [pc, #408]	; (8003c1c <HAL_RCC_OscConfig+0x778>)
 8003a84:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003a88:	f003 0302 	and.w	r3, r3, #2
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d0ef      	beq.n	8003a70 <HAL_RCC_OscConfig+0x5cc>
 8003a90:	e01b      	b.n	8003aca <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003a92:	4b62      	ldr	r3, [pc, #392]	; (8003c1c <HAL_RCC_OscConfig+0x778>)
 8003a94:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003a98:	4a60      	ldr	r2, [pc, #384]	; (8003c1c <HAL_RCC_OscConfig+0x778>)
 8003a9a:	f023 0301 	bic.w	r3, r3, #1
 8003a9e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003aa2:	f7fe f889 	bl	8001bb8 <HAL_GetTick>
 8003aa6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003aa8:	e008      	b.n	8003abc <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003aaa:	f7fe f885 	bl	8001bb8 <HAL_GetTick>
 8003aae:	4602      	mov	r2, r0
 8003ab0:	693b      	ldr	r3, [r7, #16]
 8003ab2:	1ad3      	subs	r3, r2, r3
 8003ab4:	2b02      	cmp	r3, #2
 8003ab6:	d901      	bls.n	8003abc <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003ab8:	2303      	movs	r3, #3
 8003aba:	e0ff      	b.n	8003cbc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003abc:	4b57      	ldr	r3, [pc, #348]	; (8003c1c <HAL_RCC_OscConfig+0x778>)
 8003abe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003ac2:	f003 0302 	and.w	r3, r3, #2
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d1ef      	bne.n	8003aaa <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	f000 80f3 	beq.w	8003cba <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ad8:	2b02      	cmp	r3, #2
 8003ada:	f040 80c9 	bne.w	8003c70 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003ade:	4b4f      	ldr	r3, [pc, #316]	; (8003c1c <HAL_RCC_OscConfig+0x778>)
 8003ae0:	68db      	ldr	r3, [r3, #12]
 8003ae2:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ae4:	697b      	ldr	r3, [r7, #20]
 8003ae6:	f003 0203 	and.w	r2, r3, #3
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aee:	429a      	cmp	r2, r3
 8003af0:	d12c      	bne.n	8003b4c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003af2:	697b      	ldr	r3, [r7, #20]
 8003af4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003afc:	3b01      	subs	r3, #1
 8003afe:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b00:	429a      	cmp	r2, r3
 8003b02:	d123      	bne.n	8003b4c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003b04:	697b      	ldr	r3, [r7, #20]
 8003b06:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b0e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003b10:	429a      	cmp	r2, r3
 8003b12:	d11b      	bne.n	8003b4c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003b14:	697b      	ldr	r3, [r7, #20]
 8003b16:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b1e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003b20:	429a      	cmp	r2, r3
 8003b22:	d113      	bne.n	8003b4c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003b24:	697b      	ldr	r3, [r7, #20]
 8003b26:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b2e:	085b      	lsrs	r3, r3, #1
 8003b30:	3b01      	subs	r3, #1
 8003b32:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003b34:	429a      	cmp	r2, r3
 8003b36:	d109      	bne.n	8003b4c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003b38:	697b      	ldr	r3, [r7, #20]
 8003b3a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b42:	085b      	lsrs	r3, r3, #1
 8003b44:	3b01      	subs	r3, #1
 8003b46:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003b48:	429a      	cmp	r2, r3
 8003b4a:	d06b      	beq.n	8003c24 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003b4c:	69bb      	ldr	r3, [r7, #24]
 8003b4e:	2b0c      	cmp	r3, #12
 8003b50:	d062      	beq.n	8003c18 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003b52:	4b32      	ldr	r3, [pc, #200]	; (8003c1c <HAL_RCC_OscConfig+0x778>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d001      	beq.n	8003b62 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8003b5e:	2301      	movs	r3, #1
 8003b60:	e0ac      	b.n	8003cbc <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003b62:	4b2e      	ldr	r3, [pc, #184]	; (8003c1c <HAL_RCC_OscConfig+0x778>)
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	4a2d      	ldr	r2, [pc, #180]	; (8003c1c <HAL_RCC_OscConfig+0x778>)
 8003b68:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003b6c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003b6e:	f7fe f823 	bl	8001bb8 <HAL_GetTick>
 8003b72:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b74:	e008      	b.n	8003b88 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b76:	f7fe f81f 	bl	8001bb8 <HAL_GetTick>
 8003b7a:	4602      	mov	r2, r0
 8003b7c:	693b      	ldr	r3, [r7, #16]
 8003b7e:	1ad3      	subs	r3, r2, r3
 8003b80:	2b02      	cmp	r3, #2
 8003b82:	d901      	bls.n	8003b88 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8003b84:	2303      	movs	r3, #3
 8003b86:	e099      	b.n	8003cbc <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b88:	4b24      	ldr	r3, [pc, #144]	; (8003c1c <HAL_RCC_OscConfig+0x778>)
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d1f0      	bne.n	8003b76 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003b94:	4b21      	ldr	r3, [pc, #132]	; (8003c1c <HAL_RCC_OscConfig+0x778>)
 8003b96:	68da      	ldr	r2, [r3, #12]
 8003b98:	4b21      	ldr	r3, [pc, #132]	; (8003c20 <HAL_RCC_OscConfig+0x77c>)
 8003b9a:	4013      	ands	r3, r2
 8003b9c:	687a      	ldr	r2, [r7, #4]
 8003b9e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003ba0:	687a      	ldr	r2, [r7, #4]
 8003ba2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003ba4:	3a01      	subs	r2, #1
 8003ba6:	0112      	lsls	r2, r2, #4
 8003ba8:	4311      	orrs	r1, r2
 8003baa:	687a      	ldr	r2, [r7, #4]
 8003bac:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003bae:	0212      	lsls	r2, r2, #8
 8003bb0:	4311      	orrs	r1, r2
 8003bb2:	687a      	ldr	r2, [r7, #4]
 8003bb4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003bb6:	0852      	lsrs	r2, r2, #1
 8003bb8:	3a01      	subs	r2, #1
 8003bba:	0552      	lsls	r2, r2, #21
 8003bbc:	4311      	orrs	r1, r2
 8003bbe:	687a      	ldr	r2, [r7, #4]
 8003bc0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003bc2:	0852      	lsrs	r2, r2, #1
 8003bc4:	3a01      	subs	r2, #1
 8003bc6:	0652      	lsls	r2, r2, #25
 8003bc8:	4311      	orrs	r1, r2
 8003bca:	687a      	ldr	r2, [r7, #4]
 8003bcc:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003bce:	06d2      	lsls	r2, r2, #27
 8003bd0:	430a      	orrs	r2, r1
 8003bd2:	4912      	ldr	r1, [pc, #72]	; (8003c1c <HAL_RCC_OscConfig+0x778>)
 8003bd4:	4313      	orrs	r3, r2
 8003bd6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003bd8:	4b10      	ldr	r3, [pc, #64]	; (8003c1c <HAL_RCC_OscConfig+0x778>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	4a0f      	ldr	r2, [pc, #60]	; (8003c1c <HAL_RCC_OscConfig+0x778>)
 8003bde:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003be2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003be4:	4b0d      	ldr	r3, [pc, #52]	; (8003c1c <HAL_RCC_OscConfig+0x778>)
 8003be6:	68db      	ldr	r3, [r3, #12]
 8003be8:	4a0c      	ldr	r2, [pc, #48]	; (8003c1c <HAL_RCC_OscConfig+0x778>)
 8003bea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003bee:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003bf0:	f7fd ffe2 	bl	8001bb8 <HAL_GetTick>
 8003bf4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003bf6:	e008      	b.n	8003c0a <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bf8:	f7fd ffde 	bl	8001bb8 <HAL_GetTick>
 8003bfc:	4602      	mov	r2, r0
 8003bfe:	693b      	ldr	r3, [r7, #16]
 8003c00:	1ad3      	subs	r3, r2, r3
 8003c02:	2b02      	cmp	r3, #2
 8003c04:	d901      	bls.n	8003c0a <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8003c06:	2303      	movs	r3, #3
 8003c08:	e058      	b.n	8003cbc <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c0a:	4b04      	ldr	r3, [pc, #16]	; (8003c1c <HAL_RCC_OscConfig+0x778>)
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d0f0      	beq.n	8003bf8 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003c16:	e050      	b.n	8003cba <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003c18:	2301      	movs	r3, #1
 8003c1a:	e04f      	b.n	8003cbc <HAL_RCC_OscConfig+0x818>
 8003c1c:	40021000 	.word	0x40021000
 8003c20:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c24:	4b27      	ldr	r3, [pc, #156]	; (8003cc4 <HAL_RCC_OscConfig+0x820>)
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d144      	bne.n	8003cba <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003c30:	4b24      	ldr	r3, [pc, #144]	; (8003cc4 <HAL_RCC_OscConfig+0x820>)
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4a23      	ldr	r2, [pc, #140]	; (8003cc4 <HAL_RCC_OscConfig+0x820>)
 8003c36:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c3a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003c3c:	4b21      	ldr	r3, [pc, #132]	; (8003cc4 <HAL_RCC_OscConfig+0x820>)
 8003c3e:	68db      	ldr	r3, [r3, #12]
 8003c40:	4a20      	ldr	r2, [pc, #128]	; (8003cc4 <HAL_RCC_OscConfig+0x820>)
 8003c42:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c46:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003c48:	f7fd ffb6 	bl	8001bb8 <HAL_GetTick>
 8003c4c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c4e:	e008      	b.n	8003c62 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c50:	f7fd ffb2 	bl	8001bb8 <HAL_GetTick>
 8003c54:	4602      	mov	r2, r0
 8003c56:	693b      	ldr	r3, [r7, #16]
 8003c58:	1ad3      	subs	r3, r2, r3
 8003c5a:	2b02      	cmp	r3, #2
 8003c5c:	d901      	bls.n	8003c62 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8003c5e:	2303      	movs	r3, #3
 8003c60:	e02c      	b.n	8003cbc <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c62:	4b18      	ldr	r3, [pc, #96]	; (8003cc4 <HAL_RCC_OscConfig+0x820>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d0f0      	beq.n	8003c50 <HAL_RCC_OscConfig+0x7ac>
 8003c6e:	e024      	b.n	8003cba <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003c70:	69bb      	ldr	r3, [r7, #24]
 8003c72:	2b0c      	cmp	r3, #12
 8003c74:	d01f      	beq.n	8003cb6 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c76:	4b13      	ldr	r3, [pc, #76]	; (8003cc4 <HAL_RCC_OscConfig+0x820>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	4a12      	ldr	r2, [pc, #72]	; (8003cc4 <HAL_RCC_OscConfig+0x820>)
 8003c7c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003c80:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c82:	f7fd ff99 	bl	8001bb8 <HAL_GetTick>
 8003c86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c88:	e008      	b.n	8003c9c <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c8a:	f7fd ff95 	bl	8001bb8 <HAL_GetTick>
 8003c8e:	4602      	mov	r2, r0
 8003c90:	693b      	ldr	r3, [r7, #16]
 8003c92:	1ad3      	subs	r3, r2, r3
 8003c94:	2b02      	cmp	r3, #2
 8003c96:	d901      	bls.n	8003c9c <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8003c98:	2303      	movs	r3, #3
 8003c9a:	e00f      	b.n	8003cbc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c9c:	4b09      	ldr	r3, [pc, #36]	; (8003cc4 <HAL_RCC_OscConfig+0x820>)
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d1f0      	bne.n	8003c8a <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8003ca8:	4b06      	ldr	r3, [pc, #24]	; (8003cc4 <HAL_RCC_OscConfig+0x820>)
 8003caa:	68da      	ldr	r2, [r3, #12]
 8003cac:	4905      	ldr	r1, [pc, #20]	; (8003cc4 <HAL_RCC_OscConfig+0x820>)
 8003cae:	4b06      	ldr	r3, [pc, #24]	; (8003cc8 <HAL_RCC_OscConfig+0x824>)
 8003cb0:	4013      	ands	r3, r2
 8003cb2:	60cb      	str	r3, [r1, #12]
 8003cb4:	e001      	b.n	8003cba <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	e000      	b.n	8003cbc <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8003cba:	2300      	movs	r3, #0
}
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	3720      	adds	r7, #32
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	bd80      	pop	{r7, pc}
 8003cc4:	40021000 	.word	0x40021000
 8003cc8:	feeefffc 	.word	0xfeeefffc

08003ccc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b084      	sub	sp, #16
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
 8003cd4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d101      	bne.n	8003ce0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003cdc:	2301      	movs	r3, #1
 8003cde:	e0e7      	b.n	8003eb0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003ce0:	4b75      	ldr	r3, [pc, #468]	; (8003eb8 <HAL_RCC_ClockConfig+0x1ec>)
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f003 0307 	and.w	r3, r3, #7
 8003ce8:	683a      	ldr	r2, [r7, #0]
 8003cea:	429a      	cmp	r2, r3
 8003cec:	d910      	bls.n	8003d10 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cee:	4b72      	ldr	r3, [pc, #456]	; (8003eb8 <HAL_RCC_ClockConfig+0x1ec>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f023 0207 	bic.w	r2, r3, #7
 8003cf6:	4970      	ldr	r1, [pc, #448]	; (8003eb8 <HAL_RCC_ClockConfig+0x1ec>)
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	4313      	orrs	r3, r2
 8003cfc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cfe:	4b6e      	ldr	r3, [pc, #440]	; (8003eb8 <HAL_RCC_ClockConfig+0x1ec>)
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f003 0307 	and.w	r3, r3, #7
 8003d06:	683a      	ldr	r2, [r7, #0]
 8003d08:	429a      	cmp	r2, r3
 8003d0a:	d001      	beq.n	8003d10 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003d0c:	2301      	movs	r3, #1
 8003d0e:	e0cf      	b.n	8003eb0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f003 0302 	and.w	r3, r3, #2
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d010      	beq.n	8003d3e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	689a      	ldr	r2, [r3, #8]
 8003d20:	4b66      	ldr	r3, [pc, #408]	; (8003ebc <HAL_RCC_ClockConfig+0x1f0>)
 8003d22:	689b      	ldr	r3, [r3, #8]
 8003d24:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003d28:	429a      	cmp	r2, r3
 8003d2a:	d908      	bls.n	8003d3e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d2c:	4b63      	ldr	r3, [pc, #396]	; (8003ebc <HAL_RCC_ClockConfig+0x1f0>)
 8003d2e:	689b      	ldr	r3, [r3, #8]
 8003d30:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	689b      	ldr	r3, [r3, #8]
 8003d38:	4960      	ldr	r1, [pc, #384]	; (8003ebc <HAL_RCC_ClockConfig+0x1f0>)
 8003d3a:	4313      	orrs	r3, r2
 8003d3c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f003 0301 	and.w	r3, r3, #1
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d04c      	beq.n	8003de4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	685b      	ldr	r3, [r3, #4]
 8003d4e:	2b03      	cmp	r3, #3
 8003d50:	d107      	bne.n	8003d62 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d52:	4b5a      	ldr	r3, [pc, #360]	; (8003ebc <HAL_RCC_ClockConfig+0x1f0>)
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d121      	bne.n	8003da2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003d5e:	2301      	movs	r3, #1
 8003d60:	e0a6      	b.n	8003eb0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	685b      	ldr	r3, [r3, #4]
 8003d66:	2b02      	cmp	r3, #2
 8003d68:	d107      	bne.n	8003d7a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003d6a:	4b54      	ldr	r3, [pc, #336]	; (8003ebc <HAL_RCC_ClockConfig+0x1f0>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d115      	bne.n	8003da2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003d76:	2301      	movs	r3, #1
 8003d78:	e09a      	b.n	8003eb0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	685b      	ldr	r3, [r3, #4]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d107      	bne.n	8003d92 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003d82:	4b4e      	ldr	r3, [pc, #312]	; (8003ebc <HAL_RCC_ClockConfig+0x1f0>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f003 0302 	and.w	r3, r3, #2
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d109      	bne.n	8003da2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003d8e:	2301      	movs	r3, #1
 8003d90:	e08e      	b.n	8003eb0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003d92:	4b4a      	ldr	r3, [pc, #296]	; (8003ebc <HAL_RCC_ClockConfig+0x1f0>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d101      	bne.n	8003da2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003d9e:	2301      	movs	r3, #1
 8003da0:	e086      	b.n	8003eb0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003da2:	4b46      	ldr	r3, [pc, #280]	; (8003ebc <HAL_RCC_ClockConfig+0x1f0>)
 8003da4:	689b      	ldr	r3, [r3, #8]
 8003da6:	f023 0203 	bic.w	r2, r3, #3
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	685b      	ldr	r3, [r3, #4]
 8003dae:	4943      	ldr	r1, [pc, #268]	; (8003ebc <HAL_RCC_ClockConfig+0x1f0>)
 8003db0:	4313      	orrs	r3, r2
 8003db2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003db4:	f7fd ff00 	bl	8001bb8 <HAL_GetTick>
 8003db8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003dba:	e00a      	b.n	8003dd2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003dbc:	f7fd fefc 	bl	8001bb8 <HAL_GetTick>
 8003dc0:	4602      	mov	r2, r0
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	1ad3      	subs	r3, r2, r3
 8003dc6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d901      	bls.n	8003dd2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003dce:	2303      	movs	r3, #3
 8003dd0:	e06e      	b.n	8003eb0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003dd2:	4b3a      	ldr	r3, [pc, #232]	; (8003ebc <HAL_RCC_ClockConfig+0x1f0>)
 8003dd4:	689b      	ldr	r3, [r3, #8]
 8003dd6:	f003 020c 	and.w	r2, r3, #12
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	685b      	ldr	r3, [r3, #4]
 8003dde:	009b      	lsls	r3, r3, #2
 8003de0:	429a      	cmp	r2, r3
 8003de2:	d1eb      	bne.n	8003dbc <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f003 0302 	and.w	r3, r3, #2
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d010      	beq.n	8003e12 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	689a      	ldr	r2, [r3, #8]
 8003df4:	4b31      	ldr	r3, [pc, #196]	; (8003ebc <HAL_RCC_ClockConfig+0x1f0>)
 8003df6:	689b      	ldr	r3, [r3, #8]
 8003df8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003dfc:	429a      	cmp	r2, r3
 8003dfe:	d208      	bcs.n	8003e12 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e00:	4b2e      	ldr	r3, [pc, #184]	; (8003ebc <HAL_RCC_ClockConfig+0x1f0>)
 8003e02:	689b      	ldr	r3, [r3, #8]
 8003e04:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	689b      	ldr	r3, [r3, #8]
 8003e0c:	492b      	ldr	r1, [pc, #172]	; (8003ebc <HAL_RCC_ClockConfig+0x1f0>)
 8003e0e:	4313      	orrs	r3, r2
 8003e10:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003e12:	4b29      	ldr	r3, [pc, #164]	; (8003eb8 <HAL_RCC_ClockConfig+0x1ec>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f003 0307 	and.w	r3, r3, #7
 8003e1a:	683a      	ldr	r2, [r7, #0]
 8003e1c:	429a      	cmp	r2, r3
 8003e1e:	d210      	bcs.n	8003e42 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e20:	4b25      	ldr	r3, [pc, #148]	; (8003eb8 <HAL_RCC_ClockConfig+0x1ec>)
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f023 0207 	bic.w	r2, r3, #7
 8003e28:	4923      	ldr	r1, [pc, #140]	; (8003eb8 <HAL_RCC_ClockConfig+0x1ec>)
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	4313      	orrs	r3, r2
 8003e2e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e30:	4b21      	ldr	r3, [pc, #132]	; (8003eb8 <HAL_RCC_ClockConfig+0x1ec>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f003 0307 	and.w	r3, r3, #7
 8003e38:	683a      	ldr	r2, [r7, #0]
 8003e3a:	429a      	cmp	r2, r3
 8003e3c:	d001      	beq.n	8003e42 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003e3e:	2301      	movs	r3, #1
 8003e40:	e036      	b.n	8003eb0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f003 0304 	and.w	r3, r3, #4
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d008      	beq.n	8003e60 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e4e:	4b1b      	ldr	r3, [pc, #108]	; (8003ebc <HAL_RCC_ClockConfig+0x1f0>)
 8003e50:	689b      	ldr	r3, [r3, #8]
 8003e52:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	68db      	ldr	r3, [r3, #12]
 8003e5a:	4918      	ldr	r1, [pc, #96]	; (8003ebc <HAL_RCC_ClockConfig+0x1f0>)
 8003e5c:	4313      	orrs	r3, r2
 8003e5e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f003 0308 	and.w	r3, r3, #8
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d009      	beq.n	8003e80 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003e6c:	4b13      	ldr	r3, [pc, #76]	; (8003ebc <HAL_RCC_ClockConfig+0x1f0>)
 8003e6e:	689b      	ldr	r3, [r3, #8]
 8003e70:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	691b      	ldr	r3, [r3, #16]
 8003e78:	00db      	lsls	r3, r3, #3
 8003e7a:	4910      	ldr	r1, [pc, #64]	; (8003ebc <HAL_RCC_ClockConfig+0x1f0>)
 8003e7c:	4313      	orrs	r3, r2
 8003e7e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003e80:	f000 f824 	bl	8003ecc <HAL_RCC_GetSysClockFreq>
 8003e84:	4602      	mov	r2, r0
 8003e86:	4b0d      	ldr	r3, [pc, #52]	; (8003ebc <HAL_RCC_ClockConfig+0x1f0>)
 8003e88:	689b      	ldr	r3, [r3, #8]
 8003e8a:	091b      	lsrs	r3, r3, #4
 8003e8c:	f003 030f 	and.w	r3, r3, #15
 8003e90:	490b      	ldr	r1, [pc, #44]	; (8003ec0 <HAL_RCC_ClockConfig+0x1f4>)
 8003e92:	5ccb      	ldrb	r3, [r1, r3]
 8003e94:	f003 031f 	and.w	r3, r3, #31
 8003e98:	fa22 f303 	lsr.w	r3, r2, r3
 8003e9c:	4a09      	ldr	r2, [pc, #36]	; (8003ec4 <HAL_RCC_ClockConfig+0x1f8>)
 8003e9e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003ea0:	4b09      	ldr	r3, [pc, #36]	; (8003ec8 <HAL_RCC_ClockConfig+0x1fc>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	f7fd fe37 	bl	8001b18 <HAL_InitTick>
 8003eaa:	4603      	mov	r3, r0
 8003eac:	72fb      	strb	r3, [r7, #11]

  return status;
 8003eae:	7afb      	ldrb	r3, [r7, #11]
}
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	3710      	adds	r7, #16
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	bd80      	pop	{r7, pc}
 8003eb8:	40022000 	.word	0x40022000
 8003ebc:	40021000 	.word	0x40021000
 8003ec0:	0800784c 	.word	0x0800784c
 8003ec4:	20000004 	.word	0x20000004
 8003ec8:	20000008 	.word	0x20000008

08003ecc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ecc:	b480      	push	{r7}
 8003ece:	b089      	sub	sp, #36	; 0x24
 8003ed0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	61fb      	str	r3, [r7, #28]
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003eda:	4b3e      	ldr	r3, [pc, #248]	; (8003fd4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003edc:	689b      	ldr	r3, [r3, #8]
 8003ede:	f003 030c 	and.w	r3, r3, #12
 8003ee2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003ee4:	4b3b      	ldr	r3, [pc, #236]	; (8003fd4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ee6:	68db      	ldr	r3, [r3, #12]
 8003ee8:	f003 0303 	and.w	r3, r3, #3
 8003eec:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003eee:	693b      	ldr	r3, [r7, #16]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d005      	beq.n	8003f00 <HAL_RCC_GetSysClockFreq+0x34>
 8003ef4:	693b      	ldr	r3, [r7, #16]
 8003ef6:	2b0c      	cmp	r3, #12
 8003ef8:	d121      	bne.n	8003f3e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	2b01      	cmp	r3, #1
 8003efe:	d11e      	bne.n	8003f3e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003f00:	4b34      	ldr	r3, [pc, #208]	; (8003fd4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f003 0308 	and.w	r3, r3, #8
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d107      	bne.n	8003f1c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003f0c:	4b31      	ldr	r3, [pc, #196]	; (8003fd4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f12:	0a1b      	lsrs	r3, r3, #8
 8003f14:	f003 030f 	and.w	r3, r3, #15
 8003f18:	61fb      	str	r3, [r7, #28]
 8003f1a:	e005      	b.n	8003f28 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003f1c:	4b2d      	ldr	r3, [pc, #180]	; (8003fd4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	091b      	lsrs	r3, r3, #4
 8003f22:	f003 030f 	and.w	r3, r3, #15
 8003f26:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003f28:	4a2b      	ldr	r2, [pc, #172]	; (8003fd8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003f2a:	69fb      	ldr	r3, [r7, #28]
 8003f2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f30:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003f32:	693b      	ldr	r3, [r7, #16]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d10d      	bne.n	8003f54 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003f38:	69fb      	ldr	r3, [r7, #28]
 8003f3a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003f3c:	e00a      	b.n	8003f54 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003f3e:	693b      	ldr	r3, [r7, #16]
 8003f40:	2b04      	cmp	r3, #4
 8003f42:	d102      	bne.n	8003f4a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003f44:	4b25      	ldr	r3, [pc, #148]	; (8003fdc <HAL_RCC_GetSysClockFreq+0x110>)
 8003f46:	61bb      	str	r3, [r7, #24]
 8003f48:	e004      	b.n	8003f54 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003f4a:	693b      	ldr	r3, [r7, #16]
 8003f4c:	2b08      	cmp	r3, #8
 8003f4e:	d101      	bne.n	8003f54 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003f50:	4b23      	ldr	r3, [pc, #140]	; (8003fe0 <HAL_RCC_GetSysClockFreq+0x114>)
 8003f52:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003f54:	693b      	ldr	r3, [r7, #16]
 8003f56:	2b0c      	cmp	r3, #12
 8003f58:	d134      	bne.n	8003fc4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003f5a:	4b1e      	ldr	r3, [pc, #120]	; (8003fd4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f5c:	68db      	ldr	r3, [r3, #12]
 8003f5e:	f003 0303 	and.w	r3, r3, #3
 8003f62:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003f64:	68bb      	ldr	r3, [r7, #8]
 8003f66:	2b02      	cmp	r3, #2
 8003f68:	d003      	beq.n	8003f72 <HAL_RCC_GetSysClockFreq+0xa6>
 8003f6a:	68bb      	ldr	r3, [r7, #8]
 8003f6c:	2b03      	cmp	r3, #3
 8003f6e:	d003      	beq.n	8003f78 <HAL_RCC_GetSysClockFreq+0xac>
 8003f70:	e005      	b.n	8003f7e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003f72:	4b1a      	ldr	r3, [pc, #104]	; (8003fdc <HAL_RCC_GetSysClockFreq+0x110>)
 8003f74:	617b      	str	r3, [r7, #20]
      break;
 8003f76:	e005      	b.n	8003f84 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003f78:	4b19      	ldr	r3, [pc, #100]	; (8003fe0 <HAL_RCC_GetSysClockFreq+0x114>)
 8003f7a:	617b      	str	r3, [r7, #20]
      break;
 8003f7c:	e002      	b.n	8003f84 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003f7e:	69fb      	ldr	r3, [r7, #28]
 8003f80:	617b      	str	r3, [r7, #20]
      break;
 8003f82:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003f84:	4b13      	ldr	r3, [pc, #76]	; (8003fd4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f86:	68db      	ldr	r3, [r3, #12]
 8003f88:	091b      	lsrs	r3, r3, #4
 8003f8a:	f003 0307 	and.w	r3, r3, #7
 8003f8e:	3301      	adds	r3, #1
 8003f90:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003f92:	4b10      	ldr	r3, [pc, #64]	; (8003fd4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f94:	68db      	ldr	r3, [r3, #12]
 8003f96:	0a1b      	lsrs	r3, r3, #8
 8003f98:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003f9c:	697a      	ldr	r2, [r7, #20]
 8003f9e:	fb03 f202 	mul.w	r2, r3, r2
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fa8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003faa:	4b0a      	ldr	r3, [pc, #40]	; (8003fd4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003fac:	68db      	ldr	r3, [r3, #12]
 8003fae:	0e5b      	lsrs	r3, r3, #25
 8003fb0:	f003 0303 	and.w	r3, r3, #3
 8003fb4:	3301      	adds	r3, #1
 8003fb6:	005b      	lsls	r3, r3, #1
 8003fb8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003fba:	697a      	ldr	r2, [r7, #20]
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fc2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003fc4:	69bb      	ldr	r3, [r7, #24]
}
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	3724      	adds	r7, #36	; 0x24
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd0:	4770      	bx	lr
 8003fd2:	bf00      	nop
 8003fd4:	40021000 	.word	0x40021000
 8003fd8:	08007864 	.word	0x08007864
 8003fdc:	00f42400 	.word	0x00f42400
 8003fe0:	007a1200 	.word	0x007a1200

08003fe4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003fe4:	b480      	push	{r7}
 8003fe6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003fe8:	4b03      	ldr	r3, [pc, #12]	; (8003ff8 <HAL_RCC_GetHCLKFreq+0x14>)
 8003fea:	681b      	ldr	r3, [r3, #0]
}
 8003fec:	4618      	mov	r0, r3
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff4:	4770      	bx	lr
 8003ff6:	bf00      	nop
 8003ff8:	20000004 	.word	0x20000004

08003ffc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004000:	f7ff fff0 	bl	8003fe4 <HAL_RCC_GetHCLKFreq>
 8004004:	4602      	mov	r2, r0
 8004006:	4b06      	ldr	r3, [pc, #24]	; (8004020 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004008:	689b      	ldr	r3, [r3, #8]
 800400a:	0a1b      	lsrs	r3, r3, #8
 800400c:	f003 0307 	and.w	r3, r3, #7
 8004010:	4904      	ldr	r1, [pc, #16]	; (8004024 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004012:	5ccb      	ldrb	r3, [r1, r3]
 8004014:	f003 031f 	and.w	r3, r3, #31
 8004018:	fa22 f303 	lsr.w	r3, r2, r3
}
 800401c:	4618      	mov	r0, r3
 800401e:	bd80      	pop	{r7, pc}
 8004020:	40021000 	.word	0x40021000
 8004024:	0800785c 	.word	0x0800785c

08004028 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800402c:	f7ff ffda 	bl	8003fe4 <HAL_RCC_GetHCLKFreq>
 8004030:	4602      	mov	r2, r0
 8004032:	4b06      	ldr	r3, [pc, #24]	; (800404c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004034:	689b      	ldr	r3, [r3, #8]
 8004036:	0adb      	lsrs	r3, r3, #11
 8004038:	f003 0307 	and.w	r3, r3, #7
 800403c:	4904      	ldr	r1, [pc, #16]	; (8004050 <HAL_RCC_GetPCLK2Freq+0x28>)
 800403e:	5ccb      	ldrb	r3, [r1, r3]
 8004040:	f003 031f 	and.w	r3, r3, #31
 8004044:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004048:	4618      	mov	r0, r3
 800404a:	bd80      	pop	{r7, pc}
 800404c:	40021000 	.word	0x40021000
 8004050:	0800785c 	.word	0x0800785c

08004054 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004054:	b580      	push	{r7, lr}
 8004056:	b086      	sub	sp, #24
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800405c:	2300      	movs	r3, #0
 800405e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004060:	4b2a      	ldr	r3, [pc, #168]	; (800410c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004062:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004064:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004068:	2b00      	cmp	r3, #0
 800406a:	d003      	beq.n	8004074 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800406c:	f7ff f9b6 	bl	80033dc <HAL_PWREx_GetVoltageRange>
 8004070:	6178      	str	r0, [r7, #20]
 8004072:	e014      	b.n	800409e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004074:	4b25      	ldr	r3, [pc, #148]	; (800410c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004076:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004078:	4a24      	ldr	r2, [pc, #144]	; (800410c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800407a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800407e:	6593      	str	r3, [r2, #88]	; 0x58
 8004080:	4b22      	ldr	r3, [pc, #136]	; (800410c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004082:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004084:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004088:	60fb      	str	r3, [r7, #12]
 800408a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800408c:	f7ff f9a6 	bl	80033dc <HAL_PWREx_GetVoltageRange>
 8004090:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004092:	4b1e      	ldr	r3, [pc, #120]	; (800410c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004094:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004096:	4a1d      	ldr	r2, [pc, #116]	; (800410c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004098:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800409c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800409e:	697b      	ldr	r3, [r7, #20]
 80040a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80040a4:	d10b      	bne.n	80040be <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	2b80      	cmp	r3, #128	; 0x80
 80040aa:	d919      	bls.n	80040e0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2ba0      	cmp	r3, #160	; 0xa0
 80040b0:	d902      	bls.n	80040b8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80040b2:	2302      	movs	r3, #2
 80040b4:	613b      	str	r3, [r7, #16]
 80040b6:	e013      	b.n	80040e0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80040b8:	2301      	movs	r3, #1
 80040ba:	613b      	str	r3, [r7, #16]
 80040bc:	e010      	b.n	80040e0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2b80      	cmp	r3, #128	; 0x80
 80040c2:	d902      	bls.n	80040ca <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80040c4:	2303      	movs	r3, #3
 80040c6:	613b      	str	r3, [r7, #16]
 80040c8:	e00a      	b.n	80040e0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2b80      	cmp	r3, #128	; 0x80
 80040ce:	d102      	bne.n	80040d6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80040d0:	2302      	movs	r3, #2
 80040d2:	613b      	str	r3, [r7, #16]
 80040d4:	e004      	b.n	80040e0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2b70      	cmp	r3, #112	; 0x70
 80040da:	d101      	bne.n	80040e0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80040dc:	2301      	movs	r3, #1
 80040de:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80040e0:	4b0b      	ldr	r3, [pc, #44]	; (8004110 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f023 0207 	bic.w	r2, r3, #7
 80040e8:	4909      	ldr	r1, [pc, #36]	; (8004110 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80040ea:	693b      	ldr	r3, [r7, #16]
 80040ec:	4313      	orrs	r3, r2
 80040ee:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80040f0:	4b07      	ldr	r3, [pc, #28]	; (8004110 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f003 0307 	and.w	r3, r3, #7
 80040f8:	693a      	ldr	r2, [r7, #16]
 80040fa:	429a      	cmp	r2, r3
 80040fc:	d001      	beq.n	8004102 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80040fe:	2301      	movs	r3, #1
 8004100:	e000      	b.n	8004104 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004102:	2300      	movs	r3, #0
}
 8004104:	4618      	mov	r0, r3
 8004106:	3718      	adds	r7, #24
 8004108:	46bd      	mov	sp, r7
 800410a:	bd80      	pop	{r7, pc}
 800410c:	40021000 	.word	0x40021000
 8004110:	40022000 	.word	0x40022000

08004114 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004114:	b580      	push	{r7, lr}
 8004116:	b086      	sub	sp, #24
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800411c:	2300      	movs	r3, #0
 800411e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004120:	2300      	movs	r3, #0
 8004122:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800412c:	2b00      	cmp	r3, #0
 800412e:	d031      	beq.n	8004194 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004134:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004138:	d01a      	beq.n	8004170 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800413a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800413e:	d814      	bhi.n	800416a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004140:	2b00      	cmp	r3, #0
 8004142:	d009      	beq.n	8004158 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004144:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004148:	d10f      	bne.n	800416a <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800414a:	4b5d      	ldr	r3, [pc, #372]	; (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800414c:	68db      	ldr	r3, [r3, #12]
 800414e:	4a5c      	ldr	r2, [pc, #368]	; (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004150:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004154:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004156:	e00c      	b.n	8004172 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	3304      	adds	r3, #4
 800415c:	2100      	movs	r1, #0
 800415e:	4618      	mov	r0, r3
 8004160:	f000 fa44 	bl	80045ec <RCCEx_PLLSAI1_Config>
 8004164:	4603      	mov	r3, r0
 8004166:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004168:	e003      	b.n	8004172 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800416a:	2301      	movs	r3, #1
 800416c:	74fb      	strb	r3, [r7, #19]
      break;
 800416e:	e000      	b.n	8004172 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8004170:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004172:	7cfb      	ldrb	r3, [r7, #19]
 8004174:	2b00      	cmp	r3, #0
 8004176:	d10b      	bne.n	8004190 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004178:	4b51      	ldr	r3, [pc, #324]	; (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800417a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800417e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004186:	494e      	ldr	r1, [pc, #312]	; (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004188:	4313      	orrs	r3, r2
 800418a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800418e:	e001      	b.n	8004194 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004190:	7cfb      	ldrb	r3, [r7, #19]
 8004192:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800419c:	2b00      	cmp	r3, #0
 800419e:	f000 809e 	beq.w	80042de <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80041a2:	2300      	movs	r3, #0
 80041a4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80041a6:	4b46      	ldr	r3, [pc, #280]	; (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80041a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d101      	bne.n	80041b6 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80041b2:	2301      	movs	r3, #1
 80041b4:	e000      	b.n	80041b8 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 80041b6:	2300      	movs	r3, #0
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d00d      	beq.n	80041d8 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80041bc:	4b40      	ldr	r3, [pc, #256]	; (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80041be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041c0:	4a3f      	ldr	r2, [pc, #252]	; (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80041c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041c6:	6593      	str	r3, [r2, #88]	; 0x58
 80041c8:	4b3d      	ldr	r3, [pc, #244]	; (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80041ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041d0:	60bb      	str	r3, [r7, #8]
 80041d2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80041d4:	2301      	movs	r3, #1
 80041d6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80041d8:	4b3a      	ldr	r3, [pc, #232]	; (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	4a39      	ldr	r2, [pc, #228]	; (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80041de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041e2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80041e4:	f7fd fce8 	bl	8001bb8 <HAL_GetTick>
 80041e8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80041ea:	e009      	b.n	8004200 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041ec:	f7fd fce4 	bl	8001bb8 <HAL_GetTick>
 80041f0:	4602      	mov	r2, r0
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	1ad3      	subs	r3, r2, r3
 80041f6:	2b02      	cmp	r3, #2
 80041f8:	d902      	bls.n	8004200 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 80041fa:	2303      	movs	r3, #3
 80041fc:	74fb      	strb	r3, [r7, #19]
        break;
 80041fe:	e005      	b.n	800420c <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004200:	4b30      	ldr	r3, [pc, #192]	; (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004208:	2b00      	cmp	r3, #0
 800420a:	d0ef      	beq.n	80041ec <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 800420c:	7cfb      	ldrb	r3, [r7, #19]
 800420e:	2b00      	cmp	r3, #0
 8004210:	d15a      	bne.n	80042c8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004212:	4b2b      	ldr	r3, [pc, #172]	; (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004214:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004218:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800421c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800421e:	697b      	ldr	r3, [r7, #20]
 8004220:	2b00      	cmp	r3, #0
 8004222:	d01e      	beq.n	8004262 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004228:	697a      	ldr	r2, [r7, #20]
 800422a:	429a      	cmp	r2, r3
 800422c:	d019      	beq.n	8004262 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800422e:	4b24      	ldr	r3, [pc, #144]	; (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004230:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004234:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004238:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800423a:	4b21      	ldr	r3, [pc, #132]	; (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800423c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004240:	4a1f      	ldr	r2, [pc, #124]	; (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004242:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004246:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800424a:	4b1d      	ldr	r3, [pc, #116]	; (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800424c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004250:	4a1b      	ldr	r2, [pc, #108]	; (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004252:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004256:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800425a:	4a19      	ldr	r2, [pc, #100]	; (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800425c:	697b      	ldr	r3, [r7, #20]
 800425e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004262:	697b      	ldr	r3, [r7, #20]
 8004264:	f003 0301 	and.w	r3, r3, #1
 8004268:	2b00      	cmp	r3, #0
 800426a:	d016      	beq.n	800429a <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800426c:	f7fd fca4 	bl	8001bb8 <HAL_GetTick>
 8004270:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004272:	e00b      	b.n	800428c <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004274:	f7fd fca0 	bl	8001bb8 <HAL_GetTick>
 8004278:	4602      	mov	r2, r0
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	1ad3      	subs	r3, r2, r3
 800427e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004282:	4293      	cmp	r3, r2
 8004284:	d902      	bls.n	800428c <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8004286:	2303      	movs	r3, #3
 8004288:	74fb      	strb	r3, [r7, #19]
            break;
 800428a:	e006      	b.n	800429a <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800428c:	4b0c      	ldr	r3, [pc, #48]	; (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800428e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004292:	f003 0302 	and.w	r3, r3, #2
 8004296:	2b00      	cmp	r3, #0
 8004298:	d0ec      	beq.n	8004274 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800429a:	7cfb      	ldrb	r3, [r7, #19]
 800429c:	2b00      	cmp	r3, #0
 800429e:	d10b      	bne.n	80042b8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80042a0:	4b07      	ldr	r3, [pc, #28]	; (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80042a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042a6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80042ae:	4904      	ldr	r1, [pc, #16]	; (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80042b0:	4313      	orrs	r3, r2
 80042b2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80042b6:	e009      	b.n	80042cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80042b8:	7cfb      	ldrb	r3, [r7, #19]
 80042ba:	74bb      	strb	r3, [r7, #18]
 80042bc:	e006      	b.n	80042cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 80042be:	bf00      	nop
 80042c0:	40021000 	.word	0x40021000
 80042c4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042c8:	7cfb      	ldrb	r3, [r7, #19]
 80042ca:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80042cc:	7c7b      	ldrb	r3, [r7, #17]
 80042ce:	2b01      	cmp	r3, #1
 80042d0:	d105      	bne.n	80042de <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80042d2:	4b9e      	ldr	r3, [pc, #632]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80042d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042d6:	4a9d      	ldr	r2, [pc, #628]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80042d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80042dc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f003 0301 	and.w	r3, r3, #1
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d00a      	beq.n	8004300 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80042ea:	4b98      	ldr	r3, [pc, #608]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80042ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042f0:	f023 0203 	bic.w	r2, r3, #3
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6a1b      	ldr	r3, [r3, #32]
 80042f8:	4994      	ldr	r1, [pc, #592]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80042fa:	4313      	orrs	r3, r2
 80042fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f003 0302 	and.w	r3, r3, #2
 8004308:	2b00      	cmp	r3, #0
 800430a:	d00a      	beq.n	8004322 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800430c:	4b8f      	ldr	r3, [pc, #572]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800430e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004312:	f023 020c 	bic.w	r2, r3, #12
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800431a:	498c      	ldr	r1, [pc, #560]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800431c:	4313      	orrs	r3, r2
 800431e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f003 0304 	and.w	r3, r3, #4
 800432a:	2b00      	cmp	r3, #0
 800432c:	d00a      	beq.n	8004344 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800432e:	4b87      	ldr	r3, [pc, #540]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004330:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004334:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800433c:	4983      	ldr	r1, [pc, #524]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800433e:	4313      	orrs	r3, r2
 8004340:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f003 0308 	and.w	r3, r3, #8
 800434c:	2b00      	cmp	r3, #0
 800434e:	d00a      	beq.n	8004366 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004350:	4b7e      	ldr	r3, [pc, #504]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004352:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004356:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800435e:	497b      	ldr	r1, [pc, #492]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004360:	4313      	orrs	r3, r2
 8004362:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f003 0320 	and.w	r3, r3, #32
 800436e:	2b00      	cmp	r3, #0
 8004370:	d00a      	beq.n	8004388 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004372:	4b76      	ldr	r3, [pc, #472]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004374:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004378:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004380:	4972      	ldr	r1, [pc, #456]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004382:	4313      	orrs	r3, r2
 8004384:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004390:	2b00      	cmp	r3, #0
 8004392:	d00a      	beq.n	80043aa <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004394:	4b6d      	ldr	r3, [pc, #436]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004396:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800439a:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043a2:	496a      	ldr	r1, [pc, #424]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80043a4:	4313      	orrs	r3, r2
 80043a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d00a      	beq.n	80043cc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80043b6:	4b65      	ldr	r3, [pc, #404]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80043b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043bc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043c4:	4961      	ldr	r1, [pc, #388]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80043c6:	4313      	orrs	r3, r2
 80043c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d00a      	beq.n	80043ee <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80043d8:	4b5c      	ldr	r3, [pc, #368]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80043da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043de:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043e6:	4959      	ldr	r1, [pc, #356]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80043e8:	4313      	orrs	r3, r2
 80043ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d00a      	beq.n	8004410 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80043fa:	4b54      	ldr	r3, [pc, #336]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80043fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004400:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004408:	4950      	ldr	r1, [pc, #320]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800440a:	4313      	orrs	r3, r2
 800440c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004418:	2b00      	cmp	r3, #0
 800441a:	d00a      	beq.n	8004432 <HAL_RCCEx_PeriphCLKConfig+0x31e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800441c:	4b4b      	ldr	r3, [pc, #300]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800441e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004422:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800442a:	4948      	ldr	r1, [pc, #288]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800442c:	4313      	orrs	r3, r2
 800442e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800443a:	2b00      	cmp	r3, #0
 800443c:	d00a      	beq.n	8004454 <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800443e:	4b43      	ldr	r3, [pc, #268]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004440:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004444:	f023 0203 	bic.w	r2, r3, #3
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800444c:	493f      	ldr	r1, [pc, #252]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800444e:	4313      	orrs	r3, r2
 8004450:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800445c:	2b00      	cmp	r3, #0
 800445e:	d028      	beq.n	80044b2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004460:	4b3a      	ldr	r3, [pc, #232]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004462:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004466:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800446e:	4937      	ldr	r1, [pc, #220]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004470:	4313      	orrs	r3, r2
 8004472:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800447a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800447e:	d106      	bne.n	800448e <HAL_RCCEx_PeriphCLKConfig+0x37a>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004480:	4b32      	ldr	r3, [pc, #200]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004482:	68db      	ldr	r3, [r3, #12]
 8004484:	4a31      	ldr	r2, [pc, #196]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004486:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800448a:	60d3      	str	r3, [r2, #12]
 800448c:	e011      	b.n	80044b2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004492:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004496:	d10c      	bne.n	80044b2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	3304      	adds	r3, #4
 800449c:	2101      	movs	r1, #1
 800449e:	4618      	mov	r0, r3
 80044a0:	f000 f8a4 	bl	80045ec <RCCEx_PLLSAI1_Config>
 80044a4:	4603      	mov	r3, r0
 80044a6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80044a8:	7cfb      	ldrb	r3, [r7, #19]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d001      	beq.n	80044b2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
        {
          /* set overall return value */
          status = ret;
 80044ae:	7cfb      	ldrb	r3, [r7, #19]
 80044b0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d028      	beq.n	8004510 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80044be:	4b23      	ldr	r3, [pc, #140]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80044c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044c4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044cc:	491f      	ldr	r1, [pc, #124]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80044ce:	4313      	orrs	r3, r2
 80044d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044d8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80044dc:	d106      	bne.n	80044ec <HAL_RCCEx_PeriphCLKConfig+0x3d8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80044de:	4b1b      	ldr	r3, [pc, #108]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80044e0:	68db      	ldr	r3, [r3, #12]
 80044e2:	4a1a      	ldr	r2, [pc, #104]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80044e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80044e8:	60d3      	str	r3, [r2, #12]
 80044ea:	e011      	b.n	8004510 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044f0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80044f4:	d10c      	bne.n	8004510 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	3304      	adds	r3, #4
 80044fa:	2101      	movs	r1, #1
 80044fc:	4618      	mov	r0, r3
 80044fe:	f000 f875 	bl	80045ec <RCCEx_PLLSAI1_Config>
 8004502:	4603      	mov	r3, r0
 8004504:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004506:	7cfb      	ldrb	r3, [r7, #19]
 8004508:	2b00      	cmp	r3, #0
 800450a:	d001      	beq.n	8004510 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
      {
        /* set overall return value */
        status = ret;
 800450c:	7cfb      	ldrb	r3, [r7, #19]
 800450e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004518:	2b00      	cmp	r3, #0
 800451a:	d02b      	beq.n	8004574 <HAL_RCCEx_PeriphCLKConfig+0x460>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800451c:	4b0b      	ldr	r3, [pc, #44]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800451e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004522:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800452a:	4908      	ldr	r1, [pc, #32]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800452c:	4313      	orrs	r3, r2
 800452e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004536:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800453a:	d109      	bne.n	8004550 <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800453c:	4b03      	ldr	r3, [pc, #12]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800453e:	68db      	ldr	r3, [r3, #12]
 8004540:	4a02      	ldr	r2, [pc, #8]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004542:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004546:	60d3      	str	r3, [r2, #12]
 8004548:	e014      	b.n	8004574 <HAL_RCCEx_PeriphCLKConfig+0x460>
 800454a:	bf00      	nop
 800454c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004554:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004558:	d10c      	bne.n	8004574 <HAL_RCCEx_PeriphCLKConfig+0x460>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	3304      	adds	r3, #4
 800455e:	2101      	movs	r1, #1
 8004560:	4618      	mov	r0, r3
 8004562:	f000 f843 	bl	80045ec <RCCEx_PLLSAI1_Config>
 8004566:	4603      	mov	r3, r0
 8004568:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800456a:	7cfb      	ldrb	r3, [r7, #19]
 800456c:	2b00      	cmp	r3, #0
 800456e:	d001      	beq.n	8004574 <HAL_RCCEx_PeriphCLKConfig+0x460>
      {
        /* set overall return value */
        status = ret;
 8004570:	7cfb      	ldrb	r3, [r7, #19]
 8004572:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800457c:	2b00      	cmp	r3, #0
 800457e:	d01c      	beq.n	80045ba <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004580:	4b19      	ldr	r3, [pc, #100]	; (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8004582:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004586:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800458e:	4916      	ldr	r1, [pc, #88]	; (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8004590:	4313      	orrs	r3, r2
 8004592:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800459a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800459e:	d10c      	bne.n	80045ba <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	3304      	adds	r3, #4
 80045a4:	2102      	movs	r1, #2
 80045a6:	4618      	mov	r0, r3
 80045a8:	f000 f820 	bl	80045ec <RCCEx_PLLSAI1_Config>
 80045ac:	4603      	mov	r3, r0
 80045ae:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80045b0:	7cfb      	ldrb	r3, [r7, #19]
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d001      	beq.n	80045ba <HAL_RCCEx_PeriphCLKConfig+0x4a6>
      {
        /* set overall return value */
        status = ret;
 80045b6:	7cfb      	ldrb	r3, [r7, #19]
 80045b8:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d00a      	beq.n	80045dc <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80045c6:	4b08      	ldr	r3, [pc, #32]	; (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 80045c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045cc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045d4:	4904      	ldr	r1, [pc, #16]	; (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 80045d6:	4313      	orrs	r3, r2
 80045d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80045dc:	7cbb      	ldrb	r3, [r7, #18]
}
 80045de:	4618      	mov	r0, r3
 80045e0:	3718      	adds	r7, #24
 80045e2:	46bd      	mov	sp, r7
 80045e4:	bd80      	pop	{r7, pc}
 80045e6:	bf00      	nop
 80045e8:	40021000 	.word	0x40021000

080045ec <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80045ec:	b580      	push	{r7, lr}
 80045ee:	b084      	sub	sp, #16
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
 80045f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80045f6:	2300      	movs	r3, #0
 80045f8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80045fa:	4b74      	ldr	r3, [pc, #464]	; (80047cc <RCCEx_PLLSAI1_Config+0x1e0>)
 80045fc:	68db      	ldr	r3, [r3, #12]
 80045fe:	f003 0303 	and.w	r3, r3, #3
 8004602:	2b00      	cmp	r3, #0
 8004604:	d018      	beq.n	8004638 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004606:	4b71      	ldr	r3, [pc, #452]	; (80047cc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004608:	68db      	ldr	r3, [r3, #12]
 800460a:	f003 0203 	and.w	r2, r3, #3
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	429a      	cmp	r2, r3
 8004614:	d10d      	bne.n	8004632 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
       ||
 800461a:	2b00      	cmp	r3, #0
 800461c:	d009      	beq.n	8004632 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800461e:	4b6b      	ldr	r3, [pc, #428]	; (80047cc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004620:	68db      	ldr	r3, [r3, #12]
 8004622:	091b      	lsrs	r3, r3, #4
 8004624:	f003 0307 	and.w	r3, r3, #7
 8004628:	1c5a      	adds	r2, r3, #1
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	685b      	ldr	r3, [r3, #4]
       ||
 800462e:	429a      	cmp	r2, r3
 8004630:	d047      	beq.n	80046c2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004632:	2301      	movs	r3, #1
 8004634:	73fb      	strb	r3, [r7, #15]
 8004636:	e044      	b.n	80046c2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	2b03      	cmp	r3, #3
 800463e:	d018      	beq.n	8004672 <RCCEx_PLLSAI1_Config+0x86>
 8004640:	2b03      	cmp	r3, #3
 8004642:	d825      	bhi.n	8004690 <RCCEx_PLLSAI1_Config+0xa4>
 8004644:	2b01      	cmp	r3, #1
 8004646:	d002      	beq.n	800464e <RCCEx_PLLSAI1_Config+0x62>
 8004648:	2b02      	cmp	r3, #2
 800464a:	d009      	beq.n	8004660 <RCCEx_PLLSAI1_Config+0x74>
 800464c:	e020      	b.n	8004690 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800464e:	4b5f      	ldr	r3, [pc, #380]	; (80047cc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f003 0302 	and.w	r3, r3, #2
 8004656:	2b00      	cmp	r3, #0
 8004658:	d11d      	bne.n	8004696 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800465a:	2301      	movs	r3, #1
 800465c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800465e:	e01a      	b.n	8004696 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004660:	4b5a      	ldr	r3, [pc, #360]	; (80047cc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004668:	2b00      	cmp	r3, #0
 800466a:	d116      	bne.n	800469a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800466c:	2301      	movs	r3, #1
 800466e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004670:	e013      	b.n	800469a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004672:	4b56      	ldr	r3, [pc, #344]	; (80047cc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800467a:	2b00      	cmp	r3, #0
 800467c:	d10f      	bne.n	800469e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800467e:	4b53      	ldr	r3, [pc, #332]	; (80047cc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004686:	2b00      	cmp	r3, #0
 8004688:	d109      	bne.n	800469e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800468a:	2301      	movs	r3, #1
 800468c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800468e:	e006      	b.n	800469e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004690:	2301      	movs	r3, #1
 8004692:	73fb      	strb	r3, [r7, #15]
      break;
 8004694:	e004      	b.n	80046a0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004696:	bf00      	nop
 8004698:	e002      	b.n	80046a0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800469a:	bf00      	nop
 800469c:	e000      	b.n	80046a0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800469e:	bf00      	nop
    }

    if(status == HAL_OK)
 80046a0:	7bfb      	ldrb	r3, [r7, #15]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d10d      	bne.n	80046c2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80046a6:	4b49      	ldr	r3, [pc, #292]	; (80047cc <RCCEx_PLLSAI1_Config+0x1e0>)
 80046a8:	68db      	ldr	r3, [r3, #12]
 80046aa:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6819      	ldr	r1, [r3, #0]
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	685b      	ldr	r3, [r3, #4]
 80046b6:	3b01      	subs	r3, #1
 80046b8:	011b      	lsls	r3, r3, #4
 80046ba:	430b      	orrs	r3, r1
 80046bc:	4943      	ldr	r1, [pc, #268]	; (80047cc <RCCEx_PLLSAI1_Config+0x1e0>)
 80046be:	4313      	orrs	r3, r2
 80046c0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80046c2:	7bfb      	ldrb	r3, [r7, #15]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d17c      	bne.n	80047c2 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80046c8:	4b40      	ldr	r3, [pc, #256]	; (80047cc <RCCEx_PLLSAI1_Config+0x1e0>)
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	4a3f      	ldr	r2, [pc, #252]	; (80047cc <RCCEx_PLLSAI1_Config+0x1e0>)
 80046ce:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80046d2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80046d4:	f7fd fa70 	bl	8001bb8 <HAL_GetTick>
 80046d8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80046da:	e009      	b.n	80046f0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80046dc:	f7fd fa6c 	bl	8001bb8 <HAL_GetTick>
 80046e0:	4602      	mov	r2, r0
 80046e2:	68bb      	ldr	r3, [r7, #8]
 80046e4:	1ad3      	subs	r3, r2, r3
 80046e6:	2b02      	cmp	r3, #2
 80046e8:	d902      	bls.n	80046f0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80046ea:	2303      	movs	r3, #3
 80046ec:	73fb      	strb	r3, [r7, #15]
        break;
 80046ee:	e005      	b.n	80046fc <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80046f0:	4b36      	ldr	r3, [pc, #216]	; (80047cc <RCCEx_PLLSAI1_Config+0x1e0>)
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d1ef      	bne.n	80046dc <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80046fc:	7bfb      	ldrb	r3, [r7, #15]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d15f      	bne.n	80047c2 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	2b00      	cmp	r3, #0
 8004706:	d110      	bne.n	800472a <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004708:	4b30      	ldr	r3, [pc, #192]	; (80047cc <RCCEx_PLLSAI1_Config+0x1e0>)
 800470a:	691b      	ldr	r3, [r3, #16]
 800470c:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8004710:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004714:	687a      	ldr	r2, [r7, #4]
 8004716:	6892      	ldr	r2, [r2, #8]
 8004718:	0211      	lsls	r1, r2, #8
 800471a:	687a      	ldr	r2, [r7, #4]
 800471c:	68d2      	ldr	r2, [r2, #12]
 800471e:	06d2      	lsls	r2, r2, #27
 8004720:	430a      	orrs	r2, r1
 8004722:	492a      	ldr	r1, [pc, #168]	; (80047cc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004724:	4313      	orrs	r3, r2
 8004726:	610b      	str	r3, [r1, #16]
 8004728:	e027      	b.n	800477a <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	2b01      	cmp	r3, #1
 800472e:	d112      	bne.n	8004756 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004730:	4b26      	ldr	r3, [pc, #152]	; (80047cc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004732:	691b      	ldr	r3, [r3, #16]
 8004734:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004738:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800473c:	687a      	ldr	r2, [r7, #4]
 800473e:	6892      	ldr	r2, [r2, #8]
 8004740:	0211      	lsls	r1, r2, #8
 8004742:	687a      	ldr	r2, [r7, #4]
 8004744:	6912      	ldr	r2, [r2, #16]
 8004746:	0852      	lsrs	r2, r2, #1
 8004748:	3a01      	subs	r2, #1
 800474a:	0552      	lsls	r2, r2, #21
 800474c:	430a      	orrs	r2, r1
 800474e:	491f      	ldr	r1, [pc, #124]	; (80047cc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004750:	4313      	orrs	r3, r2
 8004752:	610b      	str	r3, [r1, #16]
 8004754:	e011      	b.n	800477a <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004756:	4b1d      	ldr	r3, [pc, #116]	; (80047cc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004758:	691b      	ldr	r3, [r3, #16]
 800475a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800475e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004762:	687a      	ldr	r2, [r7, #4]
 8004764:	6892      	ldr	r2, [r2, #8]
 8004766:	0211      	lsls	r1, r2, #8
 8004768:	687a      	ldr	r2, [r7, #4]
 800476a:	6952      	ldr	r2, [r2, #20]
 800476c:	0852      	lsrs	r2, r2, #1
 800476e:	3a01      	subs	r2, #1
 8004770:	0652      	lsls	r2, r2, #25
 8004772:	430a      	orrs	r2, r1
 8004774:	4915      	ldr	r1, [pc, #84]	; (80047cc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004776:	4313      	orrs	r3, r2
 8004778:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800477a:	4b14      	ldr	r3, [pc, #80]	; (80047cc <RCCEx_PLLSAI1_Config+0x1e0>)
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	4a13      	ldr	r2, [pc, #76]	; (80047cc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004780:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004784:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004786:	f7fd fa17 	bl	8001bb8 <HAL_GetTick>
 800478a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800478c:	e009      	b.n	80047a2 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800478e:	f7fd fa13 	bl	8001bb8 <HAL_GetTick>
 8004792:	4602      	mov	r2, r0
 8004794:	68bb      	ldr	r3, [r7, #8]
 8004796:	1ad3      	subs	r3, r2, r3
 8004798:	2b02      	cmp	r3, #2
 800479a:	d902      	bls.n	80047a2 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 800479c:	2303      	movs	r3, #3
 800479e:	73fb      	strb	r3, [r7, #15]
          break;
 80047a0:	e005      	b.n	80047ae <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80047a2:	4b0a      	ldr	r3, [pc, #40]	; (80047cc <RCCEx_PLLSAI1_Config+0x1e0>)
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d0ef      	beq.n	800478e <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80047ae:	7bfb      	ldrb	r3, [r7, #15]
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d106      	bne.n	80047c2 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80047b4:	4b05      	ldr	r3, [pc, #20]	; (80047cc <RCCEx_PLLSAI1_Config+0x1e0>)
 80047b6:	691a      	ldr	r2, [r3, #16]
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	699b      	ldr	r3, [r3, #24]
 80047bc:	4903      	ldr	r1, [pc, #12]	; (80047cc <RCCEx_PLLSAI1_Config+0x1e0>)
 80047be:	4313      	orrs	r3, r2
 80047c0:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80047c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80047c4:	4618      	mov	r0, r3
 80047c6:	3710      	adds	r7, #16
 80047c8:	46bd      	mov	sp, r7
 80047ca:	bd80      	pop	{r7, pc}
 80047cc:	40021000 	.word	0x40021000

080047d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b082      	sub	sp, #8
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d101      	bne.n	80047e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80047de:	2301      	movs	r3, #1
 80047e0:	e049      	b.n	8004876 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047e8:	b2db      	uxtb	r3, r3
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d106      	bne.n	80047fc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	2200      	movs	r2, #0
 80047f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80047f6:	6878      	ldr	r0, [r7, #4]
 80047f8:	f7fc ffc2 	bl	8001780 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2202      	movs	r2, #2
 8004800:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681a      	ldr	r2, [r3, #0]
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	3304      	adds	r3, #4
 800480c:	4619      	mov	r1, r3
 800480e:	4610      	mov	r0, r2
 8004810:	f000 fe0a 	bl	8005428 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2201      	movs	r2, #1
 8004818:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2201      	movs	r2, #1
 8004820:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2201      	movs	r2, #1
 8004828:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2201      	movs	r2, #1
 8004830:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2201      	movs	r2, #1
 8004838:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2201      	movs	r2, #1
 8004840:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2201      	movs	r2, #1
 8004848:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2201      	movs	r2, #1
 8004850:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2201      	movs	r2, #1
 8004858:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2201      	movs	r2, #1
 8004860:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2201      	movs	r2, #1
 8004868:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2201      	movs	r2, #1
 8004870:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004874:	2300      	movs	r3, #0
}
 8004876:	4618      	mov	r0, r3
 8004878:	3708      	adds	r7, #8
 800487a:	46bd      	mov	sp, r7
 800487c:	bd80      	pop	{r7, pc}
	...

08004880 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004880:	b480      	push	{r7}
 8004882:	b085      	sub	sp, #20
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800488e:	b2db      	uxtb	r3, r3
 8004890:	2b01      	cmp	r3, #1
 8004892:	d001      	beq.n	8004898 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004894:	2301      	movs	r3, #1
 8004896:	e040      	b.n	800491a <HAL_TIM_Base_Start_IT+0x9a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2202      	movs	r2, #2
 800489c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	68da      	ldr	r2, [r3, #12]
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f042 0201 	orr.w	r2, r2, #1
 80048ae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	4a1c      	ldr	r2, [pc, #112]	; (8004928 <HAL_TIM_Base_Start_IT+0xa8>)
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d00e      	beq.n	80048d8 <HAL_TIM_Base_Start_IT+0x58>
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048c2:	d009      	beq.n	80048d8 <HAL_TIM_Base_Start_IT+0x58>
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	4a18      	ldr	r2, [pc, #96]	; (800492c <HAL_TIM_Base_Start_IT+0xac>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d004      	beq.n	80048d8 <HAL_TIM_Base_Start_IT+0x58>
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	4a17      	ldr	r2, [pc, #92]	; (8004930 <HAL_TIM_Base_Start_IT+0xb0>)
 80048d4:	4293      	cmp	r3, r2
 80048d6:	d115      	bne.n	8004904 <HAL_TIM_Base_Start_IT+0x84>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	689a      	ldr	r2, [r3, #8]
 80048de:	4b15      	ldr	r3, [pc, #84]	; (8004934 <HAL_TIM_Base_Start_IT+0xb4>)
 80048e0:	4013      	ands	r3, r2
 80048e2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	2b06      	cmp	r3, #6
 80048e8:	d015      	beq.n	8004916 <HAL_TIM_Base_Start_IT+0x96>
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048f0:	d011      	beq.n	8004916 <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	681a      	ldr	r2, [r3, #0]
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f042 0201 	orr.w	r2, r2, #1
 8004900:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004902:	e008      	b.n	8004916 <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	681a      	ldr	r2, [r3, #0]
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f042 0201 	orr.w	r2, r2, #1
 8004912:	601a      	str	r2, [r3, #0]
 8004914:	e000      	b.n	8004918 <HAL_TIM_Base_Start_IT+0x98>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004916:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004918:	2300      	movs	r3, #0
}
 800491a:	4618      	mov	r0, r3
 800491c:	3714      	adds	r7, #20
 800491e:	46bd      	mov	sp, r7
 8004920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004924:	4770      	bx	lr
 8004926:	bf00      	nop
 8004928:	40012c00 	.word	0x40012c00
 800492c:	40000400 	.word	0x40000400
 8004930:	40014000 	.word	0x40014000
 8004934:	00010007 	.word	0x00010007

08004938 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8004938:	b480      	push	{r7}
 800493a:	b083      	sub	sp, #12
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	68da      	ldr	r2, [r3, #12]
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f022 0201 	bic.w	r2, r2, #1
 800494e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	6a1a      	ldr	r2, [r3, #32]
 8004956:	f241 1311 	movw	r3, #4369	; 0x1111
 800495a:	4013      	ands	r3, r2
 800495c:	2b00      	cmp	r3, #0
 800495e:	d10f      	bne.n	8004980 <HAL_TIM_Base_Stop_IT+0x48>
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	6a1a      	ldr	r2, [r3, #32]
 8004966:	f240 4344 	movw	r3, #1092	; 0x444
 800496a:	4013      	ands	r3, r2
 800496c:	2b00      	cmp	r3, #0
 800496e:	d107      	bne.n	8004980 <HAL_TIM_Base_Stop_IT+0x48>
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	681a      	ldr	r2, [r3, #0]
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f022 0201 	bic.w	r2, r2, #1
 800497e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2201      	movs	r2, #1
 8004984:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8004988:	2300      	movs	r3, #0
}
 800498a:	4618      	mov	r0, r3
 800498c:	370c      	adds	r7, #12
 800498e:	46bd      	mov	sp, r7
 8004990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004994:	4770      	bx	lr

08004996 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8004996:	b580      	push	{r7, lr}
 8004998:	b082      	sub	sp, #8
 800499a:	af00      	add	r7, sp, #0
 800499c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d101      	bne.n	80049a8 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80049a4:	2301      	movs	r3, #1
 80049a6:	e049      	b.n	8004a3c <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049ae:	b2db      	uxtb	r3, r3
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d106      	bne.n	80049c2 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2200      	movs	r2, #0
 80049b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80049bc:	6878      	ldr	r0, [r7, #4]
 80049be:	f000 f841 	bl	8004a44 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	2202      	movs	r2, #2
 80049c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681a      	ldr	r2, [r3, #0]
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	3304      	adds	r3, #4
 80049d2:	4619      	mov	r1, r3
 80049d4:	4610      	mov	r0, r2
 80049d6:	f000 fd27 	bl	8005428 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	2201      	movs	r2, #1
 80049de:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	2201      	movs	r2, #1
 80049e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	2201      	movs	r2, #1
 80049ee:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	2201      	movs	r2, #1
 80049f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	2201      	movs	r2, #1
 80049fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	2201      	movs	r2, #1
 8004a06:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2201      	movs	r2, #1
 8004a0e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	2201      	movs	r2, #1
 8004a16:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2201      	movs	r2, #1
 8004a1e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	2201      	movs	r2, #1
 8004a26:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2201      	movs	r2, #1
 8004a2e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	2201      	movs	r2, #1
 8004a36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004a3a:	2300      	movs	r3, #0
}
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	3708      	adds	r7, #8
 8004a40:	46bd      	mov	sp, r7
 8004a42:	bd80      	pop	{r7, pc}

08004a44 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8004a44:	b480      	push	{r7}
 8004a46:	b083      	sub	sp, #12
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8004a4c:	bf00      	nop
 8004a4e:	370c      	adds	r7, #12
 8004a50:	46bd      	mov	sp, r7
 8004a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a56:	4770      	bx	lr

08004a58 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b082      	sub	sp, #8
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d101      	bne.n	8004a6a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004a66:	2301      	movs	r3, #1
 8004a68:	e049      	b.n	8004afe <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a70:	b2db      	uxtb	r3, r3
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d106      	bne.n	8004a84 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	2200      	movs	r2, #0
 8004a7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004a7e:	6878      	ldr	r0, [r7, #4]
 8004a80:	f000 f841 	bl	8004b06 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2202      	movs	r2, #2
 8004a88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681a      	ldr	r2, [r3, #0]
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	3304      	adds	r3, #4
 8004a94:	4619      	mov	r1, r3
 8004a96:	4610      	mov	r0, r2
 8004a98:	f000 fcc6 	bl	8005428 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2201      	movs	r2, #1
 8004aa0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2201      	movs	r2, #1
 8004aa8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2201      	movs	r2, #1
 8004ab0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2201      	movs	r2, #1
 8004ab8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2201      	movs	r2, #1
 8004ac0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2201      	movs	r2, #1
 8004ac8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2201      	movs	r2, #1
 8004ad0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2201      	movs	r2, #1
 8004ad8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2201      	movs	r2, #1
 8004ae0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2201      	movs	r2, #1
 8004ae8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2201      	movs	r2, #1
 8004af0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2201      	movs	r2, #1
 8004af8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004afc:	2300      	movs	r3, #0
}
 8004afe:	4618      	mov	r0, r3
 8004b00:	3708      	adds	r7, #8
 8004b02:	46bd      	mov	sp, r7
 8004b04:	bd80      	pop	{r7, pc}

08004b06 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004b06:	b480      	push	{r7}
 8004b08:	b083      	sub	sp, #12
 8004b0a:	af00      	add	r7, sp, #0
 8004b0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004b0e:	bf00      	nop
 8004b10:	370c      	adds	r7, #12
 8004b12:	46bd      	mov	sp, r7
 8004b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b18:	4770      	bx	lr
	...

08004b1c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	b084      	sub	sp, #16
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
 8004b24:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004b26:	683b      	ldr	r3, [r7, #0]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d109      	bne.n	8004b40 <HAL_TIM_PWM_Start+0x24>
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004b32:	b2db      	uxtb	r3, r3
 8004b34:	2b01      	cmp	r3, #1
 8004b36:	bf14      	ite	ne
 8004b38:	2301      	movne	r3, #1
 8004b3a:	2300      	moveq	r3, #0
 8004b3c:	b2db      	uxtb	r3, r3
 8004b3e:	e03c      	b.n	8004bba <HAL_TIM_PWM_Start+0x9e>
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	2b04      	cmp	r3, #4
 8004b44:	d109      	bne.n	8004b5a <HAL_TIM_PWM_Start+0x3e>
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004b4c:	b2db      	uxtb	r3, r3
 8004b4e:	2b01      	cmp	r3, #1
 8004b50:	bf14      	ite	ne
 8004b52:	2301      	movne	r3, #1
 8004b54:	2300      	moveq	r3, #0
 8004b56:	b2db      	uxtb	r3, r3
 8004b58:	e02f      	b.n	8004bba <HAL_TIM_PWM_Start+0x9e>
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	2b08      	cmp	r3, #8
 8004b5e:	d109      	bne.n	8004b74 <HAL_TIM_PWM_Start+0x58>
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004b66:	b2db      	uxtb	r3, r3
 8004b68:	2b01      	cmp	r3, #1
 8004b6a:	bf14      	ite	ne
 8004b6c:	2301      	movne	r3, #1
 8004b6e:	2300      	moveq	r3, #0
 8004b70:	b2db      	uxtb	r3, r3
 8004b72:	e022      	b.n	8004bba <HAL_TIM_PWM_Start+0x9e>
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	2b0c      	cmp	r3, #12
 8004b78:	d109      	bne.n	8004b8e <HAL_TIM_PWM_Start+0x72>
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b80:	b2db      	uxtb	r3, r3
 8004b82:	2b01      	cmp	r3, #1
 8004b84:	bf14      	ite	ne
 8004b86:	2301      	movne	r3, #1
 8004b88:	2300      	moveq	r3, #0
 8004b8a:	b2db      	uxtb	r3, r3
 8004b8c:	e015      	b.n	8004bba <HAL_TIM_PWM_Start+0x9e>
 8004b8e:	683b      	ldr	r3, [r7, #0]
 8004b90:	2b10      	cmp	r3, #16
 8004b92:	d109      	bne.n	8004ba8 <HAL_TIM_PWM_Start+0x8c>
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004b9a:	b2db      	uxtb	r3, r3
 8004b9c:	2b01      	cmp	r3, #1
 8004b9e:	bf14      	ite	ne
 8004ba0:	2301      	movne	r3, #1
 8004ba2:	2300      	moveq	r3, #0
 8004ba4:	b2db      	uxtb	r3, r3
 8004ba6:	e008      	b.n	8004bba <HAL_TIM_PWM_Start+0x9e>
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004bae:	b2db      	uxtb	r3, r3
 8004bb0:	2b01      	cmp	r3, #1
 8004bb2:	bf14      	ite	ne
 8004bb4:	2301      	movne	r3, #1
 8004bb6:	2300      	moveq	r3, #0
 8004bb8:	b2db      	uxtb	r3, r3
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d001      	beq.n	8004bc2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004bbe:	2301      	movs	r3, #1
 8004bc0:	e083      	b.n	8004cca <HAL_TIM_PWM_Start+0x1ae>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d104      	bne.n	8004bd2 <HAL_TIM_PWM_Start+0xb6>
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2202      	movs	r2, #2
 8004bcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004bd0:	e023      	b.n	8004c1a <HAL_TIM_PWM_Start+0xfe>
 8004bd2:	683b      	ldr	r3, [r7, #0]
 8004bd4:	2b04      	cmp	r3, #4
 8004bd6:	d104      	bne.n	8004be2 <HAL_TIM_PWM_Start+0xc6>
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2202      	movs	r2, #2
 8004bdc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004be0:	e01b      	b.n	8004c1a <HAL_TIM_PWM_Start+0xfe>
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	2b08      	cmp	r3, #8
 8004be6:	d104      	bne.n	8004bf2 <HAL_TIM_PWM_Start+0xd6>
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2202      	movs	r2, #2
 8004bec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004bf0:	e013      	b.n	8004c1a <HAL_TIM_PWM_Start+0xfe>
 8004bf2:	683b      	ldr	r3, [r7, #0]
 8004bf4:	2b0c      	cmp	r3, #12
 8004bf6:	d104      	bne.n	8004c02 <HAL_TIM_PWM_Start+0xe6>
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2202      	movs	r2, #2
 8004bfc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004c00:	e00b      	b.n	8004c1a <HAL_TIM_PWM_Start+0xfe>
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	2b10      	cmp	r3, #16
 8004c06:	d104      	bne.n	8004c12 <HAL_TIM_PWM_Start+0xf6>
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2202      	movs	r2, #2
 8004c0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004c10:	e003      	b.n	8004c1a <HAL_TIM_PWM_Start+0xfe>
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	2202      	movs	r2, #2
 8004c16:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	2201      	movs	r2, #1
 8004c20:	6839      	ldr	r1, [r7, #0]
 8004c22:	4618      	mov	r0, r3
 8004c24:	f000 ff86 	bl	8005b34 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	4a29      	ldr	r2, [pc, #164]	; (8004cd4 <HAL_TIM_PWM_Start+0x1b8>)
 8004c2e:	4293      	cmp	r3, r2
 8004c30:	d009      	beq.n	8004c46 <HAL_TIM_PWM_Start+0x12a>
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	4a28      	ldr	r2, [pc, #160]	; (8004cd8 <HAL_TIM_PWM_Start+0x1bc>)
 8004c38:	4293      	cmp	r3, r2
 8004c3a:	d004      	beq.n	8004c46 <HAL_TIM_PWM_Start+0x12a>
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	4a26      	ldr	r2, [pc, #152]	; (8004cdc <HAL_TIM_PWM_Start+0x1c0>)
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d101      	bne.n	8004c4a <HAL_TIM_PWM_Start+0x12e>
 8004c46:	2301      	movs	r3, #1
 8004c48:	e000      	b.n	8004c4c <HAL_TIM_PWM_Start+0x130>
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d007      	beq.n	8004c60 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004c5e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	4a1b      	ldr	r2, [pc, #108]	; (8004cd4 <HAL_TIM_PWM_Start+0x1b8>)
 8004c66:	4293      	cmp	r3, r2
 8004c68:	d00e      	beq.n	8004c88 <HAL_TIM_PWM_Start+0x16c>
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c72:	d009      	beq.n	8004c88 <HAL_TIM_PWM_Start+0x16c>
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	4a19      	ldr	r2, [pc, #100]	; (8004ce0 <HAL_TIM_PWM_Start+0x1c4>)
 8004c7a:	4293      	cmp	r3, r2
 8004c7c:	d004      	beq.n	8004c88 <HAL_TIM_PWM_Start+0x16c>
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	4a15      	ldr	r2, [pc, #84]	; (8004cd8 <HAL_TIM_PWM_Start+0x1bc>)
 8004c84:	4293      	cmp	r3, r2
 8004c86:	d115      	bne.n	8004cb4 <HAL_TIM_PWM_Start+0x198>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	689a      	ldr	r2, [r3, #8]
 8004c8e:	4b15      	ldr	r3, [pc, #84]	; (8004ce4 <HAL_TIM_PWM_Start+0x1c8>)
 8004c90:	4013      	ands	r3, r2
 8004c92:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	2b06      	cmp	r3, #6
 8004c98:	d015      	beq.n	8004cc6 <HAL_TIM_PWM_Start+0x1aa>
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ca0:	d011      	beq.n	8004cc6 <HAL_TIM_PWM_Start+0x1aa>
    {
      __HAL_TIM_ENABLE(htim);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	681a      	ldr	r2, [r3, #0]
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f042 0201 	orr.w	r2, r2, #1
 8004cb0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cb2:	e008      	b.n	8004cc6 <HAL_TIM_PWM_Start+0x1aa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	681a      	ldr	r2, [r3, #0]
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f042 0201 	orr.w	r2, r2, #1
 8004cc2:	601a      	str	r2, [r3, #0]
 8004cc4:	e000      	b.n	8004cc8 <HAL_TIM_PWM_Start+0x1ac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cc6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004cc8:	2300      	movs	r3, #0
}
 8004cca:	4618      	mov	r0, r3
 8004ccc:	3710      	adds	r7, #16
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	bd80      	pop	{r7, pc}
 8004cd2:	bf00      	nop
 8004cd4:	40012c00 	.word	0x40012c00
 8004cd8:	40014000 	.word	0x40014000
 8004cdc:	40014400 	.word	0x40014400
 8004ce0:	40000400 	.word	0x40000400
 8004ce4:	00010007 	.word	0x00010007

08004ce8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	b082      	sub	sp, #8
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	691b      	ldr	r3, [r3, #16]
 8004cf6:	f003 0302 	and.w	r3, r3, #2
 8004cfa:	2b02      	cmp	r3, #2
 8004cfc:	d122      	bne.n	8004d44 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	68db      	ldr	r3, [r3, #12]
 8004d04:	f003 0302 	and.w	r3, r3, #2
 8004d08:	2b02      	cmp	r3, #2
 8004d0a:	d11b      	bne.n	8004d44 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f06f 0202 	mvn.w	r2, #2
 8004d14:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	2201      	movs	r2, #1
 8004d1a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	699b      	ldr	r3, [r3, #24]
 8004d22:	f003 0303 	and.w	r3, r3, #3
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d003      	beq.n	8004d32 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004d2a:	6878      	ldr	r0, [r7, #4]
 8004d2c:	f000 fb5d 	bl	80053ea <HAL_TIM_IC_CaptureCallback>
 8004d30:	e005      	b.n	8004d3e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d32:	6878      	ldr	r0, [r7, #4]
 8004d34:	f000 fb4f 	bl	80053d6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d38:	6878      	ldr	r0, [r7, #4]
 8004d3a:	f000 fb60 	bl	80053fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	2200      	movs	r2, #0
 8004d42:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	691b      	ldr	r3, [r3, #16]
 8004d4a:	f003 0304 	and.w	r3, r3, #4
 8004d4e:	2b04      	cmp	r3, #4
 8004d50:	d122      	bne.n	8004d98 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	68db      	ldr	r3, [r3, #12]
 8004d58:	f003 0304 	and.w	r3, r3, #4
 8004d5c:	2b04      	cmp	r3, #4
 8004d5e:	d11b      	bne.n	8004d98 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f06f 0204 	mvn.w	r2, #4
 8004d68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	2202      	movs	r2, #2
 8004d6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	699b      	ldr	r3, [r3, #24]
 8004d76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d003      	beq.n	8004d86 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d7e:	6878      	ldr	r0, [r7, #4]
 8004d80:	f000 fb33 	bl	80053ea <HAL_TIM_IC_CaptureCallback>
 8004d84:	e005      	b.n	8004d92 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d86:	6878      	ldr	r0, [r7, #4]
 8004d88:	f000 fb25 	bl	80053d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d8c:	6878      	ldr	r0, [r7, #4]
 8004d8e:	f000 fb36 	bl	80053fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	2200      	movs	r2, #0
 8004d96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	691b      	ldr	r3, [r3, #16]
 8004d9e:	f003 0308 	and.w	r3, r3, #8
 8004da2:	2b08      	cmp	r3, #8
 8004da4:	d122      	bne.n	8004dec <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	68db      	ldr	r3, [r3, #12]
 8004dac:	f003 0308 	and.w	r3, r3, #8
 8004db0:	2b08      	cmp	r3, #8
 8004db2:	d11b      	bne.n	8004dec <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f06f 0208 	mvn.w	r2, #8
 8004dbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	2204      	movs	r2, #4
 8004dc2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	69db      	ldr	r3, [r3, #28]
 8004dca:	f003 0303 	and.w	r3, r3, #3
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d003      	beq.n	8004dda <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004dd2:	6878      	ldr	r0, [r7, #4]
 8004dd4:	f000 fb09 	bl	80053ea <HAL_TIM_IC_CaptureCallback>
 8004dd8:	e005      	b.n	8004de6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004dda:	6878      	ldr	r0, [r7, #4]
 8004ddc:	f000 fafb 	bl	80053d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004de0:	6878      	ldr	r0, [r7, #4]
 8004de2:	f000 fb0c 	bl	80053fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	2200      	movs	r2, #0
 8004dea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	691b      	ldr	r3, [r3, #16]
 8004df2:	f003 0310 	and.w	r3, r3, #16
 8004df6:	2b10      	cmp	r3, #16
 8004df8:	d122      	bne.n	8004e40 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	68db      	ldr	r3, [r3, #12]
 8004e00:	f003 0310 	and.w	r3, r3, #16
 8004e04:	2b10      	cmp	r3, #16
 8004e06:	d11b      	bne.n	8004e40 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f06f 0210 	mvn.w	r2, #16
 8004e10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	2208      	movs	r2, #8
 8004e16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	69db      	ldr	r3, [r3, #28]
 8004e1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d003      	beq.n	8004e2e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e26:	6878      	ldr	r0, [r7, #4]
 8004e28:	f000 fadf 	bl	80053ea <HAL_TIM_IC_CaptureCallback>
 8004e2c:	e005      	b.n	8004e3a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e2e:	6878      	ldr	r0, [r7, #4]
 8004e30:	f000 fad1 	bl	80053d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e34:	6878      	ldr	r0, [r7, #4]
 8004e36:	f000 fae2 	bl	80053fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	691b      	ldr	r3, [r3, #16]
 8004e46:	f003 0301 	and.w	r3, r3, #1
 8004e4a:	2b01      	cmp	r3, #1
 8004e4c:	d10e      	bne.n	8004e6c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	68db      	ldr	r3, [r3, #12]
 8004e54:	f003 0301 	and.w	r3, r3, #1
 8004e58:	2b01      	cmp	r3, #1
 8004e5a:	d107      	bne.n	8004e6c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f06f 0201 	mvn.w	r2, #1
 8004e64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004e66:	6878      	ldr	r0, [r7, #4]
 8004e68:	f002 fb5c 	bl	8007524 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	691b      	ldr	r3, [r3, #16]
 8004e72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e76:	2b80      	cmp	r3, #128	; 0x80
 8004e78:	d10e      	bne.n	8004e98 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	68db      	ldr	r3, [r3, #12]
 8004e80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e84:	2b80      	cmp	r3, #128	; 0x80
 8004e86:	d107      	bne.n	8004e98 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004e90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004e92:	6878      	ldr	r0, [r7, #4]
 8004e94:	f000 ff64 	bl	8005d60 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	691b      	ldr	r3, [r3, #16]
 8004e9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ea2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ea6:	d10e      	bne.n	8004ec6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	68db      	ldr	r3, [r3, #12]
 8004eae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004eb2:	2b80      	cmp	r3, #128	; 0x80
 8004eb4:	d107      	bne.n	8004ec6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004ebe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004ec0:	6878      	ldr	r0, [r7, #4]
 8004ec2:	f000 ff57 	bl	8005d74 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	691b      	ldr	r3, [r3, #16]
 8004ecc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ed0:	2b40      	cmp	r3, #64	; 0x40
 8004ed2:	d10e      	bne.n	8004ef2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	68db      	ldr	r3, [r3, #12]
 8004eda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ede:	2b40      	cmp	r3, #64	; 0x40
 8004ee0:	d107      	bne.n	8004ef2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004eea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004eec:	6878      	ldr	r0, [r7, #4]
 8004eee:	f000 fa90 	bl	8005412 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	691b      	ldr	r3, [r3, #16]
 8004ef8:	f003 0320 	and.w	r3, r3, #32
 8004efc:	2b20      	cmp	r3, #32
 8004efe:	d10e      	bne.n	8004f1e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	68db      	ldr	r3, [r3, #12]
 8004f06:	f003 0320 	and.w	r3, r3, #32
 8004f0a:	2b20      	cmp	r3, #32
 8004f0c:	d107      	bne.n	8004f1e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f06f 0220 	mvn.w	r2, #32
 8004f16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004f18:	6878      	ldr	r0, [r7, #4]
 8004f1a:	f000 ff17 	bl	8005d4c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004f1e:	bf00      	nop
 8004f20:	3708      	adds	r7, #8
 8004f22:	46bd      	mov	sp, r7
 8004f24:	bd80      	pop	{r7, pc}
	...

08004f28 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b086      	sub	sp, #24
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	60f8      	str	r0, [r7, #12]
 8004f30:	60b9      	str	r1, [r7, #8]
 8004f32:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004f34:	2300      	movs	r3, #0
 8004f36:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f3e:	2b01      	cmp	r3, #1
 8004f40:	d101      	bne.n	8004f46 <HAL_TIM_OC_ConfigChannel+0x1e>
 8004f42:	2302      	movs	r3, #2
 8004f44:	e066      	b.n	8005014 <HAL_TIM_OC_ConfigChannel+0xec>
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	2201      	movs	r2, #1
 8004f4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	2b14      	cmp	r3, #20
 8004f52:	d857      	bhi.n	8005004 <HAL_TIM_OC_ConfigChannel+0xdc>
 8004f54:	a201      	add	r2, pc, #4	; (adr r2, 8004f5c <HAL_TIM_OC_ConfigChannel+0x34>)
 8004f56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f5a:	bf00      	nop
 8004f5c:	08004fb1 	.word	0x08004fb1
 8004f60:	08005005 	.word	0x08005005
 8004f64:	08005005 	.word	0x08005005
 8004f68:	08005005 	.word	0x08005005
 8004f6c:	08004fbf 	.word	0x08004fbf
 8004f70:	08005005 	.word	0x08005005
 8004f74:	08005005 	.word	0x08005005
 8004f78:	08005005 	.word	0x08005005
 8004f7c:	08004fcd 	.word	0x08004fcd
 8004f80:	08005005 	.word	0x08005005
 8004f84:	08005005 	.word	0x08005005
 8004f88:	08005005 	.word	0x08005005
 8004f8c:	08004fdb 	.word	0x08004fdb
 8004f90:	08005005 	.word	0x08005005
 8004f94:	08005005 	.word	0x08005005
 8004f98:	08005005 	.word	0x08005005
 8004f9c:	08004fe9 	.word	0x08004fe9
 8004fa0:	08005005 	.word	0x08005005
 8004fa4:	08005005 	.word	0x08005005
 8004fa8:	08005005 	.word	0x08005005
 8004fac:	08004ff7 	.word	0x08004ff7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	68b9      	ldr	r1, [r7, #8]
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	f000 faa4 	bl	8005504 <TIM_OC1_SetConfig>
      break;
 8004fbc:	e025      	b.n	800500a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	68b9      	ldr	r1, [r7, #8]
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	f000 fb19 	bl	80055fc <TIM_OC2_SetConfig>
      break;
 8004fca:	e01e      	b.n	800500a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	68b9      	ldr	r1, [r7, #8]
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	f000 fb8c 	bl	80056f0 <TIM_OC3_SetConfig>
      break;
 8004fd8:	e017      	b.n	800500a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	68b9      	ldr	r1, [r7, #8]
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	f000 fbfd 	bl	80057e0 <TIM_OC4_SetConfig>
      break;
 8004fe6:	e010      	b.n	800500a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	68b9      	ldr	r1, [r7, #8]
 8004fee:	4618      	mov	r0, r3
 8004ff0:	f000 fc54 	bl	800589c <TIM_OC5_SetConfig>
      break;
 8004ff4:	e009      	b.n	800500a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	68b9      	ldr	r1, [r7, #8]
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	f000 fca5 	bl	800594c <TIM_OC6_SetConfig>
      break;
 8005002:	e002      	b.n	800500a <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 8005004:	2301      	movs	r3, #1
 8005006:	75fb      	strb	r3, [r7, #23]
      break;
 8005008:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	2200      	movs	r2, #0
 800500e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005012:	7dfb      	ldrb	r3, [r7, #23]
}
 8005014:	4618      	mov	r0, r3
 8005016:	3718      	adds	r7, #24
 8005018:	46bd      	mov	sp, r7
 800501a:	bd80      	pop	{r7, pc}

0800501c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800501c:	b580      	push	{r7, lr}
 800501e:	b086      	sub	sp, #24
 8005020:	af00      	add	r7, sp, #0
 8005022:	60f8      	str	r0, [r7, #12]
 8005024:	60b9      	str	r1, [r7, #8]
 8005026:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005028:	2300      	movs	r3, #0
 800502a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005032:	2b01      	cmp	r3, #1
 8005034:	d101      	bne.n	800503a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005036:	2302      	movs	r3, #2
 8005038:	e0ff      	b.n	800523a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	2201      	movs	r2, #1
 800503e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	2b14      	cmp	r3, #20
 8005046:	f200 80f0 	bhi.w	800522a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800504a:	a201      	add	r2, pc, #4	; (adr r2, 8005050 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800504c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005050:	080050a5 	.word	0x080050a5
 8005054:	0800522b 	.word	0x0800522b
 8005058:	0800522b 	.word	0x0800522b
 800505c:	0800522b 	.word	0x0800522b
 8005060:	080050e5 	.word	0x080050e5
 8005064:	0800522b 	.word	0x0800522b
 8005068:	0800522b 	.word	0x0800522b
 800506c:	0800522b 	.word	0x0800522b
 8005070:	08005127 	.word	0x08005127
 8005074:	0800522b 	.word	0x0800522b
 8005078:	0800522b 	.word	0x0800522b
 800507c:	0800522b 	.word	0x0800522b
 8005080:	08005167 	.word	0x08005167
 8005084:	0800522b 	.word	0x0800522b
 8005088:	0800522b 	.word	0x0800522b
 800508c:	0800522b 	.word	0x0800522b
 8005090:	080051a9 	.word	0x080051a9
 8005094:	0800522b 	.word	0x0800522b
 8005098:	0800522b 	.word	0x0800522b
 800509c:	0800522b 	.word	0x0800522b
 80050a0:	080051e9 	.word	0x080051e9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	68b9      	ldr	r1, [r7, #8]
 80050aa:	4618      	mov	r0, r3
 80050ac:	f000 fa2a 	bl	8005504 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	699a      	ldr	r2, [r3, #24]
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f042 0208 	orr.w	r2, r2, #8
 80050be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	699a      	ldr	r2, [r3, #24]
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f022 0204 	bic.w	r2, r2, #4
 80050ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	6999      	ldr	r1, [r3, #24]
 80050d6:	68bb      	ldr	r3, [r7, #8]
 80050d8:	691a      	ldr	r2, [r3, #16]
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	430a      	orrs	r2, r1
 80050e0:	619a      	str	r2, [r3, #24]
      break;
 80050e2:	e0a5      	b.n	8005230 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	68b9      	ldr	r1, [r7, #8]
 80050ea:	4618      	mov	r0, r3
 80050ec:	f000 fa86 	bl	80055fc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	699a      	ldr	r2, [r3, #24]
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80050fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	699a      	ldr	r2, [r3, #24]
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800510e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	6999      	ldr	r1, [r3, #24]
 8005116:	68bb      	ldr	r3, [r7, #8]
 8005118:	691b      	ldr	r3, [r3, #16]
 800511a:	021a      	lsls	r2, r3, #8
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	430a      	orrs	r2, r1
 8005122:	619a      	str	r2, [r3, #24]
      break;
 8005124:	e084      	b.n	8005230 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	68b9      	ldr	r1, [r7, #8]
 800512c:	4618      	mov	r0, r3
 800512e:	f000 fadf 	bl	80056f0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	69da      	ldr	r2, [r3, #28]
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f042 0208 	orr.w	r2, r2, #8
 8005140:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	69da      	ldr	r2, [r3, #28]
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f022 0204 	bic.w	r2, r2, #4
 8005150:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	69d9      	ldr	r1, [r3, #28]
 8005158:	68bb      	ldr	r3, [r7, #8]
 800515a:	691a      	ldr	r2, [r3, #16]
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	430a      	orrs	r2, r1
 8005162:	61da      	str	r2, [r3, #28]
      break;
 8005164:	e064      	b.n	8005230 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	68b9      	ldr	r1, [r7, #8]
 800516c:	4618      	mov	r0, r3
 800516e:	f000 fb37 	bl	80057e0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	69da      	ldr	r2, [r3, #28]
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005180:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	69da      	ldr	r2, [r3, #28]
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005190:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	69d9      	ldr	r1, [r3, #28]
 8005198:	68bb      	ldr	r3, [r7, #8]
 800519a:	691b      	ldr	r3, [r3, #16]
 800519c:	021a      	lsls	r2, r3, #8
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	430a      	orrs	r2, r1
 80051a4:	61da      	str	r2, [r3, #28]
      break;
 80051a6:	e043      	b.n	8005230 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	68b9      	ldr	r1, [r7, #8]
 80051ae:	4618      	mov	r0, r3
 80051b0:	f000 fb74 	bl	800589c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f042 0208 	orr.w	r2, r2, #8
 80051c2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f022 0204 	bic.w	r2, r2, #4
 80051d2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80051da:	68bb      	ldr	r3, [r7, #8]
 80051dc:	691a      	ldr	r2, [r3, #16]
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	430a      	orrs	r2, r1
 80051e4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80051e6:	e023      	b.n	8005230 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	68b9      	ldr	r1, [r7, #8]
 80051ee:	4618      	mov	r0, r3
 80051f0:	f000 fbac 	bl	800594c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005202:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005212:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800521a:	68bb      	ldr	r3, [r7, #8]
 800521c:	691b      	ldr	r3, [r3, #16]
 800521e:	021a      	lsls	r2, r3, #8
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	430a      	orrs	r2, r1
 8005226:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005228:	e002      	b.n	8005230 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800522a:	2301      	movs	r3, #1
 800522c:	75fb      	strb	r3, [r7, #23]
      break;
 800522e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	2200      	movs	r2, #0
 8005234:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005238:	7dfb      	ldrb	r3, [r7, #23]
}
 800523a:	4618      	mov	r0, r3
 800523c:	3718      	adds	r7, #24
 800523e:	46bd      	mov	sp, r7
 8005240:	bd80      	pop	{r7, pc}
 8005242:	bf00      	nop

08005244 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005244:	b580      	push	{r7, lr}
 8005246:	b084      	sub	sp, #16
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]
 800524c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800524e:	2300      	movs	r3, #0
 8005250:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005258:	2b01      	cmp	r3, #1
 800525a:	d101      	bne.n	8005260 <HAL_TIM_ConfigClockSource+0x1c>
 800525c:	2302      	movs	r3, #2
 800525e:	e0b6      	b.n	80053ce <HAL_TIM_ConfigClockSource+0x18a>
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2201      	movs	r2, #1
 8005264:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2202      	movs	r2, #2
 800526c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	689b      	ldr	r3, [r3, #8]
 8005276:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005278:	68bb      	ldr	r3, [r7, #8]
 800527a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800527e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005282:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005284:	68bb      	ldr	r3, [r7, #8]
 8005286:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800528a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	68ba      	ldr	r2, [r7, #8]
 8005292:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005294:	683b      	ldr	r3, [r7, #0]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800529c:	d03e      	beq.n	800531c <HAL_TIM_ConfigClockSource+0xd8>
 800529e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80052a2:	f200 8087 	bhi.w	80053b4 <HAL_TIM_ConfigClockSource+0x170>
 80052a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80052aa:	f000 8086 	beq.w	80053ba <HAL_TIM_ConfigClockSource+0x176>
 80052ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80052b2:	d87f      	bhi.n	80053b4 <HAL_TIM_ConfigClockSource+0x170>
 80052b4:	2b70      	cmp	r3, #112	; 0x70
 80052b6:	d01a      	beq.n	80052ee <HAL_TIM_ConfigClockSource+0xaa>
 80052b8:	2b70      	cmp	r3, #112	; 0x70
 80052ba:	d87b      	bhi.n	80053b4 <HAL_TIM_ConfigClockSource+0x170>
 80052bc:	2b60      	cmp	r3, #96	; 0x60
 80052be:	d050      	beq.n	8005362 <HAL_TIM_ConfigClockSource+0x11e>
 80052c0:	2b60      	cmp	r3, #96	; 0x60
 80052c2:	d877      	bhi.n	80053b4 <HAL_TIM_ConfigClockSource+0x170>
 80052c4:	2b50      	cmp	r3, #80	; 0x50
 80052c6:	d03c      	beq.n	8005342 <HAL_TIM_ConfigClockSource+0xfe>
 80052c8:	2b50      	cmp	r3, #80	; 0x50
 80052ca:	d873      	bhi.n	80053b4 <HAL_TIM_ConfigClockSource+0x170>
 80052cc:	2b40      	cmp	r3, #64	; 0x40
 80052ce:	d058      	beq.n	8005382 <HAL_TIM_ConfigClockSource+0x13e>
 80052d0:	2b40      	cmp	r3, #64	; 0x40
 80052d2:	d86f      	bhi.n	80053b4 <HAL_TIM_ConfigClockSource+0x170>
 80052d4:	2b30      	cmp	r3, #48	; 0x30
 80052d6:	d064      	beq.n	80053a2 <HAL_TIM_ConfigClockSource+0x15e>
 80052d8:	2b30      	cmp	r3, #48	; 0x30
 80052da:	d86b      	bhi.n	80053b4 <HAL_TIM_ConfigClockSource+0x170>
 80052dc:	2b20      	cmp	r3, #32
 80052de:	d060      	beq.n	80053a2 <HAL_TIM_ConfigClockSource+0x15e>
 80052e0:	2b20      	cmp	r3, #32
 80052e2:	d867      	bhi.n	80053b4 <HAL_TIM_ConfigClockSource+0x170>
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d05c      	beq.n	80053a2 <HAL_TIM_ConfigClockSource+0x15e>
 80052e8:	2b10      	cmp	r3, #16
 80052ea:	d05a      	beq.n	80053a2 <HAL_TIM_ConfigClockSource+0x15e>
 80052ec:	e062      	b.n	80053b4 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	6818      	ldr	r0, [r3, #0]
 80052f2:	683b      	ldr	r3, [r7, #0]
 80052f4:	6899      	ldr	r1, [r3, #8]
 80052f6:	683b      	ldr	r3, [r7, #0]
 80052f8:	685a      	ldr	r2, [r3, #4]
 80052fa:	683b      	ldr	r3, [r7, #0]
 80052fc:	68db      	ldr	r3, [r3, #12]
 80052fe:	f000 fbf9 	bl	8005af4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	689b      	ldr	r3, [r3, #8]
 8005308:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800530a:	68bb      	ldr	r3, [r7, #8]
 800530c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005310:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	68ba      	ldr	r2, [r7, #8]
 8005318:	609a      	str	r2, [r3, #8]
      break;
 800531a:	e04f      	b.n	80053bc <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	6818      	ldr	r0, [r3, #0]
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	6899      	ldr	r1, [r3, #8]
 8005324:	683b      	ldr	r3, [r7, #0]
 8005326:	685a      	ldr	r2, [r3, #4]
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	68db      	ldr	r3, [r3, #12]
 800532c:	f000 fbe2 	bl	8005af4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	689a      	ldr	r2, [r3, #8]
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800533e:	609a      	str	r2, [r3, #8]
      break;
 8005340:	e03c      	b.n	80053bc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6818      	ldr	r0, [r3, #0]
 8005346:	683b      	ldr	r3, [r7, #0]
 8005348:	6859      	ldr	r1, [r3, #4]
 800534a:	683b      	ldr	r3, [r7, #0]
 800534c:	68db      	ldr	r3, [r3, #12]
 800534e:	461a      	mov	r2, r3
 8005350:	f000 fb56 	bl	8005a00 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	2150      	movs	r1, #80	; 0x50
 800535a:	4618      	mov	r0, r3
 800535c:	f000 fbaf 	bl	8005abe <TIM_ITRx_SetConfig>
      break;
 8005360:	e02c      	b.n	80053bc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6818      	ldr	r0, [r3, #0]
 8005366:	683b      	ldr	r3, [r7, #0]
 8005368:	6859      	ldr	r1, [r3, #4]
 800536a:	683b      	ldr	r3, [r7, #0]
 800536c:	68db      	ldr	r3, [r3, #12]
 800536e:	461a      	mov	r2, r3
 8005370:	f000 fb75 	bl	8005a5e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	2160      	movs	r1, #96	; 0x60
 800537a:	4618      	mov	r0, r3
 800537c:	f000 fb9f 	bl	8005abe <TIM_ITRx_SetConfig>
      break;
 8005380:	e01c      	b.n	80053bc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	6818      	ldr	r0, [r3, #0]
 8005386:	683b      	ldr	r3, [r7, #0]
 8005388:	6859      	ldr	r1, [r3, #4]
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	68db      	ldr	r3, [r3, #12]
 800538e:	461a      	mov	r2, r3
 8005390:	f000 fb36 	bl	8005a00 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	2140      	movs	r1, #64	; 0x40
 800539a:	4618      	mov	r0, r3
 800539c:	f000 fb8f 	bl	8005abe <TIM_ITRx_SetConfig>
      break;
 80053a0:	e00c      	b.n	80053bc <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681a      	ldr	r2, [r3, #0]
 80053a6:	683b      	ldr	r3, [r7, #0]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	4619      	mov	r1, r3
 80053ac:	4610      	mov	r0, r2
 80053ae:	f000 fb86 	bl	8005abe <TIM_ITRx_SetConfig>
      break;
 80053b2:	e003      	b.n	80053bc <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80053b4:	2301      	movs	r3, #1
 80053b6:	73fb      	strb	r3, [r7, #15]
      break;
 80053b8:	e000      	b.n	80053bc <HAL_TIM_ConfigClockSource+0x178>
      break;
 80053ba:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2201      	movs	r2, #1
 80053c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2200      	movs	r2, #0
 80053c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80053cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80053ce:	4618      	mov	r0, r3
 80053d0:	3710      	adds	r7, #16
 80053d2:	46bd      	mov	sp, r7
 80053d4:	bd80      	pop	{r7, pc}

080053d6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80053d6:	b480      	push	{r7}
 80053d8:	b083      	sub	sp, #12
 80053da:	af00      	add	r7, sp, #0
 80053dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80053de:	bf00      	nop
 80053e0:	370c      	adds	r7, #12
 80053e2:	46bd      	mov	sp, r7
 80053e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e8:	4770      	bx	lr

080053ea <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80053ea:	b480      	push	{r7}
 80053ec:	b083      	sub	sp, #12
 80053ee:	af00      	add	r7, sp, #0
 80053f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80053f2:	bf00      	nop
 80053f4:	370c      	adds	r7, #12
 80053f6:	46bd      	mov	sp, r7
 80053f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fc:	4770      	bx	lr

080053fe <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80053fe:	b480      	push	{r7}
 8005400:	b083      	sub	sp, #12
 8005402:	af00      	add	r7, sp, #0
 8005404:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005406:	bf00      	nop
 8005408:	370c      	adds	r7, #12
 800540a:	46bd      	mov	sp, r7
 800540c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005410:	4770      	bx	lr

08005412 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005412:	b480      	push	{r7}
 8005414:	b083      	sub	sp, #12
 8005416:	af00      	add	r7, sp, #0
 8005418:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800541a:	bf00      	nop
 800541c:	370c      	adds	r7, #12
 800541e:	46bd      	mov	sp, r7
 8005420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005424:	4770      	bx	lr
	...

08005428 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005428:	b480      	push	{r7}
 800542a:	b085      	sub	sp, #20
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
 8005430:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	4a2e      	ldr	r2, [pc, #184]	; (80054f4 <TIM_Base_SetConfig+0xcc>)
 800543c:	4293      	cmp	r3, r2
 800543e:	d007      	beq.n	8005450 <TIM_Base_SetConfig+0x28>
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005446:	d003      	beq.n	8005450 <TIM_Base_SetConfig+0x28>
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	4a2b      	ldr	r2, [pc, #172]	; (80054f8 <TIM_Base_SetConfig+0xd0>)
 800544c:	4293      	cmp	r3, r2
 800544e:	d108      	bne.n	8005462 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005456:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	685b      	ldr	r3, [r3, #4]
 800545c:	68fa      	ldr	r2, [r7, #12]
 800545e:	4313      	orrs	r3, r2
 8005460:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	4a23      	ldr	r2, [pc, #140]	; (80054f4 <TIM_Base_SetConfig+0xcc>)
 8005466:	4293      	cmp	r3, r2
 8005468:	d00f      	beq.n	800548a <TIM_Base_SetConfig+0x62>
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005470:	d00b      	beq.n	800548a <TIM_Base_SetConfig+0x62>
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	4a20      	ldr	r2, [pc, #128]	; (80054f8 <TIM_Base_SetConfig+0xd0>)
 8005476:	4293      	cmp	r3, r2
 8005478:	d007      	beq.n	800548a <TIM_Base_SetConfig+0x62>
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	4a1f      	ldr	r2, [pc, #124]	; (80054fc <TIM_Base_SetConfig+0xd4>)
 800547e:	4293      	cmp	r3, r2
 8005480:	d003      	beq.n	800548a <TIM_Base_SetConfig+0x62>
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	4a1e      	ldr	r2, [pc, #120]	; (8005500 <TIM_Base_SetConfig+0xd8>)
 8005486:	4293      	cmp	r3, r2
 8005488:	d108      	bne.n	800549c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005490:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	68db      	ldr	r3, [r3, #12]
 8005496:	68fa      	ldr	r2, [r7, #12]
 8005498:	4313      	orrs	r3, r2
 800549a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80054a2:	683b      	ldr	r3, [r7, #0]
 80054a4:	695b      	ldr	r3, [r3, #20]
 80054a6:	4313      	orrs	r3, r2
 80054a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	68fa      	ldr	r2, [r7, #12]
 80054ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80054b0:	683b      	ldr	r3, [r7, #0]
 80054b2:	689a      	ldr	r2, [r3, #8]
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80054b8:	683b      	ldr	r3, [r7, #0]
 80054ba:	681a      	ldr	r2, [r3, #0]
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	4a0c      	ldr	r2, [pc, #48]	; (80054f4 <TIM_Base_SetConfig+0xcc>)
 80054c4:	4293      	cmp	r3, r2
 80054c6:	d007      	beq.n	80054d8 <TIM_Base_SetConfig+0xb0>
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	4a0c      	ldr	r2, [pc, #48]	; (80054fc <TIM_Base_SetConfig+0xd4>)
 80054cc:	4293      	cmp	r3, r2
 80054ce:	d003      	beq.n	80054d8 <TIM_Base_SetConfig+0xb0>
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	4a0b      	ldr	r2, [pc, #44]	; (8005500 <TIM_Base_SetConfig+0xd8>)
 80054d4:	4293      	cmp	r3, r2
 80054d6:	d103      	bne.n	80054e0 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80054d8:	683b      	ldr	r3, [r7, #0]
 80054da:	691a      	ldr	r2, [r3, #16]
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2201      	movs	r2, #1
 80054e4:	615a      	str	r2, [r3, #20]
}
 80054e6:	bf00      	nop
 80054e8:	3714      	adds	r7, #20
 80054ea:	46bd      	mov	sp, r7
 80054ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f0:	4770      	bx	lr
 80054f2:	bf00      	nop
 80054f4:	40012c00 	.word	0x40012c00
 80054f8:	40000400 	.word	0x40000400
 80054fc:	40014000 	.word	0x40014000
 8005500:	40014400 	.word	0x40014400

08005504 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005504:	b480      	push	{r7}
 8005506:	b087      	sub	sp, #28
 8005508:	af00      	add	r7, sp, #0
 800550a:	6078      	str	r0, [r7, #4]
 800550c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	6a1b      	ldr	r3, [r3, #32]
 8005512:	f023 0201 	bic.w	r2, r3, #1
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	6a1b      	ldr	r3, [r3, #32]
 800551e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	685b      	ldr	r3, [r3, #4]
 8005524:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	699b      	ldr	r3, [r3, #24]
 800552a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005532:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005536:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	f023 0303 	bic.w	r3, r3, #3
 800553e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	68fa      	ldr	r2, [r7, #12]
 8005546:	4313      	orrs	r3, r2
 8005548:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800554a:	697b      	ldr	r3, [r7, #20]
 800554c:	f023 0302 	bic.w	r3, r3, #2
 8005550:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005552:	683b      	ldr	r3, [r7, #0]
 8005554:	689b      	ldr	r3, [r3, #8]
 8005556:	697a      	ldr	r2, [r7, #20]
 8005558:	4313      	orrs	r3, r2
 800555a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	4a24      	ldr	r2, [pc, #144]	; (80055f0 <TIM_OC1_SetConfig+0xec>)
 8005560:	4293      	cmp	r3, r2
 8005562:	d007      	beq.n	8005574 <TIM_OC1_SetConfig+0x70>
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	4a23      	ldr	r2, [pc, #140]	; (80055f4 <TIM_OC1_SetConfig+0xf0>)
 8005568:	4293      	cmp	r3, r2
 800556a:	d003      	beq.n	8005574 <TIM_OC1_SetConfig+0x70>
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	4a22      	ldr	r2, [pc, #136]	; (80055f8 <TIM_OC1_SetConfig+0xf4>)
 8005570:	4293      	cmp	r3, r2
 8005572:	d10c      	bne.n	800558e <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005574:	697b      	ldr	r3, [r7, #20]
 8005576:	f023 0308 	bic.w	r3, r3, #8
 800557a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800557c:	683b      	ldr	r3, [r7, #0]
 800557e:	68db      	ldr	r3, [r3, #12]
 8005580:	697a      	ldr	r2, [r7, #20]
 8005582:	4313      	orrs	r3, r2
 8005584:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005586:	697b      	ldr	r3, [r7, #20]
 8005588:	f023 0304 	bic.w	r3, r3, #4
 800558c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	4a17      	ldr	r2, [pc, #92]	; (80055f0 <TIM_OC1_SetConfig+0xec>)
 8005592:	4293      	cmp	r3, r2
 8005594:	d007      	beq.n	80055a6 <TIM_OC1_SetConfig+0xa2>
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	4a16      	ldr	r2, [pc, #88]	; (80055f4 <TIM_OC1_SetConfig+0xf0>)
 800559a:	4293      	cmp	r3, r2
 800559c:	d003      	beq.n	80055a6 <TIM_OC1_SetConfig+0xa2>
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	4a15      	ldr	r2, [pc, #84]	; (80055f8 <TIM_OC1_SetConfig+0xf4>)
 80055a2:	4293      	cmp	r3, r2
 80055a4:	d111      	bne.n	80055ca <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80055a6:	693b      	ldr	r3, [r7, #16]
 80055a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80055ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80055ae:	693b      	ldr	r3, [r7, #16]
 80055b0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80055b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80055b6:	683b      	ldr	r3, [r7, #0]
 80055b8:	695b      	ldr	r3, [r3, #20]
 80055ba:	693a      	ldr	r2, [r7, #16]
 80055bc:	4313      	orrs	r3, r2
 80055be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80055c0:	683b      	ldr	r3, [r7, #0]
 80055c2:	699b      	ldr	r3, [r3, #24]
 80055c4:	693a      	ldr	r2, [r7, #16]
 80055c6:	4313      	orrs	r3, r2
 80055c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	693a      	ldr	r2, [r7, #16]
 80055ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	68fa      	ldr	r2, [r7, #12]
 80055d4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	685a      	ldr	r2, [r3, #4]
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	697a      	ldr	r2, [r7, #20]
 80055e2:	621a      	str	r2, [r3, #32]
}
 80055e4:	bf00      	nop
 80055e6:	371c      	adds	r7, #28
 80055e8:	46bd      	mov	sp, r7
 80055ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ee:	4770      	bx	lr
 80055f0:	40012c00 	.word	0x40012c00
 80055f4:	40014000 	.word	0x40014000
 80055f8:	40014400 	.word	0x40014400

080055fc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80055fc:	b480      	push	{r7}
 80055fe:	b087      	sub	sp, #28
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
 8005604:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	6a1b      	ldr	r3, [r3, #32]
 800560a:	f023 0210 	bic.w	r2, r3, #16
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6a1b      	ldr	r3, [r3, #32]
 8005616:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	685b      	ldr	r3, [r3, #4]
 800561c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	699b      	ldr	r3, [r3, #24]
 8005622:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800562a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800562e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005636:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005638:	683b      	ldr	r3, [r7, #0]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	021b      	lsls	r3, r3, #8
 800563e:	68fa      	ldr	r2, [r7, #12]
 8005640:	4313      	orrs	r3, r2
 8005642:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005644:	697b      	ldr	r3, [r7, #20]
 8005646:	f023 0320 	bic.w	r3, r3, #32
 800564a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	689b      	ldr	r3, [r3, #8]
 8005650:	011b      	lsls	r3, r3, #4
 8005652:	697a      	ldr	r2, [r7, #20]
 8005654:	4313      	orrs	r3, r2
 8005656:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	4a22      	ldr	r2, [pc, #136]	; (80056e4 <TIM_OC2_SetConfig+0xe8>)
 800565c:	4293      	cmp	r3, r2
 800565e:	d10d      	bne.n	800567c <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005660:	697b      	ldr	r3, [r7, #20]
 8005662:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005666:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	68db      	ldr	r3, [r3, #12]
 800566c:	011b      	lsls	r3, r3, #4
 800566e:	697a      	ldr	r2, [r7, #20]
 8005670:	4313      	orrs	r3, r2
 8005672:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005674:	697b      	ldr	r3, [r7, #20]
 8005676:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800567a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	4a19      	ldr	r2, [pc, #100]	; (80056e4 <TIM_OC2_SetConfig+0xe8>)
 8005680:	4293      	cmp	r3, r2
 8005682:	d007      	beq.n	8005694 <TIM_OC2_SetConfig+0x98>
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	4a18      	ldr	r2, [pc, #96]	; (80056e8 <TIM_OC2_SetConfig+0xec>)
 8005688:	4293      	cmp	r3, r2
 800568a:	d003      	beq.n	8005694 <TIM_OC2_SetConfig+0x98>
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	4a17      	ldr	r2, [pc, #92]	; (80056ec <TIM_OC2_SetConfig+0xf0>)
 8005690:	4293      	cmp	r3, r2
 8005692:	d113      	bne.n	80056bc <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005694:	693b      	ldr	r3, [r7, #16]
 8005696:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800569a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800569c:	693b      	ldr	r3, [r7, #16]
 800569e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80056a2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	695b      	ldr	r3, [r3, #20]
 80056a8:	009b      	lsls	r3, r3, #2
 80056aa:	693a      	ldr	r2, [r7, #16]
 80056ac:	4313      	orrs	r3, r2
 80056ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80056b0:	683b      	ldr	r3, [r7, #0]
 80056b2:	699b      	ldr	r3, [r3, #24]
 80056b4:	009b      	lsls	r3, r3, #2
 80056b6:	693a      	ldr	r2, [r7, #16]
 80056b8:	4313      	orrs	r3, r2
 80056ba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	693a      	ldr	r2, [r7, #16]
 80056c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	68fa      	ldr	r2, [r7, #12]
 80056c6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80056c8:	683b      	ldr	r3, [r7, #0]
 80056ca:	685a      	ldr	r2, [r3, #4]
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	697a      	ldr	r2, [r7, #20]
 80056d4:	621a      	str	r2, [r3, #32]
}
 80056d6:	bf00      	nop
 80056d8:	371c      	adds	r7, #28
 80056da:	46bd      	mov	sp, r7
 80056dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e0:	4770      	bx	lr
 80056e2:	bf00      	nop
 80056e4:	40012c00 	.word	0x40012c00
 80056e8:	40014000 	.word	0x40014000
 80056ec:	40014400 	.word	0x40014400

080056f0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80056f0:	b480      	push	{r7}
 80056f2:	b087      	sub	sp, #28
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]
 80056f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	6a1b      	ldr	r3, [r3, #32]
 80056fe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	6a1b      	ldr	r3, [r3, #32]
 800570a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	685b      	ldr	r3, [r3, #4]
 8005710:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	69db      	ldr	r3, [r3, #28]
 8005716:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800571e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005722:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	f023 0303 	bic.w	r3, r3, #3
 800572a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800572c:	683b      	ldr	r3, [r7, #0]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	68fa      	ldr	r2, [r7, #12]
 8005732:	4313      	orrs	r3, r2
 8005734:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005736:	697b      	ldr	r3, [r7, #20]
 8005738:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800573c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	689b      	ldr	r3, [r3, #8]
 8005742:	021b      	lsls	r3, r3, #8
 8005744:	697a      	ldr	r2, [r7, #20]
 8005746:	4313      	orrs	r3, r2
 8005748:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	4a21      	ldr	r2, [pc, #132]	; (80057d4 <TIM_OC3_SetConfig+0xe4>)
 800574e:	4293      	cmp	r3, r2
 8005750:	d10d      	bne.n	800576e <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005752:	697b      	ldr	r3, [r7, #20]
 8005754:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005758:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800575a:	683b      	ldr	r3, [r7, #0]
 800575c:	68db      	ldr	r3, [r3, #12]
 800575e:	021b      	lsls	r3, r3, #8
 8005760:	697a      	ldr	r2, [r7, #20]
 8005762:	4313      	orrs	r3, r2
 8005764:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005766:	697b      	ldr	r3, [r7, #20]
 8005768:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800576c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	4a18      	ldr	r2, [pc, #96]	; (80057d4 <TIM_OC3_SetConfig+0xe4>)
 8005772:	4293      	cmp	r3, r2
 8005774:	d007      	beq.n	8005786 <TIM_OC3_SetConfig+0x96>
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	4a17      	ldr	r2, [pc, #92]	; (80057d8 <TIM_OC3_SetConfig+0xe8>)
 800577a:	4293      	cmp	r3, r2
 800577c:	d003      	beq.n	8005786 <TIM_OC3_SetConfig+0x96>
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	4a16      	ldr	r2, [pc, #88]	; (80057dc <TIM_OC3_SetConfig+0xec>)
 8005782:	4293      	cmp	r3, r2
 8005784:	d113      	bne.n	80057ae <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005786:	693b      	ldr	r3, [r7, #16]
 8005788:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800578c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800578e:	693b      	ldr	r3, [r7, #16]
 8005790:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005794:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005796:	683b      	ldr	r3, [r7, #0]
 8005798:	695b      	ldr	r3, [r3, #20]
 800579a:	011b      	lsls	r3, r3, #4
 800579c:	693a      	ldr	r2, [r7, #16]
 800579e:	4313      	orrs	r3, r2
 80057a0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80057a2:	683b      	ldr	r3, [r7, #0]
 80057a4:	699b      	ldr	r3, [r3, #24]
 80057a6:	011b      	lsls	r3, r3, #4
 80057a8:	693a      	ldr	r2, [r7, #16]
 80057aa:	4313      	orrs	r3, r2
 80057ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	693a      	ldr	r2, [r7, #16]
 80057b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	68fa      	ldr	r2, [r7, #12]
 80057b8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80057ba:	683b      	ldr	r3, [r7, #0]
 80057bc:	685a      	ldr	r2, [r3, #4]
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	697a      	ldr	r2, [r7, #20]
 80057c6:	621a      	str	r2, [r3, #32]
}
 80057c8:	bf00      	nop
 80057ca:	371c      	adds	r7, #28
 80057cc:	46bd      	mov	sp, r7
 80057ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d2:	4770      	bx	lr
 80057d4:	40012c00 	.word	0x40012c00
 80057d8:	40014000 	.word	0x40014000
 80057dc:	40014400 	.word	0x40014400

080057e0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80057e0:	b480      	push	{r7}
 80057e2:	b087      	sub	sp, #28
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]
 80057e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	6a1b      	ldr	r3, [r3, #32]
 80057ee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	6a1b      	ldr	r3, [r3, #32]
 80057fa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	685b      	ldr	r3, [r3, #4]
 8005800:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	69db      	ldr	r3, [r3, #28]
 8005806:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800580e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005812:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800581a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800581c:	683b      	ldr	r3, [r7, #0]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	021b      	lsls	r3, r3, #8
 8005822:	68fa      	ldr	r2, [r7, #12]
 8005824:	4313      	orrs	r3, r2
 8005826:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005828:	693b      	ldr	r3, [r7, #16]
 800582a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800582e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005830:	683b      	ldr	r3, [r7, #0]
 8005832:	689b      	ldr	r3, [r3, #8]
 8005834:	031b      	lsls	r3, r3, #12
 8005836:	693a      	ldr	r2, [r7, #16]
 8005838:	4313      	orrs	r3, r2
 800583a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	4a14      	ldr	r2, [pc, #80]	; (8005890 <TIM_OC4_SetConfig+0xb0>)
 8005840:	4293      	cmp	r3, r2
 8005842:	d007      	beq.n	8005854 <TIM_OC4_SetConfig+0x74>
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	4a13      	ldr	r2, [pc, #76]	; (8005894 <TIM_OC4_SetConfig+0xb4>)
 8005848:	4293      	cmp	r3, r2
 800584a:	d003      	beq.n	8005854 <TIM_OC4_SetConfig+0x74>
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	4a12      	ldr	r2, [pc, #72]	; (8005898 <TIM_OC4_SetConfig+0xb8>)
 8005850:	4293      	cmp	r3, r2
 8005852:	d109      	bne.n	8005868 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005854:	697b      	ldr	r3, [r7, #20]
 8005856:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800585a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	695b      	ldr	r3, [r3, #20]
 8005860:	019b      	lsls	r3, r3, #6
 8005862:	697a      	ldr	r2, [r7, #20]
 8005864:	4313      	orrs	r3, r2
 8005866:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	697a      	ldr	r2, [r7, #20]
 800586c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	68fa      	ldr	r2, [r7, #12]
 8005872:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005874:	683b      	ldr	r3, [r7, #0]
 8005876:	685a      	ldr	r2, [r3, #4]
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	693a      	ldr	r2, [r7, #16]
 8005880:	621a      	str	r2, [r3, #32]
}
 8005882:	bf00      	nop
 8005884:	371c      	adds	r7, #28
 8005886:	46bd      	mov	sp, r7
 8005888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588c:	4770      	bx	lr
 800588e:	bf00      	nop
 8005890:	40012c00 	.word	0x40012c00
 8005894:	40014000 	.word	0x40014000
 8005898:	40014400 	.word	0x40014400

0800589c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800589c:	b480      	push	{r7}
 800589e:	b087      	sub	sp, #28
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	6078      	str	r0, [r7, #4]
 80058a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6a1b      	ldr	r3, [r3, #32]
 80058aa:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	6a1b      	ldr	r3, [r3, #32]
 80058b6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	685b      	ldr	r3, [r3, #4]
 80058bc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80058ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80058d0:	683b      	ldr	r3, [r7, #0]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	68fa      	ldr	r2, [r7, #12]
 80058d6:	4313      	orrs	r3, r2
 80058d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80058da:	693b      	ldr	r3, [r7, #16]
 80058dc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80058e0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	689b      	ldr	r3, [r3, #8]
 80058e6:	041b      	lsls	r3, r3, #16
 80058e8:	693a      	ldr	r2, [r7, #16]
 80058ea:	4313      	orrs	r3, r2
 80058ec:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	4a13      	ldr	r2, [pc, #76]	; (8005940 <TIM_OC5_SetConfig+0xa4>)
 80058f2:	4293      	cmp	r3, r2
 80058f4:	d007      	beq.n	8005906 <TIM_OC5_SetConfig+0x6a>
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	4a12      	ldr	r2, [pc, #72]	; (8005944 <TIM_OC5_SetConfig+0xa8>)
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d003      	beq.n	8005906 <TIM_OC5_SetConfig+0x6a>
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	4a11      	ldr	r2, [pc, #68]	; (8005948 <TIM_OC5_SetConfig+0xac>)
 8005902:	4293      	cmp	r3, r2
 8005904:	d109      	bne.n	800591a <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005906:	697b      	ldr	r3, [r7, #20]
 8005908:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800590c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800590e:	683b      	ldr	r3, [r7, #0]
 8005910:	695b      	ldr	r3, [r3, #20]
 8005912:	021b      	lsls	r3, r3, #8
 8005914:	697a      	ldr	r2, [r7, #20]
 8005916:	4313      	orrs	r3, r2
 8005918:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	697a      	ldr	r2, [r7, #20]
 800591e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	68fa      	ldr	r2, [r7, #12]
 8005924:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	685a      	ldr	r2, [r3, #4]
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	693a      	ldr	r2, [r7, #16]
 8005932:	621a      	str	r2, [r3, #32]
}
 8005934:	bf00      	nop
 8005936:	371c      	adds	r7, #28
 8005938:	46bd      	mov	sp, r7
 800593a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593e:	4770      	bx	lr
 8005940:	40012c00 	.word	0x40012c00
 8005944:	40014000 	.word	0x40014000
 8005948:	40014400 	.word	0x40014400

0800594c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800594c:	b480      	push	{r7}
 800594e:	b087      	sub	sp, #28
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]
 8005954:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	6a1b      	ldr	r3, [r3, #32]
 800595a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	6a1b      	ldr	r3, [r3, #32]
 8005966:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	685b      	ldr	r3, [r3, #4]
 800596c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005972:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800597a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800597e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	021b      	lsls	r3, r3, #8
 8005986:	68fa      	ldr	r2, [r7, #12]
 8005988:	4313      	orrs	r3, r2
 800598a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800598c:	693b      	ldr	r3, [r7, #16]
 800598e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005992:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005994:	683b      	ldr	r3, [r7, #0]
 8005996:	689b      	ldr	r3, [r3, #8]
 8005998:	051b      	lsls	r3, r3, #20
 800599a:	693a      	ldr	r2, [r7, #16]
 800599c:	4313      	orrs	r3, r2
 800599e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	4a14      	ldr	r2, [pc, #80]	; (80059f4 <TIM_OC6_SetConfig+0xa8>)
 80059a4:	4293      	cmp	r3, r2
 80059a6:	d007      	beq.n	80059b8 <TIM_OC6_SetConfig+0x6c>
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	4a13      	ldr	r2, [pc, #76]	; (80059f8 <TIM_OC6_SetConfig+0xac>)
 80059ac:	4293      	cmp	r3, r2
 80059ae:	d003      	beq.n	80059b8 <TIM_OC6_SetConfig+0x6c>
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	4a12      	ldr	r2, [pc, #72]	; (80059fc <TIM_OC6_SetConfig+0xb0>)
 80059b4:	4293      	cmp	r3, r2
 80059b6:	d109      	bne.n	80059cc <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80059b8:	697b      	ldr	r3, [r7, #20]
 80059ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80059be:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80059c0:	683b      	ldr	r3, [r7, #0]
 80059c2:	695b      	ldr	r3, [r3, #20]
 80059c4:	029b      	lsls	r3, r3, #10
 80059c6:	697a      	ldr	r2, [r7, #20]
 80059c8:	4313      	orrs	r3, r2
 80059ca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	697a      	ldr	r2, [r7, #20]
 80059d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	68fa      	ldr	r2, [r7, #12]
 80059d6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80059d8:	683b      	ldr	r3, [r7, #0]
 80059da:	685a      	ldr	r2, [r3, #4]
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	693a      	ldr	r2, [r7, #16]
 80059e4:	621a      	str	r2, [r3, #32]
}
 80059e6:	bf00      	nop
 80059e8:	371c      	adds	r7, #28
 80059ea:	46bd      	mov	sp, r7
 80059ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f0:	4770      	bx	lr
 80059f2:	bf00      	nop
 80059f4:	40012c00 	.word	0x40012c00
 80059f8:	40014000 	.word	0x40014000
 80059fc:	40014400 	.word	0x40014400

08005a00 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005a00:	b480      	push	{r7}
 8005a02:	b087      	sub	sp, #28
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	60f8      	str	r0, [r7, #12]
 8005a08:	60b9      	str	r1, [r7, #8]
 8005a0a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	6a1b      	ldr	r3, [r3, #32]
 8005a10:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	6a1b      	ldr	r3, [r3, #32]
 8005a16:	f023 0201 	bic.w	r2, r3, #1
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	699b      	ldr	r3, [r3, #24]
 8005a22:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005a24:	693b      	ldr	r3, [r7, #16]
 8005a26:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005a2a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	011b      	lsls	r3, r3, #4
 8005a30:	693a      	ldr	r2, [r7, #16]
 8005a32:	4313      	orrs	r3, r2
 8005a34:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005a36:	697b      	ldr	r3, [r7, #20]
 8005a38:	f023 030a 	bic.w	r3, r3, #10
 8005a3c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005a3e:	697a      	ldr	r2, [r7, #20]
 8005a40:	68bb      	ldr	r3, [r7, #8]
 8005a42:	4313      	orrs	r3, r2
 8005a44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	693a      	ldr	r2, [r7, #16]
 8005a4a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	697a      	ldr	r2, [r7, #20]
 8005a50:	621a      	str	r2, [r3, #32]
}
 8005a52:	bf00      	nop
 8005a54:	371c      	adds	r7, #28
 8005a56:	46bd      	mov	sp, r7
 8005a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5c:	4770      	bx	lr

08005a5e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005a5e:	b480      	push	{r7}
 8005a60:	b087      	sub	sp, #28
 8005a62:	af00      	add	r7, sp, #0
 8005a64:	60f8      	str	r0, [r7, #12]
 8005a66:	60b9      	str	r1, [r7, #8]
 8005a68:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	6a1b      	ldr	r3, [r3, #32]
 8005a6e:	f023 0210 	bic.w	r2, r3, #16
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	699b      	ldr	r3, [r3, #24]
 8005a7a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	6a1b      	ldr	r3, [r3, #32]
 8005a80:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005a82:	697b      	ldr	r3, [r7, #20]
 8005a84:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005a88:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	031b      	lsls	r3, r3, #12
 8005a8e:	697a      	ldr	r2, [r7, #20]
 8005a90:	4313      	orrs	r3, r2
 8005a92:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005a94:	693b      	ldr	r3, [r7, #16]
 8005a96:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005a9a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005a9c:	68bb      	ldr	r3, [r7, #8]
 8005a9e:	011b      	lsls	r3, r3, #4
 8005aa0:	693a      	ldr	r2, [r7, #16]
 8005aa2:	4313      	orrs	r3, r2
 8005aa4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	697a      	ldr	r2, [r7, #20]
 8005aaa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	693a      	ldr	r2, [r7, #16]
 8005ab0:	621a      	str	r2, [r3, #32]
}
 8005ab2:	bf00      	nop
 8005ab4:	371c      	adds	r7, #28
 8005ab6:	46bd      	mov	sp, r7
 8005ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005abc:	4770      	bx	lr

08005abe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005abe:	b480      	push	{r7}
 8005ac0:	b085      	sub	sp, #20
 8005ac2:	af00      	add	r7, sp, #0
 8005ac4:	6078      	str	r0, [r7, #4]
 8005ac6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	689b      	ldr	r3, [r3, #8]
 8005acc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ad4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005ad6:	683a      	ldr	r2, [r7, #0]
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	4313      	orrs	r3, r2
 8005adc:	f043 0307 	orr.w	r3, r3, #7
 8005ae0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	68fa      	ldr	r2, [r7, #12]
 8005ae6:	609a      	str	r2, [r3, #8]
}
 8005ae8:	bf00      	nop
 8005aea:	3714      	adds	r7, #20
 8005aec:	46bd      	mov	sp, r7
 8005aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af2:	4770      	bx	lr

08005af4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005af4:	b480      	push	{r7}
 8005af6:	b087      	sub	sp, #28
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	60f8      	str	r0, [r7, #12]
 8005afc:	60b9      	str	r1, [r7, #8]
 8005afe:	607a      	str	r2, [r7, #4]
 8005b00:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	689b      	ldr	r3, [r3, #8]
 8005b06:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005b08:	697b      	ldr	r3, [r7, #20]
 8005b0a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005b0e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005b10:	683b      	ldr	r3, [r7, #0]
 8005b12:	021a      	lsls	r2, r3, #8
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	431a      	orrs	r2, r3
 8005b18:	68bb      	ldr	r3, [r7, #8]
 8005b1a:	4313      	orrs	r3, r2
 8005b1c:	697a      	ldr	r2, [r7, #20]
 8005b1e:	4313      	orrs	r3, r2
 8005b20:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	697a      	ldr	r2, [r7, #20]
 8005b26:	609a      	str	r2, [r3, #8]
}
 8005b28:	bf00      	nop
 8005b2a:	371c      	adds	r7, #28
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b32:	4770      	bx	lr

08005b34 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005b34:	b480      	push	{r7}
 8005b36:	b087      	sub	sp, #28
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	60f8      	str	r0, [r7, #12]
 8005b3c:	60b9      	str	r1, [r7, #8]
 8005b3e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005b40:	68bb      	ldr	r3, [r7, #8]
 8005b42:	f003 031f 	and.w	r3, r3, #31
 8005b46:	2201      	movs	r2, #1
 8005b48:	fa02 f303 	lsl.w	r3, r2, r3
 8005b4c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	6a1a      	ldr	r2, [r3, #32]
 8005b52:	697b      	ldr	r3, [r7, #20]
 8005b54:	43db      	mvns	r3, r3
 8005b56:	401a      	ands	r2, r3
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	6a1a      	ldr	r2, [r3, #32]
 8005b60:	68bb      	ldr	r3, [r7, #8]
 8005b62:	f003 031f 	and.w	r3, r3, #31
 8005b66:	6879      	ldr	r1, [r7, #4]
 8005b68:	fa01 f303 	lsl.w	r3, r1, r3
 8005b6c:	431a      	orrs	r2, r3
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	621a      	str	r2, [r3, #32]
}
 8005b72:	bf00      	nop
 8005b74:	371c      	adds	r7, #28
 8005b76:	46bd      	mov	sp, r7
 8005b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7c:	4770      	bx	lr
	...

08005b80 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005b80:	b480      	push	{r7}
 8005b82:	b085      	sub	sp, #20
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
 8005b88:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b90:	2b01      	cmp	r3, #1
 8005b92:	d101      	bne.n	8005b98 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005b94:	2302      	movs	r3, #2
 8005b96:	e054      	b.n	8005c42 <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	2201      	movs	r2, #1
 8005b9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2202      	movs	r2, #2
 8005ba4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	685b      	ldr	r3, [r3, #4]
 8005bae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	689b      	ldr	r3, [r3, #8]
 8005bb6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	4a24      	ldr	r2, [pc, #144]	; (8005c50 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005bbe:	4293      	cmp	r3, r2
 8005bc0:	d108      	bne.n	8005bd4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005bc8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005bca:	683b      	ldr	r3, [r7, #0]
 8005bcc:	685b      	ldr	r3, [r3, #4]
 8005bce:	68fa      	ldr	r2, [r7, #12]
 8005bd0:	4313      	orrs	r3, r2
 8005bd2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bda:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005bdc:	683b      	ldr	r3, [r7, #0]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	68fa      	ldr	r2, [r7, #12]
 8005be2:	4313      	orrs	r3, r2
 8005be4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	68fa      	ldr	r2, [r7, #12]
 8005bec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	4a17      	ldr	r2, [pc, #92]	; (8005c50 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005bf4:	4293      	cmp	r3, r2
 8005bf6:	d00e      	beq.n	8005c16 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c00:	d009      	beq.n	8005c16 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	4a13      	ldr	r2, [pc, #76]	; (8005c54 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005c08:	4293      	cmp	r3, r2
 8005c0a:	d004      	beq.n	8005c16 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	4a11      	ldr	r2, [pc, #68]	; (8005c58 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005c12:	4293      	cmp	r3, r2
 8005c14:	d10c      	bne.n	8005c30 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005c16:	68bb      	ldr	r3, [r7, #8]
 8005c18:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005c1c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005c1e:	683b      	ldr	r3, [r7, #0]
 8005c20:	689b      	ldr	r3, [r3, #8]
 8005c22:	68ba      	ldr	r2, [r7, #8]
 8005c24:	4313      	orrs	r3, r2
 8005c26:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	68ba      	ldr	r2, [r7, #8]
 8005c2e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2201      	movs	r2, #1
 8005c34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2200      	movs	r2, #0
 8005c3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005c40:	2300      	movs	r3, #0
}
 8005c42:	4618      	mov	r0, r3
 8005c44:	3714      	adds	r7, #20
 8005c46:	46bd      	mov	sp, r7
 8005c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4c:	4770      	bx	lr
 8005c4e:	bf00      	nop
 8005c50:	40012c00 	.word	0x40012c00
 8005c54:	40000400 	.word	0x40000400
 8005c58:	40014000 	.word	0x40014000

08005c5c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005c5c:	b480      	push	{r7}
 8005c5e:	b085      	sub	sp, #20
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]
 8005c64:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005c66:	2300      	movs	r3, #0
 8005c68:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c70:	2b01      	cmp	r3, #1
 8005c72:	d101      	bne.n	8005c78 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005c74:	2302      	movs	r3, #2
 8005c76:	e060      	b.n	8005d3a <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	2201      	movs	r2, #1
 8005c7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005c86:	683b      	ldr	r3, [r7, #0]
 8005c88:	68db      	ldr	r3, [r3, #12]
 8005c8a:	4313      	orrs	r3, r2
 8005c8c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005c94:	683b      	ldr	r3, [r7, #0]
 8005c96:	689b      	ldr	r3, [r3, #8]
 8005c98:	4313      	orrs	r3, r2
 8005c9a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005ca2:	683b      	ldr	r3, [r7, #0]
 8005ca4:	685b      	ldr	r3, [r3, #4]
 8005ca6:	4313      	orrs	r3, r2
 8005ca8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005cb0:	683b      	ldr	r3, [r7, #0]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	4313      	orrs	r3, r2
 8005cb6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005cbe:	683b      	ldr	r3, [r7, #0]
 8005cc0:	691b      	ldr	r3, [r3, #16]
 8005cc2:	4313      	orrs	r3, r2
 8005cc4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005ccc:	683b      	ldr	r3, [r7, #0]
 8005cce:	695b      	ldr	r3, [r3, #20]
 8005cd0:	4313      	orrs	r3, r2
 8005cd2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005cda:	683b      	ldr	r3, [r7, #0]
 8005cdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cde:	4313      	orrs	r3, r2
 8005ce0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8005ce8:	683b      	ldr	r3, [r7, #0]
 8005cea:	699b      	ldr	r3, [r3, #24]
 8005cec:	041b      	lsls	r3, r3, #16
 8005cee:	4313      	orrs	r3, r2
 8005cf0:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	4a14      	ldr	r2, [pc, #80]	; (8005d48 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8005cf8:	4293      	cmp	r3, r2
 8005cfa:	d115      	bne.n	8005d28 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8005d02:	683b      	ldr	r3, [r7, #0]
 8005d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d06:	051b      	lsls	r3, r3, #20
 8005d08:	4313      	orrs	r3, r2
 8005d0a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005d12:	683b      	ldr	r3, [r7, #0]
 8005d14:	69db      	ldr	r3, [r3, #28]
 8005d16:	4313      	orrs	r3, r2
 8005d18:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005d20:	683b      	ldr	r3, [r7, #0]
 8005d22:	6a1b      	ldr	r3, [r3, #32]
 8005d24:	4313      	orrs	r3, r2
 8005d26:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	68fa      	ldr	r2, [r7, #12]
 8005d2e:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	2200      	movs	r2, #0
 8005d34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005d38:	2300      	movs	r3, #0
}
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	3714      	adds	r7, #20
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d44:	4770      	bx	lr
 8005d46:	bf00      	nop
 8005d48:	40012c00 	.word	0x40012c00

08005d4c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005d4c:	b480      	push	{r7}
 8005d4e:	b083      	sub	sp, #12
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005d54:	bf00      	nop
 8005d56:	370c      	adds	r7, #12
 8005d58:	46bd      	mov	sp, r7
 8005d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5e:	4770      	bx	lr

08005d60 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005d60:	b480      	push	{r7}
 8005d62:	b083      	sub	sp, #12
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005d68:	bf00      	nop
 8005d6a:	370c      	adds	r7, #12
 8005d6c:	46bd      	mov	sp, r7
 8005d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d72:	4770      	bx	lr

08005d74 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005d74:	b480      	push	{r7}
 8005d76:	b083      	sub	sp, #12
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005d7c:	bf00      	nop
 8005d7e:	370c      	adds	r7, #12
 8005d80:	46bd      	mov	sp, r7
 8005d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d86:	4770      	bx	lr

08005d88 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005d88:	b580      	push	{r7, lr}
 8005d8a:	b082      	sub	sp, #8
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d101      	bne.n	8005d9a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005d96:	2301      	movs	r3, #1
 8005d98:	e040      	b.n	8005e1c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d106      	bne.n	8005db0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	2200      	movs	r2, #0
 8005da6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005daa:	6878      	ldr	r0, [r7, #4]
 8005dac:	f7fb fdb8 	bl	8001920 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2224      	movs	r2, #36	; 0x24
 8005db4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	681a      	ldr	r2, [r3, #0]
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	f022 0201 	bic.w	r2, r2, #1
 8005dc4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005dc6:	6878      	ldr	r0, [r7, #4]
 8005dc8:	f000 fc18 	bl	80065fc <UART_SetConfig>
 8005dcc:	4603      	mov	r3, r0
 8005dce:	2b01      	cmp	r3, #1
 8005dd0:	d101      	bne.n	8005dd6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005dd2:	2301      	movs	r3, #1
 8005dd4:	e022      	b.n	8005e1c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d002      	beq.n	8005de4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005dde:	6878      	ldr	r0, [r7, #4]
 8005de0:	f000 fe92 	bl	8006b08 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	685a      	ldr	r2, [r3, #4]
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005df2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	689a      	ldr	r2, [r3, #8]
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005e02:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	681a      	ldr	r2, [r3, #0]
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	f042 0201 	orr.w	r2, r2, #1
 8005e12:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005e14:	6878      	ldr	r0, [r7, #4]
 8005e16:	f000 ff19 	bl	8006c4c <UART_CheckIdleState>
 8005e1a:	4603      	mov	r3, r0
}
 8005e1c:	4618      	mov	r0, r3
 8005e1e:	3708      	adds	r7, #8
 8005e20:	46bd      	mov	sp, r7
 8005e22:	bd80      	pop	{r7, pc}

08005e24 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005e24:	b580      	push	{r7, lr}
 8005e26:	b08a      	sub	sp, #40	; 0x28
 8005e28:	af02      	add	r7, sp, #8
 8005e2a:	60f8      	str	r0, [r7, #12]
 8005e2c:	60b9      	str	r1, [r7, #8]
 8005e2e:	603b      	str	r3, [r7, #0]
 8005e30:	4613      	mov	r3, r2
 8005e32:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005e38:	2b20      	cmp	r3, #32
 8005e3a:	f040 8082 	bne.w	8005f42 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005e3e:	68bb      	ldr	r3, [r7, #8]
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d002      	beq.n	8005e4a <HAL_UART_Transmit+0x26>
 8005e44:	88fb      	ldrh	r3, [r7, #6]
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d101      	bne.n	8005e4e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005e4a:	2301      	movs	r3, #1
 8005e4c:	e07a      	b.n	8005f44 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005e54:	2b01      	cmp	r3, #1
 8005e56:	d101      	bne.n	8005e5c <HAL_UART_Transmit+0x38>
 8005e58:	2302      	movs	r3, #2
 8005e5a:	e073      	b.n	8005f44 <HAL_UART_Transmit+0x120>
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	2201      	movs	r2, #1
 8005e60:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	2200      	movs	r2, #0
 8005e68:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	2221      	movs	r2, #33	; 0x21
 8005e70:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005e72:	f7fb fea1 	bl	8001bb8 <HAL_GetTick>
 8005e76:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	88fa      	ldrh	r2, [r7, #6]
 8005e7c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	88fa      	ldrh	r2, [r7, #6]
 8005e84:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	689b      	ldr	r3, [r3, #8]
 8005e8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e90:	d108      	bne.n	8005ea4 <HAL_UART_Transmit+0x80>
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	691b      	ldr	r3, [r3, #16]
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d104      	bne.n	8005ea4 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8005e9a:	2300      	movs	r3, #0
 8005e9c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005e9e:	68bb      	ldr	r3, [r7, #8]
 8005ea0:	61bb      	str	r3, [r7, #24]
 8005ea2:	e003      	b.n	8005eac <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8005ea4:	68bb      	ldr	r3, [r7, #8]
 8005ea6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005ea8:	2300      	movs	r3, #0
 8005eaa:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	2200      	movs	r2, #0
 8005eb0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8005eb4:	e02d      	b.n	8005f12 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005eb6:	683b      	ldr	r3, [r7, #0]
 8005eb8:	9300      	str	r3, [sp, #0]
 8005eba:	697b      	ldr	r3, [r7, #20]
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	2180      	movs	r1, #128	; 0x80
 8005ec0:	68f8      	ldr	r0, [r7, #12]
 8005ec2:	f000 ff0c 	bl	8006cde <UART_WaitOnFlagUntilTimeout>
 8005ec6:	4603      	mov	r3, r0
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d001      	beq.n	8005ed0 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8005ecc:	2303      	movs	r3, #3
 8005ece:	e039      	b.n	8005f44 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8005ed0:	69fb      	ldr	r3, [r7, #28]
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d10b      	bne.n	8005eee <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005ed6:	69bb      	ldr	r3, [r7, #24]
 8005ed8:	881a      	ldrh	r2, [r3, #0]
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005ee2:	b292      	uxth	r2, r2
 8005ee4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005ee6:	69bb      	ldr	r3, [r7, #24]
 8005ee8:	3302      	adds	r3, #2
 8005eea:	61bb      	str	r3, [r7, #24]
 8005eec:	e008      	b.n	8005f00 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005eee:	69fb      	ldr	r3, [r7, #28]
 8005ef0:	781a      	ldrb	r2, [r3, #0]
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	b292      	uxth	r2, r2
 8005ef8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005efa:	69fb      	ldr	r3, [r7, #28]
 8005efc:	3301      	adds	r3, #1
 8005efe:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005f06:	b29b      	uxth	r3, r3
 8005f08:	3b01      	subs	r3, #1
 8005f0a:	b29a      	uxth	r2, r3
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005f18:	b29b      	uxth	r3, r3
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d1cb      	bne.n	8005eb6 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005f1e:	683b      	ldr	r3, [r7, #0]
 8005f20:	9300      	str	r3, [sp, #0]
 8005f22:	697b      	ldr	r3, [r7, #20]
 8005f24:	2200      	movs	r2, #0
 8005f26:	2140      	movs	r1, #64	; 0x40
 8005f28:	68f8      	ldr	r0, [r7, #12]
 8005f2a:	f000 fed8 	bl	8006cde <UART_WaitOnFlagUntilTimeout>
 8005f2e:	4603      	mov	r3, r0
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d001      	beq.n	8005f38 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8005f34:	2303      	movs	r3, #3
 8005f36:	e005      	b.n	8005f44 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	2220      	movs	r2, #32
 8005f3c:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8005f3e:	2300      	movs	r3, #0
 8005f40:	e000      	b.n	8005f44 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8005f42:	2302      	movs	r3, #2
  }
}
 8005f44:	4618      	mov	r0, r3
 8005f46:	3720      	adds	r7, #32
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	bd80      	pop	{r7, pc}

08005f4c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005f4c:	b580      	push	{r7, lr}
 8005f4e:	b08a      	sub	sp, #40	; 0x28
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	60f8      	str	r0, [r7, #12]
 8005f54:	60b9      	str	r1, [r7, #8]
 8005f56:	4613      	mov	r3, r2
 8005f58:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005f5e:	2b20      	cmp	r3, #32
 8005f60:	d142      	bne.n	8005fe8 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005f62:	68bb      	ldr	r3, [r7, #8]
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d002      	beq.n	8005f6e <HAL_UART_Receive_IT+0x22>
 8005f68:	88fb      	ldrh	r3, [r7, #6]
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d101      	bne.n	8005f72 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8005f6e:	2301      	movs	r3, #1
 8005f70:	e03b      	b.n	8005fea <HAL_UART_Receive_IT+0x9e>
    }

    __HAL_LOCK(huart);
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005f78:	2b01      	cmp	r3, #1
 8005f7a:	d101      	bne.n	8005f80 <HAL_UART_Receive_IT+0x34>
 8005f7c:	2302      	movs	r3, #2
 8005f7e:	e034      	b.n	8005fea <HAL_UART_Receive_IT+0x9e>
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	2201      	movs	r2, #1
 8005f84:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	2200      	movs	r2, #0
 8005f8c:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	4a18      	ldr	r2, [pc, #96]	; (8005ff4 <HAL_UART_Receive_IT+0xa8>)
 8005f94:	4293      	cmp	r3, r2
 8005f96:	d01f      	beq.n	8005fd8 <HAL_UART_Receive_IT+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	685b      	ldr	r3, [r3, #4]
 8005f9e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d018      	beq.n	8005fd8 <HAL_UART_Receive_IT+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fac:	697b      	ldr	r3, [r7, #20]
 8005fae:	e853 3f00 	ldrex	r3, [r3]
 8005fb2:	613b      	str	r3, [r7, #16]
   return(result);
 8005fb4:	693b      	ldr	r3, [r7, #16]
 8005fb6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005fba:	627b      	str	r3, [r7, #36]	; 0x24
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	461a      	mov	r2, r3
 8005fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fc4:	623b      	str	r3, [r7, #32]
 8005fc6:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fc8:	69f9      	ldr	r1, [r7, #28]
 8005fca:	6a3a      	ldr	r2, [r7, #32]
 8005fcc:	e841 2300 	strex	r3, r2, [r1]
 8005fd0:	61bb      	str	r3, [r7, #24]
   return(result);
 8005fd2:	69bb      	ldr	r3, [r7, #24]
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d1e6      	bne.n	8005fa6 <HAL_UART_Receive_IT+0x5a>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005fd8:	88fb      	ldrh	r3, [r7, #6]
 8005fda:	461a      	mov	r2, r3
 8005fdc:	68b9      	ldr	r1, [r7, #8]
 8005fde:	68f8      	ldr	r0, [r7, #12]
 8005fe0:	f000 ff42 	bl	8006e68 <UART_Start_Receive_IT>
 8005fe4:	4603      	mov	r3, r0
 8005fe6:	e000      	b.n	8005fea <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8005fe8:	2302      	movs	r3, #2
  }
}
 8005fea:	4618      	mov	r0, r3
 8005fec:	3728      	adds	r7, #40	; 0x28
 8005fee:	46bd      	mov	sp, r7
 8005ff0:	bd80      	pop	{r7, pc}
 8005ff2:	bf00      	nop
 8005ff4:	40008000 	.word	0x40008000

08005ff8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005ff8:	b580      	push	{r7, lr}
 8005ffa:	b0ba      	sub	sp, #232	; 0xe8
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	69db      	ldr	r3, [r3, #28]
 8006006:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	689b      	ldr	r3, [r3, #8]
 800601a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800601e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8006022:	f640 030f 	movw	r3, #2063	; 0x80f
 8006026:	4013      	ands	r3, r2
 8006028:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800602c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006030:	2b00      	cmp	r3, #0
 8006032:	d115      	bne.n	8006060 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006034:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006038:	f003 0320 	and.w	r3, r3, #32
 800603c:	2b00      	cmp	r3, #0
 800603e:	d00f      	beq.n	8006060 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006040:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006044:	f003 0320 	and.w	r3, r3, #32
 8006048:	2b00      	cmp	r3, #0
 800604a:	d009      	beq.n	8006060 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006050:	2b00      	cmp	r3, #0
 8006052:	f000 82a6 	beq.w	80065a2 <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800605a:	6878      	ldr	r0, [r7, #4]
 800605c:	4798      	blx	r3
      }
      return;
 800605e:	e2a0      	b.n	80065a2 <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8006060:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006064:	2b00      	cmp	r3, #0
 8006066:	f000 8117 	beq.w	8006298 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800606a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800606e:	f003 0301 	and.w	r3, r3, #1
 8006072:	2b00      	cmp	r3, #0
 8006074:	d106      	bne.n	8006084 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8006076:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800607a:	4b85      	ldr	r3, [pc, #532]	; (8006290 <HAL_UART_IRQHandler+0x298>)
 800607c:	4013      	ands	r3, r2
 800607e:	2b00      	cmp	r3, #0
 8006080:	f000 810a 	beq.w	8006298 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006084:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006088:	f003 0301 	and.w	r3, r3, #1
 800608c:	2b00      	cmp	r3, #0
 800608e:	d011      	beq.n	80060b4 <HAL_UART_IRQHandler+0xbc>
 8006090:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006094:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006098:	2b00      	cmp	r3, #0
 800609a:	d00b      	beq.n	80060b4 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	2201      	movs	r2, #1
 80060a2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80060aa:	f043 0201 	orr.w	r2, r3, #1
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80060b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80060b8:	f003 0302 	and.w	r3, r3, #2
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d011      	beq.n	80060e4 <HAL_UART_IRQHandler+0xec>
 80060c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80060c4:	f003 0301 	and.w	r3, r3, #1
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d00b      	beq.n	80060e4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	2202      	movs	r2, #2
 80060d2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80060da:	f043 0204 	orr.w	r2, r3, #4
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80060e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80060e8:	f003 0304 	and.w	r3, r3, #4
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d011      	beq.n	8006114 <HAL_UART_IRQHandler+0x11c>
 80060f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80060f4:	f003 0301 	and.w	r3, r3, #1
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d00b      	beq.n	8006114 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	2204      	movs	r2, #4
 8006102:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800610a:	f043 0202 	orr.w	r2, r3, #2
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006114:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006118:	f003 0308 	and.w	r3, r3, #8
 800611c:	2b00      	cmp	r3, #0
 800611e:	d017      	beq.n	8006150 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006120:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006124:	f003 0320 	and.w	r3, r3, #32
 8006128:	2b00      	cmp	r3, #0
 800612a:	d105      	bne.n	8006138 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800612c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006130:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006134:	2b00      	cmp	r3, #0
 8006136:	d00b      	beq.n	8006150 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	2208      	movs	r2, #8
 800613e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006146:	f043 0208 	orr.w	r2, r3, #8
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006150:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006154:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006158:	2b00      	cmp	r3, #0
 800615a:	d012      	beq.n	8006182 <HAL_UART_IRQHandler+0x18a>
 800615c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006160:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006164:	2b00      	cmp	r3, #0
 8006166:	d00c      	beq.n	8006182 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006170:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006178:	f043 0220 	orr.w	r2, r3, #32
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006188:	2b00      	cmp	r3, #0
 800618a:	f000 820c 	beq.w	80065a6 <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800618e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006192:	f003 0320 	and.w	r3, r3, #32
 8006196:	2b00      	cmp	r3, #0
 8006198:	d00d      	beq.n	80061b6 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800619a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800619e:	f003 0320 	and.w	r3, r3, #32
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d007      	beq.n	80061b6 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d003      	beq.n	80061b6 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80061b2:	6878      	ldr	r0, [r7, #4]
 80061b4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80061bc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	689b      	ldr	r3, [r3, #8]
 80061c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061ca:	2b40      	cmp	r3, #64	; 0x40
 80061cc:	d005      	beq.n	80061da <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80061ce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80061d2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d04f      	beq.n	800627a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80061da:	6878      	ldr	r0, [r7, #4]
 80061dc:	f000 ff0e 	bl	8006ffc <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	689b      	ldr	r3, [r3, #8]
 80061e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061ea:	2b40      	cmp	r3, #64	; 0x40
 80061ec:	d141      	bne.n	8006272 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	3308      	adds	r3, #8
 80061f4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061f8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80061fc:	e853 3f00 	ldrex	r3, [r3]
 8006200:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006204:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006208:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800620c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	3308      	adds	r3, #8
 8006216:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800621a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800621e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006222:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006226:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800622a:	e841 2300 	strex	r3, r2, [r1]
 800622e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006232:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006236:	2b00      	cmp	r3, #0
 8006238:	d1d9      	bne.n	80061ee <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800623e:	2b00      	cmp	r3, #0
 8006240:	d013      	beq.n	800626a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006246:	4a13      	ldr	r2, [pc, #76]	; (8006294 <HAL_UART_IRQHandler+0x29c>)
 8006248:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800624e:	4618      	mov	r0, r3
 8006250:	f7fc fed9 	bl	8003006 <HAL_DMA_Abort_IT>
 8006254:	4603      	mov	r3, r0
 8006256:	2b00      	cmp	r3, #0
 8006258:	d017      	beq.n	800628a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800625e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006260:	687a      	ldr	r2, [r7, #4]
 8006262:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8006264:	4610      	mov	r0, r2
 8006266:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006268:	e00f      	b.n	800628a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800626a:	6878      	ldr	r0, [r7, #4]
 800626c:	f000 f9b0 	bl	80065d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006270:	e00b      	b.n	800628a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006272:	6878      	ldr	r0, [r7, #4]
 8006274:	f000 f9ac 	bl	80065d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006278:	e007      	b.n	800628a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800627a:	6878      	ldr	r0, [r7, #4]
 800627c:	f000 f9a8 	bl	80065d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	2200      	movs	r2, #0
 8006284:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8006288:	e18d      	b.n	80065a6 <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800628a:	bf00      	nop
    return;
 800628c:	e18b      	b.n	80065a6 <HAL_UART_IRQHandler+0x5ae>
 800628e:	bf00      	nop
 8006290:	04000120 	.word	0x04000120
 8006294:	080070c3 	.word	0x080070c3

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800629c:	2b01      	cmp	r3, #1
 800629e:	f040 8146 	bne.w	800652e <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80062a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80062a6:	f003 0310 	and.w	r3, r3, #16
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	f000 813f 	beq.w	800652e <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80062b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80062b4:	f003 0310 	and.w	r3, r3, #16
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	f000 8138 	beq.w	800652e <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	2210      	movs	r2, #16
 80062c4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	689b      	ldr	r3, [r3, #8]
 80062cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062d0:	2b40      	cmp	r3, #64	; 0x40
 80062d2:	f040 80b4 	bne.w	800643e <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	685b      	ldr	r3, [r3, #4]
 80062de:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80062e2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	f000 815f 	beq.w	80065aa <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80062f2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80062f6:	429a      	cmp	r2, r3
 80062f8:	f080 8157 	bcs.w	80065aa <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006302:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	f003 0320 	and.w	r3, r3, #32
 8006312:	2b00      	cmp	r3, #0
 8006314:	f040 8085 	bne.w	8006422 <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006320:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006324:	e853 3f00 	ldrex	r3, [r3]
 8006328:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800632c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006330:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006334:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	461a      	mov	r2, r3
 800633e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006342:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006346:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800634a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800634e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006352:	e841 2300 	strex	r3, r2, [r1]
 8006356:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800635a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800635e:	2b00      	cmp	r3, #0
 8006360:	d1da      	bne.n	8006318 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	3308      	adds	r3, #8
 8006368:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800636a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800636c:	e853 3f00 	ldrex	r3, [r3]
 8006370:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006372:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006374:	f023 0301 	bic.w	r3, r3, #1
 8006378:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	3308      	adds	r3, #8
 8006382:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006386:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800638a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800638c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800638e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006392:	e841 2300 	strex	r3, r2, [r1]
 8006396:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006398:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800639a:	2b00      	cmp	r3, #0
 800639c:	d1e1      	bne.n	8006362 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	3308      	adds	r3, #8
 80063a4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063a6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80063a8:	e853 3f00 	ldrex	r3, [r3]
 80063ac:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80063ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80063b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80063b4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	3308      	adds	r3, #8
 80063be:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80063c2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80063c4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063c6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80063c8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80063ca:	e841 2300 	strex	r3, r2, [r1]
 80063ce:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80063d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d1e3      	bne.n	800639e <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	2220      	movs	r2, #32
 80063da:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	2200      	movs	r2, #0
 80063e0:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80063ea:	e853 3f00 	ldrex	r3, [r3]
 80063ee:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80063f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80063f2:	f023 0310 	bic.w	r3, r3, #16
 80063f6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	461a      	mov	r2, r3
 8006400:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006404:	65bb      	str	r3, [r7, #88]	; 0x58
 8006406:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006408:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800640a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800640c:	e841 2300 	strex	r3, r2, [r1]
 8006410:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006412:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006414:	2b00      	cmp	r3, #0
 8006416:	d1e4      	bne.n	80063e2 <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800641c:	4618      	mov	r0, r3
 800641e:	f7fc fdb4 	bl	8002f8a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800642e:	b29b      	uxth	r3, r3
 8006430:	1ad3      	subs	r3, r2, r3
 8006432:	b29b      	uxth	r3, r3
 8006434:	4619      	mov	r1, r3
 8006436:	6878      	ldr	r0, [r7, #4]
 8006438:	f000 f8d4 	bl	80065e4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800643c:	e0b5      	b.n	80065aa <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800644a:	b29b      	uxth	r3, r3
 800644c:	1ad3      	subs	r3, r2, r3
 800644e:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006458:	b29b      	uxth	r3, r3
 800645a:	2b00      	cmp	r3, #0
 800645c:	f000 80a7 	beq.w	80065ae <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8006460:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006464:	2b00      	cmp	r3, #0
 8006466:	f000 80a2 	beq.w	80065ae <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006470:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006472:	e853 3f00 	ldrex	r3, [r3]
 8006476:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006478:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800647a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800647e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	461a      	mov	r2, r3
 8006488:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800648c:	647b      	str	r3, [r7, #68]	; 0x44
 800648e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006490:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006492:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006494:	e841 2300 	strex	r3, r2, [r1]
 8006498:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800649a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800649c:	2b00      	cmp	r3, #0
 800649e:	d1e4      	bne.n	800646a <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	3308      	adds	r3, #8
 80064a6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064aa:	e853 3f00 	ldrex	r3, [r3]
 80064ae:	623b      	str	r3, [r7, #32]
   return(result);
 80064b0:	6a3b      	ldr	r3, [r7, #32]
 80064b2:	f023 0301 	bic.w	r3, r3, #1
 80064b6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	3308      	adds	r3, #8
 80064c0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80064c4:	633a      	str	r2, [r7, #48]	; 0x30
 80064c6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064c8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80064ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80064cc:	e841 2300 	strex	r3, r2, [r1]
 80064d0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80064d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d1e3      	bne.n	80064a0 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	2220      	movs	r2, #32
 80064dc:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	2200      	movs	r2, #0
 80064e2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	2200      	movs	r2, #0
 80064e8:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064f0:	693b      	ldr	r3, [r7, #16]
 80064f2:	e853 3f00 	ldrex	r3, [r3]
 80064f6:	60fb      	str	r3, [r7, #12]
   return(result);
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	f023 0310 	bic.w	r3, r3, #16
 80064fe:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	461a      	mov	r2, r3
 8006508:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800650c:	61fb      	str	r3, [r7, #28]
 800650e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006510:	69b9      	ldr	r1, [r7, #24]
 8006512:	69fa      	ldr	r2, [r7, #28]
 8006514:	e841 2300 	strex	r3, r2, [r1]
 8006518:	617b      	str	r3, [r7, #20]
   return(result);
 800651a:	697b      	ldr	r3, [r7, #20]
 800651c:	2b00      	cmp	r3, #0
 800651e:	d1e4      	bne.n	80064ea <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006520:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006524:	4619      	mov	r1, r3
 8006526:	6878      	ldr	r0, [r7, #4]
 8006528:	f000 f85c 	bl	80065e4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800652c:	e03f      	b.n	80065ae <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800652e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006532:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006536:	2b00      	cmp	r3, #0
 8006538:	d00e      	beq.n	8006558 <HAL_UART_IRQHandler+0x560>
 800653a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800653e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006542:	2b00      	cmp	r3, #0
 8006544:	d008      	beq.n	8006558 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800654e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006550:	6878      	ldr	r0, [r7, #4]
 8006552:	f000 ff56 	bl	8007402 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006556:	e02d      	b.n	80065b4 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006558:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800655c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006560:	2b00      	cmp	r3, #0
 8006562:	d00e      	beq.n	8006582 <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006564:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006568:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800656c:	2b00      	cmp	r3, #0
 800656e:	d008      	beq.n	8006582 <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006574:	2b00      	cmp	r3, #0
 8006576:	d01c      	beq.n	80065b2 <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800657c:	6878      	ldr	r0, [r7, #4]
 800657e:	4798      	blx	r3
    }
    return;
 8006580:	e017      	b.n	80065b2 <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006582:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006586:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800658a:	2b00      	cmp	r3, #0
 800658c:	d012      	beq.n	80065b4 <HAL_UART_IRQHandler+0x5bc>
 800658e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006592:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006596:	2b00      	cmp	r3, #0
 8006598:	d00c      	beq.n	80065b4 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 800659a:	6878      	ldr	r0, [r7, #4]
 800659c:	f000 fda7 	bl	80070ee <UART_EndTransmit_IT>
    return;
 80065a0:	e008      	b.n	80065b4 <HAL_UART_IRQHandler+0x5bc>
      return;
 80065a2:	bf00      	nop
 80065a4:	e006      	b.n	80065b4 <HAL_UART_IRQHandler+0x5bc>
    return;
 80065a6:	bf00      	nop
 80065a8:	e004      	b.n	80065b4 <HAL_UART_IRQHandler+0x5bc>
      return;
 80065aa:	bf00      	nop
 80065ac:	e002      	b.n	80065b4 <HAL_UART_IRQHandler+0x5bc>
      return;
 80065ae:	bf00      	nop
 80065b0:	e000      	b.n	80065b4 <HAL_UART_IRQHandler+0x5bc>
    return;
 80065b2:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80065b4:	37e8      	adds	r7, #232	; 0xe8
 80065b6:	46bd      	mov	sp, r7
 80065b8:	bd80      	pop	{r7, pc}
 80065ba:	bf00      	nop

080065bc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80065bc:	b480      	push	{r7}
 80065be:	b083      	sub	sp, #12
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80065c4:	bf00      	nop
 80065c6:	370c      	adds	r7, #12
 80065c8:	46bd      	mov	sp, r7
 80065ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ce:	4770      	bx	lr

080065d0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80065d0:	b480      	push	{r7}
 80065d2:	b083      	sub	sp, #12
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80065d8:	bf00      	nop
 80065da:	370c      	adds	r7, #12
 80065dc:	46bd      	mov	sp, r7
 80065de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e2:	4770      	bx	lr

080065e4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80065e4:	b480      	push	{r7}
 80065e6:	b083      	sub	sp, #12
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	6078      	str	r0, [r7, #4]
 80065ec:	460b      	mov	r3, r1
 80065ee:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80065f0:	bf00      	nop
 80065f2:	370c      	adds	r7, #12
 80065f4:	46bd      	mov	sp, r7
 80065f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fa:	4770      	bx	lr

080065fc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80065fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006600:	b08a      	sub	sp, #40	; 0x28
 8006602:	af00      	add	r7, sp, #0
 8006604:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006606:	2300      	movs	r3, #0
 8006608:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	689a      	ldr	r2, [r3, #8]
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	691b      	ldr	r3, [r3, #16]
 8006614:	431a      	orrs	r2, r3
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	695b      	ldr	r3, [r3, #20]
 800661a:	431a      	orrs	r2, r3
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	69db      	ldr	r3, [r3, #28]
 8006620:	4313      	orrs	r3, r2
 8006622:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	681a      	ldr	r2, [r3, #0]
 800662a:	4ba5      	ldr	r3, [pc, #660]	; (80068c0 <UART_SetConfig+0x2c4>)
 800662c:	4013      	ands	r3, r2
 800662e:	68fa      	ldr	r2, [r7, #12]
 8006630:	6812      	ldr	r2, [r2, #0]
 8006632:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006634:	430b      	orrs	r3, r1
 8006636:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	685b      	ldr	r3, [r3, #4]
 800663e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	68da      	ldr	r2, [r3, #12]
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	430a      	orrs	r2, r1
 800664c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	699b      	ldr	r3, [r3, #24]
 8006652:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	4a9a      	ldr	r2, [pc, #616]	; (80068c4 <UART_SetConfig+0x2c8>)
 800665a:	4293      	cmp	r3, r2
 800665c:	d004      	beq.n	8006668 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	6a1b      	ldr	r3, [r3, #32]
 8006662:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006664:	4313      	orrs	r3, r2
 8006666:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	689b      	ldr	r3, [r3, #8]
 800666e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006678:	430a      	orrs	r2, r1
 800667a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	4a91      	ldr	r2, [pc, #580]	; (80068c8 <UART_SetConfig+0x2cc>)
 8006682:	4293      	cmp	r3, r2
 8006684:	d126      	bne.n	80066d4 <UART_SetConfig+0xd8>
 8006686:	4b91      	ldr	r3, [pc, #580]	; (80068cc <UART_SetConfig+0x2d0>)
 8006688:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800668c:	f003 0303 	and.w	r3, r3, #3
 8006690:	2b03      	cmp	r3, #3
 8006692:	d81b      	bhi.n	80066cc <UART_SetConfig+0xd0>
 8006694:	a201      	add	r2, pc, #4	; (adr r2, 800669c <UART_SetConfig+0xa0>)
 8006696:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800669a:	bf00      	nop
 800669c:	080066ad 	.word	0x080066ad
 80066a0:	080066bd 	.word	0x080066bd
 80066a4:	080066b5 	.word	0x080066b5
 80066a8:	080066c5 	.word	0x080066c5
 80066ac:	2301      	movs	r3, #1
 80066ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80066b2:	e0d6      	b.n	8006862 <UART_SetConfig+0x266>
 80066b4:	2302      	movs	r3, #2
 80066b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80066ba:	e0d2      	b.n	8006862 <UART_SetConfig+0x266>
 80066bc:	2304      	movs	r3, #4
 80066be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80066c2:	e0ce      	b.n	8006862 <UART_SetConfig+0x266>
 80066c4:	2308      	movs	r3, #8
 80066c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80066ca:	e0ca      	b.n	8006862 <UART_SetConfig+0x266>
 80066cc:	2310      	movs	r3, #16
 80066ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80066d2:	e0c6      	b.n	8006862 <UART_SetConfig+0x266>
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	4a7d      	ldr	r2, [pc, #500]	; (80068d0 <UART_SetConfig+0x2d4>)
 80066da:	4293      	cmp	r3, r2
 80066dc:	d138      	bne.n	8006750 <UART_SetConfig+0x154>
 80066de:	4b7b      	ldr	r3, [pc, #492]	; (80068cc <UART_SetConfig+0x2d0>)
 80066e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066e4:	f003 030c 	and.w	r3, r3, #12
 80066e8:	2b0c      	cmp	r3, #12
 80066ea:	d82d      	bhi.n	8006748 <UART_SetConfig+0x14c>
 80066ec:	a201      	add	r2, pc, #4	; (adr r2, 80066f4 <UART_SetConfig+0xf8>)
 80066ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066f2:	bf00      	nop
 80066f4:	08006729 	.word	0x08006729
 80066f8:	08006749 	.word	0x08006749
 80066fc:	08006749 	.word	0x08006749
 8006700:	08006749 	.word	0x08006749
 8006704:	08006739 	.word	0x08006739
 8006708:	08006749 	.word	0x08006749
 800670c:	08006749 	.word	0x08006749
 8006710:	08006749 	.word	0x08006749
 8006714:	08006731 	.word	0x08006731
 8006718:	08006749 	.word	0x08006749
 800671c:	08006749 	.word	0x08006749
 8006720:	08006749 	.word	0x08006749
 8006724:	08006741 	.word	0x08006741
 8006728:	2300      	movs	r3, #0
 800672a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800672e:	e098      	b.n	8006862 <UART_SetConfig+0x266>
 8006730:	2302      	movs	r3, #2
 8006732:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006736:	e094      	b.n	8006862 <UART_SetConfig+0x266>
 8006738:	2304      	movs	r3, #4
 800673a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800673e:	e090      	b.n	8006862 <UART_SetConfig+0x266>
 8006740:	2308      	movs	r3, #8
 8006742:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006746:	e08c      	b.n	8006862 <UART_SetConfig+0x266>
 8006748:	2310      	movs	r3, #16
 800674a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800674e:	e088      	b.n	8006862 <UART_SetConfig+0x266>
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	4a5f      	ldr	r2, [pc, #380]	; (80068d4 <UART_SetConfig+0x2d8>)
 8006756:	4293      	cmp	r3, r2
 8006758:	d125      	bne.n	80067a6 <UART_SetConfig+0x1aa>
 800675a:	4b5c      	ldr	r3, [pc, #368]	; (80068cc <UART_SetConfig+0x2d0>)
 800675c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006760:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006764:	2b30      	cmp	r3, #48	; 0x30
 8006766:	d016      	beq.n	8006796 <UART_SetConfig+0x19a>
 8006768:	2b30      	cmp	r3, #48	; 0x30
 800676a:	d818      	bhi.n	800679e <UART_SetConfig+0x1a2>
 800676c:	2b20      	cmp	r3, #32
 800676e:	d00a      	beq.n	8006786 <UART_SetConfig+0x18a>
 8006770:	2b20      	cmp	r3, #32
 8006772:	d814      	bhi.n	800679e <UART_SetConfig+0x1a2>
 8006774:	2b00      	cmp	r3, #0
 8006776:	d002      	beq.n	800677e <UART_SetConfig+0x182>
 8006778:	2b10      	cmp	r3, #16
 800677a:	d008      	beq.n	800678e <UART_SetConfig+0x192>
 800677c:	e00f      	b.n	800679e <UART_SetConfig+0x1a2>
 800677e:	2300      	movs	r3, #0
 8006780:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006784:	e06d      	b.n	8006862 <UART_SetConfig+0x266>
 8006786:	2302      	movs	r3, #2
 8006788:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800678c:	e069      	b.n	8006862 <UART_SetConfig+0x266>
 800678e:	2304      	movs	r3, #4
 8006790:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006794:	e065      	b.n	8006862 <UART_SetConfig+0x266>
 8006796:	2308      	movs	r3, #8
 8006798:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800679c:	e061      	b.n	8006862 <UART_SetConfig+0x266>
 800679e:	2310      	movs	r3, #16
 80067a0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80067a4:	e05d      	b.n	8006862 <UART_SetConfig+0x266>
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	4a4b      	ldr	r2, [pc, #300]	; (80068d8 <UART_SetConfig+0x2dc>)
 80067ac:	4293      	cmp	r3, r2
 80067ae:	d125      	bne.n	80067fc <UART_SetConfig+0x200>
 80067b0:	4b46      	ldr	r3, [pc, #280]	; (80068cc <UART_SetConfig+0x2d0>)
 80067b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067b6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80067ba:	2bc0      	cmp	r3, #192	; 0xc0
 80067bc:	d016      	beq.n	80067ec <UART_SetConfig+0x1f0>
 80067be:	2bc0      	cmp	r3, #192	; 0xc0
 80067c0:	d818      	bhi.n	80067f4 <UART_SetConfig+0x1f8>
 80067c2:	2b80      	cmp	r3, #128	; 0x80
 80067c4:	d00a      	beq.n	80067dc <UART_SetConfig+0x1e0>
 80067c6:	2b80      	cmp	r3, #128	; 0x80
 80067c8:	d814      	bhi.n	80067f4 <UART_SetConfig+0x1f8>
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d002      	beq.n	80067d4 <UART_SetConfig+0x1d8>
 80067ce:	2b40      	cmp	r3, #64	; 0x40
 80067d0:	d008      	beq.n	80067e4 <UART_SetConfig+0x1e8>
 80067d2:	e00f      	b.n	80067f4 <UART_SetConfig+0x1f8>
 80067d4:	2300      	movs	r3, #0
 80067d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80067da:	e042      	b.n	8006862 <UART_SetConfig+0x266>
 80067dc:	2302      	movs	r3, #2
 80067de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80067e2:	e03e      	b.n	8006862 <UART_SetConfig+0x266>
 80067e4:	2304      	movs	r3, #4
 80067e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80067ea:	e03a      	b.n	8006862 <UART_SetConfig+0x266>
 80067ec:	2308      	movs	r3, #8
 80067ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80067f2:	e036      	b.n	8006862 <UART_SetConfig+0x266>
 80067f4:	2310      	movs	r3, #16
 80067f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80067fa:	e032      	b.n	8006862 <UART_SetConfig+0x266>
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	4a30      	ldr	r2, [pc, #192]	; (80068c4 <UART_SetConfig+0x2c8>)
 8006802:	4293      	cmp	r3, r2
 8006804:	d12a      	bne.n	800685c <UART_SetConfig+0x260>
 8006806:	4b31      	ldr	r3, [pc, #196]	; (80068cc <UART_SetConfig+0x2d0>)
 8006808:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800680c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006810:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006814:	d01a      	beq.n	800684c <UART_SetConfig+0x250>
 8006816:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800681a:	d81b      	bhi.n	8006854 <UART_SetConfig+0x258>
 800681c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006820:	d00c      	beq.n	800683c <UART_SetConfig+0x240>
 8006822:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006826:	d815      	bhi.n	8006854 <UART_SetConfig+0x258>
 8006828:	2b00      	cmp	r3, #0
 800682a:	d003      	beq.n	8006834 <UART_SetConfig+0x238>
 800682c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006830:	d008      	beq.n	8006844 <UART_SetConfig+0x248>
 8006832:	e00f      	b.n	8006854 <UART_SetConfig+0x258>
 8006834:	2300      	movs	r3, #0
 8006836:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800683a:	e012      	b.n	8006862 <UART_SetConfig+0x266>
 800683c:	2302      	movs	r3, #2
 800683e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006842:	e00e      	b.n	8006862 <UART_SetConfig+0x266>
 8006844:	2304      	movs	r3, #4
 8006846:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800684a:	e00a      	b.n	8006862 <UART_SetConfig+0x266>
 800684c:	2308      	movs	r3, #8
 800684e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006852:	e006      	b.n	8006862 <UART_SetConfig+0x266>
 8006854:	2310      	movs	r3, #16
 8006856:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800685a:	e002      	b.n	8006862 <UART_SetConfig+0x266>
 800685c:	2310      	movs	r3, #16
 800685e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	4a17      	ldr	r2, [pc, #92]	; (80068c4 <UART_SetConfig+0x2c8>)
 8006868:	4293      	cmp	r3, r2
 800686a:	f040 808b 	bne.w	8006984 <UART_SetConfig+0x388>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800686e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006872:	2b08      	cmp	r3, #8
 8006874:	d834      	bhi.n	80068e0 <UART_SetConfig+0x2e4>
 8006876:	a201      	add	r2, pc, #4	; (adr r2, 800687c <UART_SetConfig+0x280>)
 8006878:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800687c:	080068a1 	.word	0x080068a1
 8006880:	080068e1 	.word	0x080068e1
 8006884:	080068a9 	.word	0x080068a9
 8006888:	080068e1 	.word	0x080068e1
 800688c:	080068af 	.word	0x080068af
 8006890:	080068e1 	.word	0x080068e1
 8006894:	080068e1 	.word	0x080068e1
 8006898:	080068e1 	.word	0x080068e1
 800689c:	080068b7 	.word	0x080068b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80068a0:	f7fd fbac 	bl	8003ffc <HAL_RCC_GetPCLK1Freq>
 80068a4:	61f8      	str	r0, [r7, #28]
        break;
 80068a6:	e021      	b.n	80068ec <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80068a8:	4b0c      	ldr	r3, [pc, #48]	; (80068dc <UART_SetConfig+0x2e0>)
 80068aa:	61fb      	str	r3, [r7, #28]
        break;
 80068ac:	e01e      	b.n	80068ec <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80068ae:	f7fd fb0d 	bl	8003ecc <HAL_RCC_GetSysClockFreq>
 80068b2:	61f8      	str	r0, [r7, #28]
        break;
 80068b4:	e01a      	b.n	80068ec <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80068b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80068ba:	61fb      	str	r3, [r7, #28]
        break;
 80068bc:	e016      	b.n	80068ec <UART_SetConfig+0x2f0>
 80068be:	bf00      	nop
 80068c0:	efff69f3 	.word	0xefff69f3
 80068c4:	40008000 	.word	0x40008000
 80068c8:	40013800 	.word	0x40013800
 80068cc:	40021000 	.word	0x40021000
 80068d0:	40004400 	.word	0x40004400
 80068d4:	40004800 	.word	0x40004800
 80068d8:	40004c00 	.word	0x40004c00
 80068dc:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80068e0:	2300      	movs	r3, #0
 80068e2:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80068e4:	2301      	movs	r3, #1
 80068e6:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80068ea:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80068ec:	69fb      	ldr	r3, [r7, #28]
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	f000 80fa 	beq.w	8006ae8 <UART_SetConfig+0x4ec>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	685a      	ldr	r2, [r3, #4]
 80068f8:	4613      	mov	r3, r2
 80068fa:	005b      	lsls	r3, r3, #1
 80068fc:	4413      	add	r3, r2
 80068fe:	69fa      	ldr	r2, [r7, #28]
 8006900:	429a      	cmp	r2, r3
 8006902:	d305      	bcc.n	8006910 <UART_SetConfig+0x314>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	685b      	ldr	r3, [r3, #4]
 8006908:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800690a:	69fa      	ldr	r2, [r7, #28]
 800690c:	429a      	cmp	r2, r3
 800690e:	d903      	bls.n	8006918 <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 8006910:	2301      	movs	r3, #1
 8006912:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006916:	e0e7      	b.n	8006ae8 <UART_SetConfig+0x4ec>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006918:	69fb      	ldr	r3, [r7, #28]
 800691a:	2200      	movs	r2, #0
 800691c:	461c      	mov	r4, r3
 800691e:	4615      	mov	r5, r2
 8006920:	f04f 0200 	mov.w	r2, #0
 8006924:	f04f 0300 	mov.w	r3, #0
 8006928:	022b      	lsls	r3, r5, #8
 800692a:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800692e:	0222      	lsls	r2, r4, #8
 8006930:	68f9      	ldr	r1, [r7, #12]
 8006932:	6849      	ldr	r1, [r1, #4]
 8006934:	0849      	lsrs	r1, r1, #1
 8006936:	2000      	movs	r0, #0
 8006938:	4688      	mov	r8, r1
 800693a:	4681      	mov	r9, r0
 800693c:	eb12 0a08 	adds.w	sl, r2, r8
 8006940:	eb43 0b09 	adc.w	fp, r3, r9
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	685b      	ldr	r3, [r3, #4]
 8006948:	2200      	movs	r2, #0
 800694a:	603b      	str	r3, [r7, #0]
 800694c:	607a      	str	r2, [r7, #4]
 800694e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006952:	4650      	mov	r0, sl
 8006954:	4659      	mov	r1, fp
 8006956:	f7fa f82d 	bl	80009b4 <__aeabi_uldivmod>
 800695a:	4602      	mov	r2, r0
 800695c:	460b      	mov	r3, r1
 800695e:	4613      	mov	r3, r2
 8006960:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006962:	69bb      	ldr	r3, [r7, #24]
 8006964:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006968:	d308      	bcc.n	800697c <UART_SetConfig+0x380>
 800696a:	69bb      	ldr	r3, [r7, #24]
 800696c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006970:	d204      	bcs.n	800697c <UART_SetConfig+0x380>
        {
          huart->Instance->BRR = usartdiv;
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	69ba      	ldr	r2, [r7, #24]
 8006978:	60da      	str	r2, [r3, #12]
 800697a:	e0b5      	b.n	8006ae8 <UART_SetConfig+0x4ec>
        }
        else
        {
          ret = HAL_ERROR;
 800697c:	2301      	movs	r3, #1
 800697e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006982:	e0b1      	b.n	8006ae8 <UART_SetConfig+0x4ec>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	69db      	ldr	r3, [r3, #28]
 8006988:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800698c:	d15d      	bne.n	8006a4a <UART_SetConfig+0x44e>
  {
    switch (clocksource)
 800698e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006992:	2b08      	cmp	r3, #8
 8006994:	d827      	bhi.n	80069e6 <UART_SetConfig+0x3ea>
 8006996:	a201      	add	r2, pc, #4	; (adr r2, 800699c <UART_SetConfig+0x3a0>)
 8006998:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800699c:	080069c1 	.word	0x080069c1
 80069a0:	080069c9 	.word	0x080069c9
 80069a4:	080069d1 	.word	0x080069d1
 80069a8:	080069e7 	.word	0x080069e7
 80069ac:	080069d7 	.word	0x080069d7
 80069b0:	080069e7 	.word	0x080069e7
 80069b4:	080069e7 	.word	0x080069e7
 80069b8:	080069e7 	.word	0x080069e7
 80069bc:	080069df 	.word	0x080069df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80069c0:	f7fd fb1c 	bl	8003ffc <HAL_RCC_GetPCLK1Freq>
 80069c4:	61f8      	str	r0, [r7, #28]
        break;
 80069c6:	e014      	b.n	80069f2 <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80069c8:	f7fd fb2e 	bl	8004028 <HAL_RCC_GetPCLK2Freq>
 80069cc:	61f8      	str	r0, [r7, #28]
        break;
 80069ce:	e010      	b.n	80069f2 <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80069d0:	4b4c      	ldr	r3, [pc, #304]	; (8006b04 <UART_SetConfig+0x508>)
 80069d2:	61fb      	str	r3, [r7, #28]
        break;
 80069d4:	e00d      	b.n	80069f2 <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80069d6:	f7fd fa79 	bl	8003ecc <HAL_RCC_GetSysClockFreq>
 80069da:	61f8      	str	r0, [r7, #28]
        break;
 80069dc:	e009      	b.n	80069f2 <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80069de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80069e2:	61fb      	str	r3, [r7, #28]
        break;
 80069e4:	e005      	b.n	80069f2 <UART_SetConfig+0x3f6>
      default:
        pclk = 0U;
 80069e6:	2300      	movs	r3, #0
 80069e8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80069ea:	2301      	movs	r3, #1
 80069ec:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80069f0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80069f2:	69fb      	ldr	r3, [r7, #28]
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d077      	beq.n	8006ae8 <UART_SetConfig+0x4ec>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80069f8:	69fb      	ldr	r3, [r7, #28]
 80069fa:	005a      	lsls	r2, r3, #1
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	685b      	ldr	r3, [r3, #4]
 8006a00:	085b      	lsrs	r3, r3, #1
 8006a02:	441a      	add	r2, r3
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	685b      	ldr	r3, [r3, #4]
 8006a08:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a0c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006a0e:	69bb      	ldr	r3, [r7, #24]
 8006a10:	2b0f      	cmp	r3, #15
 8006a12:	d916      	bls.n	8006a42 <UART_SetConfig+0x446>
 8006a14:	69bb      	ldr	r3, [r7, #24]
 8006a16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a1a:	d212      	bcs.n	8006a42 <UART_SetConfig+0x446>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006a1c:	69bb      	ldr	r3, [r7, #24]
 8006a1e:	b29b      	uxth	r3, r3
 8006a20:	f023 030f 	bic.w	r3, r3, #15
 8006a24:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006a26:	69bb      	ldr	r3, [r7, #24]
 8006a28:	085b      	lsrs	r3, r3, #1
 8006a2a:	b29b      	uxth	r3, r3
 8006a2c:	f003 0307 	and.w	r3, r3, #7
 8006a30:	b29a      	uxth	r2, r3
 8006a32:	8afb      	ldrh	r3, [r7, #22]
 8006a34:	4313      	orrs	r3, r2
 8006a36:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	8afa      	ldrh	r2, [r7, #22]
 8006a3e:	60da      	str	r2, [r3, #12]
 8006a40:	e052      	b.n	8006ae8 <UART_SetConfig+0x4ec>
      }
      else
      {
        ret = HAL_ERROR;
 8006a42:	2301      	movs	r3, #1
 8006a44:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006a48:	e04e      	b.n	8006ae8 <UART_SetConfig+0x4ec>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006a4a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006a4e:	2b08      	cmp	r3, #8
 8006a50:	d827      	bhi.n	8006aa2 <UART_SetConfig+0x4a6>
 8006a52:	a201      	add	r2, pc, #4	; (adr r2, 8006a58 <UART_SetConfig+0x45c>)
 8006a54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a58:	08006a7d 	.word	0x08006a7d
 8006a5c:	08006a85 	.word	0x08006a85
 8006a60:	08006a8d 	.word	0x08006a8d
 8006a64:	08006aa3 	.word	0x08006aa3
 8006a68:	08006a93 	.word	0x08006a93
 8006a6c:	08006aa3 	.word	0x08006aa3
 8006a70:	08006aa3 	.word	0x08006aa3
 8006a74:	08006aa3 	.word	0x08006aa3
 8006a78:	08006a9b 	.word	0x08006a9b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006a7c:	f7fd fabe 	bl	8003ffc <HAL_RCC_GetPCLK1Freq>
 8006a80:	61f8      	str	r0, [r7, #28]
        break;
 8006a82:	e014      	b.n	8006aae <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006a84:	f7fd fad0 	bl	8004028 <HAL_RCC_GetPCLK2Freq>
 8006a88:	61f8      	str	r0, [r7, #28]
        break;
 8006a8a:	e010      	b.n	8006aae <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006a8c:	4b1d      	ldr	r3, [pc, #116]	; (8006b04 <UART_SetConfig+0x508>)
 8006a8e:	61fb      	str	r3, [r7, #28]
        break;
 8006a90:	e00d      	b.n	8006aae <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006a92:	f7fd fa1b 	bl	8003ecc <HAL_RCC_GetSysClockFreq>
 8006a96:	61f8      	str	r0, [r7, #28]
        break;
 8006a98:	e009      	b.n	8006aae <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006a9a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006a9e:	61fb      	str	r3, [r7, #28]
        break;
 8006aa0:	e005      	b.n	8006aae <UART_SetConfig+0x4b2>
      default:
        pclk = 0U;
 8006aa2:	2300      	movs	r3, #0
 8006aa4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006aa6:	2301      	movs	r3, #1
 8006aa8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006aac:	bf00      	nop
    }

    if (pclk != 0U)
 8006aae:	69fb      	ldr	r3, [r7, #28]
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d019      	beq.n	8006ae8 <UART_SetConfig+0x4ec>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	685b      	ldr	r3, [r3, #4]
 8006ab8:	085a      	lsrs	r2, r3, #1
 8006aba:	69fb      	ldr	r3, [r7, #28]
 8006abc:	441a      	add	r2, r3
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	685b      	ldr	r3, [r3, #4]
 8006ac2:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ac6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006ac8:	69bb      	ldr	r3, [r7, #24]
 8006aca:	2b0f      	cmp	r3, #15
 8006acc:	d909      	bls.n	8006ae2 <UART_SetConfig+0x4e6>
 8006ace:	69bb      	ldr	r3, [r7, #24]
 8006ad0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ad4:	d205      	bcs.n	8006ae2 <UART_SetConfig+0x4e6>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006ad6:	69bb      	ldr	r3, [r7, #24]
 8006ad8:	b29a      	uxth	r2, r3
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	60da      	str	r2, [r3, #12]
 8006ae0:	e002      	b.n	8006ae8 <UART_SetConfig+0x4ec>
      }
      else
      {
        ret = HAL_ERROR;
 8006ae2:	2301      	movs	r3, #1
 8006ae4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	2200      	movs	r2, #0
 8006aec:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	2200      	movs	r2, #0
 8006af2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006af4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8006af8:	4618      	mov	r0, r3
 8006afa:	3728      	adds	r7, #40	; 0x28
 8006afc:	46bd      	mov	sp, r7
 8006afe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006b02:	bf00      	nop
 8006b04:	00f42400 	.word	0x00f42400

08006b08 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006b08:	b480      	push	{r7}
 8006b0a:	b083      	sub	sp, #12
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b14:	f003 0301 	and.w	r3, r3, #1
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d00a      	beq.n	8006b32 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	685b      	ldr	r3, [r3, #4]
 8006b22:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	430a      	orrs	r2, r1
 8006b30:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b36:	f003 0302 	and.w	r3, r3, #2
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d00a      	beq.n	8006b54 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	685b      	ldr	r3, [r3, #4]
 8006b44:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	430a      	orrs	r2, r1
 8006b52:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b58:	f003 0304 	and.w	r3, r3, #4
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d00a      	beq.n	8006b76 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	685b      	ldr	r3, [r3, #4]
 8006b66:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	430a      	orrs	r2, r1
 8006b74:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b7a:	f003 0308 	and.w	r3, r3, #8
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d00a      	beq.n	8006b98 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	685b      	ldr	r3, [r3, #4]
 8006b88:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	430a      	orrs	r2, r1
 8006b96:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b9c:	f003 0310 	and.w	r3, r3, #16
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d00a      	beq.n	8006bba <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	689b      	ldr	r3, [r3, #8]
 8006baa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	430a      	orrs	r2, r1
 8006bb8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bbe:	f003 0320 	and.w	r3, r3, #32
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d00a      	beq.n	8006bdc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	689b      	ldr	r3, [r3, #8]
 8006bcc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	430a      	orrs	r2, r1
 8006bda:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006be0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d01a      	beq.n	8006c1e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	685b      	ldr	r3, [r3, #4]
 8006bee:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	430a      	orrs	r2, r1
 8006bfc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c02:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006c06:	d10a      	bne.n	8006c1e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	685b      	ldr	r3, [r3, #4]
 8006c0e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	430a      	orrs	r2, r1
 8006c1c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d00a      	beq.n	8006c40 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	685b      	ldr	r3, [r3, #4]
 8006c30:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	430a      	orrs	r2, r1
 8006c3e:	605a      	str	r2, [r3, #4]
  }
}
 8006c40:	bf00      	nop
 8006c42:	370c      	adds	r7, #12
 8006c44:	46bd      	mov	sp, r7
 8006c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4a:	4770      	bx	lr

08006c4c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006c4c:	b580      	push	{r7, lr}
 8006c4e:	b086      	sub	sp, #24
 8006c50:	af02      	add	r7, sp, #8
 8006c52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	2200      	movs	r2, #0
 8006c58:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006c5c:	f7fa ffac 	bl	8001bb8 <HAL_GetTick>
 8006c60:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	f003 0308 	and.w	r3, r3, #8
 8006c6c:	2b08      	cmp	r3, #8
 8006c6e:	d10e      	bne.n	8006c8e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006c70:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006c74:	9300      	str	r3, [sp, #0]
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	2200      	movs	r2, #0
 8006c7a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006c7e:	6878      	ldr	r0, [r7, #4]
 8006c80:	f000 f82d 	bl	8006cde <UART_WaitOnFlagUntilTimeout>
 8006c84:	4603      	mov	r3, r0
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d001      	beq.n	8006c8e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006c8a:	2303      	movs	r3, #3
 8006c8c:	e023      	b.n	8006cd6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	f003 0304 	and.w	r3, r3, #4
 8006c98:	2b04      	cmp	r3, #4
 8006c9a:	d10e      	bne.n	8006cba <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006c9c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006ca0:	9300      	str	r3, [sp, #0]
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	2200      	movs	r2, #0
 8006ca6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006caa:	6878      	ldr	r0, [r7, #4]
 8006cac:	f000 f817 	bl	8006cde <UART_WaitOnFlagUntilTimeout>
 8006cb0:	4603      	mov	r3, r0
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d001      	beq.n	8006cba <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006cb6:	2303      	movs	r3, #3
 8006cb8:	e00d      	b.n	8006cd6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	2220      	movs	r2, #32
 8006cbe:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	2220      	movs	r2, #32
 8006cc4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	2200      	movs	r2, #0
 8006cca:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	2200      	movs	r2, #0
 8006cd0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8006cd4:	2300      	movs	r3, #0
}
 8006cd6:	4618      	mov	r0, r3
 8006cd8:	3710      	adds	r7, #16
 8006cda:	46bd      	mov	sp, r7
 8006cdc:	bd80      	pop	{r7, pc}

08006cde <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006cde:	b580      	push	{r7, lr}
 8006ce0:	b09c      	sub	sp, #112	; 0x70
 8006ce2:	af00      	add	r7, sp, #0
 8006ce4:	60f8      	str	r0, [r7, #12]
 8006ce6:	60b9      	str	r1, [r7, #8]
 8006ce8:	603b      	str	r3, [r7, #0]
 8006cea:	4613      	mov	r3, r2
 8006cec:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006cee:	e0a5      	b.n	8006e3c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006cf0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006cf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cf6:	f000 80a1 	beq.w	8006e3c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006cfa:	f7fa ff5d 	bl	8001bb8 <HAL_GetTick>
 8006cfe:	4602      	mov	r2, r0
 8006d00:	683b      	ldr	r3, [r7, #0]
 8006d02:	1ad3      	subs	r3, r2, r3
 8006d04:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006d06:	429a      	cmp	r2, r3
 8006d08:	d302      	bcc.n	8006d10 <UART_WaitOnFlagUntilTimeout+0x32>
 8006d0a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d13e      	bne.n	8006d8e <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006d18:	e853 3f00 	ldrex	r3, [r3]
 8006d1c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006d1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d20:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006d24:	667b      	str	r3, [r7, #100]	; 0x64
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	461a      	mov	r2, r3
 8006d2c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006d2e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006d30:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d32:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006d34:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006d36:	e841 2300 	strex	r3, r2, [r1]
 8006d3a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006d3c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d1e6      	bne.n	8006d10 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	3308      	adds	r3, #8
 8006d48:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d4c:	e853 3f00 	ldrex	r3, [r3]
 8006d50:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006d52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d54:	f023 0301 	bic.w	r3, r3, #1
 8006d58:	663b      	str	r3, [r7, #96]	; 0x60
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	3308      	adds	r3, #8
 8006d60:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006d62:	64ba      	str	r2, [r7, #72]	; 0x48
 8006d64:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d66:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006d68:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006d6a:	e841 2300 	strex	r3, r2, [r1]
 8006d6e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006d70:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d1e5      	bne.n	8006d42 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	2220      	movs	r2, #32
 8006d7a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	2220      	movs	r2, #32
 8006d80:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	2200      	movs	r2, #0
 8006d86:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8006d8a:	2303      	movs	r3, #3
 8006d8c:	e067      	b.n	8006e5e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	f003 0304 	and.w	r3, r3, #4
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d04f      	beq.n	8006e3c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	69db      	ldr	r3, [r3, #28]
 8006da2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006da6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006daa:	d147      	bne.n	8006e3c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006db4:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dbe:	e853 3f00 	ldrex	r3, [r3]
 8006dc2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dc6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006dca:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	461a      	mov	r2, r3
 8006dd2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006dd4:	637b      	str	r3, [r7, #52]	; 0x34
 8006dd6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dd8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006dda:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006ddc:	e841 2300 	strex	r3, r2, [r1]
 8006de0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006de2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d1e6      	bne.n	8006db6 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	3308      	adds	r3, #8
 8006dee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006df0:	697b      	ldr	r3, [r7, #20]
 8006df2:	e853 3f00 	ldrex	r3, [r3]
 8006df6:	613b      	str	r3, [r7, #16]
   return(result);
 8006df8:	693b      	ldr	r3, [r7, #16]
 8006dfa:	f023 0301 	bic.w	r3, r3, #1
 8006dfe:	66bb      	str	r3, [r7, #104]	; 0x68
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	3308      	adds	r3, #8
 8006e06:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006e08:	623a      	str	r2, [r7, #32]
 8006e0a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e0c:	69f9      	ldr	r1, [r7, #28]
 8006e0e:	6a3a      	ldr	r2, [r7, #32]
 8006e10:	e841 2300 	strex	r3, r2, [r1]
 8006e14:	61bb      	str	r3, [r7, #24]
   return(result);
 8006e16:	69bb      	ldr	r3, [r7, #24]
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d1e5      	bne.n	8006de8 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	2220      	movs	r2, #32
 8006e20:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	2220      	movs	r2, #32
 8006e26:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	2220      	movs	r2, #32
 8006e2c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	2200      	movs	r2, #0
 8006e34:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8006e38:	2303      	movs	r3, #3
 8006e3a:	e010      	b.n	8006e5e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	69da      	ldr	r2, [r3, #28]
 8006e42:	68bb      	ldr	r3, [r7, #8]
 8006e44:	4013      	ands	r3, r2
 8006e46:	68ba      	ldr	r2, [r7, #8]
 8006e48:	429a      	cmp	r2, r3
 8006e4a:	bf0c      	ite	eq
 8006e4c:	2301      	moveq	r3, #1
 8006e4e:	2300      	movne	r3, #0
 8006e50:	b2db      	uxtb	r3, r3
 8006e52:	461a      	mov	r2, r3
 8006e54:	79fb      	ldrb	r3, [r7, #7]
 8006e56:	429a      	cmp	r2, r3
 8006e58:	f43f af4a 	beq.w	8006cf0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006e5c:	2300      	movs	r3, #0
}
 8006e5e:	4618      	mov	r0, r3
 8006e60:	3770      	adds	r7, #112	; 0x70
 8006e62:	46bd      	mov	sp, r7
 8006e64:	bd80      	pop	{r7, pc}
	...

08006e68 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006e68:	b480      	push	{r7}
 8006e6a:	b097      	sub	sp, #92	; 0x5c
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	60f8      	str	r0, [r7, #12]
 8006e70:	60b9      	str	r1, [r7, #8]
 8006e72:	4613      	mov	r3, r2
 8006e74:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	68ba      	ldr	r2, [r7, #8]
 8006e7a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	88fa      	ldrh	r2, [r7, #6]
 8006e80:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	88fa      	ldrh	r2, [r7, #6]
 8006e88:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	2200      	movs	r2, #0
 8006e90:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	689b      	ldr	r3, [r3, #8]
 8006e96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e9a:	d10e      	bne.n	8006eba <UART_Start_Receive_IT+0x52>
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	691b      	ldr	r3, [r3, #16]
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d105      	bne.n	8006eb0 <UART_Start_Receive_IT+0x48>
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	f240 12ff 	movw	r2, #511	; 0x1ff
 8006eaa:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006eae:	e02d      	b.n	8006f0c <UART_Start_Receive_IT+0xa4>
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	22ff      	movs	r2, #255	; 0xff
 8006eb4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006eb8:	e028      	b.n	8006f0c <UART_Start_Receive_IT+0xa4>
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	689b      	ldr	r3, [r3, #8]
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d10d      	bne.n	8006ede <UART_Start_Receive_IT+0x76>
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	691b      	ldr	r3, [r3, #16]
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d104      	bne.n	8006ed4 <UART_Start_Receive_IT+0x6c>
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	22ff      	movs	r2, #255	; 0xff
 8006ece:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006ed2:	e01b      	b.n	8006f0c <UART_Start_Receive_IT+0xa4>
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	227f      	movs	r2, #127	; 0x7f
 8006ed8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006edc:	e016      	b.n	8006f0c <UART_Start_Receive_IT+0xa4>
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	689b      	ldr	r3, [r3, #8]
 8006ee2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006ee6:	d10d      	bne.n	8006f04 <UART_Start_Receive_IT+0x9c>
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	691b      	ldr	r3, [r3, #16]
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d104      	bne.n	8006efa <UART_Start_Receive_IT+0x92>
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	227f      	movs	r2, #127	; 0x7f
 8006ef4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006ef8:	e008      	b.n	8006f0c <UART_Start_Receive_IT+0xa4>
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	223f      	movs	r2, #63	; 0x3f
 8006efe:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006f02:	e003      	b.n	8006f0c <UART_Start_Receive_IT+0xa4>
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	2200      	movs	r2, #0
 8006f08:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	2200      	movs	r2, #0
 8006f10:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	2222      	movs	r2, #34	; 0x22
 8006f18:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	3308      	adds	r3, #8
 8006f20:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f24:	e853 3f00 	ldrex	r3, [r3]
 8006f28:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006f2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f2c:	f043 0301 	orr.w	r3, r3, #1
 8006f30:	657b      	str	r3, [r7, #84]	; 0x54
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	3308      	adds	r3, #8
 8006f38:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006f3a:	64ba      	str	r2, [r7, #72]	; 0x48
 8006f3c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f3e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006f40:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006f42:	e841 2300 	strex	r3, r2, [r1]
 8006f46:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006f48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d1e5      	bne.n	8006f1a <UART_Start_Receive_IT+0xb2>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	689b      	ldr	r3, [r3, #8]
 8006f52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f56:	d107      	bne.n	8006f68 <UART_Start_Receive_IT+0x100>
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	691b      	ldr	r3, [r3, #16]
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d103      	bne.n	8006f68 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	4a24      	ldr	r2, [pc, #144]	; (8006ff4 <UART_Start_Receive_IT+0x18c>)
 8006f64:	665a      	str	r2, [r3, #100]	; 0x64
 8006f66:	e002      	b.n	8006f6e <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	4a23      	ldr	r2, [pc, #140]	; (8006ff8 <UART_Start_Receive_IT+0x190>)
 8006f6c:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	2200      	movs	r2, #0
 8006f72:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	691b      	ldr	r3, [r3, #16]
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d019      	beq.n	8006fb2 <UART_Start_Receive_IT+0x14a>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f86:	e853 3f00 	ldrex	r3, [r3]
 8006f8a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f8e:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8006f92:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	461a      	mov	r2, r3
 8006f9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f9c:	637b      	str	r3, [r7, #52]	; 0x34
 8006f9e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fa0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006fa2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006fa4:	e841 2300 	strex	r3, r2, [r1]
 8006fa8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006faa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d1e6      	bne.n	8006f7e <UART_Start_Receive_IT+0x116>
 8006fb0:	e018      	b.n	8006fe4 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fb8:	697b      	ldr	r3, [r7, #20]
 8006fba:	e853 3f00 	ldrex	r3, [r3]
 8006fbe:	613b      	str	r3, [r7, #16]
   return(result);
 8006fc0:	693b      	ldr	r3, [r7, #16]
 8006fc2:	f043 0320 	orr.w	r3, r3, #32
 8006fc6:	653b      	str	r3, [r7, #80]	; 0x50
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	461a      	mov	r2, r3
 8006fce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006fd0:	623b      	str	r3, [r7, #32]
 8006fd2:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fd4:	69f9      	ldr	r1, [r7, #28]
 8006fd6:	6a3a      	ldr	r2, [r7, #32]
 8006fd8:	e841 2300 	strex	r3, r2, [r1]
 8006fdc:	61bb      	str	r3, [r7, #24]
   return(result);
 8006fde:	69bb      	ldr	r3, [r7, #24]
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d1e6      	bne.n	8006fb2 <UART_Start_Receive_IT+0x14a>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8006fe4:	2300      	movs	r3, #0
}
 8006fe6:	4618      	mov	r0, r3
 8006fe8:	375c      	adds	r7, #92	; 0x5c
 8006fea:	46bd      	mov	sp, r7
 8006fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff0:	4770      	bx	lr
 8006ff2:	bf00      	nop
 8006ff4:	080072a3 	.word	0x080072a3
 8006ff8:	08007143 	.word	0x08007143

08006ffc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006ffc:	b480      	push	{r7}
 8006ffe:	b095      	sub	sp, #84	; 0x54
 8007000:	af00      	add	r7, sp, #0
 8007002:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800700a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800700c:	e853 3f00 	ldrex	r3, [r3]
 8007010:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007012:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007014:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007018:	64fb      	str	r3, [r7, #76]	; 0x4c
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	461a      	mov	r2, r3
 8007020:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007022:	643b      	str	r3, [r7, #64]	; 0x40
 8007024:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007026:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007028:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800702a:	e841 2300 	strex	r3, r2, [r1]
 800702e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007030:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007032:	2b00      	cmp	r3, #0
 8007034:	d1e6      	bne.n	8007004 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	3308      	adds	r3, #8
 800703c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800703e:	6a3b      	ldr	r3, [r7, #32]
 8007040:	e853 3f00 	ldrex	r3, [r3]
 8007044:	61fb      	str	r3, [r7, #28]
   return(result);
 8007046:	69fb      	ldr	r3, [r7, #28]
 8007048:	f023 0301 	bic.w	r3, r3, #1
 800704c:	64bb      	str	r3, [r7, #72]	; 0x48
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	3308      	adds	r3, #8
 8007054:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007056:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007058:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800705a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800705c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800705e:	e841 2300 	strex	r3, r2, [r1]
 8007062:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007066:	2b00      	cmp	r3, #0
 8007068:	d1e5      	bne.n	8007036 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800706e:	2b01      	cmp	r3, #1
 8007070:	d118      	bne.n	80070a4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	e853 3f00 	ldrex	r3, [r3]
 800707e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007080:	68bb      	ldr	r3, [r7, #8]
 8007082:	f023 0310 	bic.w	r3, r3, #16
 8007086:	647b      	str	r3, [r7, #68]	; 0x44
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	461a      	mov	r2, r3
 800708e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007090:	61bb      	str	r3, [r7, #24]
 8007092:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007094:	6979      	ldr	r1, [r7, #20]
 8007096:	69ba      	ldr	r2, [r7, #24]
 8007098:	e841 2300 	strex	r3, r2, [r1]
 800709c:	613b      	str	r3, [r7, #16]
   return(result);
 800709e:	693b      	ldr	r3, [r7, #16]
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d1e6      	bne.n	8007072 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	2220      	movs	r2, #32
 80070a8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	2200      	movs	r2, #0
 80070ae:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	2200      	movs	r2, #0
 80070b4:	665a      	str	r2, [r3, #100]	; 0x64
}
 80070b6:	bf00      	nop
 80070b8:	3754      	adds	r7, #84	; 0x54
 80070ba:	46bd      	mov	sp, r7
 80070bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c0:	4770      	bx	lr

080070c2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80070c2:	b580      	push	{r7, lr}
 80070c4:	b084      	sub	sp, #16
 80070c6:	af00      	add	r7, sp, #0
 80070c8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070ce:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	2200      	movs	r2, #0
 80070d4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	2200      	movs	r2, #0
 80070dc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80070e0:	68f8      	ldr	r0, [r7, #12]
 80070e2:	f7ff fa75 	bl	80065d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80070e6:	bf00      	nop
 80070e8:	3710      	adds	r7, #16
 80070ea:	46bd      	mov	sp, r7
 80070ec:	bd80      	pop	{r7, pc}

080070ee <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80070ee:	b580      	push	{r7, lr}
 80070f0:	b088      	sub	sp, #32
 80070f2:	af00      	add	r7, sp, #0
 80070f4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	e853 3f00 	ldrex	r3, [r3]
 8007102:	60bb      	str	r3, [r7, #8]
   return(result);
 8007104:	68bb      	ldr	r3, [r7, #8]
 8007106:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800710a:	61fb      	str	r3, [r7, #28]
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	461a      	mov	r2, r3
 8007112:	69fb      	ldr	r3, [r7, #28]
 8007114:	61bb      	str	r3, [r7, #24]
 8007116:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007118:	6979      	ldr	r1, [r7, #20]
 800711a:	69ba      	ldr	r2, [r7, #24]
 800711c:	e841 2300 	strex	r3, r2, [r1]
 8007120:	613b      	str	r3, [r7, #16]
   return(result);
 8007122:	693b      	ldr	r3, [r7, #16]
 8007124:	2b00      	cmp	r3, #0
 8007126:	d1e6      	bne.n	80070f6 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	2220      	movs	r2, #32
 800712c:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	2200      	movs	r2, #0
 8007132:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007134:	6878      	ldr	r0, [r7, #4]
 8007136:	f7ff fa41 	bl	80065bc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800713a:	bf00      	nop
 800713c:	3720      	adds	r7, #32
 800713e:	46bd      	mov	sp, r7
 8007140:	bd80      	pop	{r7, pc}

08007142 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007142:	b580      	push	{r7, lr}
 8007144:	b096      	sub	sp, #88	; 0x58
 8007146:	af00      	add	r7, sp, #0
 8007148:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007150:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007158:	2b22      	cmp	r3, #34	; 0x22
 800715a:	f040 8094 	bne.w	8007286 <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007164:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007168:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800716c:	b2d9      	uxtb	r1, r3
 800716e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8007172:	b2da      	uxtb	r2, r3
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007178:	400a      	ands	r2, r1
 800717a:	b2d2      	uxtb	r2, r2
 800717c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007182:	1c5a      	adds	r2, r3, #1
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800718e:	b29b      	uxth	r3, r3
 8007190:	3b01      	subs	r3, #1
 8007192:	b29a      	uxth	r2, r3
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80071a0:	b29b      	uxth	r3, r3
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d179      	bne.n	800729a <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071ae:	e853 3f00 	ldrex	r3, [r3]
 80071b2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80071b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071b6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80071ba:	653b      	str	r3, [r7, #80]	; 0x50
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	461a      	mov	r2, r3
 80071c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80071c4:	647b      	str	r3, [r7, #68]	; 0x44
 80071c6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071c8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80071ca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80071cc:	e841 2300 	strex	r3, r2, [r1]
 80071d0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80071d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d1e6      	bne.n	80071a6 <UART_RxISR_8BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	3308      	adds	r3, #8
 80071de:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071e2:	e853 3f00 	ldrex	r3, [r3]
 80071e6:	623b      	str	r3, [r7, #32]
   return(result);
 80071e8:	6a3b      	ldr	r3, [r7, #32]
 80071ea:	f023 0301 	bic.w	r3, r3, #1
 80071ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	3308      	adds	r3, #8
 80071f6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80071f8:	633a      	str	r2, [r7, #48]	; 0x30
 80071fa:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071fc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80071fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007200:	e841 2300 	strex	r3, r2, [r1]
 8007204:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007206:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007208:	2b00      	cmp	r3, #0
 800720a:	d1e5      	bne.n	80071d8 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	2220      	movs	r2, #32
 8007210:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	2200      	movs	r2, #0
 8007216:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800721c:	2b01      	cmp	r3, #1
 800721e:	d12e      	bne.n	800727e <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	2200      	movs	r2, #0
 8007224:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800722c:	693b      	ldr	r3, [r7, #16]
 800722e:	e853 3f00 	ldrex	r3, [r3]
 8007232:	60fb      	str	r3, [r7, #12]
   return(result);
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	f023 0310 	bic.w	r3, r3, #16
 800723a:	64bb      	str	r3, [r7, #72]	; 0x48
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	461a      	mov	r2, r3
 8007242:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007244:	61fb      	str	r3, [r7, #28]
 8007246:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007248:	69b9      	ldr	r1, [r7, #24]
 800724a:	69fa      	ldr	r2, [r7, #28]
 800724c:	e841 2300 	strex	r3, r2, [r1]
 8007250:	617b      	str	r3, [r7, #20]
   return(result);
 8007252:	697b      	ldr	r3, [r7, #20]
 8007254:	2b00      	cmp	r3, #0
 8007256:	d1e6      	bne.n	8007226 <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	69db      	ldr	r3, [r3, #28]
 800725e:	f003 0310 	and.w	r3, r3, #16
 8007262:	2b10      	cmp	r3, #16
 8007264:	d103      	bne.n	800726e <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	2210      	movs	r2, #16
 800726c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007274:	4619      	mov	r1, r3
 8007276:	6878      	ldr	r0, [r7, #4]
 8007278:	f7ff f9b4 	bl	80065e4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800727c:	e00d      	b.n	800729a <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800727e:	6878      	ldr	r0, [r7, #4]
 8007280:	f7fa f84c 	bl	800131c <HAL_UART_RxCpltCallback>
}
 8007284:	e009      	b.n	800729a <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	8b1b      	ldrh	r3, [r3, #24]
 800728c:	b29a      	uxth	r2, r3
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	f042 0208 	orr.w	r2, r2, #8
 8007296:	b292      	uxth	r2, r2
 8007298:	831a      	strh	r2, [r3, #24]
}
 800729a:	bf00      	nop
 800729c:	3758      	adds	r7, #88	; 0x58
 800729e:	46bd      	mov	sp, r7
 80072a0:	bd80      	pop	{r7, pc}

080072a2 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80072a2:	b580      	push	{r7, lr}
 80072a4:	b096      	sub	sp, #88	; 0x58
 80072a6:	af00      	add	r7, sp, #0
 80072a8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80072b0:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80072b8:	2b22      	cmp	r3, #34	; 0x22
 80072ba:	f040 8094 	bne.w	80073e6 <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80072c4:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072cc:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 80072ce:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 80072d2:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80072d6:	4013      	ands	r3, r2
 80072d8:	b29a      	uxth	r2, r3
 80072da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80072dc:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072e2:	1c9a      	adds	r2, r3, #2
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80072ee:	b29b      	uxth	r3, r3
 80072f0:	3b01      	subs	r3, #1
 80072f2:	b29a      	uxth	r2, r3
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007300:	b29b      	uxth	r3, r3
 8007302:	2b00      	cmp	r3, #0
 8007304:	d179      	bne.n	80073fa <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800730c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800730e:	e853 3f00 	ldrex	r3, [r3]
 8007312:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007314:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007316:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800731a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	461a      	mov	r2, r3
 8007322:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007324:	643b      	str	r3, [r7, #64]	; 0x40
 8007326:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007328:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800732a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800732c:	e841 2300 	strex	r3, r2, [r1]
 8007330:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007332:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007334:	2b00      	cmp	r3, #0
 8007336:	d1e6      	bne.n	8007306 <UART_RxISR_16BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	3308      	adds	r3, #8
 800733e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007340:	6a3b      	ldr	r3, [r7, #32]
 8007342:	e853 3f00 	ldrex	r3, [r3]
 8007346:	61fb      	str	r3, [r7, #28]
   return(result);
 8007348:	69fb      	ldr	r3, [r7, #28]
 800734a:	f023 0301 	bic.w	r3, r3, #1
 800734e:	64bb      	str	r3, [r7, #72]	; 0x48
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	3308      	adds	r3, #8
 8007356:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007358:	62fa      	str	r2, [r7, #44]	; 0x2c
 800735a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800735c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800735e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007360:	e841 2300 	strex	r3, r2, [r1]
 8007364:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007368:	2b00      	cmp	r3, #0
 800736a:	d1e5      	bne.n	8007338 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	2220      	movs	r2, #32
 8007370:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	2200      	movs	r2, #0
 8007376:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800737c:	2b01      	cmp	r3, #1
 800737e:	d12e      	bne.n	80073de <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	2200      	movs	r2, #0
 8007384:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	e853 3f00 	ldrex	r3, [r3]
 8007392:	60bb      	str	r3, [r7, #8]
   return(result);
 8007394:	68bb      	ldr	r3, [r7, #8]
 8007396:	f023 0310 	bic.w	r3, r3, #16
 800739a:	647b      	str	r3, [r7, #68]	; 0x44
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	461a      	mov	r2, r3
 80073a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80073a4:	61bb      	str	r3, [r7, #24]
 80073a6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073a8:	6979      	ldr	r1, [r7, #20]
 80073aa:	69ba      	ldr	r2, [r7, #24]
 80073ac:	e841 2300 	strex	r3, r2, [r1]
 80073b0:	613b      	str	r3, [r7, #16]
   return(result);
 80073b2:	693b      	ldr	r3, [r7, #16]
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d1e6      	bne.n	8007386 <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	69db      	ldr	r3, [r3, #28]
 80073be:	f003 0310 	and.w	r3, r3, #16
 80073c2:	2b10      	cmp	r3, #16
 80073c4:	d103      	bne.n	80073ce <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	2210      	movs	r2, #16
 80073cc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80073d4:	4619      	mov	r1, r3
 80073d6:	6878      	ldr	r0, [r7, #4]
 80073d8:	f7ff f904 	bl	80065e4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80073dc:	e00d      	b.n	80073fa <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 80073de:	6878      	ldr	r0, [r7, #4]
 80073e0:	f7f9 ff9c 	bl	800131c <HAL_UART_RxCpltCallback>
}
 80073e4:	e009      	b.n	80073fa <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	8b1b      	ldrh	r3, [r3, #24]
 80073ec:	b29a      	uxth	r2, r3
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	f042 0208 	orr.w	r2, r2, #8
 80073f6:	b292      	uxth	r2, r2
 80073f8:	831a      	strh	r2, [r3, #24]
}
 80073fa:	bf00      	nop
 80073fc:	3758      	adds	r7, #88	; 0x58
 80073fe:	46bd      	mov	sp, r7
 8007400:	bd80      	pop	{r7, pc}

08007402 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007402:	b480      	push	{r7}
 8007404:	b083      	sub	sp, #12
 8007406:	af00      	add	r7, sp, #0
 8007408:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800740a:	bf00      	nop
 800740c:	370c      	adds	r7, #12
 800740e:	46bd      	mov	sp, r7
 8007410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007414:	4770      	bx	lr
	...

08007418 <decode_pc_command>:
extern led this_led;
extern potenciometro pot;
uint8_t counter;

void decode_pc_command(device *dev, uint8_t command_1, uint8_t command_2)
{
 8007418:	b580      	push	{r7, lr}
 800741a:	b082      	sub	sp, #8
 800741c:	af00      	add	r7, sp, #0
 800741e:	6078      	str	r0, [r7, #4]
 8007420:	460b      	mov	r3, r1
 8007422:	70fb      	strb	r3, [r7, #3]
 8007424:	4613      	mov	r3, r2
 8007426:	70bb      	strb	r3, [r7, #2]
	if(dev->modo==SLAVE)
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	781b      	ldrb	r3, [r3, #0]
 800742c:	2b01      	cmp	r3, #1
 800742e:	d008      	beq.n	8007442 <decode_pc_command+0x2a>
		// nada
	}
	else
	{
		// Enviar comandos del PC a la red
		send(&t_r_red, &command_1, &command_2);
 8007430:	1cba      	adds	r2, r7, #2
 8007432:	1cfb      	adds	r3, r7, #3
 8007434:	4619      	mov	r1, r3
 8007436:	4805      	ldr	r0, [pc, #20]	; (800744c <decode_pc_command+0x34>)
 8007438:	f000 f98c 	bl	8007754 <send>

		// Activa el timer del timeout (5 segundos)
 		HAL_TIM_Base_Start_IT(&htim2);
 800743c:	4804      	ldr	r0, [pc, #16]	; (8007450 <decode_pc_command+0x38>)
 800743e:	f7fd fa1f 	bl	8004880 <HAL_TIM_Base_Start_IT>
	}
}
 8007442:	bf00      	nop
 8007444:	3708      	adds	r7, #8
 8007446:	46bd      	mov	sp, r7
 8007448:	bd80      	pop	{r7, pc}
 800744a:	bf00      	nop
 800744c:	20000108 	.word	0x20000108
 8007450:	2000023c 	.word	0x2000023c

08007454 <decode_red_command>:

void decode_red_command(device *dev, uint8_t red_command_1, uint8_t red_command_2)
{
 8007454:	b580      	push	{r7, lr}
 8007456:	b086      	sub	sp, #24
 8007458:	af00      	add	r7, sp, #0
 800745a:	6078      	str	r0, [r7, #4]
 800745c:	460b      	mov	r3, r1
 800745e:	70fb      	strb	r3, [r7, #3]
 8007460:	4613      	mov	r3, r2
 8007462:	70bb      	strb	r3, [r7, #2]
	if(dev->modo==MASTER)
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	781b      	ldrb	r3, [r3, #0]
 8007468:	2b00      	cmp	r3, #0
 800746a:	d106      	bne.n	800747a <decode_red_command+0x26>
	{
		// Si por alguna razón el MASTER recibe estos comandos, los reenvía a la red
		send(&t_r_red, &red_command_1, &red_command_2);
 800746c:	1cba      	adds	r2, r7, #2
 800746e:	1cfb      	adds	r3, r7, #3
 8007470:	4619      	mov	r1, r3
 8007472:	4827      	ldr	r0, [pc, #156]	; (8007510 <decode_red_command+0xbc>)
 8007474:	f000 f96e 	bl	8007754 <send>
		else
		{
			// nada
		}
	}
}
 8007478:	e046      	b.n	8007508 <decode_red_command+0xb4>
		if( (0b00001111 & red_command_1) == dev->id )
 800747a:	78fb      	ldrb	r3, [r7, #3]
 800747c:	f003 020f 	and.w	r2, r3, #15
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	685b      	ldr	r3, [r3, #4]
 8007484:	429a      	cmp	r2, r3
 8007486:	d13f      	bne.n	8007508 <decode_red_command+0xb4>
			int instruccion = red_command_1>>7;
 8007488:	78fb      	ldrb	r3, [r7, #3]
 800748a:	09db      	lsrs	r3, r3, #7
 800748c:	b2db      	uxtb	r3, r3
 800748e:	617b      	str	r3, [r7, #20]
			if(instruccion == READ_POT)
 8007490:	697b      	ldr	r3, [r7, #20]
 8007492:	2b00      	cmp	r3, #0
 8007494:	d10f      	bne.n	80074b6 <decode_red_command+0x62>
				uint8_t adc_val = potenciometro_get_value(&pot);
 8007496:	481f      	ldr	r0, [pc, #124]	; (8007514 <decode_red_command+0xc0>)
 8007498:	f000 f90a 	bl	80076b0 <potenciometro_get_value>
 800749c:	4603      	mov	r3, r0
 800749e:	747b      	strb	r3, [r7, #17]
				int cero = 0x00;
 80074a0:	2300      	movs	r3, #0
 80074a2:	60fb      	str	r3, [r7, #12]
				send(&t_r_red, &cero, &adc_val);
 80074a4:	f107 0211 	add.w	r2, r7, #17
 80074a8:	f107 030c 	add.w	r3, r7, #12
 80074ac:	4619      	mov	r1, r3
 80074ae:	4818      	ldr	r0, [pc, #96]	; (8007510 <decode_red_command+0xbc>)
 80074b0:	f000 f950 	bl	8007754 <send>
}
 80074b4:	e028      	b.n	8007508 <decode_red_command+0xb4>
			else if (instruccion == WRITE_LED)
 80074b6:	697b      	ldr	r3, [r7, #20]
 80074b8:	2b01      	cmp	r3, #1
 80074ba:	d125      	bne.n	8007508 <decode_red_command+0xb4>
				uint16_t dc_pwm = (float)red_command_2/127 * 1960;
 80074bc:	78bb      	ldrb	r3, [r7, #2]
 80074be:	ee07 3a90 	vmov	s15, r3
 80074c2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80074c6:	eddf 6a14 	vldr	s13, [pc, #80]	; 8007518 <decode_red_command+0xc4>
 80074ca:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80074ce:	ed9f 7a13 	vldr	s14, [pc, #76]	; 800751c <decode_red_command+0xc8>
 80074d2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80074d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80074da:	ee17 3a90 	vmov	r3, s15
 80074de:	827b      	strh	r3, [r7, #18]
				led_set(&this_led, dc_pwm);
 80074e0:	8a7b      	ldrh	r3, [r7, #18]
 80074e2:	ee07 3a90 	vmov	s15, r3
 80074e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074ea:	eeb0 0a67 	vmov.f32	s0, s15
 80074ee:	480c      	ldr	r0, [pc, #48]	; (8007520 <decode_red_command+0xcc>)
 80074f0:	f000 f8b8 	bl	8007664 <led_set>
				int response = 0xFF;
 80074f4:	23ff      	movs	r3, #255	; 0xff
 80074f6:	60bb      	str	r3, [r7, #8]
				send(&t_r_red, &response, &response);
 80074f8:	f107 0208 	add.w	r2, r7, #8
 80074fc:	f107 0308 	add.w	r3, r7, #8
 8007500:	4619      	mov	r1, r3
 8007502:	4803      	ldr	r0, [pc, #12]	; (8007510 <decode_red_command+0xbc>)
 8007504:	f000 f926 	bl	8007754 <send>
}
 8007508:	bf00      	nop
 800750a:	3718      	adds	r7, #24
 800750c:	46bd      	mov	sp, r7
 800750e:	bd80      	pop	{r7, pc}
 8007510:	20000108 	.word	0x20000108
 8007514:	2000009c 	.word	0x2000009c
 8007518:	42fe0000 	.word	0x42fe0000
 800751c:	44f50000 	.word	0x44f50000
 8007520:	200001a0 	.word	0x200001a0

08007524 <HAL_TIM_PeriodElapsedCallback>:



void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007524:	b580      	push	{r7, lr}
 8007526:	b082      	sub	sp, #8
 8007528:	af00      	add	r7, sp, #0
 800752a:	6078      	str	r0, [r7, #4]
	/* Variable usada para arreglar un bug donde la -primera- vez que se activan las
	 * interrupciones de timer, ocurre una interrupción inmediatamente. */
	static uint8_t cont_tim = 0;

	if (cont_tim == 1) {
 800752c:	4b0a      	ldr	r3, [pc, #40]	; (8007558 <HAL_TIM_PeriodElapsedCallback+0x34>)
 800752e:	781b      	ldrb	r3, [r3, #0]
 8007530:	2b01      	cmp	r3, #1
 8007532:	d109      	bne.n	8007548 <HAL_TIM_PeriodElapsedCallback+0x24>
		// Enviar '1' al computador cuando ocurre timeout después de 5 segundos (no hay respuesta de la red)
		HAL_UART_Transmit(&huart2, &cont_tim, 1, 100);
 8007534:	2364      	movs	r3, #100	; 0x64
 8007536:	2201      	movs	r2, #1
 8007538:	4907      	ldr	r1, [pc, #28]	; (8007558 <HAL_TIM_PeriodElapsedCallback+0x34>)
 800753a:	4808      	ldr	r0, [pc, #32]	; (800755c <HAL_TIM_PeriodElapsedCallback+0x38>)
 800753c:	f7fe fc72 	bl	8005e24 <HAL_UART_Transmit>
		HAL_TIM_Base_Stop_IT(&htim2);
 8007540:	4807      	ldr	r0, [pc, #28]	; (8007560 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8007542:	f7fd f9f9 	bl	8004938 <HAL_TIM_Base_Stop_IT>
	}
	else
	{
		cont_tim = 1;
	}
}
 8007546:	e002      	b.n	800754e <HAL_TIM_PeriodElapsedCallback+0x2a>
		cont_tim = 1;
 8007548:	4b03      	ldr	r3, [pc, #12]	; (8007558 <HAL_TIM_PeriodElapsedCallback+0x34>)
 800754a:	2201      	movs	r2, #1
 800754c:	701a      	strb	r2, [r3, #0]
}
 800754e:	bf00      	nop
 8007550:	3708      	adds	r7, #8
 8007552:	46bd      	mov	sp, r7
 8007554:	bd80      	pop	{r7, pc}
 8007556:	bf00      	nop
 8007558:	20000394 	.word	0x20000394
 800755c:	2000030c 	.word	0x2000030c
 8007560:	2000023c 	.word	0x2000023c

08007564 <device_if_init>:

#include <stdlib.h>
#include "device.h"

void device_if_init( device *device_gc, int set_id)
{
 8007564:	b480      	push	{r7}
 8007566:	b083      	sub	sp, #12
 8007568:	af00      	add	r7, sp, #0
 800756a:	6078      	str	r0, [r7, #4]
 800756c:	6039      	str	r1, [r7, #0]
	if(set_id==0)
 800756e:	683b      	ldr	r3, [r7, #0]
 8007570:	2b00      	cmp	r3, #0
 8007572:	d103      	bne.n	800757c <device_if_init+0x18>
	{
		device_gc->modo = MASTER;
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	2200      	movs	r2, #0
 8007578:	701a      	strb	r2, [r3, #0]
 800757a:	e002      	b.n	8007582 <device_if_init+0x1e>
	}
	else
	{
		device_gc->modo = SLAVE;
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	2201      	movs	r2, #1
 8007580:	701a      	strb	r2, [r3, #0]
	}
	device_gc->id = set_id;
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	683a      	ldr	r2, [r7, #0]
 8007586:	605a      	str	r2, [r3, #4]
}
 8007588:	bf00      	nop
 800758a:	370c      	adds	r7, #12
 800758c:	46bd      	mov	sp, r7
 800758e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007592:	4770      	bx	lr

08007594 <dip_switch_ports_init>:
#include "dip_switch.h"
#include "gpio_if.h"


void dip_switch_ports_init(dip_switch *dip, t_gpio_if *gpio_1, t_gpio_if *gpio_2, t_gpio_if *gpio_3, t_gpio_if *gpio_4)
{
 8007594:	b480      	push	{r7}
 8007596:	b085      	sub	sp, #20
 8007598:	af00      	add	r7, sp, #0
 800759a:	60f8      	str	r0, [r7, #12]
 800759c:	60b9      	str	r1, [r7, #8]
 800759e:	607a      	str	r2, [r7, #4]
 80075a0:	603b      	str	r3, [r7, #0]
	dip->sw_1 = gpio_1;
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	68ba      	ldr	r2, [r7, #8]
 80075a6:	601a      	str	r2, [r3, #0]
	dip->sw_2 = gpio_2;
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	687a      	ldr	r2, [r7, #4]
 80075ac:	605a      	str	r2, [r3, #4]
	dip->sw_3 = gpio_3;
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	683a      	ldr	r2, [r7, #0]
 80075b2:	609a      	str	r2, [r3, #8]
	dip->sw_4 = gpio_4;
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	69ba      	ldr	r2, [r7, #24]
 80075b8:	60da      	str	r2, [r3, #12]
}
 80075ba:	bf00      	nop
 80075bc:	3714      	adds	r7, #20
 80075be:	46bd      	mov	sp, r7
 80075c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c4:	4770      	bx	lr

080075c6 <get_dip_value>:

int get_dip_value(dip_switch *dip)
{
 80075c6:	b580      	push	{r7, lr}
 80075c8:	b084      	sub	sp, #16
 80075ca:	af00      	add	r7, sp, #0
 80075cc:	6078      	str	r0, [r7, #4]
	int val=0;
 80075ce:	2300      	movs	r3, #0
 80075d0:	60fb      	str	r3, [r7, #12]
	if(gpio_if_get(dip->sw_1)==GPIO_IF_SET)
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	4618      	mov	r0, r3
 80075d8:	f7f9 fd37 	bl	800104a <gpio_if_get>
 80075dc:	4603      	mov	r3, r0
 80075de:	2b01      	cmp	r3, #1
 80075e0:	d102      	bne.n	80075e8 <get_dip_value+0x22>
	{
		val = val + 1;
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	3301      	adds	r3, #1
 80075e6:	60fb      	str	r3, [r7, #12]
	}
	if(gpio_if_get(dip->sw_2)==GPIO_IF_SET)
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	685b      	ldr	r3, [r3, #4]
 80075ec:	4618      	mov	r0, r3
 80075ee:	f7f9 fd2c 	bl	800104a <gpio_if_get>
 80075f2:	4603      	mov	r3, r0
 80075f4:	2b01      	cmp	r3, #1
 80075f6:	d102      	bne.n	80075fe <get_dip_value+0x38>
	{
		val = val + 2;
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	3302      	adds	r3, #2
 80075fc:	60fb      	str	r3, [r7, #12]
	}
	if(gpio_if_get(dip->sw_3)==GPIO_IF_SET)
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	689b      	ldr	r3, [r3, #8]
 8007602:	4618      	mov	r0, r3
 8007604:	f7f9 fd21 	bl	800104a <gpio_if_get>
 8007608:	4603      	mov	r3, r0
 800760a:	2b01      	cmp	r3, #1
 800760c:	d102      	bne.n	8007614 <get_dip_value+0x4e>
	{
		val = val + 4;
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	3304      	adds	r3, #4
 8007612:	60fb      	str	r3, [r7, #12]
	}
	if(gpio_if_get(dip->sw_4)==GPIO_IF_SET)
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	68db      	ldr	r3, [r3, #12]
 8007618:	4618      	mov	r0, r3
 800761a:	f7f9 fd16 	bl	800104a <gpio_if_get>
 800761e:	4603      	mov	r3, r0
 8007620:	2b01      	cmp	r3, #1
 8007622:	d102      	bne.n	800762a <get_dip_value+0x64>
	{
		val = val + 8;
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	3308      	adds	r3, #8
 8007628:	60fb      	str	r3, [r7, #12]
	}
	return val;
 800762a:	68fb      	ldr	r3, [r7, #12]
}
 800762c:	4618      	mov	r0, r3
 800762e:	3710      	adds	r7, #16
 8007630:	46bd      	mov	sp, r7
 8007632:	bd80      	pop	{r7, pc}

08007634 <led_init>:
 */

#include "led.h"

void led_init(led *this_led, TIM_HandleTypeDef *htim)
{
 8007634:	b580      	push	{r7, lr}
 8007636:	b082      	sub	sp, #8
 8007638:	af00      	add	r7, sp, #0
 800763a:	6078      	str	r0, [r7, #4]
 800763c:	6039      	str	r1, [r7, #0]
	this_led->htim = *htim;
 800763e:	687a      	ldr	r2, [r7, #4]
 8007640:	683b      	ldr	r3, [r7, #0]
 8007642:	4610      	mov	r0, r2
 8007644:	4619      	mov	r1, r3
 8007646:	234c      	movs	r3, #76	; 0x4c
 8007648:	461a      	mov	r2, r3
 800764a:	f000 f8cd 	bl	80077e8 <memcpy>
	// Inicialización timer que controla el PWM
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800764e:	2100      	movs	r1, #0
 8007650:	4803      	ldr	r0, [pc, #12]	; (8007660 <led_init+0x2c>)
 8007652:	f7fd fa63 	bl	8004b1c <HAL_TIM_PWM_Start>
}
 8007656:	bf00      	nop
 8007658:	3708      	adds	r7, #8
 800765a:	46bd      	mov	sp, r7
 800765c:	bd80      	pop	{r7, pc}
 800765e:	bf00      	nop
 8007660:	200001f0 	.word	0x200001f0

08007664 <led_set>:

void led_set(led *this_led, float value)
{
 8007664:	b480      	push	{r7}
 8007666:	b083      	sub	sp, #12
 8007668:	af00      	add	r7, sp, #0
 800766a:	6078      	str	r0, [r7, #4]
 800766c:	ed87 0a00 	vstr	s0, [r7]
	__HAL_TIM_SET_COMPARE(&(this_led->htim), TIM_CHANNEL_1, value);
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	edd7 7a00 	vldr	s15, [r7]
 8007678:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800767c:	ee17 2a90 	vmov	r2, s15
 8007680:	635a      	str	r2, [r3, #52]	; 0x34
}
 8007682:	bf00      	nop
 8007684:	370c      	adds	r7, #12
 8007686:	46bd      	mov	sp, r7
 8007688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800768c:	4770      	bx	lr

0800768e <potenciometro_init>:
 */

#include "potenciometro.h"

void potenciometro_init(potenciometro *pot, ADC_HandleTypeDef *hadc1)
{
 800768e:	b580      	push	{r7, lr}
 8007690:	b082      	sub	sp, #8
 8007692:	af00      	add	r7, sp, #0
 8007694:	6078      	str	r0, [r7, #4]
 8007696:	6039      	str	r1, [r7, #0]
	pot->adc_port = *hadc1;
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	683a      	ldr	r2, [r7, #0]
 800769c:	3304      	adds	r3, #4
 800769e:	4611      	mov	r1, r2
 80076a0:	2268      	movs	r2, #104	; 0x68
 80076a2:	4618      	mov	r0, r3
 80076a4:	f000 f8a0 	bl	80077e8 <memcpy>
}
 80076a8:	bf00      	nop
 80076aa:	3708      	adds	r7, #8
 80076ac:	46bd      	mov	sp, r7
 80076ae:	bd80      	pop	{r7, pc}

080076b0 <potenciometro_get_value>:

uint8_t potenciometro_get_value(potenciometro *pot)
{
 80076b0:	b580      	push	{r7, lr}
 80076b2:	b084      	sub	sp, #16
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	6078      	str	r0, [r7, #4]
	HAL_ADC_Start(&(pot->adc_port));
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	3304      	adds	r3, #4
 80076bc:	4618      	mov	r0, r3
 80076be:	f7fa fdd1 	bl	8002264 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&(pot->adc_port), 100);
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	3304      	adds	r3, #4
 80076c6:	2164      	movs	r1, #100	; 0x64
 80076c8:	4618      	mov	r0, r3
 80076ca:	f7fa fe2e 	bl	800232a <HAL_ADC_PollForConversion>

	// Convierte el valor ADC a un valor entre 0 y 100 (a modo de porcentaje)
	uint8_t adc_val = ( (double) HAL_ADC_GetValue(&(pot->adc_port)) ) /3815 * 100;
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	3304      	adds	r3, #4
 80076d2:	4618      	mov	r0, r3
 80076d4:	f7fa feb8 	bl	8002448 <HAL_ADC_GetValue>
 80076d8:	4603      	mov	r3, r0
 80076da:	4618      	mov	r0, r3
 80076dc:	f7f8 febe 	bl	800045c <__aeabi_ui2d>
 80076e0:	a30e      	add	r3, pc, #56	; (adr r3, 800771c <potenciometro_get_value+0x6c>)
 80076e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076e6:	f7f9 f85d 	bl	80007a4 <__aeabi_ddiv>
 80076ea:	4602      	mov	r2, r0
 80076ec:	460b      	mov	r3, r1
 80076ee:	4610      	mov	r0, r2
 80076f0:	4619      	mov	r1, r3
 80076f2:	f04f 0200 	mov.w	r2, #0
 80076f6:	4b08      	ldr	r3, [pc, #32]	; (8007718 <potenciometro_get_value+0x68>)
 80076f8:	f7f8 ff2a 	bl	8000550 <__aeabi_dmul>
 80076fc:	4602      	mov	r2, r0
 80076fe:	460b      	mov	r3, r1
 8007700:	4610      	mov	r0, r2
 8007702:	4619      	mov	r1, r3
 8007704:	f7f9 f936 	bl	8000974 <__aeabi_d2uiz>
 8007708:	4603      	mov	r3, r0
 800770a:	73fb      	strb	r3, [r7, #15]
	return adc_val;
 800770c:	7bfb      	ldrb	r3, [r7, #15]
}
 800770e:	4618      	mov	r0, r3
 8007710:	3710      	adds	r7, #16
 8007712:	46bd      	mov	sp, r7
 8007714:	bd80      	pop	{r7, pc}
 8007716:	bf00      	nop
 8007718:	40590000 	.word	0x40590000
 800771c:	00000000 	.word	0x00000000
 8007720:	40adce00 	.word	0x40adce00

08007724 <trans_recep_init>:

#include "transmisor_receptor_red.h"


void trans_recep_init( transmisor_receptor_red *t_r_red, UART_HandleTypeDef *uart)
{
 8007724:	b580      	push	{r7, lr}
 8007726:	b082      	sub	sp, #8
 8007728:	af00      	add	r7, sp, #0
 800772a:	6078      	str	r0, [r7, #4]
 800772c:	6039      	str	r1, [r7, #0]
	t_r_red->puerto_uart = *uart;
 800772e:	687a      	ldr	r2, [r7, #4]
 8007730:	683b      	ldr	r3, [r7, #0]
 8007732:	4610      	mov	r0, r2
 8007734:	4619      	mov	r1, r3
 8007736:	2384      	movs	r3, #132	; 0x84
 8007738:	461a      	mov	r2, r3
 800773a:	f000 f855 	bl	80077e8 <memcpy>
	// ENABLE del transceptor desactivado por defecto
	HAL_GPIO_WritePin(GPIOA, EN_Pin, 0);
 800773e:	2200      	movs	r2, #0
 8007740:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007744:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007748:	f7fb fe30 	bl	80033ac <HAL_GPIO_WritePin>
}
 800774c:	bf00      	nop
 800774e:	3708      	adds	r7, #8
 8007750:	46bd      	mov	sp, r7
 8007752:	bd80      	pop	{r7, pc}

08007754 <send>:

void send(transmisor_receptor_red *t_r_red, uint8_t *command_1, uint8_t *command_2)
{
 8007754:	b580      	push	{r7, lr}
 8007756:	b084      	sub	sp, #16
 8007758:	af00      	add	r7, sp, #0
 800775a:	60f8      	str	r0, [r7, #12]
 800775c:	60b9      	str	r1, [r7, #8]
 800775e:	607a      	str	r2, [r7, #4]
	// Activar el ENABLE del transceptor
	HAL_GPIO_WritePin(GPIOA, EN_Pin, 1);
 8007760:	2201      	movs	r2, #1
 8007762:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007766:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800776a:	f7fb fe1f 	bl	80033ac <HAL_GPIO_WritePin>

	// Enviar datos a la red
	HAL_UART_Transmit(&(t_r_red->puerto_uart), command_1, 1, 1000);
 800776e:	68f8      	ldr	r0, [r7, #12]
 8007770:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007774:	2201      	movs	r2, #1
 8007776:	68b9      	ldr	r1, [r7, #8]
 8007778:	f7fe fb54 	bl	8005e24 <HAL_UART_Transmit>
	HAL_UART_Transmit(&(t_r_red->puerto_uart), command_2, 1, 1000);
 800777c:	68f8      	ldr	r0, [r7, #12]
 800777e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007782:	2201      	movs	r2, #1
 8007784:	6879      	ldr	r1, [r7, #4]
 8007786:	f7fe fb4d 	bl	8005e24 <HAL_UART_Transmit>

	// Desactivar el ENABLE del transceptor
	HAL_GPIO_WritePin(GPIOA, EN_Pin, 0);
 800778a:	2200      	movs	r2, #0
 800778c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007790:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007794:	f7fb fe0a 	bl	80033ac <HAL_GPIO_WritePin>
}
 8007798:	bf00      	nop
 800779a:	3710      	adds	r7, #16
 800779c:	46bd      	mov	sp, r7
 800779e:	bd80      	pop	{r7, pc}

080077a0 <__libc_init_array>:
 80077a0:	b570      	push	{r4, r5, r6, lr}
 80077a2:	4d0d      	ldr	r5, [pc, #52]	; (80077d8 <__libc_init_array+0x38>)
 80077a4:	4c0d      	ldr	r4, [pc, #52]	; (80077dc <__libc_init_array+0x3c>)
 80077a6:	1b64      	subs	r4, r4, r5
 80077a8:	10a4      	asrs	r4, r4, #2
 80077aa:	2600      	movs	r6, #0
 80077ac:	42a6      	cmp	r6, r4
 80077ae:	d109      	bne.n	80077c4 <__libc_init_array+0x24>
 80077b0:	4d0b      	ldr	r5, [pc, #44]	; (80077e0 <__libc_init_array+0x40>)
 80077b2:	4c0c      	ldr	r4, [pc, #48]	; (80077e4 <__libc_init_array+0x44>)
 80077b4:	f000 f82e 	bl	8007814 <_init>
 80077b8:	1b64      	subs	r4, r4, r5
 80077ba:	10a4      	asrs	r4, r4, #2
 80077bc:	2600      	movs	r6, #0
 80077be:	42a6      	cmp	r6, r4
 80077c0:	d105      	bne.n	80077ce <__libc_init_array+0x2e>
 80077c2:	bd70      	pop	{r4, r5, r6, pc}
 80077c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80077c8:	4798      	blx	r3
 80077ca:	3601      	adds	r6, #1
 80077cc:	e7ee      	b.n	80077ac <__libc_init_array+0xc>
 80077ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80077d2:	4798      	blx	r3
 80077d4:	3601      	adds	r6, #1
 80077d6:	e7f2      	b.n	80077be <__libc_init_array+0x1e>
 80077d8:	0800789c 	.word	0x0800789c
 80077dc:	0800789c 	.word	0x0800789c
 80077e0:	0800789c 	.word	0x0800789c
 80077e4:	080078a0 	.word	0x080078a0

080077e8 <memcpy>:
 80077e8:	440a      	add	r2, r1
 80077ea:	4291      	cmp	r1, r2
 80077ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80077f0:	d100      	bne.n	80077f4 <memcpy+0xc>
 80077f2:	4770      	bx	lr
 80077f4:	b510      	push	{r4, lr}
 80077f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80077fa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80077fe:	4291      	cmp	r1, r2
 8007800:	d1f9      	bne.n	80077f6 <memcpy+0xe>
 8007802:	bd10      	pop	{r4, pc}

08007804 <memset>:
 8007804:	4402      	add	r2, r0
 8007806:	4603      	mov	r3, r0
 8007808:	4293      	cmp	r3, r2
 800780a:	d100      	bne.n	800780e <memset+0xa>
 800780c:	4770      	bx	lr
 800780e:	f803 1b01 	strb.w	r1, [r3], #1
 8007812:	e7f9      	b.n	8007808 <memset+0x4>

08007814 <_init>:
 8007814:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007816:	bf00      	nop
 8007818:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800781a:	bc08      	pop	{r3}
 800781c:	469e      	mov	lr, r3
 800781e:	4770      	bx	lr

08007820 <_fini>:
 8007820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007822:	bf00      	nop
 8007824:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007826:	bc08      	pop	{r3}
 8007828:	469e      	mov	lr, r3
 800782a:	4770      	bx	lr
