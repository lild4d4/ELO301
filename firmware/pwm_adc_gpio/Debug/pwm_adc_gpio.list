
pwm_adc_gpio.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000049a0  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08004b34  08004b34  00014b34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004b9c  08004b9c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004b9c  08004b9c  00014b9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004ba4  08004ba4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004ba4  08004ba4  00014ba4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004ba8  08004ba8  00014ba8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004bac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000158  2000000c  08004bb8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000164  08004bb8  00020164  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012efa  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000285e  00000000  00000000  00032f36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001150  00000000  00000000  00035798  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001018  00000000  00000000  000368e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000254ed  00000000  00000000  00037900  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015325  00000000  00000000  0005cded  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e96a7  00000000  00000000  00072112  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0015b7b9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000047e0  00000000  00000000  0015b80c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08004b1c 	.word	0x08004b1c

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	08004b1c 	.word	0x08004b1c

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b974 	b.w	80004d4 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	4604      	mov	r4, r0
 800020c:	468e      	mov	lr, r1
 800020e:	2b00      	cmp	r3, #0
 8000210:	d14d      	bne.n	80002ae <__udivmoddi4+0xaa>
 8000212:	428a      	cmp	r2, r1
 8000214:	4694      	mov	ip, r2
 8000216:	d969      	bls.n	80002ec <__udivmoddi4+0xe8>
 8000218:	fab2 f282 	clz	r2, r2
 800021c:	b152      	cbz	r2, 8000234 <__udivmoddi4+0x30>
 800021e:	fa01 f302 	lsl.w	r3, r1, r2
 8000222:	f1c2 0120 	rsb	r1, r2, #32
 8000226:	fa20 f101 	lsr.w	r1, r0, r1
 800022a:	fa0c fc02 	lsl.w	ip, ip, r2
 800022e:	ea41 0e03 	orr.w	lr, r1, r3
 8000232:	4094      	lsls	r4, r2
 8000234:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000238:	0c21      	lsrs	r1, r4, #16
 800023a:	fbbe f6f8 	udiv	r6, lr, r8
 800023e:	fa1f f78c 	uxth.w	r7, ip
 8000242:	fb08 e316 	mls	r3, r8, r6, lr
 8000246:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024a:	fb06 f107 	mul.w	r1, r6, r7
 800024e:	4299      	cmp	r1, r3
 8000250:	d90a      	bls.n	8000268 <__udivmoddi4+0x64>
 8000252:	eb1c 0303 	adds.w	r3, ip, r3
 8000256:	f106 30ff 	add.w	r0, r6, #4294967295
 800025a:	f080 811f 	bcs.w	800049c <__udivmoddi4+0x298>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 811c 	bls.w	800049c <__udivmoddi4+0x298>
 8000264:	3e02      	subs	r6, #2
 8000266:	4463      	add	r3, ip
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000270:	fb08 3310 	mls	r3, r8, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 f707 	mul.w	r7, r0, r7
 800027c:	42a7      	cmp	r7, r4
 800027e:	d90a      	bls.n	8000296 <__udivmoddi4+0x92>
 8000280:	eb1c 0404 	adds.w	r4, ip, r4
 8000284:	f100 33ff 	add.w	r3, r0, #4294967295
 8000288:	f080 810a 	bcs.w	80004a0 <__udivmoddi4+0x29c>
 800028c:	42a7      	cmp	r7, r4
 800028e:	f240 8107 	bls.w	80004a0 <__udivmoddi4+0x29c>
 8000292:	4464      	add	r4, ip
 8000294:	3802      	subs	r0, #2
 8000296:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029a:	1be4      	subs	r4, r4, r7
 800029c:	2600      	movs	r6, #0
 800029e:	b11d      	cbz	r5, 80002a8 <__udivmoddi4+0xa4>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c5 4300 	strd	r4, r3, [r5]
 80002a8:	4631      	mov	r1, r6
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d909      	bls.n	80002c6 <__udivmoddi4+0xc2>
 80002b2:	2d00      	cmp	r5, #0
 80002b4:	f000 80ef 	beq.w	8000496 <__udivmoddi4+0x292>
 80002b8:	2600      	movs	r6, #0
 80002ba:	e9c5 0100 	strd	r0, r1, [r5]
 80002be:	4630      	mov	r0, r6
 80002c0:	4631      	mov	r1, r6
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	fab3 f683 	clz	r6, r3
 80002ca:	2e00      	cmp	r6, #0
 80002cc:	d14a      	bne.n	8000364 <__udivmoddi4+0x160>
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xd4>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 80f9 	bhi.w	80004ca <__udivmoddi4+0x2c6>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb61 0303 	sbc.w	r3, r1, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	469e      	mov	lr, r3
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	d0e0      	beq.n	80002a8 <__udivmoddi4+0xa4>
 80002e6:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ea:	e7dd      	b.n	80002a8 <__udivmoddi4+0xa4>
 80002ec:	b902      	cbnz	r2, 80002f0 <__udivmoddi4+0xec>
 80002ee:	deff      	udf	#255	; 0xff
 80002f0:	fab2 f282 	clz	r2, r2
 80002f4:	2a00      	cmp	r2, #0
 80002f6:	f040 8092 	bne.w	800041e <__udivmoddi4+0x21a>
 80002fa:	eba1 010c 	sub.w	r1, r1, ip
 80002fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000302:	fa1f fe8c 	uxth.w	lr, ip
 8000306:	2601      	movs	r6, #1
 8000308:	0c20      	lsrs	r0, r4, #16
 800030a:	fbb1 f3f7 	udiv	r3, r1, r7
 800030e:	fb07 1113 	mls	r1, r7, r3, r1
 8000312:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000316:	fb0e f003 	mul.w	r0, lr, r3
 800031a:	4288      	cmp	r0, r1
 800031c:	d908      	bls.n	8000330 <__udivmoddi4+0x12c>
 800031e:	eb1c 0101 	adds.w	r1, ip, r1
 8000322:	f103 38ff 	add.w	r8, r3, #4294967295
 8000326:	d202      	bcs.n	800032e <__udivmoddi4+0x12a>
 8000328:	4288      	cmp	r0, r1
 800032a:	f200 80cb 	bhi.w	80004c4 <__udivmoddi4+0x2c0>
 800032e:	4643      	mov	r3, r8
 8000330:	1a09      	subs	r1, r1, r0
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb1 f0f7 	udiv	r0, r1, r7
 8000338:	fb07 1110 	mls	r1, r7, r0, r1
 800033c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000340:	fb0e fe00 	mul.w	lr, lr, r0
 8000344:	45a6      	cmp	lr, r4
 8000346:	d908      	bls.n	800035a <__udivmoddi4+0x156>
 8000348:	eb1c 0404 	adds.w	r4, ip, r4
 800034c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000350:	d202      	bcs.n	8000358 <__udivmoddi4+0x154>
 8000352:	45a6      	cmp	lr, r4
 8000354:	f200 80bb 	bhi.w	80004ce <__udivmoddi4+0x2ca>
 8000358:	4608      	mov	r0, r1
 800035a:	eba4 040e 	sub.w	r4, r4, lr
 800035e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000362:	e79c      	b.n	800029e <__udivmoddi4+0x9a>
 8000364:	f1c6 0720 	rsb	r7, r6, #32
 8000368:	40b3      	lsls	r3, r6
 800036a:	fa22 fc07 	lsr.w	ip, r2, r7
 800036e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000372:	fa20 f407 	lsr.w	r4, r0, r7
 8000376:	fa01 f306 	lsl.w	r3, r1, r6
 800037a:	431c      	orrs	r4, r3
 800037c:	40f9      	lsrs	r1, r7
 800037e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000382:	fa00 f306 	lsl.w	r3, r0, r6
 8000386:	fbb1 f8f9 	udiv	r8, r1, r9
 800038a:	0c20      	lsrs	r0, r4, #16
 800038c:	fa1f fe8c 	uxth.w	lr, ip
 8000390:	fb09 1118 	mls	r1, r9, r8, r1
 8000394:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000398:	fb08 f00e 	mul.w	r0, r8, lr
 800039c:	4288      	cmp	r0, r1
 800039e:	fa02 f206 	lsl.w	r2, r2, r6
 80003a2:	d90b      	bls.n	80003bc <__udivmoddi4+0x1b8>
 80003a4:	eb1c 0101 	adds.w	r1, ip, r1
 80003a8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003ac:	f080 8088 	bcs.w	80004c0 <__udivmoddi4+0x2bc>
 80003b0:	4288      	cmp	r0, r1
 80003b2:	f240 8085 	bls.w	80004c0 <__udivmoddi4+0x2bc>
 80003b6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ba:	4461      	add	r1, ip
 80003bc:	1a09      	subs	r1, r1, r0
 80003be:	b2a4      	uxth	r4, r4
 80003c0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c4:	fb09 1110 	mls	r1, r9, r0, r1
 80003c8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003cc:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d0:	458e      	cmp	lr, r1
 80003d2:	d908      	bls.n	80003e6 <__udivmoddi4+0x1e2>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f100 34ff 	add.w	r4, r0, #4294967295
 80003dc:	d26c      	bcs.n	80004b8 <__udivmoddi4+0x2b4>
 80003de:	458e      	cmp	lr, r1
 80003e0:	d96a      	bls.n	80004b8 <__udivmoddi4+0x2b4>
 80003e2:	3802      	subs	r0, #2
 80003e4:	4461      	add	r1, ip
 80003e6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ea:	fba0 9402 	umull	r9, r4, r0, r2
 80003ee:	eba1 010e 	sub.w	r1, r1, lr
 80003f2:	42a1      	cmp	r1, r4
 80003f4:	46c8      	mov	r8, r9
 80003f6:	46a6      	mov	lr, r4
 80003f8:	d356      	bcc.n	80004a8 <__udivmoddi4+0x2a4>
 80003fa:	d053      	beq.n	80004a4 <__udivmoddi4+0x2a0>
 80003fc:	b15d      	cbz	r5, 8000416 <__udivmoddi4+0x212>
 80003fe:	ebb3 0208 	subs.w	r2, r3, r8
 8000402:	eb61 010e 	sbc.w	r1, r1, lr
 8000406:	fa01 f707 	lsl.w	r7, r1, r7
 800040a:	fa22 f306 	lsr.w	r3, r2, r6
 800040e:	40f1      	lsrs	r1, r6
 8000410:	431f      	orrs	r7, r3
 8000412:	e9c5 7100 	strd	r7, r1, [r5]
 8000416:	2600      	movs	r6, #0
 8000418:	4631      	mov	r1, r6
 800041a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041e:	f1c2 0320 	rsb	r3, r2, #32
 8000422:	40d8      	lsrs	r0, r3
 8000424:	fa0c fc02 	lsl.w	ip, ip, r2
 8000428:	fa21 f303 	lsr.w	r3, r1, r3
 800042c:	4091      	lsls	r1, r2
 800042e:	4301      	orrs	r1, r0
 8000430:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000434:	fa1f fe8c 	uxth.w	lr, ip
 8000438:	fbb3 f0f7 	udiv	r0, r3, r7
 800043c:	fb07 3610 	mls	r6, r7, r0, r3
 8000440:	0c0b      	lsrs	r3, r1, #16
 8000442:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000446:	fb00 f60e 	mul.w	r6, r0, lr
 800044a:	429e      	cmp	r6, r3
 800044c:	fa04 f402 	lsl.w	r4, r4, r2
 8000450:	d908      	bls.n	8000464 <__udivmoddi4+0x260>
 8000452:	eb1c 0303 	adds.w	r3, ip, r3
 8000456:	f100 38ff 	add.w	r8, r0, #4294967295
 800045a:	d22f      	bcs.n	80004bc <__udivmoddi4+0x2b8>
 800045c:	429e      	cmp	r6, r3
 800045e:	d92d      	bls.n	80004bc <__udivmoddi4+0x2b8>
 8000460:	3802      	subs	r0, #2
 8000462:	4463      	add	r3, ip
 8000464:	1b9b      	subs	r3, r3, r6
 8000466:	b289      	uxth	r1, r1
 8000468:	fbb3 f6f7 	udiv	r6, r3, r7
 800046c:	fb07 3316 	mls	r3, r7, r6, r3
 8000470:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000474:	fb06 f30e 	mul.w	r3, r6, lr
 8000478:	428b      	cmp	r3, r1
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x28a>
 800047c:	eb1c 0101 	adds.w	r1, ip, r1
 8000480:	f106 38ff 	add.w	r8, r6, #4294967295
 8000484:	d216      	bcs.n	80004b4 <__udivmoddi4+0x2b0>
 8000486:	428b      	cmp	r3, r1
 8000488:	d914      	bls.n	80004b4 <__udivmoddi4+0x2b0>
 800048a:	3e02      	subs	r6, #2
 800048c:	4461      	add	r1, ip
 800048e:	1ac9      	subs	r1, r1, r3
 8000490:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000494:	e738      	b.n	8000308 <__udivmoddi4+0x104>
 8000496:	462e      	mov	r6, r5
 8000498:	4628      	mov	r0, r5
 800049a:	e705      	b.n	80002a8 <__udivmoddi4+0xa4>
 800049c:	4606      	mov	r6, r0
 800049e:	e6e3      	b.n	8000268 <__udivmoddi4+0x64>
 80004a0:	4618      	mov	r0, r3
 80004a2:	e6f8      	b.n	8000296 <__udivmoddi4+0x92>
 80004a4:	454b      	cmp	r3, r9
 80004a6:	d2a9      	bcs.n	80003fc <__udivmoddi4+0x1f8>
 80004a8:	ebb9 0802 	subs.w	r8, r9, r2
 80004ac:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b0:	3801      	subs	r0, #1
 80004b2:	e7a3      	b.n	80003fc <__udivmoddi4+0x1f8>
 80004b4:	4646      	mov	r6, r8
 80004b6:	e7ea      	b.n	800048e <__udivmoddi4+0x28a>
 80004b8:	4620      	mov	r0, r4
 80004ba:	e794      	b.n	80003e6 <__udivmoddi4+0x1e2>
 80004bc:	4640      	mov	r0, r8
 80004be:	e7d1      	b.n	8000464 <__udivmoddi4+0x260>
 80004c0:	46d0      	mov	r8, sl
 80004c2:	e77b      	b.n	80003bc <__udivmoddi4+0x1b8>
 80004c4:	3b02      	subs	r3, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	e732      	b.n	8000330 <__udivmoddi4+0x12c>
 80004ca:	4630      	mov	r0, r6
 80004cc:	e709      	b.n	80002e2 <__udivmoddi4+0xde>
 80004ce:	4464      	add	r4, ip
 80004d0:	3802      	subs	r0, #2
 80004d2:	e742      	b.n	800035a <__udivmoddi4+0x156>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b086      	sub	sp, #24
 80004dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80004de:	463b      	mov	r3, r7
 80004e0:	2200      	movs	r2, #0
 80004e2:	601a      	str	r2, [r3, #0]
 80004e4:	605a      	str	r2, [r3, #4]
 80004e6:	609a      	str	r2, [r3, #8]
 80004e8:	60da      	str	r2, [r3, #12]
 80004ea:	611a      	str	r2, [r3, #16]
 80004ec:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80004ee:	4b29      	ldr	r3, [pc, #164]	; (8000594 <MX_ADC1_Init+0xbc>)
 80004f0:	4a29      	ldr	r2, [pc, #164]	; (8000598 <MX_ADC1_Init+0xc0>)
 80004f2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80004f4:	4b27      	ldr	r3, [pc, #156]	; (8000594 <MX_ADC1_Init+0xbc>)
 80004f6:	2200      	movs	r2, #0
 80004f8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80004fa:	4b26      	ldr	r3, [pc, #152]	; (8000594 <MX_ADC1_Init+0xbc>)
 80004fc:	2200      	movs	r2, #0
 80004fe:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000500:	4b24      	ldr	r3, [pc, #144]	; (8000594 <MX_ADC1_Init+0xbc>)
 8000502:	2200      	movs	r2, #0
 8000504:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000506:	4b23      	ldr	r3, [pc, #140]	; (8000594 <MX_ADC1_Init+0xbc>)
 8000508:	2200      	movs	r2, #0
 800050a:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800050c:	4b21      	ldr	r3, [pc, #132]	; (8000594 <MX_ADC1_Init+0xbc>)
 800050e:	2204      	movs	r2, #4
 8000510:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000512:	4b20      	ldr	r3, [pc, #128]	; (8000594 <MX_ADC1_Init+0xbc>)
 8000514:	2200      	movs	r2, #0
 8000516:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000518:	4b1e      	ldr	r3, [pc, #120]	; (8000594 <MX_ADC1_Init+0xbc>)
 800051a:	2200      	movs	r2, #0
 800051c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800051e:	4b1d      	ldr	r3, [pc, #116]	; (8000594 <MX_ADC1_Init+0xbc>)
 8000520:	2201      	movs	r2, #1
 8000522:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000524:	4b1b      	ldr	r3, [pc, #108]	; (8000594 <MX_ADC1_Init+0xbc>)
 8000526:	2200      	movs	r2, #0
 8000528:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800052c:	4b19      	ldr	r3, [pc, #100]	; (8000594 <MX_ADC1_Init+0xbc>)
 800052e:	2200      	movs	r2, #0
 8000530:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000532:	4b18      	ldr	r3, [pc, #96]	; (8000594 <MX_ADC1_Init+0xbc>)
 8000534:	2200      	movs	r2, #0
 8000536:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000538:	4b16      	ldr	r3, [pc, #88]	; (8000594 <MX_ADC1_Init+0xbc>)
 800053a:	2200      	movs	r2, #0
 800053c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000540:	4b14      	ldr	r3, [pc, #80]	; (8000594 <MX_ADC1_Init+0xbc>)
 8000542:	2200      	movs	r2, #0
 8000544:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000546:	4b13      	ldr	r3, [pc, #76]	; (8000594 <MX_ADC1_Init+0xbc>)
 8000548:	2200      	movs	r2, #0
 800054a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800054e:	4811      	ldr	r0, [pc, #68]	; (8000594 <MX_ADC1_Init+0xbc>)
 8000550:	f000 ff24 	bl	800139c <HAL_ADC_Init>
 8000554:	4603      	mov	r3, r0
 8000556:	2b00      	cmp	r3, #0
 8000558:	d001      	beq.n	800055e <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 800055a:	f000 fb00 	bl	8000b5e <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800055e:	4b0f      	ldr	r3, [pc, #60]	; (800059c <MX_ADC1_Init+0xc4>)
 8000560:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000562:	2306      	movs	r3, #6
 8000564:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000566:	2300      	movs	r3, #0
 8000568:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800056a:	237f      	movs	r3, #127	; 0x7f
 800056c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800056e:	2304      	movs	r3, #4
 8000570:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000572:	2300      	movs	r3, #0
 8000574:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000576:	463b      	mov	r3, r7
 8000578:	4619      	mov	r1, r3
 800057a:	4806      	ldr	r0, [pc, #24]	; (8000594 <MX_ADC1_Init+0xbc>)
 800057c:	f001 f85a 	bl	8001634 <HAL_ADC_ConfigChannel>
 8000580:	4603      	mov	r3, r0
 8000582:	2b00      	cmp	r3, #0
 8000584:	d001      	beq.n	800058a <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000586:	f000 faea 	bl	8000b5e <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800058a:	bf00      	nop
 800058c:	3718      	adds	r7, #24
 800058e:	46bd      	mov	sp, r7
 8000590:	bd80      	pop	{r7, pc}
 8000592:	bf00      	nop
 8000594:	20000028 	.word	0x20000028
 8000598:	50040000 	.word	0x50040000
 800059c:	04300002 	.word	0x04300002

080005a0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b0a4      	sub	sp, #144	; 0x90
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005a8:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80005ac:	2200      	movs	r2, #0
 80005ae:	601a      	str	r2, [r3, #0]
 80005b0:	605a      	str	r2, [r3, #4]
 80005b2:	609a      	str	r2, [r3, #8]
 80005b4:	60da      	str	r2, [r3, #12]
 80005b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80005b8:	f107 0314 	add.w	r3, r7, #20
 80005bc:	2268      	movs	r2, #104	; 0x68
 80005be:	2100      	movs	r1, #0
 80005c0:	4618      	mov	r0, r3
 80005c2:	f004 faa3 	bl	8004b0c <memset>
  if(adcHandle->Instance==ADC1)
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	4a26      	ldr	r2, [pc, #152]	; (8000664 <HAL_ADC_MspInit+0xc4>)
 80005cc:	4293      	cmp	r3, r2
 80005ce:	d144      	bne.n	800065a <HAL_ADC_MspInit+0xba>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80005d0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80005d4:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80005d6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80005da:	673b      	str	r3, [r7, #112]	; 0x70
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 80005dc:	2302      	movs	r3, #2
 80005de:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80005e0:	2301      	movs	r3, #1
 80005e2:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 80005e4:	2308      	movs	r3, #8
 80005e6:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80005e8:	2307      	movs	r3, #7
 80005ea:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80005ec:	2302      	movs	r3, #2
 80005ee:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80005f0:	2302      	movs	r3, #2
 80005f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80005f4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80005f8:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005fa:	f107 0314 	add.w	r3, r7, #20
 80005fe:	4618      	mov	r0, r3
 8000600:	f002 fd40 	bl	8003084 <HAL_RCCEx_PeriphCLKConfig>
 8000604:	4603      	mov	r3, r0
 8000606:	2b00      	cmp	r3, #0
 8000608:	d001      	beq.n	800060e <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 800060a:	f000 faa8 	bl	8000b5e <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800060e:	4b16      	ldr	r3, [pc, #88]	; (8000668 <HAL_ADC_MspInit+0xc8>)
 8000610:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000612:	4a15      	ldr	r2, [pc, #84]	; (8000668 <HAL_ADC_MspInit+0xc8>)
 8000614:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000618:	64d3      	str	r3, [r2, #76]	; 0x4c
 800061a:	4b13      	ldr	r3, [pc, #76]	; (8000668 <HAL_ADC_MspInit+0xc8>)
 800061c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800061e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000622:	613b      	str	r3, [r7, #16]
 8000624:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000626:	4b10      	ldr	r3, [pc, #64]	; (8000668 <HAL_ADC_MspInit+0xc8>)
 8000628:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800062a:	4a0f      	ldr	r2, [pc, #60]	; (8000668 <HAL_ADC_MspInit+0xc8>)
 800062c:	f043 0304 	orr.w	r3, r3, #4
 8000630:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000632:	4b0d      	ldr	r3, [pc, #52]	; (8000668 <HAL_ADC_MspInit+0xc8>)
 8000634:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000636:	f003 0304 	and.w	r3, r3, #4
 800063a:	60fb      	str	r3, [r7, #12]
 800063c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800063e:	2301      	movs	r3, #1
 8000640:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000642:	230b      	movs	r3, #11
 8000644:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000648:	2300      	movs	r3, #0
 800064a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800064e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000652:	4619      	mov	r1, r3
 8000654:	4805      	ldr	r0, [pc, #20]	; (800066c <HAL_ADC_MspInit+0xcc>)
 8000656:	f001 fccf 	bl	8001ff8 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800065a:	bf00      	nop
 800065c:	3790      	adds	r7, #144	; 0x90
 800065e:	46bd      	mov	sp, r7
 8000660:	bd80      	pop	{r7, pc}
 8000662:	bf00      	nop
 8000664:	50040000 	.word	0x50040000
 8000668:	40021000 	.word	0x40021000
 800066c:	48000800 	.word	0x48000800

08000670 <decode_pc_command>:
/*- COMANDOS ---------------------------------------------------------*/
#define READ_POT 1;
#define WRITE_LED 2;

int decode_pc_command(device *dev)
{
 8000670:	b480      	push	{r7}
 8000672:	b083      	sub	sp, #12
 8000674:	af00      	add	r7, sp, #0
 8000676:	6078      	str	r0, [r7, #4]
	if(dev->modo==SLAVE)
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	781b      	ldrb	r3, [r3, #0]
 800067c:	2b01      	cmp	r3, #1
 800067e:	d102      	bne.n	8000686 <decode_pc_command+0x16>
	{
		return -1;
 8000680:	f04f 33ff 	mov.w	r3, #4294967295
 8000684:	e000      	b.n	8000688 <decode_pc_command+0x18>
	}
	else
	{
		return 23;
 8000686:	2317      	movs	r3, #23
	}
}
 8000688:	4618      	mov	r0, r3
 800068a:	370c      	adds	r7, #12
 800068c:	46bd      	mov	sp, r7
 800068e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000692:	4770      	bx	lr

08000694 <device_if_init>:

#include <stdlib.h>
#include "device.h"

void device_if_init( device *device_gc, int set_id)
{
 8000694:	b480      	push	{r7}
 8000696:	b083      	sub	sp, #12
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]
 800069c:	6039      	str	r1, [r7, #0]
	if(set_id==0)
 800069e:	683b      	ldr	r3, [r7, #0]
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d103      	bne.n	80006ac <device_if_init+0x18>
	{
		device_gc->modo = MASTER;
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	2200      	movs	r2, #0
 80006a8:	701a      	strb	r2, [r3, #0]
 80006aa:	e002      	b.n	80006b2 <device_if_init+0x1e>
	}
	else
	{
		device_gc->modo = SLAVE;
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	2201      	movs	r2, #1
 80006b0:	701a      	strb	r2, [r3, #0]
	}
	device_gc->id = set_id;
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	683a      	ldr	r2, [r7, #0]
 80006b6:	605a      	str	r2, [r3, #4]
}
 80006b8:	bf00      	nop
 80006ba:	370c      	adds	r7, #12
 80006bc:	46bd      	mov	sp, r7
 80006be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c2:	4770      	bx	lr

080006c4 <dip_switch_ports_init>:
#include "dip_switch.h"
#include "gpio_if.h"


void dip_switch_ports_init(dip_switch *dip, t_gpio_if *gpio_1, t_gpio_if *gpio_2, t_gpio_if *gpio_3, t_gpio_if *gpio_4)
{
 80006c4:	b480      	push	{r7}
 80006c6:	b085      	sub	sp, #20
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	60f8      	str	r0, [r7, #12]
 80006cc:	60b9      	str	r1, [r7, #8]
 80006ce:	607a      	str	r2, [r7, #4]
 80006d0:	603b      	str	r3, [r7, #0]
	dip->sw_1 = gpio_1;
 80006d2:	68fb      	ldr	r3, [r7, #12]
 80006d4:	68ba      	ldr	r2, [r7, #8]
 80006d6:	601a      	str	r2, [r3, #0]
	dip->sw_2 = gpio_2;
 80006d8:	68fb      	ldr	r3, [r7, #12]
 80006da:	687a      	ldr	r2, [r7, #4]
 80006dc:	605a      	str	r2, [r3, #4]
	dip->sw_3 = gpio_3;
 80006de:	68fb      	ldr	r3, [r7, #12]
 80006e0:	683a      	ldr	r2, [r7, #0]
 80006e2:	609a      	str	r2, [r3, #8]
	dip->sw_4 = gpio_4;
 80006e4:	68fb      	ldr	r3, [r7, #12]
 80006e6:	69ba      	ldr	r2, [r7, #24]
 80006e8:	60da      	str	r2, [r3, #12]
}
 80006ea:	bf00      	nop
 80006ec:	3714      	adds	r7, #20
 80006ee:	46bd      	mov	sp, r7
 80006f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f4:	4770      	bx	lr

080006f6 <get_dip_value>:

int get_dip_value(dip_switch *dip)
{
 80006f6:	b580      	push	{r7, lr}
 80006f8:	b084      	sub	sp, #16
 80006fa:	af00      	add	r7, sp, #0
 80006fc:	6078      	str	r0, [r7, #4]
	int val=0;
 80006fe:	2300      	movs	r3, #0
 8000700:	60fb      	str	r3, [r7, #12]
	if(gpio_if_get(dip->sw_1)==GPIO_IF_SET)
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	4618      	mov	r0, r3
 8000708:	f000 f911 	bl	800092e <gpio_if_get>
 800070c:	4603      	mov	r3, r0
 800070e:	2b01      	cmp	r3, #1
 8000710:	d102      	bne.n	8000718 <get_dip_value+0x22>
	{
		val = val + 1;
 8000712:	68fb      	ldr	r3, [r7, #12]
 8000714:	3301      	adds	r3, #1
 8000716:	60fb      	str	r3, [r7, #12]
	}
	if(gpio_if_get(dip->sw_2)==GPIO_IF_SET)
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	685b      	ldr	r3, [r3, #4]
 800071c:	4618      	mov	r0, r3
 800071e:	f000 f906 	bl	800092e <gpio_if_get>
 8000722:	4603      	mov	r3, r0
 8000724:	2b01      	cmp	r3, #1
 8000726:	d102      	bne.n	800072e <get_dip_value+0x38>
	{
		val = val + 2;
 8000728:	68fb      	ldr	r3, [r7, #12]
 800072a:	3302      	adds	r3, #2
 800072c:	60fb      	str	r3, [r7, #12]
	}
	if(gpio_if_get(dip->sw_3)==GPIO_IF_SET)
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	689b      	ldr	r3, [r3, #8]
 8000732:	4618      	mov	r0, r3
 8000734:	f000 f8fb 	bl	800092e <gpio_if_get>
 8000738:	4603      	mov	r3, r0
 800073a:	2b01      	cmp	r3, #1
 800073c:	d102      	bne.n	8000744 <get_dip_value+0x4e>
	{
		val = val + 4;
 800073e:	68fb      	ldr	r3, [r7, #12]
 8000740:	3304      	adds	r3, #4
 8000742:	60fb      	str	r3, [r7, #12]
	}
	if(gpio_if_get(dip->sw_4)==GPIO_IF_SET)
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	68db      	ldr	r3, [r3, #12]
 8000748:	4618      	mov	r0, r3
 800074a:	f000 f8f0 	bl	800092e <gpio_if_get>
 800074e:	4603      	mov	r3, r0
 8000750:	2b01      	cmp	r3, #1
 8000752:	d102      	bne.n	800075a <get_dip_value+0x64>
	{
		val = val + 8;
 8000754:	68fb      	ldr	r3, [r7, #12]
 8000756:	3308      	adds	r3, #8
 8000758:	60fb      	str	r3, [r7, #12]
	}
	return val;
 800075a:	68fb      	ldr	r3, [r7, #12]
}
 800075c:	4618      	mov	r0, r3
 800075e:	3710      	adds	r7, #16
 8000760:	46bd      	mov	sp, r7
 8000762:	bd80      	pop	{r7, pc}

08000764 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b08a      	sub	sp, #40	; 0x28
 8000768:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800076a:	f107 0314 	add.w	r3, r7, #20
 800076e:	2200      	movs	r2, #0
 8000770:	601a      	str	r2, [r3, #0]
 8000772:	605a      	str	r2, [r3, #4]
 8000774:	609a      	str	r2, [r3, #8]
 8000776:	60da      	str	r2, [r3, #12]
 8000778:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800077a:	4b2d      	ldr	r3, [pc, #180]	; (8000830 <MX_GPIO_Init+0xcc>)
 800077c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800077e:	4a2c      	ldr	r2, [pc, #176]	; (8000830 <MX_GPIO_Init+0xcc>)
 8000780:	f043 0304 	orr.w	r3, r3, #4
 8000784:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000786:	4b2a      	ldr	r3, [pc, #168]	; (8000830 <MX_GPIO_Init+0xcc>)
 8000788:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800078a:	f003 0304 	and.w	r3, r3, #4
 800078e:	613b      	str	r3, [r7, #16]
 8000790:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000792:	4b27      	ldr	r3, [pc, #156]	; (8000830 <MX_GPIO_Init+0xcc>)
 8000794:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000796:	4a26      	ldr	r2, [pc, #152]	; (8000830 <MX_GPIO_Init+0xcc>)
 8000798:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800079c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800079e:	4b24      	ldr	r3, [pc, #144]	; (8000830 <MX_GPIO_Init+0xcc>)
 80007a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007a6:	60fb      	str	r3, [r7, #12]
 80007a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007aa:	4b21      	ldr	r3, [pc, #132]	; (8000830 <MX_GPIO_Init+0xcc>)
 80007ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ae:	4a20      	ldr	r2, [pc, #128]	; (8000830 <MX_GPIO_Init+0xcc>)
 80007b0:	f043 0301 	orr.w	r3, r3, #1
 80007b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007b6:	4b1e      	ldr	r3, [pc, #120]	; (8000830 <MX_GPIO_Init+0xcc>)
 80007b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ba:	f003 0301 	and.w	r3, r3, #1
 80007be:	60bb      	str	r3, [r7, #8]
 80007c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007c2:	4b1b      	ldr	r3, [pc, #108]	; (8000830 <MX_GPIO_Init+0xcc>)
 80007c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007c6:	4a1a      	ldr	r2, [pc, #104]	; (8000830 <MX_GPIO_Init+0xcc>)
 80007c8:	f043 0302 	orr.w	r3, r3, #2
 80007cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007ce:	4b18      	ldr	r3, [pc, #96]	; (8000830 <MX_GPIO_Init+0xcc>)
 80007d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007d2:	f003 0302 	and.w	r3, r3, #2
 80007d6:	607b      	str	r3, [r7, #4]
 80007d8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007da:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80007e0:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80007e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e6:	2300      	movs	r3, #0
 80007e8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007ea:	f107 0314 	add.w	r3, r7, #20
 80007ee:	4619      	mov	r1, r3
 80007f0:	4810      	ldr	r0, [pc, #64]	; (8000834 <MX_GPIO_Init+0xd0>)
 80007f2:	f001 fc01 	bl	8001ff8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = SW4_Pin|SW3_Pin|SW2_Pin;
 80007f6:	23e0      	movs	r3, #224	; 0xe0
 80007f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007fa:	2300      	movs	r3, #0
 80007fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fe:	2300      	movs	r3, #0
 8000800:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000802:	f107 0314 	add.w	r3, r7, #20
 8000806:	4619      	mov	r1, r3
 8000808:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800080c:	f001 fbf4 	bl	8001ff8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SW1_Pin;
 8000810:	2340      	movs	r3, #64	; 0x40
 8000812:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000814:	2300      	movs	r3, #0
 8000816:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000818:	2300      	movs	r3, #0
 800081a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SW1_GPIO_Port, &GPIO_InitStruct);
 800081c:	f107 0314 	add.w	r3, r7, #20
 8000820:	4619      	mov	r1, r3
 8000822:	4805      	ldr	r0, [pc, #20]	; (8000838 <MX_GPIO_Init+0xd4>)
 8000824:	f001 fbe8 	bl	8001ff8 <HAL_GPIO_Init>

}
 8000828:	bf00      	nop
 800082a:	3728      	adds	r7, #40	; 0x28
 800082c:	46bd      	mov	sp, r7
 800082e:	bd80      	pop	{r7, pc}
 8000830:	40021000 	.word	0x40021000
 8000834:	48000800 	.word	0x48000800
 8000838:	48000400 	.word	0x48000400

0800083c <gpio_if_init>:
/*- PUBLIC_API ---------------------------------------------------------------*/
/*
 * API: gpio_if_init
 */
void gpio_if_init( t_gpio_if *gpio_if, t_gpio_active active, t_gpio_pin *pin, t_gpio_state initial_state )
{
 800083c:	b480      	push	{r7}
 800083e:	b085      	sub	sp, #20
 8000840:	af00      	add	r7, sp, #0
 8000842:	60f8      	str	r0, [r7, #12]
 8000844:	607a      	str	r2, [r7, #4]
 8000846:	461a      	mov	r2, r3
 8000848:	460b      	mov	r3, r1
 800084a:	72fb      	strb	r3, [r7, #11]
 800084c:	4613      	mov	r3, r2
 800084e:	72bb      	strb	r3, [r7, #10]
  gpio_if->active = active;
 8000850:	68fb      	ldr	r3, [r7, #12]
 8000852:	7afa      	ldrb	r2, [r7, #11]
 8000854:	701a      	strb	r2, [r3, #0]
  gpio_if->pin = pin;
 8000856:	68fb      	ldr	r3, [r7, #12]
 8000858:	687a      	ldr	r2, [r7, #4]
 800085a:	605a      	str	r2, [r3, #4]
  gpio_if->initial_state = initial_state;
 800085c:	68fb      	ldr	r3, [r7, #12]
 800085e:	7aba      	ldrb	r2, [r7, #10]
 8000860:	721a      	strb	r2, [r3, #8]
}
 8000862:	bf00      	nop
 8000864:	3714      	adds	r7, #20
 8000866:	46bd      	mov	sp, r7
 8000868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086c:	4770      	bx	lr

0800086e <gpio_if_open>:

/*
 * API: gpio_if_open
 */
t_gpio_if_status gpio_if_open(t_gpio_if *gpio_if)
{
 800086e:	b580      	push	{r7, lr}
 8000870:	b082      	sub	sp, #8
 8000872:	af00      	add	r7, sp, #0
 8000874:	6078      	str	r0, [r7, #4]
  /* Sanity check */
  if (gpio_if->pin == NULL)
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	685b      	ldr	r3, [r3, #4]
 800087a:	2b00      	cmp	r3, #0
 800087c:	d101      	bne.n	8000882 <gpio_if_open+0x14>
  {
    return GPIO_IF_OPEN_FAILURE;
 800087e:	2301      	movs	r3, #1
 8000880:	e00f      	b.n	80008a2 <gpio_if_open+0x34>
  }

  /* Init variables */

  /* Start peripherals */
  if (gpio_if->initial_state == GPIO_IF_SET)
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	7a1b      	ldrb	r3, [r3, #8]
 8000886:	2b01      	cmp	r3, #1
 8000888:	d103      	bne.n	8000892 <gpio_if_open+0x24>
  {
    gpio_if_set(gpio_if);
 800088a:	6878      	ldr	r0, [r7, #4]
 800088c:	f000 f80d 	bl	80008aa <gpio_if_set>
 8000890:	e006      	b.n	80008a0 <gpio_if_open+0x32>
  }
  else if (gpio_if->initial_state == GPIO_IF_CLEAR)
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	7a1b      	ldrb	r3, [r3, #8]
 8000896:	2b00      	cmp	r3, #0
 8000898:	d102      	bne.n	80008a0 <gpio_if_open+0x32>
  {
    gpio_if_clear(gpio_if);
 800089a:	6878      	ldr	r0, [r7, #4]
 800089c:	f000 f826 	bl	80008ec <gpio_if_clear>
  else
  {
    /* Nothing to do */
  }

  return GPIO_IF_SUCCESS;
 80008a0:	2300      	movs	r3, #0
}
 80008a2:	4618      	mov	r0, r3
 80008a4:	3708      	adds	r7, #8
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}

080008aa <gpio_if_set>:

/*
 * API: gpio_if_set
 */
void gpio_if_set(t_gpio_if *gpio_if)
{
 80008aa:	b580      	push	{r7, lr}
 80008ac:	b082      	sub	sp, #8
 80008ae:	af00      	add	r7, sp, #0
 80008b0:	6078      	str	r0, [r7, #4]
  if (gpio_if->active == ACTIVE_HIGH)
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	781b      	ldrb	r3, [r3, #0]
 80008b6:	2b01      	cmp	r3, #1
 80008b8:	d10a      	bne.n	80008d0 <gpio_if_set+0x26>
  {
    HAL_GPIO_WritePin(gpio_if->pin->port, gpio_if->pin->pin, GPIO_PIN_SET);
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	685b      	ldr	r3, [r3, #4]
 80008be:	6818      	ldr	r0, [r3, #0]
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	685b      	ldr	r3, [r3, #4]
 80008c4:	889b      	ldrh	r3, [r3, #4]
 80008c6:	2201      	movs	r2, #1
 80008c8:	4619      	mov	r1, r3
 80008ca:	f001 fd27 	bl	800231c <HAL_GPIO_WritePin>
  }
  else
  {
    HAL_GPIO_WritePin(gpio_if->pin->port, gpio_if->pin->pin, GPIO_PIN_RESET);
  }
}
 80008ce:	e009      	b.n	80008e4 <gpio_if_set+0x3a>
    HAL_GPIO_WritePin(gpio_if->pin->port, gpio_if->pin->pin, GPIO_PIN_RESET);
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	685b      	ldr	r3, [r3, #4]
 80008d4:	6818      	ldr	r0, [r3, #0]
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	685b      	ldr	r3, [r3, #4]
 80008da:	889b      	ldrh	r3, [r3, #4]
 80008dc:	2200      	movs	r2, #0
 80008de:	4619      	mov	r1, r3
 80008e0:	f001 fd1c 	bl	800231c <HAL_GPIO_WritePin>
}
 80008e4:	bf00      	nop
 80008e6:	3708      	adds	r7, #8
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bd80      	pop	{r7, pc}

080008ec <gpio_if_clear>:

/*
 * API: gpio_if_clear
 */
void gpio_if_clear(t_gpio_if *gpio_if)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b082      	sub	sp, #8
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
  if (gpio_if->active == ACTIVE_HIGH)
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	781b      	ldrb	r3, [r3, #0]
 80008f8:	2b01      	cmp	r3, #1
 80008fa:	d10a      	bne.n	8000912 <gpio_if_clear+0x26>
  {
    HAL_GPIO_WritePin(gpio_if->pin->port, gpio_if->pin->pin, GPIO_PIN_RESET);
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	685b      	ldr	r3, [r3, #4]
 8000900:	6818      	ldr	r0, [r3, #0]
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	685b      	ldr	r3, [r3, #4]
 8000906:	889b      	ldrh	r3, [r3, #4]
 8000908:	2200      	movs	r2, #0
 800090a:	4619      	mov	r1, r3
 800090c:	f001 fd06 	bl	800231c <HAL_GPIO_WritePin>
  }
  else
  {
    HAL_GPIO_WritePin(gpio_if->pin->port, gpio_if->pin->pin, GPIO_PIN_SET);
  }
}
 8000910:	e009      	b.n	8000926 <gpio_if_clear+0x3a>
    HAL_GPIO_WritePin(gpio_if->pin->port, gpio_if->pin->pin, GPIO_PIN_SET);
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	685b      	ldr	r3, [r3, #4]
 8000916:	6818      	ldr	r0, [r3, #0]
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	685b      	ldr	r3, [r3, #4]
 800091c:	889b      	ldrh	r3, [r3, #4]
 800091e:	2201      	movs	r2, #1
 8000920:	4619      	mov	r1, r3
 8000922:	f001 fcfb 	bl	800231c <HAL_GPIO_WritePin>
}
 8000926:	bf00      	nop
 8000928:	3708      	adds	r7, #8
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}

0800092e <gpio_if_get>:

/*
 * API: gpio_if_get
 */
t_gpio_state gpio_if_get(t_gpio_if *gpio_if)
{
 800092e:	b580      	push	{r7, lr}
 8000930:	b082      	sub	sp, #8
 8000932:	af00      	add	r7, sp, #0
 8000934:	6078      	str	r0, [r7, #4]
  if (gpio_if->active == ACTIVE_HIGH)
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	781b      	ldrb	r3, [r3, #0]
 800093a:	2b01      	cmp	r3, #1
 800093c:	d110      	bne.n	8000960 <gpio_if_get+0x32>
  {
    if (HAL_GPIO_ReadPin(gpio_if->pin->port, gpio_if->pin->pin) == GPIO_PIN_SET)
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	685b      	ldr	r3, [r3, #4]
 8000942:	681a      	ldr	r2, [r3, #0]
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	685b      	ldr	r3, [r3, #4]
 8000948:	889b      	ldrh	r3, [r3, #4]
 800094a:	4619      	mov	r1, r3
 800094c:	4610      	mov	r0, r2
 800094e:	f001 fccd 	bl	80022ec <HAL_GPIO_ReadPin>
 8000952:	4603      	mov	r3, r0
 8000954:	2b01      	cmp	r3, #1
 8000956:	d101      	bne.n	800095c <gpio_if_get+0x2e>
    {
      return GPIO_IF_SET;
 8000958:	2301      	movs	r3, #1
 800095a:	e011      	b.n	8000980 <gpio_if_get+0x52>
    }
    else
    {
      return GPIO_IF_CLEAR;
 800095c:	2300      	movs	r3, #0
 800095e:	e00f      	b.n	8000980 <gpio_if_get+0x52>
    }
  }
  else
  {
    if (HAL_GPIO_ReadPin(gpio_if->pin->port, gpio_if->pin->pin) == GPIO_PIN_SET)
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	685b      	ldr	r3, [r3, #4]
 8000964:	681a      	ldr	r2, [r3, #0]
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	685b      	ldr	r3, [r3, #4]
 800096a:	889b      	ldrh	r3, [r3, #4]
 800096c:	4619      	mov	r1, r3
 800096e:	4610      	mov	r0, r2
 8000970:	f001 fcbc 	bl	80022ec <HAL_GPIO_ReadPin>
 8000974:	4603      	mov	r3, r0
 8000976:	2b01      	cmp	r3, #1
 8000978:	d101      	bne.n	800097e <gpio_if_get+0x50>
    {
      return GPIO_IF_CLEAR;
 800097a:	2300      	movs	r3, #0
 800097c:	e000      	b.n	8000980 <gpio_if_get+0x52>
    }
    else
    {
      return GPIO_IF_SET;
 800097e:	2301      	movs	r3, #1
    }
  }
}
 8000980:	4618      	mov	r0, r3
 8000982:	3708      	adds	r7, #8
 8000984:	46bd      	mov	sp, r7
 8000986:	bd80      	pop	{r7, pc}

08000988 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000988:	b590      	push	{r4, r7, lr}
 800098a:	b09f      	sub	sp, #124	; 0x7c
 800098c:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */

	/*Incializacion de switches*/
	t_gpio_pin user_switch1_pin = {SW1_GPIO_Port, SW1_Pin};
 800098e:	4a47      	ldr	r2, [pc, #284]	; (8000aac <main+0x124>)
 8000990:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000994:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000998:	e883 0003 	stmia.w	r3, {r0, r1}
	t_gpio_if switch_1;
	t_gpio_pin user_switch2_pin = {SW2_GPIO_Port, SW2_Pin};
 800099c:	4a44      	ldr	r2, [pc, #272]	; (8000ab0 <main+0x128>)
 800099e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80009a2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80009a6:	e883 0003 	stmia.w	r3, {r0, r1}
	t_gpio_if switch_2;
	t_gpio_pin user_switch3_pin = {SW3_GPIO_Port, SW3_Pin};
 80009aa:	4a42      	ldr	r2, [pc, #264]	; (8000ab4 <main+0x12c>)
 80009ac:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80009b0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80009b4:	e883 0003 	stmia.w	r3, {r0, r1}
	t_gpio_if switch_3;
	t_gpio_pin user_switch4_pin = {SW4_GPIO_Port, SW4_Pin};
 80009b8:	4a3f      	ldr	r2, [pc, #252]	; (8000ab8 <main+0x130>)
 80009ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009be:	e892 0003 	ldmia.w	r2, {r0, r1}
 80009c2:	e883 0003 	stmia.w	r3, {r0, r1}
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009c6:	f000 facd 	bl	8000f64 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009ca:	f000 f877 	bl	8000abc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009ce:	f7ff fec9 	bl	8000764 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80009d2:	f000 fa11 	bl	8000df8 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80009d6:	f7ff fd7f 	bl	80004d8 <MX_ADC1_Init>
  MX_TIM1_Init();
 80009da:	f000 f925 	bl	8000c28 <MX_TIM1_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  gpio_if_init(&switch_1, ACTIVE_HIGH, &user_switch1_pin, GPIO_IF_INPUT);
 80009de:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80009e2:	f107 0054 	add.w	r0, r7, #84	; 0x54
 80009e6:	2302      	movs	r3, #2
 80009e8:	2101      	movs	r1, #1
 80009ea:	f7ff ff27 	bl	800083c <gpio_if_init>
  if (gpio_if_open(&switch_1) != GPIO_IF_SUCCESS)
 80009ee:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80009f2:	4618      	mov	r0, r3
 80009f4:	f7ff ff3b 	bl	800086e <gpio_if_open>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d001      	beq.n	8000a02 <main+0x7a>
    {
      Error_Handler();
 80009fe:	f000 f8ae 	bl	8000b5e <Error_Handler>
    }
  gpio_if_init(&switch_2, ACTIVE_HIGH, &user_switch2_pin, GPIO_IF_INPUT);
 8000a02:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8000a06:	f107 0040 	add.w	r0, r7, #64	; 0x40
 8000a0a:	2302      	movs	r3, #2
 8000a0c:	2101      	movs	r1, #1
 8000a0e:	f7ff ff15 	bl	800083c <gpio_if_init>
  if (gpio_if_open(&switch_2) != GPIO_IF_SUCCESS)
 8000a12:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000a16:	4618      	mov	r0, r3
 8000a18:	f7ff ff29 	bl	800086e <gpio_if_open>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d001      	beq.n	8000a26 <main+0x9e>
    {
      Error_Handler();
 8000a22:	f000 f89c 	bl	8000b5e <Error_Handler>
    }
  gpio_if_init(&switch_3, ACTIVE_HIGH, &user_switch3_pin, GPIO_IF_INPUT);
 8000a26:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8000a2a:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8000a2e:	2302      	movs	r3, #2
 8000a30:	2101      	movs	r1, #1
 8000a32:	f7ff ff03 	bl	800083c <gpio_if_init>
  if (gpio_if_open(&switch_3) != GPIO_IF_SUCCESS)
 8000a36:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	f7ff ff17 	bl	800086e <gpio_if_open>
 8000a40:	4603      	mov	r3, r0
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d001      	beq.n	8000a4a <main+0xc2>
    {
      Error_Handler();
 8000a46:	f000 f88a 	bl	8000b5e <Error_Handler>
    }
  gpio_if_init(&switch_4, ACTIVE_HIGH, &user_switch4_pin, GPIO_IF_INPUT);
 8000a4a:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8000a4e:	f107 0018 	add.w	r0, r7, #24
 8000a52:	2302      	movs	r3, #2
 8000a54:	2101      	movs	r1, #1
 8000a56:	f7ff fef1 	bl	800083c <gpio_if_init>
  if (gpio_if_open(&switch_4) != GPIO_IF_SUCCESS)
 8000a5a:	f107 0318 	add.w	r3, r7, #24
 8000a5e:	4618      	mov	r0, r3
 8000a60:	f7ff ff05 	bl	800086e <gpio_if_open>
 8000a64:	4603      	mov	r3, r0
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d001      	beq.n	8000a6e <main+0xe6>
    {
      Error_Handler();
 8000a6a:	f000 f878 	bl	8000b5e <Error_Handler>
    }


  dip_switch_ports_init(&this_dip, &switch_1, &switch_2, &switch_3, &switch_4);
 8000a6e:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 8000a72:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8000a76:	f107 0154 	add.w	r1, r7, #84	; 0x54
 8000a7a:	4638      	mov	r0, r7
 8000a7c:	f107 0318 	add.w	r3, r7, #24
 8000a80:	9300      	str	r3, [sp, #0]
 8000a82:	4623      	mov	r3, r4
 8000a84:	f7ff fe1e 	bl	80006c4 <dip_switch_ports_init>
  int dip_value = get_dip_value(&this_dip);
 8000a88:	463b      	mov	r3, r7
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	f7ff fe33 	bl	80006f6 <get_dip_value>
 8000a90:	66f8      	str	r0, [r7, #108]	; 0x6c
  device_if_init(&this_device, dip_value);
 8000a92:	f107 0310 	add.w	r3, r7, #16
 8000a96:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8000a98:	4618      	mov	r0, r3
 8000a9a:	f7ff fdfb 	bl	8000694 <device_if_init>
  int command = decode_pc_command(&this_device);
 8000a9e:	f107 0310 	add.w	r3, r7, #16
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	f7ff fde4 	bl	8000670 <decode_pc_command>
 8000aa8:	66b8      	str	r0, [r7, #104]	; 0x68

  while (1)
 8000aaa:	e7fe      	b.n	8000aaa <main+0x122>
 8000aac:	08004b34 	.word	0x08004b34
 8000ab0:	08004b3c 	.word	0x08004b3c
 8000ab4:	08004b44 	.word	0x08004b44
 8000ab8:	08004b4c 	.word	0x08004b4c

08000abc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b096      	sub	sp, #88	; 0x58
 8000ac0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ac2:	f107 0314 	add.w	r3, r7, #20
 8000ac6:	2244      	movs	r2, #68	; 0x44
 8000ac8:	2100      	movs	r1, #0
 8000aca:	4618      	mov	r0, r3
 8000acc:	f004 f81e 	bl	8004b0c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ad0:	463b      	mov	r3, r7
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	601a      	str	r2, [r3, #0]
 8000ad6:	605a      	str	r2, [r3, #4]
 8000ad8:	609a      	str	r2, [r3, #8]
 8000ada:	60da      	str	r2, [r3, #12]
 8000adc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000ade:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000ae2:	f001 fc41 	bl	8002368 <HAL_PWREx_ControlVoltageScaling>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d001      	beq.n	8000af0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000aec:	f000 f837 	bl	8000b5e <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000af0:	2302      	movs	r3, #2
 8000af2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000af4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000af8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000afa:	2340      	movs	r3, #64	; 0x40
 8000afc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000afe:	2302      	movs	r3, #2
 8000b00:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000b02:	2302      	movs	r3, #2
 8000b04:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000b06:	2301      	movs	r3, #1
 8000b08:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000b0a:	230a      	movs	r3, #10
 8000b0c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000b0e:	2307      	movs	r3, #7
 8000b10:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000b12:	2302      	movs	r3, #2
 8000b14:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000b16:	2302      	movs	r3, #2
 8000b18:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b1a:	f107 0314 	add.w	r3, r7, #20
 8000b1e:	4618      	mov	r0, r3
 8000b20:	f001 fc78 	bl	8002414 <HAL_RCC_OscConfig>
 8000b24:	4603      	mov	r3, r0
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d001      	beq.n	8000b2e <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000b2a:	f000 f818 	bl	8000b5e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b2e:	230f      	movs	r3, #15
 8000b30:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b32:	2303      	movs	r3, #3
 8000b34:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b36:	2300      	movs	r3, #0
 8000b38:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000b42:	463b      	mov	r3, r7
 8000b44:	2104      	movs	r1, #4
 8000b46:	4618      	mov	r0, r3
 8000b48:	f002 f878 	bl	8002c3c <HAL_RCC_ClockConfig>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d001      	beq.n	8000b56 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000b52:	f000 f804 	bl	8000b5e <Error_Handler>
  }
}
 8000b56:	bf00      	nop
 8000b58:	3758      	adds	r7, #88	; 0x58
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}

08000b5e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b5e:	b480      	push	{r7}
 8000b60:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b62:	b672      	cpsid	i
}
 8000b64:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b66:	e7fe      	b.n	8000b66 <Error_Handler+0x8>

08000b68 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	b083      	sub	sp, #12
 8000b6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b6e:	4b0f      	ldr	r3, [pc, #60]	; (8000bac <HAL_MspInit+0x44>)
 8000b70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b72:	4a0e      	ldr	r2, [pc, #56]	; (8000bac <HAL_MspInit+0x44>)
 8000b74:	f043 0301 	orr.w	r3, r3, #1
 8000b78:	6613      	str	r3, [r2, #96]	; 0x60
 8000b7a:	4b0c      	ldr	r3, [pc, #48]	; (8000bac <HAL_MspInit+0x44>)
 8000b7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b7e:	f003 0301 	and.w	r3, r3, #1
 8000b82:	607b      	str	r3, [r7, #4]
 8000b84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b86:	4b09      	ldr	r3, [pc, #36]	; (8000bac <HAL_MspInit+0x44>)
 8000b88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b8a:	4a08      	ldr	r2, [pc, #32]	; (8000bac <HAL_MspInit+0x44>)
 8000b8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b90:	6593      	str	r3, [r2, #88]	; 0x58
 8000b92:	4b06      	ldr	r3, [pc, #24]	; (8000bac <HAL_MspInit+0x44>)
 8000b94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b9a:	603b      	str	r3, [r7, #0]
 8000b9c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b9e:	bf00      	nop
 8000ba0:	370c      	adds	r7, #12
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop
 8000bac:	40021000 	.word	0x40021000

08000bb0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bb4:	e7fe      	b.n	8000bb4 <NMI_Handler+0x4>

08000bb6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bb6:	b480      	push	{r7}
 8000bb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bba:	e7fe      	b.n	8000bba <HardFault_Handler+0x4>

08000bbc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bc0:	e7fe      	b.n	8000bc0 <MemManage_Handler+0x4>

08000bc2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bc2:	b480      	push	{r7}
 8000bc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bc6:	e7fe      	b.n	8000bc6 <BusFault_Handler+0x4>

08000bc8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bcc:	e7fe      	b.n	8000bcc <UsageFault_Handler+0x4>

08000bce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bce:	b480      	push	{r7}
 8000bd0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bd2:	bf00      	nop
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bda:	4770      	bx	lr

08000bdc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000be0:	bf00      	nop
 8000be2:	46bd      	mov	sp, r7
 8000be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be8:	4770      	bx	lr

08000bea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bea:	b480      	push	{r7}
 8000bec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bee:	bf00      	nop
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf6:	4770      	bx	lr

08000bf8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bfc:	f000 fa0e 	bl	800101c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c00:	bf00      	nop
 8000c02:	bd80      	pop	{r7, pc}

08000c04 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000c08:	4b06      	ldr	r3, [pc, #24]	; (8000c24 <SystemInit+0x20>)
 8000c0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c0e:	4a05      	ldr	r2, [pc, #20]	; (8000c24 <SystemInit+0x20>)
 8000c10:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c14:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000c18:	bf00      	nop
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c20:	4770      	bx	lr
 8000c22:	bf00      	nop
 8000c24:	e000ed00 	.word	0xe000ed00

08000c28 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b096      	sub	sp, #88	; 0x58
 8000c2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c2e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000c32:	2200      	movs	r2, #0
 8000c34:	601a      	str	r2, [r3, #0]
 8000c36:	605a      	str	r2, [r3, #4]
 8000c38:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c3a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000c3e:	2200      	movs	r2, #0
 8000c40:	601a      	str	r2, [r3, #0]
 8000c42:	605a      	str	r2, [r3, #4]
 8000c44:	609a      	str	r2, [r3, #8]
 8000c46:	60da      	str	r2, [r3, #12]
 8000c48:	611a      	str	r2, [r3, #16]
 8000c4a:	615a      	str	r2, [r3, #20]
 8000c4c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000c4e:	1d3b      	adds	r3, r7, #4
 8000c50:	222c      	movs	r2, #44	; 0x2c
 8000c52:	2100      	movs	r1, #0
 8000c54:	4618      	mov	r0, r3
 8000c56:	f003 ff59 	bl	8004b0c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000c5a:	4b39      	ldr	r3, [pc, #228]	; (8000d40 <MX_TIM1_Init+0x118>)
 8000c5c:	4a39      	ldr	r2, [pc, #228]	; (8000d44 <MX_TIM1_Init+0x11c>)
 8000c5e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000c60:	4b37      	ldr	r3, [pc, #220]	; (8000d40 <MX_TIM1_Init+0x118>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c66:	4b36      	ldr	r3, [pc, #216]	; (8000d40 <MX_TIM1_Init+0x118>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000c6c:	4b34      	ldr	r3, [pc, #208]	; (8000d40 <MX_TIM1_Init+0x118>)
 8000c6e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c72:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c74:	4b32      	ldr	r3, [pc, #200]	; (8000d40 <MX_TIM1_Init+0x118>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000c7a:	4b31      	ldr	r3, [pc, #196]	; (8000d40 <MX_TIM1_Init+0x118>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c80:	4b2f      	ldr	r3, [pc, #188]	; (8000d40 <MX_TIM1_Init+0x118>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000c86:	482e      	ldr	r0, [pc, #184]	; (8000d40 <MX_TIM1_Init+0x118>)
 8000c88:	f002 fd5a 	bl	8003740 <HAL_TIM_PWM_Init>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d001      	beq.n	8000c96 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8000c92:	f7ff ff64 	bl	8000b5e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c96:	2300      	movs	r3, #0
 8000c98:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000ca2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000ca6:	4619      	mov	r1, r3
 8000ca8:	4825      	ldr	r0, [pc, #148]	; (8000d40 <MX_TIM1_Init+0x118>)
 8000caa:	f003 f9a1 	bl	8003ff0 <HAL_TIMEx_MasterConfigSynchronization>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d001      	beq.n	8000cb8 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000cb4:	f7ff ff53 	bl	8000b5e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000cb8:	2360      	movs	r3, #96	; 0x60
 8000cba:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000cd4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000cd8:	2200      	movs	r2, #0
 8000cda:	4619      	mov	r1, r3
 8000cdc:	4818      	ldr	r0, [pc, #96]	; (8000d40 <MX_TIM1_Init+0x118>)
 8000cde:	f002 fd87 	bl	80037f0 <HAL_TIM_PWM_ConfigChannel>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d001      	beq.n	8000cec <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000ce8:	f7ff ff39 	bl	8000b5e <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000cec:	2300      	movs	r3, #0
 8000cee:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000d00:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d04:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000d06:	2300      	movs	r3, #0
 8000d08:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000d0e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000d12:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000d14:	2300      	movs	r3, #0
 8000d16:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000d1c:	1d3b      	adds	r3, r7, #4
 8000d1e:	4619      	mov	r1, r3
 8000d20:	4807      	ldr	r0, [pc, #28]	; (8000d40 <MX_TIM1_Init+0x118>)
 8000d22:	f003 f9d3 	bl	80040cc <HAL_TIMEx_ConfigBreakDeadTime>
 8000d26:	4603      	mov	r3, r0
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d001      	beq.n	8000d30 <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 8000d2c:	f7ff ff17 	bl	8000b5e <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000d30:	4803      	ldr	r0, [pc, #12]	; (8000d40 <MX_TIM1_Init+0x118>)
 8000d32:	f000 f829 	bl	8000d88 <HAL_TIM_MspPostInit>

}
 8000d36:	bf00      	nop
 8000d38:	3758      	adds	r7, #88	; 0x58
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	20000090 	.word	0x20000090
 8000d44:	40012c00 	.word	0x40012c00

08000d48 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	b085      	sub	sp, #20
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	4a0a      	ldr	r2, [pc, #40]	; (8000d80 <HAL_TIM_PWM_MspInit+0x38>)
 8000d56:	4293      	cmp	r3, r2
 8000d58:	d10b      	bne.n	8000d72 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000d5a:	4b0a      	ldr	r3, [pc, #40]	; (8000d84 <HAL_TIM_PWM_MspInit+0x3c>)
 8000d5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d5e:	4a09      	ldr	r2, [pc, #36]	; (8000d84 <HAL_TIM_PWM_MspInit+0x3c>)
 8000d60:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000d64:	6613      	str	r3, [r2, #96]	; 0x60
 8000d66:	4b07      	ldr	r3, [pc, #28]	; (8000d84 <HAL_TIM_PWM_MspInit+0x3c>)
 8000d68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d6a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000d6e:	60fb      	str	r3, [r7, #12]
 8000d70:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8000d72:	bf00      	nop
 8000d74:	3714      	adds	r7, #20
 8000d76:	46bd      	mov	sp, r7
 8000d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7c:	4770      	bx	lr
 8000d7e:	bf00      	nop
 8000d80:	40012c00 	.word	0x40012c00
 8000d84:	40021000 	.word	0x40021000

08000d88 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b088      	sub	sp, #32
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d90:	f107 030c 	add.w	r3, r7, #12
 8000d94:	2200      	movs	r2, #0
 8000d96:	601a      	str	r2, [r3, #0]
 8000d98:	605a      	str	r2, [r3, #4]
 8000d9a:	609a      	str	r2, [r3, #8]
 8000d9c:	60da      	str	r2, [r3, #12]
 8000d9e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	4a12      	ldr	r2, [pc, #72]	; (8000df0 <HAL_TIM_MspPostInit+0x68>)
 8000da6:	4293      	cmp	r3, r2
 8000da8:	d11d      	bne.n	8000de6 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000daa:	4b12      	ldr	r3, [pc, #72]	; (8000df4 <HAL_TIM_MspPostInit+0x6c>)
 8000dac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dae:	4a11      	ldr	r2, [pc, #68]	; (8000df4 <HAL_TIM_MspPostInit+0x6c>)
 8000db0:	f043 0301 	orr.w	r3, r3, #1
 8000db4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000db6:	4b0f      	ldr	r3, [pc, #60]	; (8000df4 <HAL_TIM_MspPostInit+0x6c>)
 8000db8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dba:	f003 0301 	and.w	r3, r3, #1
 8000dbe:	60bb      	str	r3, [r7, #8]
 8000dc0:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000dc2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000dc6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dc8:	2302      	movs	r3, #2
 8000dca:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000dd4:	2301      	movs	r3, #1
 8000dd6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dd8:	f107 030c 	add.w	r3, r7, #12
 8000ddc:	4619      	mov	r1, r3
 8000dde:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000de2:	f001 f909 	bl	8001ff8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000de6:	bf00      	nop
 8000de8:	3720      	adds	r7, #32
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	bf00      	nop
 8000df0:	40012c00 	.word	0x40012c00
 8000df4:	40021000 	.word	0x40021000

08000df8 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000dfc:	4b14      	ldr	r3, [pc, #80]	; (8000e50 <MX_USART2_UART_Init+0x58>)
 8000dfe:	4a15      	ldr	r2, [pc, #84]	; (8000e54 <MX_USART2_UART_Init+0x5c>)
 8000e00:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000e02:	4b13      	ldr	r3, [pc, #76]	; (8000e50 <MX_USART2_UART_Init+0x58>)
 8000e04:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e08:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000e0a:	4b11      	ldr	r3, [pc, #68]	; (8000e50 <MX_USART2_UART_Init+0x58>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000e10:	4b0f      	ldr	r3, [pc, #60]	; (8000e50 <MX_USART2_UART_Init+0x58>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000e16:	4b0e      	ldr	r3, [pc, #56]	; (8000e50 <MX_USART2_UART_Init+0x58>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000e1c:	4b0c      	ldr	r3, [pc, #48]	; (8000e50 <MX_USART2_UART_Init+0x58>)
 8000e1e:	220c      	movs	r2, #12
 8000e20:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e22:	4b0b      	ldr	r3, [pc, #44]	; (8000e50 <MX_USART2_UART_Init+0x58>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e28:	4b09      	ldr	r3, [pc, #36]	; (8000e50 <MX_USART2_UART_Init+0x58>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e2e:	4b08      	ldr	r3, [pc, #32]	; (8000e50 <MX_USART2_UART_Init+0x58>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e34:	4b06      	ldr	r3, [pc, #24]	; (8000e50 <MX_USART2_UART_Init+0x58>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000e3a:	4805      	ldr	r0, [pc, #20]	; (8000e50 <MX_USART2_UART_Init+0x58>)
 8000e3c:	f003 f9be 	bl	80041bc <HAL_UART_Init>
 8000e40:	4603      	mov	r3, r0
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d001      	beq.n	8000e4a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000e46:	f7ff fe8a 	bl	8000b5e <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000e4a:	bf00      	nop
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	200000dc 	.word	0x200000dc
 8000e54:	40004400 	.word	0x40004400

08000e58 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b0a4      	sub	sp, #144	; 0x90
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e60:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000e64:	2200      	movs	r2, #0
 8000e66:	601a      	str	r2, [r3, #0]
 8000e68:	605a      	str	r2, [r3, #4]
 8000e6a:	609a      	str	r2, [r3, #8]
 8000e6c:	60da      	str	r2, [r3, #12]
 8000e6e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e70:	f107 0314 	add.w	r3, r7, #20
 8000e74:	2268      	movs	r2, #104	; 0x68
 8000e76:	2100      	movs	r1, #0
 8000e78:	4618      	mov	r0, r3
 8000e7a:	f003 fe47 	bl	8004b0c <memset>
  if(uartHandle->Instance==USART2)
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	4a21      	ldr	r2, [pc, #132]	; (8000f08 <HAL_UART_MspInit+0xb0>)
 8000e84:	4293      	cmp	r3, r2
 8000e86:	d13a      	bne.n	8000efe <HAL_UART_MspInit+0xa6>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000e88:	2302      	movs	r3, #2
 8000e8a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e90:	f107 0314 	add.w	r3, r7, #20
 8000e94:	4618      	mov	r0, r3
 8000e96:	f002 f8f5 	bl	8003084 <HAL_RCCEx_PeriphCLKConfig>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d001      	beq.n	8000ea4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000ea0:	f7ff fe5d 	bl	8000b5e <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ea4:	4b19      	ldr	r3, [pc, #100]	; (8000f0c <HAL_UART_MspInit+0xb4>)
 8000ea6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ea8:	4a18      	ldr	r2, [pc, #96]	; (8000f0c <HAL_UART_MspInit+0xb4>)
 8000eaa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000eae:	6593      	str	r3, [r2, #88]	; 0x58
 8000eb0:	4b16      	ldr	r3, [pc, #88]	; (8000f0c <HAL_UART_MspInit+0xb4>)
 8000eb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000eb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000eb8:	613b      	str	r3, [r7, #16]
 8000eba:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ebc:	4b13      	ldr	r3, [pc, #76]	; (8000f0c <HAL_UART_MspInit+0xb4>)
 8000ebe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ec0:	4a12      	ldr	r2, [pc, #72]	; (8000f0c <HAL_UART_MspInit+0xb4>)
 8000ec2:	f043 0301 	orr.w	r3, r3, #1
 8000ec6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ec8:	4b10      	ldr	r3, [pc, #64]	; (8000f0c <HAL_UART_MspInit+0xb4>)
 8000eca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ecc:	f003 0301 	and.w	r3, r3, #1
 8000ed0:	60fb      	str	r3, [r7, #12]
 8000ed2:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000ed4:	230c      	movs	r3, #12
 8000ed6:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ed8:	2302      	movs	r3, #2
 8000eda:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ee4:	2303      	movs	r3, #3
 8000ee6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000eea:	2307      	movs	r3, #7
 8000eec:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ef0:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000ef4:	4619      	mov	r1, r3
 8000ef6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000efa:	f001 f87d 	bl	8001ff8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000efe:	bf00      	nop
 8000f00:	3790      	adds	r7, #144	; 0x90
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	40004400 	.word	0x40004400
 8000f0c:	40021000 	.word	0x40021000

08000f10 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000f10:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f48 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000f14:	f7ff fe76 	bl	8000c04 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f18:	480c      	ldr	r0, [pc, #48]	; (8000f4c <LoopForever+0x6>)
  ldr r1, =_edata
 8000f1a:	490d      	ldr	r1, [pc, #52]	; (8000f50 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f1c:	4a0d      	ldr	r2, [pc, #52]	; (8000f54 <LoopForever+0xe>)
  movs r3, #0
 8000f1e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f20:	e002      	b.n	8000f28 <LoopCopyDataInit>

08000f22 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f22:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f24:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f26:	3304      	adds	r3, #4

08000f28 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f28:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f2a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f2c:	d3f9      	bcc.n	8000f22 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f2e:	4a0a      	ldr	r2, [pc, #40]	; (8000f58 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f30:	4c0a      	ldr	r4, [pc, #40]	; (8000f5c <LoopForever+0x16>)
  movs r3, #0
 8000f32:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f34:	e001      	b.n	8000f3a <LoopFillZerobss>

08000f36 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f36:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f38:	3204      	adds	r2, #4

08000f3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f3a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f3c:	d3fb      	bcc.n	8000f36 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f3e:	f003 fdc1 	bl	8004ac4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000f42:	f7ff fd21 	bl	8000988 <main>

08000f46 <LoopForever>:

LoopForever:
    b LoopForever
 8000f46:	e7fe      	b.n	8000f46 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000f48:	20028000 	.word	0x20028000
  ldr r0, =_sdata
 8000f4c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f50:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000f54:	08004bac 	.word	0x08004bac
  ldr r2, =_sbss
 8000f58:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000f5c:	20000164 	.word	0x20000164

08000f60 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000f60:	e7fe      	b.n	8000f60 <ADC1_IRQHandler>
	...

08000f64 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b082      	sub	sp, #8
 8000f68:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f6e:	4b0c      	ldr	r3, [pc, #48]	; (8000fa0 <HAL_Init+0x3c>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	4a0b      	ldr	r2, [pc, #44]	; (8000fa0 <HAL_Init+0x3c>)
 8000f74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f78:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f7a:	2003      	movs	r0, #3
 8000f7c:	f001 f808 	bl	8001f90 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f80:	2000      	movs	r0, #0
 8000f82:	f000 f80f 	bl	8000fa4 <HAL_InitTick>
 8000f86:	4603      	mov	r3, r0
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d002      	beq.n	8000f92 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000f8c:	2301      	movs	r3, #1
 8000f8e:	71fb      	strb	r3, [r7, #7]
 8000f90:	e001      	b.n	8000f96 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000f92:	f7ff fde9 	bl	8000b68 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000f96:	79fb      	ldrb	r3, [r7, #7]
}
 8000f98:	4618      	mov	r0, r3
 8000f9a:	3708      	adds	r7, #8
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bd80      	pop	{r7, pc}
 8000fa0:	40022000 	.word	0x40022000

08000fa4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b084      	sub	sp, #16
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000fac:	2300      	movs	r3, #0
 8000fae:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000fb0:	4b17      	ldr	r3, [pc, #92]	; (8001010 <HAL_InitTick+0x6c>)
 8000fb2:	781b      	ldrb	r3, [r3, #0]
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d023      	beq.n	8001000 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000fb8:	4b16      	ldr	r3, [pc, #88]	; (8001014 <HAL_InitTick+0x70>)
 8000fba:	681a      	ldr	r2, [r3, #0]
 8000fbc:	4b14      	ldr	r3, [pc, #80]	; (8001010 <HAL_InitTick+0x6c>)
 8000fbe:	781b      	ldrb	r3, [r3, #0]
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fc6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fca:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f001 f805 	bl	8001fde <HAL_SYSTICK_Config>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d10f      	bne.n	8000ffa <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	2b0f      	cmp	r3, #15
 8000fde:	d809      	bhi.n	8000ff4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	6879      	ldr	r1, [r7, #4]
 8000fe4:	f04f 30ff 	mov.w	r0, #4294967295
 8000fe8:	f000 ffdd 	bl	8001fa6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000fec:	4a0a      	ldr	r2, [pc, #40]	; (8001018 <HAL_InitTick+0x74>)
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	6013      	str	r3, [r2, #0]
 8000ff2:	e007      	b.n	8001004 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	73fb      	strb	r3, [r7, #15]
 8000ff8:	e004      	b.n	8001004 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	73fb      	strb	r3, [r7, #15]
 8000ffe:	e001      	b.n	8001004 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001000:	2301      	movs	r3, #1
 8001002:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001004:	7bfb      	ldrb	r3, [r7, #15]
}
 8001006:	4618      	mov	r0, r3
 8001008:	3710      	adds	r7, #16
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	20000008 	.word	0x20000008
 8001014:	20000000 	.word	0x20000000
 8001018:	20000004 	.word	0x20000004

0800101c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800101c:	b480      	push	{r7}
 800101e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001020:	4b06      	ldr	r3, [pc, #24]	; (800103c <HAL_IncTick+0x20>)
 8001022:	781b      	ldrb	r3, [r3, #0]
 8001024:	461a      	mov	r2, r3
 8001026:	4b06      	ldr	r3, [pc, #24]	; (8001040 <HAL_IncTick+0x24>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	4413      	add	r3, r2
 800102c:	4a04      	ldr	r2, [pc, #16]	; (8001040 <HAL_IncTick+0x24>)
 800102e:	6013      	str	r3, [r2, #0]
}
 8001030:	bf00      	nop
 8001032:	46bd      	mov	sp, r7
 8001034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001038:	4770      	bx	lr
 800103a:	bf00      	nop
 800103c:	20000008 	.word	0x20000008
 8001040:	20000160 	.word	0x20000160

08001044 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001044:	b480      	push	{r7}
 8001046:	af00      	add	r7, sp, #0
  return uwTick;
 8001048:	4b03      	ldr	r3, [pc, #12]	; (8001058 <HAL_GetTick+0x14>)
 800104a:	681b      	ldr	r3, [r3, #0]
}
 800104c:	4618      	mov	r0, r3
 800104e:	46bd      	mov	sp, r7
 8001050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001054:	4770      	bx	lr
 8001056:	bf00      	nop
 8001058:	20000160 	.word	0x20000160

0800105c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800105c:	b480      	push	{r7}
 800105e:	b083      	sub	sp, #12
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
 8001064:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	689b      	ldr	r3, [r3, #8]
 800106a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	431a      	orrs	r2, r3
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	609a      	str	r2, [r3, #8]
}
 8001076:	bf00      	nop
 8001078:	370c      	adds	r7, #12
 800107a:	46bd      	mov	sp, r7
 800107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001080:	4770      	bx	lr

08001082 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001082:	b480      	push	{r7}
 8001084:	b083      	sub	sp, #12
 8001086:	af00      	add	r7, sp, #0
 8001088:	6078      	str	r0, [r7, #4]
 800108a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	689b      	ldr	r3, [r3, #8]
 8001090:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	431a      	orrs	r2, r3
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	609a      	str	r2, [r3, #8]
}
 800109c:	bf00      	nop
 800109e:	370c      	adds	r7, #12
 80010a0:	46bd      	mov	sp, r7
 80010a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a6:	4770      	bx	lr

080010a8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80010a8:	b480      	push	{r7}
 80010aa:	b083      	sub	sp, #12
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	689b      	ldr	r3, [r3, #8]
 80010b4:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80010b8:	4618      	mov	r0, r3
 80010ba:	370c      	adds	r7, #12
 80010bc:	46bd      	mov	sp, r7
 80010be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c2:	4770      	bx	lr

080010c4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80010c4:	b480      	push	{r7}
 80010c6:	b087      	sub	sp, #28
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	60f8      	str	r0, [r7, #12]
 80010cc:	60b9      	str	r1, [r7, #8]
 80010ce:	607a      	str	r2, [r7, #4]
 80010d0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	3360      	adds	r3, #96	; 0x60
 80010d6:	461a      	mov	r2, r3
 80010d8:	68bb      	ldr	r3, [r7, #8]
 80010da:	009b      	lsls	r3, r3, #2
 80010dc:	4413      	add	r3, r2
 80010de:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80010e0:	697b      	ldr	r3, [r7, #20]
 80010e2:	681a      	ldr	r2, [r3, #0]
 80010e4:	4b08      	ldr	r3, [pc, #32]	; (8001108 <LL_ADC_SetOffset+0x44>)
 80010e6:	4013      	ands	r3, r2
 80010e8:	687a      	ldr	r2, [r7, #4]
 80010ea:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80010ee:	683a      	ldr	r2, [r7, #0]
 80010f0:	430a      	orrs	r2, r1
 80010f2:	4313      	orrs	r3, r2
 80010f4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80010f8:	697b      	ldr	r3, [r7, #20]
 80010fa:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80010fc:	bf00      	nop
 80010fe:	371c      	adds	r7, #28
 8001100:	46bd      	mov	sp, r7
 8001102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001106:	4770      	bx	lr
 8001108:	03fff000 	.word	0x03fff000

0800110c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800110c:	b480      	push	{r7}
 800110e:	b085      	sub	sp, #20
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
 8001114:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	3360      	adds	r3, #96	; 0x60
 800111a:	461a      	mov	r2, r3
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	009b      	lsls	r3, r3, #2
 8001120:	4413      	add	r3, r2
 8001122:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 800112c:	4618      	mov	r0, r3
 800112e:	3714      	adds	r7, #20
 8001130:	46bd      	mov	sp, r7
 8001132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001136:	4770      	bx	lr

08001138 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001138:	b480      	push	{r7}
 800113a:	b087      	sub	sp, #28
 800113c:	af00      	add	r7, sp, #0
 800113e:	60f8      	str	r0, [r7, #12]
 8001140:	60b9      	str	r1, [r7, #8]
 8001142:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	3360      	adds	r3, #96	; 0x60
 8001148:	461a      	mov	r2, r3
 800114a:	68bb      	ldr	r3, [r7, #8]
 800114c:	009b      	lsls	r3, r3, #2
 800114e:	4413      	add	r3, r2
 8001150:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001152:	697b      	ldr	r3, [r7, #20]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	431a      	orrs	r2, r3
 800115e:	697b      	ldr	r3, [r7, #20]
 8001160:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001162:	bf00      	nop
 8001164:	371c      	adds	r7, #28
 8001166:	46bd      	mov	sp, r7
 8001168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116c:	4770      	bx	lr

0800116e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800116e:	b480      	push	{r7}
 8001170:	b083      	sub	sp, #12
 8001172:	af00      	add	r7, sp, #0
 8001174:	6078      	str	r0, [r7, #4]
 8001176:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	695b      	ldr	r3, [r3, #20]
 800117c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	431a      	orrs	r2, r3
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	615a      	str	r2, [r3, #20]
}
 8001188:	bf00      	nop
 800118a:	370c      	adds	r7, #12
 800118c:	46bd      	mov	sp, r7
 800118e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001192:	4770      	bx	lr

08001194 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001194:	b480      	push	{r7}
 8001196:	b087      	sub	sp, #28
 8001198:	af00      	add	r7, sp, #0
 800119a:	60f8      	str	r0, [r7, #12]
 800119c:	60b9      	str	r1, [r7, #8]
 800119e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	3330      	adds	r3, #48	; 0x30
 80011a4:	461a      	mov	r2, r3
 80011a6:	68bb      	ldr	r3, [r7, #8]
 80011a8:	0a1b      	lsrs	r3, r3, #8
 80011aa:	009b      	lsls	r3, r3, #2
 80011ac:	f003 030c 	and.w	r3, r3, #12
 80011b0:	4413      	add	r3, r2
 80011b2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80011b4:	697b      	ldr	r3, [r7, #20]
 80011b6:	681a      	ldr	r2, [r3, #0]
 80011b8:	68bb      	ldr	r3, [r7, #8]
 80011ba:	f003 031f 	and.w	r3, r3, #31
 80011be:	211f      	movs	r1, #31
 80011c0:	fa01 f303 	lsl.w	r3, r1, r3
 80011c4:	43db      	mvns	r3, r3
 80011c6:	401a      	ands	r2, r3
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	0e9b      	lsrs	r3, r3, #26
 80011cc:	f003 011f 	and.w	r1, r3, #31
 80011d0:	68bb      	ldr	r3, [r7, #8]
 80011d2:	f003 031f 	and.w	r3, r3, #31
 80011d6:	fa01 f303 	lsl.w	r3, r1, r3
 80011da:	431a      	orrs	r2, r3
 80011dc:	697b      	ldr	r3, [r7, #20]
 80011de:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80011e0:	bf00      	nop
 80011e2:	371c      	adds	r7, #28
 80011e4:	46bd      	mov	sp, r7
 80011e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ea:	4770      	bx	lr

080011ec <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80011ec:	b480      	push	{r7}
 80011ee:	b087      	sub	sp, #28
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	60f8      	str	r0, [r7, #12]
 80011f4:	60b9      	str	r1, [r7, #8]
 80011f6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	3314      	adds	r3, #20
 80011fc:	461a      	mov	r2, r3
 80011fe:	68bb      	ldr	r3, [r7, #8]
 8001200:	0e5b      	lsrs	r3, r3, #25
 8001202:	009b      	lsls	r3, r3, #2
 8001204:	f003 0304 	and.w	r3, r3, #4
 8001208:	4413      	add	r3, r2
 800120a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800120c:	697b      	ldr	r3, [r7, #20]
 800120e:	681a      	ldr	r2, [r3, #0]
 8001210:	68bb      	ldr	r3, [r7, #8]
 8001212:	0d1b      	lsrs	r3, r3, #20
 8001214:	f003 031f 	and.w	r3, r3, #31
 8001218:	2107      	movs	r1, #7
 800121a:	fa01 f303 	lsl.w	r3, r1, r3
 800121e:	43db      	mvns	r3, r3
 8001220:	401a      	ands	r2, r3
 8001222:	68bb      	ldr	r3, [r7, #8]
 8001224:	0d1b      	lsrs	r3, r3, #20
 8001226:	f003 031f 	and.w	r3, r3, #31
 800122a:	6879      	ldr	r1, [r7, #4]
 800122c:	fa01 f303 	lsl.w	r3, r1, r3
 8001230:	431a      	orrs	r2, r3
 8001232:	697b      	ldr	r3, [r7, #20]
 8001234:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001236:	bf00      	nop
 8001238:	371c      	adds	r7, #28
 800123a:	46bd      	mov	sp, r7
 800123c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001240:	4770      	bx	lr
	...

08001244 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001244:	b480      	push	{r7}
 8001246:	b085      	sub	sp, #20
 8001248:	af00      	add	r7, sp, #0
 800124a:	60f8      	str	r0, [r7, #12]
 800124c:	60b9      	str	r1, [r7, #8]
 800124e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001256:	68bb      	ldr	r3, [r7, #8]
 8001258:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800125c:	43db      	mvns	r3, r3
 800125e:	401a      	ands	r2, r3
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	f003 0318 	and.w	r3, r3, #24
 8001266:	4908      	ldr	r1, [pc, #32]	; (8001288 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001268:	40d9      	lsrs	r1, r3
 800126a:	68bb      	ldr	r3, [r7, #8]
 800126c:	400b      	ands	r3, r1
 800126e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001272:	431a      	orrs	r2, r3
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800127a:	bf00      	nop
 800127c:	3714      	adds	r7, #20
 800127e:	46bd      	mov	sp, r7
 8001280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001284:	4770      	bx	lr
 8001286:	bf00      	nop
 8001288:	0007ffff 	.word	0x0007ffff

0800128c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800128c:	b480      	push	{r7}
 800128e:	b083      	sub	sp, #12
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	689b      	ldr	r3, [r3, #8]
 8001298:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 800129c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80012a0:	687a      	ldr	r2, [r7, #4]
 80012a2:	6093      	str	r3, [r2, #8]
}
 80012a4:	bf00      	nop
 80012a6:	370c      	adds	r7, #12
 80012a8:	46bd      	mov	sp, r7
 80012aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ae:	4770      	bx	lr

080012b0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80012b0:	b480      	push	{r7}
 80012b2:	b083      	sub	sp, #12
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	689b      	ldr	r3, [r3, #8]
 80012bc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80012c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80012c4:	d101      	bne.n	80012ca <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80012c6:	2301      	movs	r3, #1
 80012c8:	e000      	b.n	80012cc <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80012ca:	2300      	movs	r3, #0
}
 80012cc:	4618      	mov	r0, r3
 80012ce:	370c      	adds	r7, #12
 80012d0:	46bd      	mov	sp, r7
 80012d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d6:	4770      	bx	lr

080012d8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80012d8:	b480      	push	{r7}
 80012da:	b083      	sub	sp, #12
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	689b      	ldr	r3, [r3, #8]
 80012e4:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80012e8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80012ec:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80012f4:	bf00      	nop
 80012f6:	370c      	adds	r7, #12
 80012f8:	46bd      	mov	sp, r7
 80012fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fe:	4770      	bx	lr

08001300 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001300:	b480      	push	{r7}
 8001302:	b083      	sub	sp, #12
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	689b      	ldr	r3, [r3, #8]
 800130c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001310:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001314:	d101      	bne.n	800131a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001316:	2301      	movs	r3, #1
 8001318:	e000      	b.n	800131c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800131a:	2300      	movs	r3, #0
}
 800131c:	4618      	mov	r0, r3
 800131e:	370c      	adds	r7, #12
 8001320:	46bd      	mov	sp, r7
 8001322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001326:	4770      	bx	lr

08001328 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001328:	b480      	push	{r7}
 800132a:	b083      	sub	sp, #12
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	689b      	ldr	r3, [r3, #8]
 8001334:	f003 0301 	and.w	r3, r3, #1
 8001338:	2b01      	cmp	r3, #1
 800133a:	d101      	bne.n	8001340 <LL_ADC_IsEnabled+0x18>
 800133c:	2301      	movs	r3, #1
 800133e:	e000      	b.n	8001342 <LL_ADC_IsEnabled+0x1a>
 8001340:	2300      	movs	r3, #0
}
 8001342:	4618      	mov	r0, r3
 8001344:	370c      	adds	r7, #12
 8001346:	46bd      	mov	sp, r7
 8001348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134c:	4770      	bx	lr

0800134e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800134e:	b480      	push	{r7}
 8001350:	b083      	sub	sp, #12
 8001352:	af00      	add	r7, sp, #0
 8001354:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	689b      	ldr	r3, [r3, #8]
 800135a:	f003 0304 	and.w	r3, r3, #4
 800135e:	2b04      	cmp	r3, #4
 8001360:	d101      	bne.n	8001366 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001362:	2301      	movs	r3, #1
 8001364:	e000      	b.n	8001368 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001366:	2300      	movs	r3, #0
}
 8001368:	4618      	mov	r0, r3
 800136a:	370c      	adds	r7, #12
 800136c:	46bd      	mov	sp, r7
 800136e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001372:	4770      	bx	lr

08001374 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001374:	b480      	push	{r7}
 8001376:	b083      	sub	sp, #12
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	689b      	ldr	r3, [r3, #8]
 8001380:	f003 0308 	and.w	r3, r3, #8
 8001384:	2b08      	cmp	r3, #8
 8001386:	d101      	bne.n	800138c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001388:	2301      	movs	r3, #1
 800138a:	e000      	b.n	800138e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800138c:	2300      	movs	r3, #0
}
 800138e:	4618      	mov	r0, r3
 8001390:	370c      	adds	r7, #12
 8001392:	46bd      	mov	sp, r7
 8001394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001398:	4770      	bx	lr
	...

0800139c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b088      	sub	sp, #32
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80013a4:	2300      	movs	r3, #0
 80013a6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80013a8:	2300      	movs	r3, #0
 80013aa:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d101      	bne.n	80013b6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80013b2:	2301      	movs	r3, #1
 80013b4:	e12f      	b.n	8001616 <HAL_ADC_Init+0x27a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	691b      	ldr	r3, [r3, #16]
 80013ba:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d109      	bne.n	80013d8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80013c4:	6878      	ldr	r0, [r7, #4]
 80013c6:	f7ff f8eb 	bl	80005a0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	2200      	movs	r2, #0
 80013ce:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	2200      	movs	r2, #0
 80013d4:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4618      	mov	r0, r3
 80013de:	f7ff ff67 	bl	80012b0 <LL_ADC_IsDeepPowerDownEnabled>
 80013e2:	4603      	mov	r3, r0
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d004      	beq.n	80013f2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	4618      	mov	r0, r3
 80013ee:	f7ff ff4d 	bl	800128c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	4618      	mov	r0, r3
 80013f8:	f7ff ff82 	bl	8001300 <LL_ADC_IsInternalRegulatorEnabled>
 80013fc:	4603      	mov	r3, r0
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d115      	bne.n	800142e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	4618      	mov	r0, r3
 8001408:	f7ff ff66 	bl	80012d8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800140c:	4b84      	ldr	r3, [pc, #528]	; (8001620 <HAL_ADC_Init+0x284>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	099b      	lsrs	r3, r3, #6
 8001412:	4a84      	ldr	r2, [pc, #528]	; (8001624 <HAL_ADC_Init+0x288>)
 8001414:	fba2 2303 	umull	r2, r3, r2, r3
 8001418:	099b      	lsrs	r3, r3, #6
 800141a:	3301      	adds	r3, #1
 800141c:	005b      	lsls	r3, r3, #1
 800141e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001420:	e002      	b.n	8001428 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001422:	68bb      	ldr	r3, [r7, #8]
 8001424:	3b01      	subs	r3, #1
 8001426:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001428:	68bb      	ldr	r3, [r7, #8]
 800142a:	2b00      	cmp	r3, #0
 800142c:	d1f9      	bne.n	8001422 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	4618      	mov	r0, r3
 8001434:	f7ff ff64 	bl	8001300 <LL_ADC_IsInternalRegulatorEnabled>
 8001438:	4603      	mov	r3, r0
 800143a:	2b00      	cmp	r3, #0
 800143c:	d10d      	bne.n	800145a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001442:	f043 0210 	orr.w	r2, r3, #16
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800144e:	f043 0201 	orr.w	r2, r3, #1
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001456:	2301      	movs	r3, #1
 8001458:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	4618      	mov	r0, r3
 8001460:	f7ff ff75 	bl	800134e <LL_ADC_REG_IsConversionOngoing>
 8001464:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800146a:	f003 0310 	and.w	r3, r3, #16
 800146e:	2b00      	cmp	r3, #0
 8001470:	f040 80c8 	bne.w	8001604 <HAL_ADC_Init+0x268>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001474:	697b      	ldr	r3, [r7, #20]
 8001476:	2b00      	cmp	r3, #0
 8001478:	f040 80c4 	bne.w	8001604 <HAL_ADC_Init+0x268>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001480:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001484:	f043 0202 	orr.w	r2, r3, #2
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	4618      	mov	r0, r3
 8001492:	f7ff ff49 	bl	8001328 <LL_ADC_IsEnabled>
 8001496:	4603      	mov	r3, r0
 8001498:	2b00      	cmp	r3, #0
 800149a:	d10b      	bne.n	80014b4 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800149c:	4862      	ldr	r0, [pc, #392]	; (8001628 <HAL_ADC_Init+0x28c>)
 800149e:	f7ff ff43 	bl	8001328 <LL_ADC_IsEnabled>
 80014a2:	4603      	mov	r3, r0
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d105      	bne.n	80014b4 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	4619      	mov	r1, r3
 80014ae:	485f      	ldr	r0, [pc, #380]	; (800162c <HAL_ADC_Init+0x290>)
 80014b0:	f7ff fdd4 	bl	800105c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	7e5b      	ldrb	r3, [r3, #25]
 80014b8:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80014be:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80014c4:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80014ca:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	f893 3020 	ldrb.w	r3, [r3, #32]
 80014d2:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80014d4:	4313      	orrs	r3, r2
 80014d6:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	f893 3020 	ldrb.w	r3, [r3, #32]
 80014de:	2b01      	cmp	r3, #1
 80014e0:	d106      	bne.n	80014f0 <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014e6:	3b01      	subs	r3, #1
 80014e8:	045b      	lsls	r3, r3, #17
 80014ea:	69ba      	ldr	r2, [r7, #24]
 80014ec:	4313      	orrs	r3, r2
 80014ee:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d009      	beq.n	800150c <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014fc:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001504:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001506:	69ba      	ldr	r2, [r7, #24]
 8001508:	4313      	orrs	r3, r2
 800150a:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	68da      	ldr	r2, [r3, #12]
 8001512:	4b47      	ldr	r3, [pc, #284]	; (8001630 <HAL_ADC_Init+0x294>)
 8001514:	4013      	ands	r3, r2
 8001516:	687a      	ldr	r2, [r7, #4]
 8001518:	6812      	ldr	r2, [r2, #0]
 800151a:	69b9      	ldr	r1, [r7, #24]
 800151c:	430b      	orrs	r3, r1
 800151e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	4618      	mov	r0, r3
 8001526:	f7ff ff12 	bl	800134e <LL_ADC_REG_IsConversionOngoing>
 800152a:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	4618      	mov	r0, r3
 8001532:	f7ff ff1f 	bl	8001374 <LL_ADC_INJ_IsConversionOngoing>
 8001536:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001538:	693b      	ldr	r3, [r7, #16]
 800153a:	2b00      	cmp	r3, #0
 800153c:	d140      	bne.n	80015c0 <HAL_ADC_Init+0x224>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	2b00      	cmp	r3, #0
 8001542:	d13d      	bne.n	80015c0 <HAL_ADC_Init+0x224>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	7e1b      	ldrb	r3, [r3, #24]
 800154c:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800154e:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001556:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001558:	4313      	orrs	r3, r2
 800155a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	68db      	ldr	r3, [r3, #12]
 8001562:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001566:	f023 0306 	bic.w	r3, r3, #6
 800156a:	687a      	ldr	r2, [r7, #4]
 800156c:	6812      	ldr	r2, [r2, #0]
 800156e:	69b9      	ldr	r1, [r7, #24]
 8001570:	430b      	orrs	r3, r1
 8001572:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800157a:	2b01      	cmp	r3, #1
 800157c:	d118      	bne.n	80015b0 <HAL_ADC_Init+0x214>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	691b      	ldr	r3, [r3, #16]
 8001584:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001588:	f023 0304 	bic.w	r3, r3, #4
 800158c:	687a      	ldr	r2, [r7, #4]
 800158e:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001590:	687a      	ldr	r2, [r7, #4]
 8001592:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001594:	4311      	orrs	r1, r2
 8001596:	687a      	ldr	r2, [r7, #4]
 8001598:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800159a:	4311      	orrs	r1, r2
 800159c:	687a      	ldr	r2, [r7, #4]
 800159e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80015a0:	430a      	orrs	r2, r1
 80015a2:	431a      	orrs	r2, r3
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f042 0201 	orr.w	r2, r2, #1
 80015ac:	611a      	str	r2, [r3, #16]
 80015ae:	e007      	b.n	80015c0 <HAL_ADC_Init+0x224>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	691a      	ldr	r2, [r3, #16]
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f022 0201 	bic.w	r2, r2, #1
 80015be:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	691b      	ldr	r3, [r3, #16]
 80015c4:	2b01      	cmp	r3, #1
 80015c6:	d10c      	bne.n	80015e2 <HAL_ADC_Init+0x246>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ce:	f023 010f 	bic.w	r1, r3, #15
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	69db      	ldr	r3, [r3, #28]
 80015d6:	1e5a      	subs	r2, r3, #1
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	430a      	orrs	r2, r1
 80015de:	631a      	str	r2, [r3, #48]	; 0x30
 80015e0:	e007      	b.n	80015f2 <HAL_ADC_Init+0x256>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f022 020f 	bic.w	r2, r2, #15
 80015f0:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015f6:	f023 0303 	bic.w	r3, r3, #3
 80015fa:	f043 0201 	orr.w	r2, r3, #1
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	659a      	str	r2, [r3, #88]	; 0x58
 8001602:	e007      	b.n	8001614 <HAL_ADC_Init+0x278>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001608:	f043 0210 	orr.w	r2, r3, #16
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001610:	2301      	movs	r3, #1
 8001612:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001614:	7ffb      	ldrb	r3, [r7, #31]
}
 8001616:	4618      	mov	r0, r3
 8001618:	3720      	adds	r7, #32
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	20000000 	.word	0x20000000
 8001624:	053e2d63 	.word	0x053e2d63
 8001628:	50040000 	.word	0x50040000
 800162c:	50040300 	.word	0x50040300
 8001630:	fff0c007 	.word	0xfff0c007

08001634 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b0b6      	sub	sp, #216	; 0xd8
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
 800163c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800163e:	2300      	movs	r3, #0
 8001640:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001644:	2300      	movs	r3, #0
 8001646:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800164e:	2b01      	cmp	r3, #1
 8001650:	d101      	bne.n	8001656 <HAL_ADC_ConfigChannel+0x22>
 8001652:	2302      	movs	r3, #2
 8001654:	e3d5      	b.n	8001e02 <HAL_ADC_ConfigChannel+0x7ce>
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	2201      	movs	r2, #1
 800165a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	4618      	mov	r0, r3
 8001664:	f7ff fe73 	bl	800134e <LL_ADC_REG_IsConversionOngoing>
 8001668:	4603      	mov	r3, r0
 800166a:	2b00      	cmp	r3, #0
 800166c:	f040 83ba 	bne.w	8001de4 <HAL_ADC_ConfigChannel+0x7b0>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	2b05      	cmp	r3, #5
 8001676:	d824      	bhi.n	80016c2 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	685b      	ldr	r3, [r3, #4]
 800167c:	3b02      	subs	r3, #2
 800167e:	2b03      	cmp	r3, #3
 8001680:	d81b      	bhi.n	80016ba <HAL_ADC_ConfigChannel+0x86>
 8001682:	a201      	add	r2, pc, #4	; (adr r2, 8001688 <HAL_ADC_ConfigChannel+0x54>)
 8001684:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001688:	08001699 	.word	0x08001699
 800168c:	080016a1 	.word	0x080016a1
 8001690:	080016a9 	.word	0x080016a9
 8001694:	080016b1 	.word	0x080016b1
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	220c      	movs	r2, #12
 800169c:	605a      	str	r2, [r3, #4]
          break;
 800169e:	e011      	b.n	80016c4 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	2212      	movs	r2, #18
 80016a4:	605a      	str	r2, [r3, #4]
          break;
 80016a6:	e00d      	b.n	80016c4 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	2218      	movs	r2, #24
 80016ac:	605a      	str	r2, [r3, #4]
          break;
 80016ae:	e009      	b.n	80016c4 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80016b6:	605a      	str	r2, [r3, #4]
          break;
 80016b8:	e004      	b.n	80016c4 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	2206      	movs	r2, #6
 80016be:	605a      	str	r2, [r3, #4]
          break;
 80016c0:	e000      	b.n	80016c4 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 80016c2:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	6818      	ldr	r0, [r3, #0]
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	6859      	ldr	r1, [r3, #4]
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	461a      	mov	r2, r3
 80016d2:	f7ff fd5f 	bl	8001194 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	4618      	mov	r0, r3
 80016dc:	f7ff fe37 	bl	800134e <LL_ADC_REG_IsConversionOngoing>
 80016e0:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4618      	mov	r0, r3
 80016ea:	f7ff fe43 	bl	8001374 <LL_ADC_INJ_IsConversionOngoing>
 80016ee:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80016f2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	f040 81c1 	bne.w	8001a7e <HAL_ADC_ConfigChannel+0x44a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80016fc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001700:	2b00      	cmp	r3, #0
 8001702:	f040 81bc 	bne.w	8001a7e <HAL_ADC_ConfigChannel+0x44a>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	689b      	ldr	r3, [r3, #8]
 800170a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800170e:	d10f      	bne.n	8001730 <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	6818      	ldr	r0, [r3, #0]
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	2200      	movs	r2, #0
 800171a:	4619      	mov	r1, r3
 800171c:	f7ff fd66 	bl	80011ec <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8001728:	4618      	mov	r0, r3
 800172a:	f7ff fd20 	bl	800116e <LL_ADC_SetSamplingTimeCommonConfig>
 800172e:	e00e      	b.n	800174e <HAL_ADC_ConfigChannel+0x11a>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	6818      	ldr	r0, [r3, #0]
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	6819      	ldr	r1, [r3, #0]
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	689b      	ldr	r3, [r3, #8]
 800173c:	461a      	mov	r2, r3
 800173e:	f7ff fd55 	bl	80011ec <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	2100      	movs	r1, #0
 8001748:	4618      	mov	r0, r3
 800174a:	f7ff fd10 	bl	800116e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	695a      	ldr	r2, [r3, #20]
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	68db      	ldr	r3, [r3, #12]
 8001758:	08db      	lsrs	r3, r3, #3
 800175a:	f003 0303 	and.w	r3, r3, #3
 800175e:	005b      	lsls	r3, r3, #1
 8001760:	fa02 f303 	lsl.w	r3, r2, r3
 8001764:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	691b      	ldr	r3, [r3, #16]
 800176c:	2b04      	cmp	r3, #4
 800176e:	d00a      	beq.n	8001786 <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	6818      	ldr	r0, [r3, #0]
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	6919      	ldr	r1, [r3, #16]
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	681a      	ldr	r2, [r3, #0]
 800177c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001780:	f7ff fca0 	bl	80010c4 <LL_ADC_SetOffset>
 8001784:	e17b      	b.n	8001a7e <HAL_ADC_ConfigChannel+0x44a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	2100      	movs	r1, #0
 800178c:	4618      	mov	r0, r3
 800178e:	f7ff fcbd 	bl	800110c <LL_ADC_GetOffsetChannel>
 8001792:	4603      	mov	r3, r0
 8001794:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001798:	2b00      	cmp	r3, #0
 800179a:	d10a      	bne.n	80017b2 <HAL_ADC_ConfigChannel+0x17e>
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	2100      	movs	r1, #0
 80017a2:	4618      	mov	r0, r3
 80017a4:	f7ff fcb2 	bl	800110c <LL_ADC_GetOffsetChannel>
 80017a8:	4603      	mov	r3, r0
 80017aa:	0e9b      	lsrs	r3, r3, #26
 80017ac:	f003 021f 	and.w	r2, r3, #31
 80017b0:	e01e      	b.n	80017f0 <HAL_ADC_ConfigChannel+0x1bc>
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	2100      	movs	r1, #0
 80017b8:	4618      	mov	r0, r3
 80017ba:	f7ff fca7 	bl	800110c <LL_ADC_GetOffsetChannel>
 80017be:	4603      	mov	r3, r0
 80017c0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017c4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80017c8:	fa93 f3a3 	rbit	r3, r3
 80017cc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80017d0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80017d4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80017d8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d101      	bne.n	80017e4 <HAL_ADC_ConfigChannel+0x1b0>
  {
    return 32U;
 80017e0:	2320      	movs	r3, #32
 80017e2:	e004      	b.n	80017ee <HAL_ADC_ConfigChannel+0x1ba>
  }
  return __builtin_clz(value);
 80017e4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80017e8:	fab3 f383 	clz	r3, r3
 80017ec:	b2db      	uxtb	r3, r3
 80017ee:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d105      	bne.n	8001808 <HAL_ADC_ConfigChannel+0x1d4>
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	0e9b      	lsrs	r3, r3, #26
 8001802:	f003 031f 	and.w	r3, r3, #31
 8001806:	e018      	b.n	800183a <HAL_ADC_ConfigChannel+0x206>
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001810:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001814:	fa93 f3a3 	rbit	r3, r3
 8001818:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 800181c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001820:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8001824:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001828:	2b00      	cmp	r3, #0
 800182a:	d101      	bne.n	8001830 <HAL_ADC_ConfigChannel+0x1fc>
    return 32U;
 800182c:	2320      	movs	r3, #32
 800182e:	e004      	b.n	800183a <HAL_ADC_ConfigChannel+0x206>
  return __builtin_clz(value);
 8001830:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001834:	fab3 f383 	clz	r3, r3
 8001838:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800183a:	429a      	cmp	r2, r3
 800183c:	d106      	bne.n	800184c <HAL_ADC_ConfigChannel+0x218>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	2200      	movs	r2, #0
 8001844:	2100      	movs	r1, #0
 8001846:	4618      	mov	r0, r3
 8001848:	f7ff fc76 	bl	8001138 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	2101      	movs	r1, #1
 8001852:	4618      	mov	r0, r3
 8001854:	f7ff fc5a 	bl	800110c <LL_ADC_GetOffsetChannel>
 8001858:	4603      	mov	r3, r0
 800185a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800185e:	2b00      	cmp	r3, #0
 8001860:	d10a      	bne.n	8001878 <HAL_ADC_ConfigChannel+0x244>
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	2101      	movs	r1, #1
 8001868:	4618      	mov	r0, r3
 800186a:	f7ff fc4f 	bl	800110c <LL_ADC_GetOffsetChannel>
 800186e:	4603      	mov	r3, r0
 8001870:	0e9b      	lsrs	r3, r3, #26
 8001872:	f003 021f 	and.w	r2, r3, #31
 8001876:	e01e      	b.n	80018b6 <HAL_ADC_ConfigChannel+0x282>
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	2101      	movs	r1, #1
 800187e:	4618      	mov	r0, r3
 8001880:	f7ff fc44 	bl	800110c <LL_ADC_GetOffsetChannel>
 8001884:	4603      	mov	r3, r0
 8001886:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800188a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800188e:	fa93 f3a3 	rbit	r3, r3
 8001892:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8001896:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800189a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 800189e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d101      	bne.n	80018aa <HAL_ADC_ConfigChannel+0x276>
    return 32U;
 80018a6:	2320      	movs	r3, #32
 80018a8:	e004      	b.n	80018b4 <HAL_ADC_ConfigChannel+0x280>
  return __builtin_clz(value);
 80018aa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80018ae:	fab3 f383 	clz	r3, r3
 80018b2:	b2db      	uxtb	r3, r3
 80018b4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d105      	bne.n	80018ce <HAL_ADC_ConfigChannel+0x29a>
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	0e9b      	lsrs	r3, r3, #26
 80018c8:	f003 031f 	and.w	r3, r3, #31
 80018cc:	e018      	b.n	8001900 <HAL_ADC_ConfigChannel+0x2cc>
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018d6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80018da:	fa93 f3a3 	rbit	r3, r3
 80018de:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80018e2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80018e6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80018ea:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d101      	bne.n	80018f6 <HAL_ADC_ConfigChannel+0x2c2>
    return 32U;
 80018f2:	2320      	movs	r3, #32
 80018f4:	e004      	b.n	8001900 <HAL_ADC_ConfigChannel+0x2cc>
  return __builtin_clz(value);
 80018f6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80018fa:	fab3 f383 	clz	r3, r3
 80018fe:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001900:	429a      	cmp	r2, r3
 8001902:	d106      	bne.n	8001912 <HAL_ADC_ConfigChannel+0x2de>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	2200      	movs	r2, #0
 800190a:	2101      	movs	r1, #1
 800190c:	4618      	mov	r0, r3
 800190e:	f7ff fc13 	bl	8001138 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	2102      	movs	r1, #2
 8001918:	4618      	mov	r0, r3
 800191a:	f7ff fbf7 	bl	800110c <LL_ADC_GetOffsetChannel>
 800191e:	4603      	mov	r3, r0
 8001920:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001924:	2b00      	cmp	r3, #0
 8001926:	d10a      	bne.n	800193e <HAL_ADC_ConfigChannel+0x30a>
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	2102      	movs	r1, #2
 800192e:	4618      	mov	r0, r3
 8001930:	f7ff fbec 	bl	800110c <LL_ADC_GetOffsetChannel>
 8001934:	4603      	mov	r3, r0
 8001936:	0e9b      	lsrs	r3, r3, #26
 8001938:	f003 021f 	and.w	r2, r3, #31
 800193c:	e01e      	b.n	800197c <HAL_ADC_ConfigChannel+0x348>
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	2102      	movs	r1, #2
 8001944:	4618      	mov	r0, r3
 8001946:	f7ff fbe1 	bl	800110c <LL_ADC_GetOffsetChannel>
 800194a:	4603      	mov	r3, r0
 800194c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001950:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001954:	fa93 f3a3 	rbit	r3, r3
 8001958:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 800195c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001960:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8001964:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001968:	2b00      	cmp	r3, #0
 800196a:	d101      	bne.n	8001970 <HAL_ADC_ConfigChannel+0x33c>
    return 32U;
 800196c:	2320      	movs	r3, #32
 800196e:	e004      	b.n	800197a <HAL_ADC_ConfigChannel+0x346>
  return __builtin_clz(value);
 8001970:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001974:	fab3 f383 	clz	r3, r3
 8001978:	b2db      	uxtb	r3, r3
 800197a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001984:	2b00      	cmp	r3, #0
 8001986:	d105      	bne.n	8001994 <HAL_ADC_ConfigChannel+0x360>
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	0e9b      	lsrs	r3, r3, #26
 800198e:	f003 031f 	and.w	r3, r3, #31
 8001992:	e016      	b.n	80019c2 <HAL_ADC_ConfigChannel+0x38e>
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800199c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80019a0:	fa93 f3a3 	rbit	r3, r3
 80019a4:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80019a6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80019a8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80019ac:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d101      	bne.n	80019b8 <HAL_ADC_ConfigChannel+0x384>
    return 32U;
 80019b4:	2320      	movs	r3, #32
 80019b6:	e004      	b.n	80019c2 <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 80019b8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80019bc:	fab3 f383 	clz	r3, r3
 80019c0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80019c2:	429a      	cmp	r2, r3
 80019c4:	d106      	bne.n	80019d4 <HAL_ADC_ConfigChannel+0x3a0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	2200      	movs	r2, #0
 80019cc:	2102      	movs	r1, #2
 80019ce:	4618      	mov	r0, r3
 80019d0:	f7ff fbb2 	bl	8001138 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	2103      	movs	r1, #3
 80019da:	4618      	mov	r0, r3
 80019dc:	f7ff fb96 	bl	800110c <LL_ADC_GetOffsetChannel>
 80019e0:	4603      	mov	r3, r0
 80019e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d10a      	bne.n	8001a00 <HAL_ADC_ConfigChannel+0x3cc>
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	2103      	movs	r1, #3
 80019f0:	4618      	mov	r0, r3
 80019f2:	f7ff fb8b 	bl	800110c <LL_ADC_GetOffsetChannel>
 80019f6:	4603      	mov	r3, r0
 80019f8:	0e9b      	lsrs	r3, r3, #26
 80019fa:	f003 021f 	and.w	r2, r3, #31
 80019fe:	e017      	b.n	8001a30 <HAL_ADC_ConfigChannel+0x3fc>
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	2103      	movs	r1, #3
 8001a06:	4618      	mov	r0, r3
 8001a08:	f7ff fb80 	bl	800110c <LL_ADC_GetOffsetChannel>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a10:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001a12:	fa93 f3a3 	rbit	r3, r3
 8001a16:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8001a18:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001a1a:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8001a1c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d101      	bne.n	8001a26 <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 8001a22:	2320      	movs	r3, #32
 8001a24:	e003      	b.n	8001a2e <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 8001a26:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001a28:	fab3 f383 	clz	r3, r3
 8001a2c:	b2db      	uxtb	r3, r3
 8001a2e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d105      	bne.n	8001a48 <HAL_ADC_ConfigChannel+0x414>
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	0e9b      	lsrs	r3, r3, #26
 8001a42:	f003 031f 	and.w	r3, r3, #31
 8001a46:	e011      	b.n	8001a6c <HAL_ADC_ConfigChannel+0x438>
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a4e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001a50:	fa93 f3a3 	rbit	r3, r3
 8001a54:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8001a56:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001a58:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8001a5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d101      	bne.n	8001a64 <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 8001a60:	2320      	movs	r3, #32
 8001a62:	e003      	b.n	8001a6c <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 8001a64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001a66:	fab3 f383 	clz	r3, r3
 8001a6a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001a6c:	429a      	cmp	r2, r3
 8001a6e:	d106      	bne.n	8001a7e <HAL_ADC_ConfigChannel+0x44a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	2200      	movs	r2, #0
 8001a76:	2103      	movs	r1, #3
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f7ff fb5d 	bl	8001138 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	4618      	mov	r0, r3
 8001a84:	f7ff fc50 	bl	8001328 <LL_ADC_IsEnabled>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	f040 8140 	bne.w	8001d10 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6818      	ldr	r0, [r3, #0]
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	6819      	ldr	r1, [r3, #0]
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	68db      	ldr	r3, [r3, #12]
 8001a9c:	461a      	mov	r2, r3
 8001a9e:	f7ff fbd1 	bl	8001244 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	68db      	ldr	r3, [r3, #12]
 8001aa6:	4a8f      	ldr	r2, [pc, #572]	; (8001ce4 <HAL_ADC_ConfigChannel+0x6b0>)
 8001aa8:	4293      	cmp	r3, r2
 8001aaa:	f040 8131 	bne.w	8001d10 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d10b      	bne.n	8001ad6 <HAL_ADC_ConfigChannel+0x4a2>
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	0e9b      	lsrs	r3, r3, #26
 8001ac4:	3301      	adds	r3, #1
 8001ac6:	f003 031f 	and.w	r3, r3, #31
 8001aca:	2b09      	cmp	r3, #9
 8001acc:	bf94      	ite	ls
 8001ace:	2301      	movls	r3, #1
 8001ad0:	2300      	movhi	r3, #0
 8001ad2:	b2db      	uxtb	r3, r3
 8001ad4:	e019      	b.n	8001b0a <HAL_ADC_ConfigChannel+0x4d6>
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001adc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ade:	fa93 f3a3 	rbit	r3, r3
 8001ae2:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8001ae4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001ae6:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8001ae8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d101      	bne.n	8001af2 <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 8001aee:	2320      	movs	r3, #32
 8001af0:	e003      	b.n	8001afa <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 8001af2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001af4:	fab3 f383 	clz	r3, r3
 8001af8:	b2db      	uxtb	r3, r3
 8001afa:	3301      	adds	r3, #1
 8001afc:	f003 031f 	and.w	r3, r3, #31
 8001b00:	2b09      	cmp	r3, #9
 8001b02:	bf94      	ite	ls
 8001b04:	2301      	movls	r3, #1
 8001b06:	2300      	movhi	r3, #0
 8001b08:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d079      	beq.n	8001c02 <HAL_ADC_ConfigChannel+0x5ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d107      	bne.n	8001b2a <HAL_ADC_ConfigChannel+0x4f6>
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	0e9b      	lsrs	r3, r3, #26
 8001b20:	3301      	adds	r3, #1
 8001b22:	069b      	lsls	r3, r3, #26
 8001b24:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001b28:	e015      	b.n	8001b56 <HAL_ADC_ConfigChannel+0x522>
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b30:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001b32:	fa93 f3a3 	rbit	r3, r3
 8001b36:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001b38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001b3a:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8001b3c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d101      	bne.n	8001b46 <HAL_ADC_ConfigChannel+0x512>
    return 32U;
 8001b42:	2320      	movs	r3, #32
 8001b44:	e003      	b.n	8001b4e <HAL_ADC_ConfigChannel+0x51a>
  return __builtin_clz(value);
 8001b46:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b48:	fab3 f383 	clz	r3, r3
 8001b4c:	b2db      	uxtb	r3, r3
 8001b4e:	3301      	adds	r3, #1
 8001b50:	069b      	lsls	r3, r3, #26
 8001b52:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d109      	bne.n	8001b76 <HAL_ADC_ConfigChannel+0x542>
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	0e9b      	lsrs	r3, r3, #26
 8001b68:	3301      	adds	r3, #1
 8001b6a:	f003 031f 	and.w	r3, r3, #31
 8001b6e:	2101      	movs	r1, #1
 8001b70:	fa01 f303 	lsl.w	r3, r1, r3
 8001b74:	e017      	b.n	8001ba6 <HAL_ADC_ConfigChannel+0x572>
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b7e:	fa93 f3a3 	rbit	r3, r3
 8001b82:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8001b84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001b86:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8001b88:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d101      	bne.n	8001b92 <HAL_ADC_ConfigChannel+0x55e>
    return 32U;
 8001b8e:	2320      	movs	r3, #32
 8001b90:	e003      	b.n	8001b9a <HAL_ADC_ConfigChannel+0x566>
  return __builtin_clz(value);
 8001b92:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001b94:	fab3 f383 	clz	r3, r3
 8001b98:	b2db      	uxtb	r3, r3
 8001b9a:	3301      	adds	r3, #1
 8001b9c:	f003 031f 	and.w	r3, r3, #31
 8001ba0:	2101      	movs	r1, #1
 8001ba2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ba6:	ea42 0103 	orr.w	r1, r2, r3
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d10a      	bne.n	8001bcc <HAL_ADC_ConfigChannel+0x598>
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	0e9b      	lsrs	r3, r3, #26
 8001bbc:	3301      	adds	r3, #1
 8001bbe:	f003 021f 	and.w	r2, r3, #31
 8001bc2:	4613      	mov	r3, r2
 8001bc4:	005b      	lsls	r3, r3, #1
 8001bc6:	4413      	add	r3, r2
 8001bc8:	051b      	lsls	r3, r3, #20
 8001bca:	e018      	b.n	8001bfe <HAL_ADC_ConfigChannel+0x5ca>
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001bd4:	fa93 f3a3 	rbit	r3, r3
 8001bd8:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8001bda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001bdc:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8001bde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d101      	bne.n	8001be8 <HAL_ADC_ConfigChannel+0x5b4>
    return 32U;
 8001be4:	2320      	movs	r3, #32
 8001be6:	e003      	b.n	8001bf0 <HAL_ADC_ConfigChannel+0x5bc>
  return __builtin_clz(value);
 8001be8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001bea:	fab3 f383 	clz	r3, r3
 8001bee:	b2db      	uxtb	r3, r3
 8001bf0:	3301      	adds	r3, #1
 8001bf2:	f003 021f 	and.w	r2, r3, #31
 8001bf6:	4613      	mov	r3, r2
 8001bf8:	005b      	lsls	r3, r3, #1
 8001bfa:	4413      	add	r3, r2
 8001bfc:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001bfe:	430b      	orrs	r3, r1
 8001c00:	e081      	b.n	8001d06 <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d107      	bne.n	8001c1e <HAL_ADC_ConfigChannel+0x5ea>
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	0e9b      	lsrs	r3, r3, #26
 8001c14:	3301      	adds	r3, #1
 8001c16:	069b      	lsls	r3, r3, #26
 8001c18:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001c1c:	e015      	b.n	8001c4a <HAL_ADC_ConfigChannel+0x616>
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c26:	fa93 f3a3 	rbit	r3, r3
 8001c2a:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8001c2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c2e:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8001c30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d101      	bne.n	8001c3a <HAL_ADC_ConfigChannel+0x606>
    return 32U;
 8001c36:	2320      	movs	r3, #32
 8001c38:	e003      	b.n	8001c42 <HAL_ADC_ConfigChannel+0x60e>
  return __builtin_clz(value);
 8001c3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c3c:	fab3 f383 	clz	r3, r3
 8001c40:	b2db      	uxtb	r3, r3
 8001c42:	3301      	adds	r3, #1
 8001c44:	069b      	lsls	r3, r3, #26
 8001c46:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d109      	bne.n	8001c6a <HAL_ADC_ConfigChannel+0x636>
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	0e9b      	lsrs	r3, r3, #26
 8001c5c:	3301      	adds	r3, #1
 8001c5e:	f003 031f 	and.w	r3, r3, #31
 8001c62:	2101      	movs	r1, #1
 8001c64:	fa01 f303 	lsl.w	r3, r1, r3
 8001c68:	e017      	b.n	8001c9a <HAL_ADC_ConfigChannel+0x666>
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c70:	6a3b      	ldr	r3, [r7, #32]
 8001c72:	fa93 f3a3 	rbit	r3, r3
 8001c76:	61fb      	str	r3, [r7, #28]
  return result;
 8001c78:	69fb      	ldr	r3, [r7, #28]
 8001c7a:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d101      	bne.n	8001c86 <HAL_ADC_ConfigChannel+0x652>
    return 32U;
 8001c82:	2320      	movs	r3, #32
 8001c84:	e003      	b.n	8001c8e <HAL_ADC_ConfigChannel+0x65a>
  return __builtin_clz(value);
 8001c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c88:	fab3 f383 	clz	r3, r3
 8001c8c:	b2db      	uxtb	r3, r3
 8001c8e:	3301      	adds	r3, #1
 8001c90:	f003 031f 	and.w	r3, r3, #31
 8001c94:	2101      	movs	r1, #1
 8001c96:	fa01 f303 	lsl.w	r3, r1, r3
 8001c9a:	ea42 0103 	orr.w	r1, r2, r3
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d10d      	bne.n	8001cc6 <HAL_ADC_ConfigChannel+0x692>
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	0e9b      	lsrs	r3, r3, #26
 8001cb0:	3301      	adds	r3, #1
 8001cb2:	f003 021f 	and.w	r2, r3, #31
 8001cb6:	4613      	mov	r3, r2
 8001cb8:	005b      	lsls	r3, r3, #1
 8001cba:	4413      	add	r3, r2
 8001cbc:	3b1e      	subs	r3, #30
 8001cbe:	051b      	lsls	r3, r3, #20
 8001cc0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001cc4:	e01e      	b.n	8001d04 <HAL_ADC_ConfigChannel+0x6d0>
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ccc:	697b      	ldr	r3, [r7, #20]
 8001cce:	fa93 f3a3 	rbit	r3, r3
 8001cd2:	613b      	str	r3, [r7, #16]
  return result;
 8001cd4:	693b      	ldr	r3, [r7, #16]
 8001cd6:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001cd8:	69bb      	ldr	r3, [r7, #24]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d104      	bne.n	8001ce8 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8001cde:	2320      	movs	r3, #32
 8001ce0:	e006      	b.n	8001cf0 <HAL_ADC_ConfigChannel+0x6bc>
 8001ce2:	bf00      	nop
 8001ce4:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8001ce8:	69bb      	ldr	r3, [r7, #24]
 8001cea:	fab3 f383 	clz	r3, r3
 8001cee:	b2db      	uxtb	r3, r3
 8001cf0:	3301      	adds	r3, #1
 8001cf2:	f003 021f 	and.w	r2, r3, #31
 8001cf6:	4613      	mov	r3, r2
 8001cf8:	005b      	lsls	r3, r3, #1
 8001cfa:	4413      	add	r3, r2
 8001cfc:	3b1e      	subs	r3, #30
 8001cfe:	051b      	lsls	r3, r3, #20
 8001d00:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001d04:	430b      	orrs	r3, r1
 8001d06:	683a      	ldr	r2, [r7, #0]
 8001d08:	6892      	ldr	r2, [r2, #8]
 8001d0a:	4619      	mov	r1, r3
 8001d0c:	f7ff fa6e 	bl	80011ec <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	681a      	ldr	r2, [r3, #0]
 8001d14:	4b3d      	ldr	r3, [pc, #244]	; (8001e0c <HAL_ADC_ConfigChannel+0x7d8>)
 8001d16:	4013      	ands	r3, r2
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d06c      	beq.n	8001df6 <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001d1c:	483c      	ldr	r0, [pc, #240]	; (8001e10 <HAL_ADC_ConfigChannel+0x7dc>)
 8001d1e:	f7ff f9c3 	bl	80010a8 <LL_ADC_GetCommonPathInternalCh>
 8001d22:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	4a3a      	ldr	r2, [pc, #232]	; (8001e14 <HAL_ADC_ConfigChannel+0x7e0>)
 8001d2c:	4293      	cmp	r3, r2
 8001d2e:	d127      	bne.n	8001d80 <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001d30:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001d34:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d121      	bne.n	8001d80 <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4a35      	ldr	r2, [pc, #212]	; (8001e18 <HAL_ADC_ConfigChannel+0x7e4>)
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d157      	bne.n	8001df6 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001d46:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001d4a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001d4e:	4619      	mov	r1, r3
 8001d50:	482f      	ldr	r0, [pc, #188]	; (8001e10 <HAL_ADC_ConfigChannel+0x7dc>)
 8001d52:	f7ff f996 	bl	8001082 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001d56:	4b31      	ldr	r3, [pc, #196]	; (8001e1c <HAL_ADC_ConfigChannel+0x7e8>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	099b      	lsrs	r3, r3, #6
 8001d5c:	4a30      	ldr	r2, [pc, #192]	; (8001e20 <HAL_ADC_ConfigChannel+0x7ec>)
 8001d5e:	fba2 2303 	umull	r2, r3, r2, r3
 8001d62:	099b      	lsrs	r3, r3, #6
 8001d64:	1c5a      	adds	r2, r3, #1
 8001d66:	4613      	mov	r3, r2
 8001d68:	005b      	lsls	r3, r3, #1
 8001d6a:	4413      	add	r3, r2
 8001d6c:	009b      	lsls	r3, r3, #2
 8001d6e:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001d70:	e002      	b.n	8001d78 <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	3b01      	subs	r3, #1
 8001d76:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d1f9      	bne.n	8001d72 <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001d7e:	e03a      	b.n	8001df6 <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4a27      	ldr	r2, [pc, #156]	; (8001e24 <HAL_ADC_ConfigChannel+0x7f0>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d113      	bne.n	8001db2 <HAL_ADC_ConfigChannel+0x77e>
 8001d8a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001d8e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d10d      	bne.n	8001db2 <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4a1f      	ldr	r2, [pc, #124]	; (8001e18 <HAL_ADC_ConfigChannel+0x7e4>)
 8001d9c:	4293      	cmp	r3, r2
 8001d9e:	d12a      	bne.n	8001df6 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001da0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001da4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001da8:	4619      	mov	r1, r3
 8001daa:	4819      	ldr	r0, [pc, #100]	; (8001e10 <HAL_ADC_ConfigChannel+0x7dc>)
 8001dac:	f7ff f969 	bl	8001082 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001db0:	e021      	b.n	8001df6 <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	4a1c      	ldr	r2, [pc, #112]	; (8001e28 <HAL_ADC_ConfigChannel+0x7f4>)
 8001db8:	4293      	cmp	r3, r2
 8001dba:	d11c      	bne.n	8001df6 <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001dbc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001dc0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d116      	bne.n	8001df6 <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4a12      	ldr	r2, [pc, #72]	; (8001e18 <HAL_ADC_ConfigChannel+0x7e4>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d111      	bne.n	8001df6 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001dd2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001dd6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001dda:	4619      	mov	r1, r3
 8001ddc:	480c      	ldr	r0, [pc, #48]	; (8001e10 <HAL_ADC_ConfigChannel+0x7dc>)
 8001dde:	f7ff f950 	bl	8001082 <LL_ADC_SetCommonPathInternalCh>
 8001de2:	e008      	b.n	8001df6 <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001de8:	f043 0220 	orr.w	r2, r3, #32
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001df0:	2301      	movs	r3, #1
 8001df2:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	2200      	movs	r2, #0
 8001dfa:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8001dfe:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8001e02:	4618      	mov	r0, r3
 8001e04:	37d8      	adds	r7, #216	; 0xd8
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}
 8001e0a:	bf00      	nop
 8001e0c:	80080000 	.word	0x80080000
 8001e10:	50040300 	.word	0x50040300
 8001e14:	c7520000 	.word	0xc7520000
 8001e18:	50040000 	.word	0x50040000
 8001e1c:	20000000 	.word	0x20000000
 8001e20:	053e2d63 	.word	0x053e2d63
 8001e24:	cb840000 	.word	0xcb840000
 8001e28:	80000001 	.word	0x80000001

08001e2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	b085      	sub	sp, #20
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	f003 0307 	and.w	r3, r3, #7
 8001e3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e3c:	4b0c      	ldr	r3, [pc, #48]	; (8001e70 <__NVIC_SetPriorityGrouping+0x44>)
 8001e3e:	68db      	ldr	r3, [r3, #12]
 8001e40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e42:	68ba      	ldr	r2, [r7, #8]
 8001e44:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e48:	4013      	ands	r3, r2
 8001e4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e50:	68bb      	ldr	r3, [r7, #8]
 8001e52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e54:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e5e:	4a04      	ldr	r2, [pc, #16]	; (8001e70 <__NVIC_SetPriorityGrouping+0x44>)
 8001e60:	68bb      	ldr	r3, [r7, #8]
 8001e62:	60d3      	str	r3, [r2, #12]
}
 8001e64:	bf00      	nop
 8001e66:	3714      	adds	r7, #20
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6e:	4770      	bx	lr
 8001e70:	e000ed00 	.word	0xe000ed00

08001e74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e74:	b480      	push	{r7}
 8001e76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e78:	4b04      	ldr	r3, [pc, #16]	; (8001e8c <__NVIC_GetPriorityGrouping+0x18>)
 8001e7a:	68db      	ldr	r3, [r3, #12]
 8001e7c:	0a1b      	lsrs	r3, r3, #8
 8001e7e:	f003 0307 	and.w	r3, r3, #7
}
 8001e82:	4618      	mov	r0, r3
 8001e84:	46bd      	mov	sp, r7
 8001e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8a:	4770      	bx	lr
 8001e8c:	e000ed00 	.word	0xe000ed00

08001e90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e90:	b480      	push	{r7}
 8001e92:	b083      	sub	sp, #12
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	4603      	mov	r3, r0
 8001e98:	6039      	str	r1, [r7, #0]
 8001e9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	db0a      	blt.n	8001eba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	b2da      	uxtb	r2, r3
 8001ea8:	490c      	ldr	r1, [pc, #48]	; (8001edc <__NVIC_SetPriority+0x4c>)
 8001eaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eae:	0112      	lsls	r2, r2, #4
 8001eb0:	b2d2      	uxtb	r2, r2
 8001eb2:	440b      	add	r3, r1
 8001eb4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001eb8:	e00a      	b.n	8001ed0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	b2da      	uxtb	r2, r3
 8001ebe:	4908      	ldr	r1, [pc, #32]	; (8001ee0 <__NVIC_SetPriority+0x50>)
 8001ec0:	79fb      	ldrb	r3, [r7, #7]
 8001ec2:	f003 030f 	and.w	r3, r3, #15
 8001ec6:	3b04      	subs	r3, #4
 8001ec8:	0112      	lsls	r2, r2, #4
 8001eca:	b2d2      	uxtb	r2, r2
 8001ecc:	440b      	add	r3, r1
 8001ece:	761a      	strb	r2, [r3, #24]
}
 8001ed0:	bf00      	nop
 8001ed2:	370c      	adds	r7, #12
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eda:	4770      	bx	lr
 8001edc:	e000e100 	.word	0xe000e100
 8001ee0:	e000ed00 	.word	0xe000ed00

08001ee4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	b089      	sub	sp, #36	; 0x24
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	60f8      	str	r0, [r7, #12]
 8001eec:	60b9      	str	r1, [r7, #8]
 8001eee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	f003 0307 	and.w	r3, r3, #7
 8001ef6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ef8:	69fb      	ldr	r3, [r7, #28]
 8001efa:	f1c3 0307 	rsb	r3, r3, #7
 8001efe:	2b04      	cmp	r3, #4
 8001f00:	bf28      	it	cs
 8001f02:	2304      	movcs	r3, #4
 8001f04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f06:	69fb      	ldr	r3, [r7, #28]
 8001f08:	3304      	adds	r3, #4
 8001f0a:	2b06      	cmp	r3, #6
 8001f0c:	d902      	bls.n	8001f14 <NVIC_EncodePriority+0x30>
 8001f0e:	69fb      	ldr	r3, [r7, #28]
 8001f10:	3b03      	subs	r3, #3
 8001f12:	e000      	b.n	8001f16 <NVIC_EncodePriority+0x32>
 8001f14:	2300      	movs	r3, #0
 8001f16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f18:	f04f 32ff 	mov.w	r2, #4294967295
 8001f1c:	69bb      	ldr	r3, [r7, #24]
 8001f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f22:	43da      	mvns	r2, r3
 8001f24:	68bb      	ldr	r3, [r7, #8]
 8001f26:	401a      	ands	r2, r3
 8001f28:	697b      	ldr	r3, [r7, #20]
 8001f2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f2c:	f04f 31ff 	mov.w	r1, #4294967295
 8001f30:	697b      	ldr	r3, [r7, #20]
 8001f32:	fa01 f303 	lsl.w	r3, r1, r3
 8001f36:	43d9      	mvns	r1, r3
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f3c:	4313      	orrs	r3, r2
         );
}
 8001f3e:	4618      	mov	r0, r3
 8001f40:	3724      	adds	r7, #36	; 0x24
 8001f42:	46bd      	mov	sp, r7
 8001f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f48:	4770      	bx	lr
	...

08001f4c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b082      	sub	sp, #8
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	3b01      	subs	r3, #1
 8001f58:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f5c:	d301      	bcc.n	8001f62 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f5e:	2301      	movs	r3, #1
 8001f60:	e00f      	b.n	8001f82 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f62:	4a0a      	ldr	r2, [pc, #40]	; (8001f8c <SysTick_Config+0x40>)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	3b01      	subs	r3, #1
 8001f68:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f6a:	210f      	movs	r1, #15
 8001f6c:	f04f 30ff 	mov.w	r0, #4294967295
 8001f70:	f7ff ff8e 	bl	8001e90 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f74:	4b05      	ldr	r3, [pc, #20]	; (8001f8c <SysTick_Config+0x40>)
 8001f76:	2200      	movs	r2, #0
 8001f78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f7a:	4b04      	ldr	r3, [pc, #16]	; (8001f8c <SysTick_Config+0x40>)
 8001f7c:	2207      	movs	r2, #7
 8001f7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f80:	2300      	movs	r3, #0
}
 8001f82:	4618      	mov	r0, r3
 8001f84:	3708      	adds	r7, #8
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd80      	pop	{r7, pc}
 8001f8a:	bf00      	nop
 8001f8c:	e000e010 	.word	0xe000e010

08001f90 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b082      	sub	sp, #8
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f98:	6878      	ldr	r0, [r7, #4]
 8001f9a:	f7ff ff47 	bl	8001e2c <__NVIC_SetPriorityGrouping>
}
 8001f9e:	bf00      	nop
 8001fa0:	3708      	adds	r7, #8
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bd80      	pop	{r7, pc}

08001fa6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fa6:	b580      	push	{r7, lr}
 8001fa8:	b086      	sub	sp, #24
 8001faa:	af00      	add	r7, sp, #0
 8001fac:	4603      	mov	r3, r0
 8001fae:	60b9      	str	r1, [r7, #8]
 8001fb0:	607a      	str	r2, [r7, #4]
 8001fb2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001fb8:	f7ff ff5c 	bl	8001e74 <__NVIC_GetPriorityGrouping>
 8001fbc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001fbe:	687a      	ldr	r2, [r7, #4]
 8001fc0:	68b9      	ldr	r1, [r7, #8]
 8001fc2:	6978      	ldr	r0, [r7, #20]
 8001fc4:	f7ff ff8e 	bl	8001ee4 <NVIC_EncodePriority>
 8001fc8:	4602      	mov	r2, r0
 8001fca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fce:	4611      	mov	r1, r2
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	f7ff ff5d 	bl	8001e90 <__NVIC_SetPriority>
}
 8001fd6:	bf00      	nop
 8001fd8:	3718      	adds	r7, #24
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bd80      	pop	{r7, pc}

08001fde <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001fde:	b580      	push	{r7, lr}
 8001fe0:	b082      	sub	sp, #8
 8001fe2:	af00      	add	r7, sp, #0
 8001fe4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001fe6:	6878      	ldr	r0, [r7, #4]
 8001fe8:	f7ff ffb0 	bl	8001f4c <SysTick_Config>
 8001fec:	4603      	mov	r3, r0
}
 8001fee:	4618      	mov	r0, r3
 8001ff0:	3708      	adds	r7, #8
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}
	...

08001ff8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	b087      	sub	sp, #28
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
 8002000:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002002:	2300      	movs	r3, #0
 8002004:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002006:	e154      	b.n	80022b2 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	681a      	ldr	r2, [r3, #0]
 800200c:	2101      	movs	r1, #1
 800200e:	697b      	ldr	r3, [r7, #20]
 8002010:	fa01 f303 	lsl.w	r3, r1, r3
 8002014:	4013      	ands	r3, r2
 8002016:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	2b00      	cmp	r3, #0
 800201c:	f000 8146 	beq.w	80022ac <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	f003 0303 	and.w	r3, r3, #3
 8002028:	2b01      	cmp	r3, #1
 800202a:	d005      	beq.n	8002038 <HAL_GPIO_Init+0x40>
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	f003 0303 	and.w	r3, r3, #3
 8002034:	2b02      	cmp	r3, #2
 8002036:	d130      	bne.n	800209a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	689b      	ldr	r3, [r3, #8]
 800203c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800203e:	697b      	ldr	r3, [r7, #20]
 8002040:	005b      	lsls	r3, r3, #1
 8002042:	2203      	movs	r2, #3
 8002044:	fa02 f303 	lsl.w	r3, r2, r3
 8002048:	43db      	mvns	r3, r3
 800204a:	693a      	ldr	r2, [r7, #16]
 800204c:	4013      	ands	r3, r2
 800204e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	68da      	ldr	r2, [r3, #12]
 8002054:	697b      	ldr	r3, [r7, #20]
 8002056:	005b      	lsls	r3, r3, #1
 8002058:	fa02 f303 	lsl.w	r3, r2, r3
 800205c:	693a      	ldr	r2, [r7, #16]
 800205e:	4313      	orrs	r3, r2
 8002060:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	693a      	ldr	r2, [r7, #16]
 8002066:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800206e:	2201      	movs	r2, #1
 8002070:	697b      	ldr	r3, [r7, #20]
 8002072:	fa02 f303 	lsl.w	r3, r2, r3
 8002076:	43db      	mvns	r3, r3
 8002078:	693a      	ldr	r2, [r7, #16]
 800207a:	4013      	ands	r3, r2
 800207c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	091b      	lsrs	r3, r3, #4
 8002084:	f003 0201 	and.w	r2, r3, #1
 8002088:	697b      	ldr	r3, [r7, #20]
 800208a:	fa02 f303 	lsl.w	r3, r2, r3
 800208e:	693a      	ldr	r2, [r7, #16]
 8002090:	4313      	orrs	r3, r2
 8002092:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	693a      	ldr	r2, [r7, #16]
 8002098:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	685b      	ldr	r3, [r3, #4]
 800209e:	f003 0303 	and.w	r3, r3, #3
 80020a2:	2b03      	cmp	r3, #3
 80020a4:	d017      	beq.n	80020d6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	68db      	ldr	r3, [r3, #12]
 80020aa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80020ac:	697b      	ldr	r3, [r7, #20]
 80020ae:	005b      	lsls	r3, r3, #1
 80020b0:	2203      	movs	r2, #3
 80020b2:	fa02 f303 	lsl.w	r3, r2, r3
 80020b6:	43db      	mvns	r3, r3
 80020b8:	693a      	ldr	r2, [r7, #16]
 80020ba:	4013      	ands	r3, r2
 80020bc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	689a      	ldr	r2, [r3, #8]
 80020c2:	697b      	ldr	r3, [r7, #20]
 80020c4:	005b      	lsls	r3, r3, #1
 80020c6:	fa02 f303 	lsl.w	r3, r2, r3
 80020ca:	693a      	ldr	r2, [r7, #16]
 80020cc:	4313      	orrs	r3, r2
 80020ce:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	693a      	ldr	r2, [r7, #16]
 80020d4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	f003 0303 	and.w	r3, r3, #3
 80020de:	2b02      	cmp	r3, #2
 80020e0:	d123      	bne.n	800212a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80020e2:	697b      	ldr	r3, [r7, #20]
 80020e4:	08da      	lsrs	r2, r3, #3
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	3208      	adds	r2, #8
 80020ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020ee:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80020f0:	697b      	ldr	r3, [r7, #20]
 80020f2:	f003 0307 	and.w	r3, r3, #7
 80020f6:	009b      	lsls	r3, r3, #2
 80020f8:	220f      	movs	r2, #15
 80020fa:	fa02 f303 	lsl.w	r3, r2, r3
 80020fe:	43db      	mvns	r3, r3
 8002100:	693a      	ldr	r2, [r7, #16]
 8002102:	4013      	ands	r3, r2
 8002104:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	691a      	ldr	r2, [r3, #16]
 800210a:	697b      	ldr	r3, [r7, #20]
 800210c:	f003 0307 	and.w	r3, r3, #7
 8002110:	009b      	lsls	r3, r3, #2
 8002112:	fa02 f303 	lsl.w	r3, r2, r3
 8002116:	693a      	ldr	r2, [r7, #16]
 8002118:	4313      	orrs	r3, r2
 800211a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800211c:	697b      	ldr	r3, [r7, #20]
 800211e:	08da      	lsrs	r2, r3, #3
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	3208      	adds	r2, #8
 8002124:	6939      	ldr	r1, [r7, #16]
 8002126:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002130:	697b      	ldr	r3, [r7, #20]
 8002132:	005b      	lsls	r3, r3, #1
 8002134:	2203      	movs	r2, #3
 8002136:	fa02 f303 	lsl.w	r3, r2, r3
 800213a:	43db      	mvns	r3, r3
 800213c:	693a      	ldr	r2, [r7, #16]
 800213e:	4013      	ands	r3, r2
 8002140:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	685b      	ldr	r3, [r3, #4]
 8002146:	f003 0203 	and.w	r2, r3, #3
 800214a:	697b      	ldr	r3, [r7, #20]
 800214c:	005b      	lsls	r3, r3, #1
 800214e:	fa02 f303 	lsl.w	r3, r2, r3
 8002152:	693a      	ldr	r2, [r7, #16]
 8002154:	4313      	orrs	r3, r2
 8002156:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	693a      	ldr	r2, [r7, #16]
 800215c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	685b      	ldr	r3, [r3, #4]
 8002162:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002166:	2b00      	cmp	r3, #0
 8002168:	f000 80a0 	beq.w	80022ac <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800216c:	4b58      	ldr	r3, [pc, #352]	; (80022d0 <HAL_GPIO_Init+0x2d8>)
 800216e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002170:	4a57      	ldr	r2, [pc, #348]	; (80022d0 <HAL_GPIO_Init+0x2d8>)
 8002172:	f043 0301 	orr.w	r3, r3, #1
 8002176:	6613      	str	r3, [r2, #96]	; 0x60
 8002178:	4b55      	ldr	r3, [pc, #340]	; (80022d0 <HAL_GPIO_Init+0x2d8>)
 800217a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800217c:	f003 0301 	and.w	r3, r3, #1
 8002180:	60bb      	str	r3, [r7, #8]
 8002182:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002184:	4a53      	ldr	r2, [pc, #332]	; (80022d4 <HAL_GPIO_Init+0x2dc>)
 8002186:	697b      	ldr	r3, [r7, #20]
 8002188:	089b      	lsrs	r3, r3, #2
 800218a:	3302      	adds	r3, #2
 800218c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002190:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002192:	697b      	ldr	r3, [r7, #20]
 8002194:	f003 0303 	and.w	r3, r3, #3
 8002198:	009b      	lsls	r3, r3, #2
 800219a:	220f      	movs	r2, #15
 800219c:	fa02 f303 	lsl.w	r3, r2, r3
 80021a0:	43db      	mvns	r3, r3
 80021a2:	693a      	ldr	r2, [r7, #16]
 80021a4:	4013      	ands	r3, r2
 80021a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80021ae:	d019      	beq.n	80021e4 <HAL_GPIO_Init+0x1ec>
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	4a49      	ldr	r2, [pc, #292]	; (80022d8 <HAL_GPIO_Init+0x2e0>)
 80021b4:	4293      	cmp	r3, r2
 80021b6:	d013      	beq.n	80021e0 <HAL_GPIO_Init+0x1e8>
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	4a48      	ldr	r2, [pc, #288]	; (80022dc <HAL_GPIO_Init+0x2e4>)
 80021bc:	4293      	cmp	r3, r2
 80021be:	d00d      	beq.n	80021dc <HAL_GPIO_Init+0x1e4>
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	4a47      	ldr	r2, [pc, #284]	; (80022e0 <HAL_GPIO_Init+0x2e8>)
 80021c4:	4293      	cmp	r3, r2
 80021c6:	d007      	beq.n	80021d8 <HAL_GPIO_Init+0x1e0>
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	4a46      	ldr	r2, [pc, #280]	; (80022e4 <HAL_GPIO_Init+0x2ec>)
 80021cc:	4293      	cmp	r3, r2
 80021ce:	d101      	bne.n	80021d4 <HAL_GPIO_Init+0x1dc>
 80021d0:	2304      	movs	r3, #4
 80021d2:	e008      	b.n	80021e6 <HAL_GPIO_Init+0x1ee>
 80021d4:	2307      	movs	r3, #7
 80021d6:	e006      	b.n	80021e6 <HAL_GPIO_Init+0x1ee>
 80021d8:	2303      	movs	r3, #3
 80021da:	e004      	b.n	80021e6 <HAL_GPIO_Init+0x1ee>
 80021dc:	2302      	movs	r3, #2
 80021de:	e002      	b.n	80021e6 <HAL_GPIO_Init+0x1ee>
 80021e0:	2301      	movs	r3, #1
 80021e2:	e000      	b.n	80021e6 <HAL_GPIO_Init+0x1ee>
 80021e4:	2300      	movs	r3, #0
 80021e6:	697a      	ldr	r2, [r7, #20]
 80021e8:	f002 0203 	and.w	r2, r2, #3
 80021ec:	0092      	lsls	r2, r2, #2
 80021ee:	4093      	lsls	r3, r2
 80021f0:	693a      	ldr	r2, [r7, #16]
 80021f2:	4313      	orrs	r3, r2
 80021f4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80021f6:	4937      	ldr	r1, [pc, #220]	; (80022d4 <HAL_GPIO_Init+0x2dc>)
 80021f8:	697b      	ldr	r3, [r7, #20]
 80021fa:	089b      	lsrs	r3, r3, #2
 80021fc:	3302      	adds	r3, #2
 80021fe:	693a      	ldr	r2, [r7, #16]
 8002200:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002204:	4b38      	ldr	r3, [pc, #224]	; (80022e8 <HAL_GPIO_Init+0x2f0>)
 8002206:	689b      	ldr	r3, [r3, #8]
 8002208:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	43db      	mvns	r3, r3
 800220e:	693a      	ldr	r2, [r7, #16]
 8002210:	4013      	ands	r3, r2
 8002212:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800221c:	2b00      	cmp	r3, #0
 800221e:	d003      	beq.n	8002228 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8002220:	693a      	ldr	r2, [r7, #16]
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	4313      	orrs	r3, r2
 8002226:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002228:	4a2f      	ldr	r2, [pc, #188]	; (80022e8 <HAL_GPIO_Init+0x2f0>)
 800222a:	693b      	ldr	r3, [r7, #16]
 800222c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800222e:	4b2e      	ldr	r3, [pc, #184]	; (80022e8 <HAL_GPIO_Init+0x2f0>)
 8002230:	68db      	ldr	r3, [r3, #12]
 8002232:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	43db      	mvns	r3, r3
 8002238:	693a      	ldr	r2, [r7, #16]
 800223a:	4013      	ands	r3, r2
 800223c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	685b      	ldr	r3, [r3, #4]
 8002242:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002246:	2b00      	cmp	r3, #0
 8002248:	d003      	beq.n	8002252 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 800224a:	693a      	ldr	r2, [r7, #16]
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	4313      	orrs	r3, r2
 8002250:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002252:	4a25      	ldr	r2, [pc, #148]	; (80022e8 <HAL_GPIO_Init+0x2f0>)
 8002254:	693b      	ldr	r3, [r7, #16]
 8002256:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002258:	4b23      	ldr	r3, [pc, #140]	; (80022e8 <HAL_GPIO_Init+0x2f0>)
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	43db      	mvns	r3, r3
 8002262:	693a      	ldr	r2, [r7, #16]
 8002264:	4013      	ands	r3, r2
 8002266:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002270:	2b00      	cmp	r3, #0
 8002272:	d003      	beq.n	800227c <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8002274:	693a      	ldr	r2, [r7, #16]
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	4313      	orrs	r3, r2
 800227a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800227c:	4a1a      	ldr	r2, [pc, #104]	; (80022e8 <HAL_GPIO_Init+0x2f0>)
 800227e:	693b      	ldr	r3, [r7, #16]
 8002280:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002282:	4b19      	ldr	r3, [pc, #100]	; (80022e8 <HAL_GPIO_Init+0x2f0>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	43db      	mvns	r3, r3
 800228c:	693a      	ldr	r2, [r7, #16]
 800228e:	4013      	ands	r3, r2
 8002290:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800229a:	2b00      	cmp	r3, #0
 800229c:	d003      	beq.n	80022a6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800229e:	693a      	ldr	r2, [r7, #16]
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	4313      	orrs	r3, r2
 80022a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80022a6:	4a10      	ldr	r2, [pc, #64]	; (80022e8 <HAL_GPIO_Init+0x2f0>)
 80022a8:	693b      	ldr	r3, [r7, #16]
 80022aa:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80022ac:	697b      	ldr	r3, [r7, #20]
 80022ae:	3301      	adds	r3, #1
 80022b0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	681a      	ldr	r2, [r3, #0]
 80022b6:	697b      	ldr	r3, [r7, #20]
 80022b8:	fa22 f303 	lsr.w	r3, r2, r3
 80022bc:	2b00      	cmp	r3, #0
 80022be:	f47f aea3 	bne.w	8002008 <HAL_GPIO_Init+0x10>
  }
}
 80022c2:	bf00      	nop
 80022c4:	bf00      	nop
 80022c6:	371c      	adds	r7, #28
 80022c8:	46bd      	mov	sp, r7
 80022ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ce:	4770      	bx	lr
 80022d0:	40021000 	.word	0x40021000
 80022d4:	40010000 	.word	0x40010000
 80022d8:	48000400 	.word	0x48000400
 80022dc:	48000800 	.word	0x48000800
 80022e0:	48000c00 	.word	0x48000c00
 80022e4:	48001000 	.word	0x48001000
 80022e8:	40010400 	.word	0x40010400

080022ec <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80022ec:	b480      	push	{r7}
 80022ee:	b085      	sub	sp, #20
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
 80022f4:	460b      	mov	r3, r1
 80022f6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	691a      	ldr	r2, [r3, #16]
 80022fc:	887b      	ldrh	r3, [r7, #2]
 80022fe:	4013      	ands	r3, r2
 8002300:	2b00      	cmp	r3, #0
 8002302:	d002      	beq.n	800230a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002304:	2301      	movs	r3, #1
 8002306:	73fb      	strb	r3, [r7, #15]
 8002308:	e001      	b.n	800230e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800230a:	2300      	movs	r3, #0
 800230c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800230e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002310:	4618      	mov	r0, r3
 8002312:	3714      	adds	r7, #20
 8002314:	46bd      	mov	sp, r7
 8002316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231a:	4770      	bx	lr

0800231c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800231c:	b480      	push	{r7}
 800231e:	b083      	sub	sp, #12
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
 8002324:	460b      	mov	r3, r1
 8002326:	807b      	strh	r3, [r7, #2]
 8002328:	4613      	mov	r3, r2
 800232a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800232c:	787b      	ldrb	r3, [r7, #1]
 800232e:	2b00      	cmp	r3, #0
 8002330:	d003      	beq.n	800233a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002332:	887a      	ldrh	r2, [r7, #2]
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002338:	e002      	b.n	8002340 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800233a:	887a      	ldrh	r2, [r7, #2]
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002340:	bf00      	nop
 8002342:	370c      	adds	r7, #12
 8002344:	46bd      	mov	sp, r7
 8002346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234a:	4770      	bx	lr

0800234c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800234c:	b480      	push	{r7}
 800234e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002350:	4b04      	ldr	r3, [pc, #16]	; (8002364 <HAL_PWREx_GetVoltageRange+0x18>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002358:	4618      	mov	r0, r3
 800235a:	46bd      	mov	sp, r7
 800235c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002360:	4770      	bx	lr
 8002362:	bf00      	nop
 8002364:	40007000 	.word	0x40007000

08002368 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002368:	b480      	push	{r7}
 800236a:	b085      	sub	sp, #20
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002376:	d130      	bne.n	80023da <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002378:	4b23      	ldr	r3, [pc, #140]	; (8002408 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002380:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002384:	d038      	beq.n	80023f8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002386:	4b20      	ldr	r3, [pc, #128]	; (8002408 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800238e:	4a1e      	ldr	r2, [pc, #120]	; (8002408 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002390:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002394:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002396:	4b1d      	ldr	r3, [pc, #116]	; (800240c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	2232      	movs	r2, #50	; 0x32
 800239c:	fb02 f303 	mul.w	r3, r2, r3
 80023a0:	4a1b      	ldr	r2, [pc, #108]	; (8002410 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80023a2:	fba2 2303 	umull	r2, r3, r2, r3
 80023a6:	0c9b      	lsrs	r3, r3, #18
 80023a8:	3301      	adds	r3, #1
 80023aa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80023ac:	e002      	b.n	80023b4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	3b01      	subs	r3, #1
 80023b2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80023b4:	4b14      	ldr	r3, [pc, #80]	; (8002408 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80023b6:	695b      	ldr	r3, [r3, #20]
 80023b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023c0:	d102      	bne.n	80023c8 <HAL_PWREx_ControlVoltageScaling+0x60>
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d1f2      	bne.n	80023ae <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80023c8:	4b0f      	ldr	r3, [pc, #60]	; (8002408 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80023ca:	695b      	ldr	r3, [r3, #20]
 80023cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023d4:	d110      	bne.n	80023f8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80023d6:	2303      	movs	r3, #3
 80023d8:	e00f      	b.n	80023fa <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80023da:	4b0b      	ldr	r3, [pc, #44]	; (8002408 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80023e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023e6:	d007      	beq.n	80023f8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80023e8:	4b07      	ldr	r3, [pc, #28]	; (8002408 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80023f0:	4a05      	ldr	r2, [pc, #20]	; (8002408 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80023f2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80023f6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80023f8:	2300      	movs	r3, #0
}
 80023fa:	4618      	mov	r0, r3
 80023fc:	3714      	adds	r7, #20
 80023fe:	46bd      	mov	sp, r7
 8002400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002404:	4770      	bx	lr
 8002406:	bf00      	nop
 8002408:	40007000 	.word	0x40007000
 800240c:	20000000 	.word	0x20000000
 8002410:	431bde83 	.word	0x431bde83

08002414 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b088      	sub	sp, #32
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d102      	bne.n	8002428 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002422:	2301      	movs	r3, #1
 8002424:	f000 bc02 	b.w	8002c2c <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002428:	4b96      	ldr	r3, [pc, #600]	; (8002684 <HAL_RCC_OscConfig+0x270>)
 800242a:	689b      	ldr	r3, [r3, #8]
 800242c:	f003 030c 	and.w	r3, r3, #12
 8002430:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002432:	4b94      	ldr	r3, [pc, #592]	; (8002684 <HAL_RCC_OscConfig+0x270>)
 8002434:	68db      	ldr	r3, [r3, #12]
 8002436:	f003 0303 	and.w	r3, r3, #3
 800243a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f003 0310 	and.w	r3, r3, #16
 8002444:	2b00      	cmp	r3, #0
 8002446:	f000 80e4 	beq.w	8002612 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800244a:	69bb      	ldr	r3, [r7, #24]
 800244c:	2b00      	cmp	r3, #0
 800244e:	d007      	beq.n	8002460 <HAL_RCC_OscConfig+0x4c>
 8002450:	69bb      	ldr	r3, [r7, #24]
 8002452:	2b0c      	cmp	r3, #12
 8002454:	f040 808b 	bne.w	800256e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002458:	697b      	ldr	r3, [r7, #20]
 800245a:	2b01      	cmp	r3, #1
 800245c:	f040 8087 	bne.w	800256e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002460:	4b88      	ldr	r3, [pc, #544]	; (8002684 <HAL_RCC_OscConfig+0x270>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f003 0302 	and.w	r3, r3, #2
 8002468:	2b00      	cmp	r3, #0
 800246a:	d005      	beq.n	8002478 <HAL_RCC_OscConfig+0x64>
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	699b      	ldr	r3, [r3, #24]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d101      	bne.n	8002478 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002474:	2301      	movs	r3, #1
 8002476:	e3d9      	b.n	8002c2c <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6a1a      	ldr	r2, [r3, #32]
 800247c:	4b81      	ldr	r3, [pc, #516]	; (8002684 <HAL_RCC_OscConfig+0x270>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f003 0308 	and.w	r3, r3, #8
 8002484:	2b00      	cmp	r3, #0
 8002486:	d004      	beq.n	8002492 <HAL_RCC_OscConfig+0x7e>
 8002488:	4b7e      	ldr	r3, [pc, #504]	; (8002684 <HAL_RCC_OscConfig+0x270>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002490:	e005      	b.n	800249e <HAL_RCC_OscConfig+0x8a>
 8002492:	4b7c      	ldr	r3, [pc, #496]	; (8002684 <HAL_RCC_OscConfig+0x270>)
 8002494:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002498:	091b      	lsrs	r3, r3, #4
 800249a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800249e:	4293      	cmp	r3, r2
 80024a0:	d223      	bcs.n	80024ea <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6a1b      	ldr	r3, [r3, #32]
 80024a6:	4618      	mov	r0, r3
 80024a8:	f000 fd8c 	bl	8002fc4 <RCC_SetFlashLatencyFromMSIRange>
 80024ac:	4603      	mov	r3, r0
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d001      	beq.n	80024b6 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80024b2:	2301      	movs	r3, #1
 80024b4:	e3ba      	b.n	8002c2c <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80024b6:	4b73      	ldr	r3, [pc, #460]	; (8002684 <HAL_RCC_OscConfig+0x270>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	4a72      	ldr	r2, [pc, #456]	; (8002684 <HAL_RCC_OscConfig+0x270>)
 80024bc:	f043 0308 	orr.w	r3, r3, #8
 80024c0:	6013      	str	r3, [r2, #0]
 80024c2:	4b70      	ldr	r3, [pc, #448]	; (8002684 <HAL_RCC_OscConfig+0x270>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6a1b      	ldr	r3, [r3, #32]
 80024ce:	496d      	ldr	r1, [pc, #436]	; (8002684 <HAL_RCC_OscConfig+0x270>)
 80024d0:	4313      	orrs	r3, r2
 80024d2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80024d4:	4b6b      	ldr	r3, [pc, #428]	; (8002684 <HAL_RCC_OscConfig+0x270>)
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	69db      	ldr	r3, [r3, #28]
 80024e0:	021b      	lsls	r3, r3, #8
 80024e2:	4968      	ldr	r1, [pc, #416]	; (8002684 <HAL_RCC_OscConfig+0x270>)
 80024e4:	4313      	orrs	r3, r2
 80024e6:	604b      	str	r3, [r1, #4]
 80024e8:	e025      	b.n	8002536 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80024ea:	4b66      	ldr	r3, [pc, #408]	; (8002684 <HAL_RCC_OscConfig+0x270>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4a65      	ldr	r2, [pc, #404]	; (8002684 <HAL_RCC_OscConfig+0x270>)
 80024f0:	f043 0308 	orr.w	r3, r3, #8
 80024f4:	6013      	str	r3, [r2, #0]
 80024f6:	4b63      	ldr	r3, [pc, #396]	; (8002684 <HAL_RCC_OscConfig+0x270>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6a1b      	ldr	r3, [r3, #32]
 8002502:	4960      	ldr	r1, [pc, #384]	; (8002684 <HAL_RCC_OscConfig+0x270>)
 8002504:	4313      	orrs	r3, r2
 8002506:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002508:	4b5e      	ldr	r3, [pc, #376]	; (8002684 <HAL_RCC_OscConfig+0x270>)
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	69db      	ldr	r3, [r3, #28]
 8002514:	021b      	lsls	r3, r3, #8
 8002516:	495b      	ldr	r1, [pc, #364]	; (8002684 <HAL_RCC_OscConfig+0x270>)
 8002518:	4313      	orrs	r3, r2
 800251a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800251c:	69bb      	ldr	r3, [r7, #24]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d109      	bne.n	8002536 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6a1b      	ldr	r3, [r3, #32]
 8002526:	4618      	mov	r0, r3
 8002528:	f000 fd4c 	bl	8002fc4 <RCC_SetFlashLatencyFromMSIRange>
 800252c:	4603      	mov	r3, r0
 800252e:	2b00      	cmp	r3, #0
 8002530:	d001      	beq.n	8002536 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002532:	2301      	movs	r3, #1
 8002534:	e37a      	b.n	8002c2c <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002536:	f000 fc81 	bl	8002e3c <HAL_RCC_GetSysClockFreq>
 800253a:	4602      	mov	r2, r0
 800253c:	4b51      	ldr	r3, [pc, #324]	; (8002684 <HAL_RCC_OscConfig+0x270>)
 800253e:	689b      	ldr	r3, [r3, #8]
 8002540:	091b      	lsrs	r3, r3, #4
 8002542:	f003 030f 	and.w	r3, r3, #15
 8002546:	4950      	ldr	r1, [pc, #320]	; (8002688 <HAL_RCC_OscConfig+0x274>)
 8002548:	5ccb      	ldrb	r3, [r1, r3]
 800254a:	f003 031f 	and.w	r3, r3, #31
 800254e:	fa22 f303 	lsr.w	r3, r2, r3
 8002552:	4a4e      	ldr	r2, [pc, #312]	; (800268c <HAL_RCC_OscConfig+0x278>)
 8002554:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002556:	4b4e      	ldr	r3, [pc, #312]	; (8002690 <HAL_RCC_OscConfig+0x27c>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4618      	mov	r0, r3
 800255c:	f7fe fd22 	bl	8000fa4 <HAL_InitTick>
 8002560:	4603      	mov	r3, r0
 8002562:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002564:	7bfb      	ldrb	r3, [r7, #15]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d052      	beq.n	8002610 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800256a:	7bfb      	ldrb	r3, [r7, #15]
 800256c:	e35e      	b.n	8002c2c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	699b      	ldr	r3, [r3, #24]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d032      	beq.n	80025dc <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002576:	4b43      	ldr	r3, [pc, #268]	; (8002684 <HAL_RCC_OscConfig+0x270>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4a42      	ldr	r2, [pc, #264]	; (8002684 <HAL_RCC_OscConfig+0x270>)
 800257c:	f043 0301 	orr.w	r3, r3, #1
 8002580:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002582:	f7fe fd5f 	bl	8001044 <HAL_GetTick>
 8002586:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002588:	e008      	b.n	800259c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800258a:	f7fe fd5b 	bl	8001044 <HAL_GetTick>
 800258e:	4602      	mov	r2, r0
 8002590:	693b      	ldr	r3, [r7, #16]
 8002592:	1ad3      	subs	r3, r2, r3
 8002594:	2b02      	cmp	r3, #2
 8002596:	d901      	bls.n	800259c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002598:	2303      	movs	r3, #3
 800259a:	e347      	b.n	8002c2c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800259c:	4b39      	ldr	r3, [pc, #228]	; (8002684 <HAL_RCC_OscConfig+0x270>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f003 0302 	and.w	r3, r3, #2
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d0f0      	beq.n	800258a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80025a8:	4b36      	ldr	r3, [pc, #216]	; (8002684 <HAL_RCC_OscConfig+0x270>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4a35      	ldr	r2, [pc, #212]	; (8002684 <HAL_RCC_OscConfig+0x270>)
 80025ae:	f043 0308 	orr.w	r3, r3, #8
 80025b2:	6013      	str	r3, [r2, #0]
 80025b4:	4b33      	ldr	r3, [pc, #204]	; (8002684 <HAL_RCC_OscConfig+0x270>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6a1b      	ldr	r3, [r3, #32]
 80025c0:	4930      	ldr	r1, [pc, #192]	; (8002684 <HAL_RCC_OscConfig+0x270>)
 80025c2:	4313      	orrs	r3, r2
 80025c4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80025c6:	4b2f      	ldr	r3, [pc, #188]	; (8002684 <HAL_RCC_OscConfig+0x270>)
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	69db      	ldr	r3, [r3, #28]
 80025d2:	021b      	lsls	r3, r3, #8
 80025d4:	492b      	ldr	r1, [pc, #172]	; (8002684 <HAL_RCC_OscConfig+0x270>)
 80025d6:	4313      	orrs	r3, r2
 80025d8:	604b      	str	r3, [r1, #4]
 80025da:	e01a      	b.n	8002612 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80025dc:	4b29      	ldr	r3, [pc, #164]	; (8002684 <HAL_RCC_OscConfig+0x270>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4a28      	ldr	r2, [pc, #160]	; (8002684 <HAL_RCC_OscConfig+0x270>)
 80025e2:	f023 0301 	bic.w	r3, r3, #1
 80025e6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80025e8:	f7fe fd2c 	bl	8001044 <HAL_GetTick>
 80025ec:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80025ee:	e008      	b.n	8002602 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80025f0:	f7fe fd28 	bl	8001044 <HAL_GetTick>
 80025f4:	4602      	mov	r2, r0
 80025f6:	693b      	ldr	r3, [r7, #16]
 80025f8:	1ad3      	subs	r3, r2, r3
 80025fa:	2b02      	cmp	r3, #2
 80025fc:	d901      	bls.n	8002602 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80025fe:	2303      	movs	r3, #3
 8002600:	e314      	b.n	8002c2c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002602:	4b20      	ldr	r3, [pc, #128]	; (8002684 <HAL_RCC_OscConfig+0x270>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f003 0302 	and.w	r3, r3, #2
 800260a:	2b00      	cmp	r3, #0
 800260c:	d1f0      	bne.n	80025f0 <HAL_RCC_OscConfig+0x1dc>
 800260e:	e000      	b.n	8002612 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002610:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f003 0301 	and.w	r3, r3, #1
 800261a:	2b00      	cmp	r3, #0
 800261c:	d073      	beq.n	8002706 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800261e:	69bb      	ldr	r3, [r7, #24]
 8002620:	2b08      	cmp	r3, #8
 8002622:	d005      	beq.n	8002630 <HAL_RCC_OscConfig+0x21c>
 8002624:	69bb      	ldr	r3, [r7, #24]
 8002626:	2b0c      	cmp	r3, #12
 8002628:	d10e      	bne.n	8002648 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800262a:	697b      	ldr	r3, [r7, #20]
 800262c:	2b03      	cmp	r3, #3
 800262e:	d10b      	bne.n	8002648 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002630:	4b14      	ldr	r3, [pc, #80]	; (8002684 <HAL_RCC_OscConfig+0x270>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002638:	2b00      	cmp	r3, #0
 800263a:	d063      	beq.n	8002704 <HAL_RCC_OscConfig+0x2f0>
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d15f      	bne.n	8002704 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002644:	2301      	movs	r3, #1
 8002646:	e2f1      	b.n	8002c2c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002650:	d106      	bne.n	8002660 <HAL_RCC_OscConfig+0x24c>
 8002652:	4b0c      	ldr	r3, [pc, #48]	; (8002684 <HAL_RCC_OscConfig+0x270>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	4a0b      	ldr	r2, [pc, #44]	; (8002684 <HAL_RCC_OscConfig+0x270>)
 8002658:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800265c:	6013      	str	r3, [r2, #0]
 800265e:	e025      	b.n	80026ac <HAL_RCC_OscConfig+0x298>
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002668:	d114      	bne.n	8002694 <HAL_RCC_OscConfig+0x280>
 800266a:	4b06      	ldr	r3, [pc, #24]	; (8002684 <HAL_RCC_OscConfig+0x270>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4a05      	ldr	r2, [pc, #20]	; (8002684 <HAL_RCC_OscConfig+0x270>)
 8002670:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002674:	6013      	str	r3, [r2, #0]
 8002676:	4b03      	ldr	r3, [pc, #12]	; (8002684 <HAL_RCC_OscConfig+0x270>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4a02      	ldr	r2, [pc, #8]	; (8002684 <HAL_RCC_OscConfig+0x270>)
 800267c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002680:	6013      	str	r3, [r2, #0]
 8002682:	e013      	b.n	80026ac <HAL_RCC_OscConfig+0x298>
 8002684:	40021000 	.word	0x40021000
 8002688:	08004b54 	.word	0x08004b54
 800268c:	20000000 	.word	0x20000000
 8002690:	20000004 	.word	0x20000004
 8002694:	4ba0      	ldr	r3, [pc, #640]	; (8002918 <HAL_RCC_OscConfig+0x504>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4a9f      	ldr	r2, [pc, #636]	; (8002918 <HAL_RCC_OscConfig+0x504>)
 800269a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800269e:	6013      	str	r3, [r2, #0]
 80026a0:	4b9d      	ldr	r3, [pc, #628]	; (8002918 <HAL_RCC_OscConfig+0x504>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4a9c      	ldr	r2, [pc, #624]	; (8002918 <HAL_RCC_OscConfig+0x504>)
 80026a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d013      	beq.n	80026dc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026b4:	f7fe fcc6 	bl	8001044 <HAL_GetTick>
 80026b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80026ba:	e008      	b.n	80026ce <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026bc:	f7fe fcc2 	bl	8001044 <HAL_GetTick>
 80026c0:	4602      	mov	r2, r0
 80026c2:	693b      	ldr	r3, [r7, #16]
 80026c4:	1ad3      	subs	r3, r2, r3
 80026c6:	2b64      	cmp	r3, #100	; 0x64
 80026c8:	d901      	bls.n	80026ce <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80026ca:	2303      	movs	r3, #3
 80026cc:	e2ae      	b.n	8002c2c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80026ce:	4b92      	ldr	r3, [pc, #584]	; (8002918 <HAL_RCC_OscConfig+0x504>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d0f0      	beq.n	80026bc <HAL_RCC_OscConfig+0x2a8>
 80026da:	e014      	b.n	8002706 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026dc:	f7fe fcb2 	bl	8001044 <HAL_GetTick>
 80026e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80026e2:	e008      	b.n	80026f6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026e4:	f7fe fcae 	bl	8001044 <HAL_GetTick>
 80026e8:	4602      	mov	r2, r0
 80026ea:	693b      	ldr	r3, [r7, #16]
 80026ec:	1ad3      	subs	r3, r2, r3
 80026ee:	2b64      	cmp	r3, #100	; 0x64
 80026f0:	d901      	bls.n	80026f6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80026f2:	2303      	movs	r3, #3
 80026f4:	e29a      	b.n	8002c2c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80026f6:	4b88      	ldr	r3, [pc, #544]	; (8002918 <HAL_RCC_OscConfig+0x504>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d1f0      	bne.n	80026e4 <HAL_RCC_OscConfig+0x2d0>
 8002702:	e000      	b.n	8002706 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002704:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f003 0302 	and.w	r3, r3, #2
 800270e:	2b00      	cmp	r3, #0
 8002710:	d060      	beq.n	80027d4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002712:	69bb      	ldr	r3, [r7, #24]
 8002714:	2b04      	cmp	r3, #4
 8002716:	d005      	beq.n	8002724 <HAL_RCC_OscConfig+0x310>
 8002718:	69bb      	ldr	r3, [r7, #24]
 800271a:	2b0c      	cmp	r3, #12
 800271c:	d119      	bne.n	8002752 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800271e:	697b      	ldr	r3, [r7, #20]
 8002720:	2b02      	cmp	r3, #2
 8002722:	d116      	bne.n	8002752 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002724:	4b7c      	ldr	r3, [pc, #496]	; (8002918 <HAL_RCC_OscConfig+0x504>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800272c:	2b00      	cmp	r3, #0
 800272e:	d005      	beq.n	800273c <HAL_RCC_OscConfig+0x328>
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	68db      	ldr	r3, [r3, #12]
 8002734:	2b00      	cmp	r3, #0
 8002736:	d101      	bne.n	800273c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002738:	2301      	movs	r3, #1
 800273a:	e277      	b.n	8002c2c <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800273c:	4b76      	ldr	r3, [pc, #472]	; (8002918 <HAL_RCC_OscConfig+0x504>)
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	691b      	ldr	r3, [r3, #16]
 8002748:	061b      	lsls	r3, r3, #24
 800274a:	4973      	ldr	r1, [pc, #460]	; (8002918 <HAL_RCC_OscConfig+0x504>)
 800274c:	4313      	orrs	r3, r2
 800274e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002750:	e040      	b.n	80027d4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	68db      	ldr	r3, [r3, #12]
 8002756:	2b00      	cmp	r3, #0
 8002758:	d023      	beq.n	80027a2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800275a:	4b6f      	ldr	r3, [pc, #444]	; (8002918 <HAL_RCC_OscConfig+0x504>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4a6e      	ldr	r2, [pc, #440]	; (8002918 <HAL_RCC_OscConfig+0x504>)
 8002760:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002764:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002766:	f7fe fc6d 	bl	8001044 <HAL_GetTick>
 800276a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800276c:	e008      	b.n	8002780 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800276e:	f7fe fc69 	bl	8001044 <HAL_GetTick>
 8002772:	4602      	mov	r2, r0
 8002774:	693b      	ldr	r3, [r7, #16]
 8002776:	1ad3      	subs	r3, r2, r3
 8002778:	2b02      	cmp	r3, #2
 800277a:	d901      	bls.n	8002780 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800277c:	2303      	movs	r3, #3
 800277e:	e255      	b.n	8002c2c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002780:	4b65      	ldr	r3, [pc, #404]	; (8002918 <HAL_RCC_OscConfig+0x504>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002788:	2b00      	cmp	r3, #0
 800278a:	d0f0      	beq.n	800276e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800278c:	4b62      	ldr	r3, [pc, #392]	; (8002918 <HAL_RCC_OscConfig+0x504>)
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	691b      	ldr	r3, [r3, #16]
 8002798:	061b      	lsls	r3, r3, #24
 800279a:	495f      	ldr	r1, [pc, #380]	; (8002918 <HAL_RCC_OscConfig+0x504>)
 800279c:	4313      	orrs	r3, r2
 800279e:	604b      	str	r3, [r1, #4]
 80027a0:	e018      	b.n	80027d4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027a2:	4b5d      	ldr	r3, [pc, #372]	; (8002918 <HAL_RCC_OscConfig+0x504>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	4a5c      	ldr	r2, [pc, #368]	; (8002918 <HAL_RCC_OscConfig+0x504>)
 80027a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80027ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027ae:	f7fe fc49 	bl	8001044 <HAL_GetTick>
 80027b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80027b4:	e008      	b.n	80027c8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027b6:	f7fe fc45 	bl	8001044 <HAL_GetTick>
 80027ba:	4602      	mov	r2, r0
 80027bc:	693b      	ldr	r3, [r7, #16]
 80027be:	1ad3      	subs	r3, r2, r3
 80027c0:	2b02      	cmp	r3, #2
 80027c2:	d901      	bls.n	80027c8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80027c4:	2303      	movs	r3, #3
 80027c6:	e231      	b.n	8002c2c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80027c8:	4b53      	ldr	r3, [pc, #332]	; (8002918 <HAL_RCC_OscConfig+0x504>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d1f0      	bne.n	80027b6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f003 0308 	and.w	r3, r3, #8
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d03c      	beq.n	800285a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	695b      	ldr	r3, [r3, #20]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d01c      	beq.n	8002822 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027e8:	4b4b      	ldr	r3, [pc, #300]	; (8002918 <HAL_RCC_OscConfig+0x504>)
 80027ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80027ee:	4a4a      	ldr	r2, [pc, #296]	; (8002918 <HAL_RCC_OscConfig+0x504>)
 80027f0:	f043 0301 	orr.w	r3, r3, #1
 80027f4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027f8:	f7fe fc24 	bl	8001044 <HAL_GetTick>
 80027fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80027fe:	e008      	b.n	8002812 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002800:	f7fe fc20 	bl	8001044 <HAL_GetTick>
 8002804:	4602      	mov	r2, r0
 8002806:	693b      	ldr	r3, [r7, #16]
 8002808:	1ad3      	subs	r3, r2, r3
 800280a:	2b02      	cmp	r3, #2
 800280c:	d901      	bls.n	8002812 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800280e:	2303      	movs	r3, #3
 8002810:	e20c      	b.n	8002c2c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002812:	4b41      	ldr	r3, [pc, #260]	; (8002918 <HAL_RCC_OscConfig+0x504>)
 8002814:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002818:	f003 0302 	and.w	r3, r3, #2
 800281c:	2b00      	cmp	r3, #0
 800281e:	d0ef      	beq.n	8002800 <HAL_RCC_OscConfig+0x3ec>
 8002820:	e01b      	b.n	800285a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002822:	4b3d      	ldr	r3, [pc, #244]	; (8002918 <HAL_RCC_OscConfig+0x504>)
 8002824:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002828:	4a3b      	ldr	r2, [pc, #236]	; (8002918 <HAL_RCC_OscConfig+0x504>)
 800282a:	f023 0301 	bic.w	r3, r3, #1
 800282e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002832:	f7fe fc07 	bl	8001044 <HAL_GetTick>
 8002836:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002838:	e008      	b.n	800284c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800283a:	f7fe fc03 	bl	8001044 <HAL_GetTick>
 800283e:	4602      	mov	r2, r0
 8002840:	693b      	ldr	r3, [r7, #16]
 8002842:	1ad3      	subs	r3, r2, r3
 8002844:	2b02      	cmp	r3, #2
 8002846:	d901      	bls.n	800284c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002848:	2303      	movs	r3, #3
 800284a:	e1ef      	b.n	8002c2c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800284c:	4b32      	ldr	r3, [pc, #200]	; (8002918 <HAL_RCC_OscConfig+0x504>)
 800284e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002852:	f003 0302 	and.w	r3, r3, #2
 8002856:	2b00      	cmp	r3, #0
 8002858:	d1ef      	bne.n	800283a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f003 0304 	and.w	r3, r3, #4
 8002862:	2b00      	cmp	r3, #0
 8002864:	f000 80a6 	beq.w	80029b4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002868:	2300      	movs	r3, #0
 800286a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800286c:	4b2a      	ldr	r3, [pc, #168]	; (8002918 <HAL_RCC_OscConfig+0x504>)
 800286e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002870:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002874:	2b00      	cmp	r3, #0
 8002876:	d10d      	bne.n	8002894 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002878:	4b27      	ldr	r3, [pc, #156]	; (8002918 <HAL_RCC_OscConfig+0x504>)
 800287a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800287c:	4a26      	ldr	r2, [pc, #152]	; (8002918 <HAL_RCC_OscConfig+0x504>)
 800287e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002882:	6593      	str	r3, [r2, #88]	; 0x58
 8002884:	4b24      	ldr	r3, [pc, #144]	; (8002918 <HAL_RCC_OscConfig+0x504>)
 8002886:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002888:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800288c:	60bb      	str	r3, [r7, #8]
 800288e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002890:	2301      	movs	r3, #1
 8002892:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002894:	4b21      	ldr	r3, [pc, #132]	; (800291c <HAL_RCC_OscConfig+0x508>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800289c:	2b00      	cmp	r3, #0
 800289e:	d118      	bne.n	80028d2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80028a0:	4b1e      	ldr	r3, [pc, #120]	; (800291c <HAL_RCC_OscConfig+0x508>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4a1d      	ldr	r2, [pc, #116]	; (800291c <HAL_RCC_OscConfig+0x508>)
 80028a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028aa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028ac:	f7fe fbca 	bl	8001044 <HAL_GetTick>
 80028b0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80028b2:	e008      	b.n	80028c6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028b4:	f7fe fbc6 	bl	8001044 <HAL_GetTick>
 80028b8:	4602      	mov	r2, r0
 80028ba:	693b      	ldr	r3, [r7, #16]
 80028bc:	1ad3      	subs	r3, r2, r3
 80028be:	2b02      	cmp	r3, #2
 80028c0:	d901      	bls.n	80028c6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80028c2:	2303      	movs	r3, #3
 80028c4:	e1b2      	b.n	8002c2c <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80028c6:	4b15      	ldr	r3, [pc, #84]	; (800291c <HAL_RCC_OscConfig+0x508>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d0f0      	beq.n	80028b4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	689b      	ldr	r3, [r3, #8]
 80028d6:	2b01      	cmp	r3, #1
 80028d8:	d108      	bne.n	80028ec <HAL_RCC_OscConfig+0x4d8>
 80028da:	4b0f      	ldr	r3, [pc, #60]	; (8002918 <HAL_RCC_OscConfig+0x504>)
 80028dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028e0:	4a0d      	ldr	r2, [pc, #52]	; (8002918 <HAL_RCC_OscConfig+0x504>)
 80028e2:	f043 0301 	orr.w	r3, r3, #1
 80028e6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80028ea:	e029      	b.n	8002940 <HAL_RCC_OscConfig+0x52c>
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	689b      	ldr	r3, [r3, #8]
 80028f0:	2b05      	cmp	r3, #5
 80028f2:	d115      	bne.n	8002920 <HAL_RCC_OscConfig+0x50c>
 80028f4:	4b08      	ldr	r3, [pc, #32]	; (8002918 <HAL_RCC_OscConfig+0x504>)
 80028f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028fa:	4a07      	ldr	r2, [pc, #28]	; (8002918 <HAL_RCC_OscConfig+0x504>)
 80028fc:	f043 0304 	orr.w	r3, r3, #4
 8002900:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002904:	4b04      	ldr	r3, [pc, #16]	; (8002918 <HAL_RCC_OscConfig+0x504>)
 8002906:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800290a:	4a03      	ldr	r2, [pc, #12]	; (8002918 <HAL_RCC_OscConfig+0x504>)
 800290c:	f043 0301 	orr.w	r3, r3, #1
 8002910:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002914:	e014      	b.n	8002940 <HAL_RCC_OscConfig+0x52c>
 8002916:	bf00      	nop
 8002918:	40021000 	.word	0x40021000
 800291c:	40007000 	.word	0x40007000
 8002920:	4b9a      	ldr	r3, [pc, #616]	; (8002b8c <HAL_RCC_OscConfig+0x778>)
 8002922:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002926:	4a99      	ldr	r2, [pc, #612]	; (8002b8c <HAL_RCC_OscConfig+0x778>)
 8002928:	f023 0301 	bic.w	r3, r3, #1
 800292c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002930:	4b96      	ldr	r3, [pc, #600]	; (8002b8c <HAL_RCC_OscConfig+0x778>)
 8002932:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002936:	4a95      	ldr	r2, [pc, #596]	; (8002b8c <HAL_RCC_OscConfig+0x778>)
 8002938:	f023 0304 	bic.w	r3, r3, #4
 800293c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	689b      	ldr	r3, [r3, #8]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d016      	beq.n	8002976 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002948:	f7fe fb7c 	bl	8001044 <HAL_GetTick>
 800294c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800294e:	e00a      	b.n	8002966 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002950:	f7fe fb78 	bl	8001044 <HAL_GetTick>
 8002954:	4602      	mov	r2, r0
 8002956:	693b      	ldr	r3, [r7, #16]
 8002958:	1ad3      	subs	r3, r2, r3
 800295a:	f241 3288 	movw	r2, #5000	; 0x1388
 800295e:	4293      	cmp	r3, r2
 8002960:	d901      	bls.n	8002966 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002962:	2303      	movs	r3, #3
 8002964:	e162      	b.n	8002c2c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002966:	4b89      	ldr	r3, [pc, #548]	; (8002b8c <HAL_RCC_OscConfig+0x778>)
 8002968:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800296c:	f003 0302 	and.w	r3, r3, #2
 8002970:	2b00      	cmp	r3, #0
 8002972:	d0ed      	beq.n	8002950 <HAL_RCC_OscConfig+0x53c>
 8002974:	e015      	b.n	80029a2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002976:	f7fe fb65 	bl	8001044 <HAL_GetTick>
 800297a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800297c:	e00a      	b.n	8002994 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800297e:	f7fe fb61 	bl	8001044 <HAL_GetTick>
 8002982:	4602      	mov	r2, r0
 8002984:	693b      	ldr	r3, [r7, #16]
 8002986:	1ad3      	subs	r3, r2, r3
 8002988:	f241 3288 	movw	r2, #5000	; 0x1388
 800298c:	4293      	cmp	r3, r2
 800298e:	d901      	bls.n	8002994 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002990:	2303      	movs	r3, #3
 8002992:	e14b      	b.n	8002c2c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002994:	4b7d      	ldr	r3, [pc, #500]	; (8002b8c <HAL_RCC_OscConfig+0x778>)
 8002996:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800299a:	f003 0302 	and.w	r3, r3, #2
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d1ed      	bne.n	800297e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80029a2:	7ffb      	ldrb	r3, [r7, #31]
 80029a4:	2b01      	cmp	r3, #1
 80029a6:	d105      	bne.n	80029b4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029a8:	4b78      	ldr	r3, [pc, #480]	; (8002b8c <HAL_RCC_OscConfig+0x778>)
 80029aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029ac:	4a77      	ldr	r2, [pc, #476]	; (8002b8c <HAL_RCC_OscConfig+0x778>)
 80029ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80029b2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f003 0320 	and.w	r3, r3, #32
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d03c      	beq.n	8002a3a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d01c      	beq.n	8002a02 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80029c8:	4b70      	ldr	r3, [pc, #448]	; (8002b8c <HAL_RCC_OscConfig+0x778>)
 80029ca:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80029ce:	4a6f      	ldr	r2, [pc, #444]	; (8002b8c <HAL_RCC_OscConfig+0x778>)
 80029d0:	f043 0301 	orr.w	r3, r3, #1
 80029d4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029d8:	f7fe fb34 	bl	8001044 <HAL_GetTick>
 80029dc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80029de:	e008      	b.n	80029f2 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80029e0:	f7fe fb30 	bl	8001044 <HAL_GetTick>
 80029e4:	4602      	mov	r2, r0
 80029e6:	693b      	ldr	r3, [r7, #16]
 80029e8:	1ad3      	subs	r3, r2, r3
 80029ea:	2b02      	cmp	r3, #2
 80029ec:	d901      	bls.n	80029f2 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80029ee:	2303      	movs	r3, #3
 80029f0:	e11c      	b.n	8002c2c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80029f2:	4b66      	ldr	r3, [pc, #408]	; (8002b8c <HAL_RCC_OscConfig+0x778>)
 80029f4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80029f8:	f003 0302 	and.w	r3, r3, #2
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d0ef      	beq.n	80029e0 <HAL_RCC_OscConfig+0x5cc>
 8002a00:	e01b      	b.n	8002a3a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002a02:	4b62      	ldr	r3, [pc, #392]	; (8002b8c <HAL_RCC_OscConfig+0x778>)
 8002a04:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002a08:	4a60      	ldr	r2, [pc, #384]	; (8002b8c <HAL_RCC_OscConfig+0x778>)
 8002a0a:	f023 0301 	bic.w	r3, r3, #1
 8002a0e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a12:	f7fe fb17 	bl	8001044 <HAL_GetTick>
 8002a16:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002a18:	e008      	b.n	8002a2c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002a1a:	f7fe fb13 	bl	8001044 <HAL_GetTick>
 8002a1e:	4602      	mov	r2, r0
 8002a20:	693b      	ldr	r3, [r7, #16]
 8002a22:	1ad3      	subs	r3, r2, r3
 8002a24:	2b02      	cmp	r3, #2
 8002a26:	d901      	bls.n	8002a2c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002a28:	2303      	movs	r3, #3
 8002a2a:	e0ff      	b.n	8002c2c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002a2c:	4b57      	ldr	r3, [pc, #348]	; (8002b8c <HAL_RCC_OscConfig+0x778>)
 8002a2e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002a32:	f003 0302 	and.w	r3, r3, #2
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d1ef      	bne.n	8002a1a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	f000 80f3 	beq.w	8002c2a <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a48:	2b02      	cmp	r3, #2
 8002a4a:	f040 80c9 	bne.w	8002be0 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002a4e:	4b4f      	ldr	r3, [pc, #316]	; (8002b8c <HAL_RCC_OscConfig+0x778>)
 8002a50:	68db      	ldr	r3, [r3, #12]
 8002a52:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a54:	697b      	ldr	r3, [r7, #20]
 8002a56:	f003 0203 	and.w	r2, r3, #3
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a5e:	429a      	cmp	r2, r3
 8002a60:	d12c      	bne.n	8002abc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002a62:	697b      	ldr	r3, [r7, #20]
 8002a64:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a6c:	3b01      	subs	r3, #1
 8002a6e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a70:	429a      	cmp	r2, r3
 8002a72:	d123      	bne.n	8002abc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002a74:	697b      	ldr	r3, [r7, #20]
 8002a76:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a7e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002a80:	429a      	cmp	r2, r3
 8002a82:	d11b      	bne.n	8002abc <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002a84:	697b      	ldr	r3, [r7, #20]
 8002a86:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a8e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002a90:	429a      	cmp	r2, r3
 8002a92:	d113      	bne.n	8002abc <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002a94:	697b      	ldr	r3, [r7, #20]
 8002a96:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a9e:	085b      	lsrs	r3, r3, #1
 8002aa0:	3b01      	subs	r3, #1
 8002aa2:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002aa4:	429a      	cmp	r2, r3
 8002aa6:	d109      	bne.n	8002abc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002aa8:	697b      	ldr	r3, [r7, #20]
 8002aaa:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ab2:	085b      	lsrs	r3, r3, #1
 8002ab4:	3b01      	subs	r3, #1
 8002ab6:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002ab8:	429a      	cmp	r2, r3
 8002aba:	d06b      	beq.n	8002b94 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002abc:	69bb      	ldr	r3, [r7, #24]
 8002abe:	2b0c      	cmp	r3, #12
 8002ac0:	d062      	beq.n	8002b88 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002ac2:	4b32      	ldr	r3, [pc, #200]	; (8002b8c <HAL_RCC_OscConfig+0x778>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d001      	beq.n	8002ad2 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8002ace:	2301      	movs	r3, #1
 8002ad0:	e0ac      	b.n	8002c2c <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002ad2:	4b2e      	ldr	r3, [pc, #184]	; (8002b8c <HAL_RCC_OscConfig+0x778>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4a2d      	ldr	r2, [pc, #180]	; (8002b8c <HAL_RCC_OscConfig+0x778>)
 8002ad8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002adc:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002ade:	f7fe fab1 	bl	8001044 <HAL_GetTick>
 8002ae2:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ae4:	e008      	b.n	8002af8 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ae6:	f7fe faad 	bl	8001044 <HAL_GetTick>
 8002aea:	4602      	mov	r2, r0
 8002aec:	693b      	ldr	r3, [r7, #16]
 8002aee:	1ad3      	subs	r3, r2, r3
 8002af0:	2b02      	cmp	r3, #2
 8002af2:	d901      	bls.n	8002af8 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8002af4:	2303      	movs	r3, #3
 8002af6:	e099      	b.n	8002c2c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002af8:	4b24      	ldr	r3, [pc, #144]	; (8002b8c <HAL_RCC_OscConfig+0x778>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d1f0      	bne.n	8002ae6 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b04:	4b21      	ldr	r3, [pc, #132]	; (8002b8c <HAL_RCC_OscConfig+0x778>)
 8002b06:	68da      	ldr	r2, [r3, #12]
 8002b08:	4b21      	ldr	r3, [pc, #132]	; (8002b90 <HAL_RCC_OscConfig+0x77c>)
 8002b0a:	4013      	ands	r3, r2
 8002b0c:	687a      	ldr	r2, [r7, #4]
 8002b0e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002b10:	687a      	ldr	r2, [r7, #4]
 8002b12:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002b14:	3a01      	subs	r2, #1
 8002b16:	0112      	lsls	r2, r2, #4
 8002b18:	4311      	orrs	r1, r2
 8002b1a:	687a      	ldr	r2, [r7, #4]
 8002b1c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002b1e:	0212      	lsls	r2, r2, #8
 8002b20:	4311      	orrs	r1, r2
 8002b22:	687a      	ldr	r2, [r7, #4]
 8002b24:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002b26:	0852      	lsrs	r2, r2, #1
 8002b28:	3a01      	subs	r2, #1
 8002b2a:	0552      	lsls	r2, r2, #21
 8002b2c:	4311      	orrs	r1, r2
 8002b2e:	687a      	ldr	r2, [r7, #4]
 8002b30:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002b32:	0852      	lsrs	r2, r2, #1
 8002b34:	3a01      	subs	r2, #1
 8002b36:	0652      	lsls	r2, r2, #25
 8002b38:	4311      	orrs	r1, r2
 8002b3a:	687a      	ldr	r2, [r7, #4]
 8002b3c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002b3e:	06d2      	lsls	r2, r2, #27
 8002b40:	430a      	orrs	r2, r1
 8002b42:	4912      	ldr	r1, [pc, #72]	; (8002b8c <HAL_RCC_OscConfig+0x778>)
 8002b44:	4313      	orrs	r3, r2
 8002b46:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002b48:	4b10      	ldr	r3, [pc, #64]	; (8002b8c <HAL_RCC_OscConfig+0x778>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4a0f      	ldr	r2, [pc, #60]	; (8002b8c <HAL_RCC_OscConfig+0x778>)
 8002b4e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b52:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002b54:	4b0d      	ldr	r3, [pc, #52]	; (8002b8c <HAL_RCC_OscConfig+0x778>)
 8002b56:	68db      	ldr	r3, [r3, #12]
 8002b58:	4a0c      	ldr	r2, [pc, #48]	; (8002b8c <HAL_RCC_OscConfig+0x778>)
 8002b5a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b5e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002b60:	f7fe fa70 	bl	8001044 <HAL_GetTick>
 8002b64:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b66:	e008      	b.n	8002b7a <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b68:	f7fe fa6c 	bl	8001044 <HAL_GetTick>
 8002b6c:	4602      	mov	r2, r0
 8002b6e:	693b      	ldr	r3, [r7, #16]
 8002b70:	1ad3      	subs	r3, r2, r3
 8002b72:	2b02      	cmp	r3, #2
 8002b74:	d901      	bls.n	8002b7a <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8002b76:	2303      	movs	r3, #3
 8002b78:	e058      	b.n	8002c2c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b7a:	4b04      	ldr	r3, [pc, #16]	; (8002b8c <HAL_RCC_OscConfig+0x778>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d0f0      	beq.n	8002b68 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002b86:	e050      	b.n	8002c2a <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002b88:	2301      	movs	r3, #1
 8002b8a:	e04f      	b.n	8002c2c <HAL_RCC_OscConfig+0x818>
 8002b8c:	40021000 	.word	0x40021000
 8002b90:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b94:	4b27      	ldr	r3, [pc, #156]	; (8002c34 <HAL_RCC_OscConfig+0x820>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d144      	bne.n	8002c2a <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002ba0:	4b24      	ldr	r3, [pc, #144]	; (8002c34 <HAL_RCC_OscConfig+0x820>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4a23      	ldr	r2, [pc, #140]	; (8002c34 <HAL_RCC_OscConfig+0x820>)
 8002ba6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002baa:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002bac:	4b21      	ldr	r3, [pc, #132]	; (8002c34 <HAL_RCC_OscConfig+0x820>)
 8002bae:	68db      	ldr	r3, [r3, #12]
 8002bb0:	4a20      	ldr	r2, [pc, #128]	; (8002c34 <HAL_RCC_OscConfig+0x820>)
 8002bb2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002bb6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002bb8:	f7fe fa44 	bl	8001044 <HAL_GetTick>
 8002bbc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002bbe:	e008      	b.n	8002bd2 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bc0:	f7fe fa40 	bl	8001044 <HAL_GetTick>
 8002bc4:	4602      	mov	r2, r0
 8002bc6:	693b      	ldr	r3, [r7, #16]
 8002bc8:	1ad3      	subs	r3, r2, r3
 8002bca:	2b02      	cmp	r3, #2
 8002bcc:	d901      	bls.n	8002bd2 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8002bce:	2303      	movs	r3, #3
 8002bd0:	e02c      	b.n	8002c2c <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002bd2:	4b18      	ldr	r3, [pc, #96]	; (8002c34 <HAL_RCC_OscConfig+0x820>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d0f0      	beq.n	8002bc0 <HAL_RCC_OscConfig+0x7ac>
 8002bde:	e024      	b.n	8002c2a <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002be0:	69bb      	ldr	r3, [r7, #24]
 8002be2:	2b0c      	cmp	r3, #12
 8002be4:	d01f      	beq.n	8002c26 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002be6:	4b13      	ldr	r3, [pc, #76]	; (8002c34 <HAL_RCC_OscConfig+0x820>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4a12      	ldr	r2, [pc, #72]	; (8002c34 <HAL_RCC_OscConfig+0x820>)
 8002bec:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002bf0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bf2:	f7fe fa27 	bl	8001044 <HAL_GetTick>
 8002bf6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002bf8:	e008      	b.n	8002c0c <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bfa:	f7fe fa23 	bl	8001044 <HAL_GetTick>
 8002bfe:	4602      	mov	r2, r0
 8002c00:	693b      	ldr	r3, [r7, #16]
 8002c02:	1ad3      	subs	r3, r2, r3
 8002c04:	2b02      	cmp	r3, #2
 8002c06:	d901      	bls.n	8002c0c <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8002c08:	2303      	movs	r3, #3
 8002c0a:	e00f      	b.n	8002c2c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c0c:	4b09      	ldr	r3, [pc, #36]	; (8002c34 <HAL_RCC_OscConfig+0x820>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d1f0      	bne.n	8002bfa <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8002c18:	4b06      	ldr	r3, [pc, #24]	; (8002c34 <HAL_RCC_OscConfig+0x820>)
 8002c1a:	68da      	ldr	r2, [r3, #12]
 8002c1c:	4905      	ldr	r1, [pc, #20]	; (8002c34 <HAL_RCC_OscConfig+0x820>)
 8002c1e:	4b06      	ldr	r3, [pc, #24]	; (8002c38 <HAL_RCC_OscConfig+0x824>)
 8002c20:	4013      	ands	r3, r2
 8002c22:	60cb      	str	r3, [r1, #12]
 8002c24:	e001      	b.n	8002c2a <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002c26:	2301      	movs	r3, #1
 8002c28:	e000      	b.n	8002c2c <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8002c2a:	2300      	movs	r3, #0
}
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	3720      	adds	r7, #32
 8002c30:	46bd      	mov	sp, r7
 8002c32:	bd80      	pop	{r7, pc}
 8002c34:	40021000 	.word	0x40021000
 8002c38:	feeefffc 	.word	0xfeeefffc

08002c3c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b084      	sub	sp, #16
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
 8002c44:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d101      	bne.n	8002c50 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c4c:	2301      	movs	r3, #1
 8002c4e:	e0e7      	b.n	8002e20 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002c50:	4b75      	ldr	r3, [pc, #468]	; (8002e28 <HAL_RCC_ClockConfig+0x1ec>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f003 0307 	and.w	r3, r3, #7
 8002c58:	683a      	ldr	r2, [r7, #0]
 8002c5a:	429a      	cmp	r2, r3
 8002c5c:	d910      	bls.n	8002c80 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c5e:	4b72      	ldr	r3, [pc, #456]	; (8002e28 <HAL_RCC_ClockConfig+0x1ec>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f023 0207 	bic.w	r2, r3, #7
 8002c66:	4970      	ldr	r1, [pc, #448]	; (8002e28 <HAL_RCC_ClockConfig+0x1ec>)
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	4313      	orrs	r3, r2
 8002c6c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c6e:	4b6e      	ldr	r3, [pc, #440]	; (8002e28 <HAL_RCC_ClockConfig+0x1ec>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f003 0307 	and.w	r3, r3, #7
 8002c76:	683a      	ldr	r2, [r7, #0]
 8002c78:	429a      	cmp	r2, r3
 8002c7a:	d001      	beq.n	8002c80 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	e0cf      	b.n	8002e20 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f003 0302 	and.w	r3, r3, #2
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d010      	beq.n	8002cae <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	689a      	ldr	r2, [r3, #8]
 8002c90:	4b66      	ldr	r3, [pc, #408]	; (8002e2c <HAL_RCC_ClockConfig+0x1f0>)
 8002c92:	689b      	ldr	r3, [r3, #8]
 8002c94:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c98:	429a      	cmp	r2, r3
 8002c9a:	d908      	bls.n	8002cae <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c9c:	4b63      	ldr	r3, [pc, #396]	; (8002e2c <HAL_RCC_ClockConfig+0x1f0>)
 8002c9e:	689b      	ldr	r3, [r3, #8]
 8002ca0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	689b      	ldr	r3, [r3, #8]
 8002ca8:	4960      	ldr	r1, [pc, #384]	; (8002e2c <HAL_RCC_ClockConfig+0x1f0>)
 8002caa:	4313      	orrs	r3, r2
 8002cac:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f003 0301 	and.w	r3, r3, #1
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d04c      	beq.n	8002d54 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	685b      	ldr	r3, [r3, #4]
 8002cbe:	2b03      	cmp	r3, #3
 8002cc0:	d107      	bne.n	8002cd2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002cc2:	4b5a      	ldr	r3, [pc, #360]	; (8002e2c <HAL_RCC_ClockConfig+0x1f0>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d121      	bne.n	8002d12 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002cce:	2301      	movs	r3, #1
 8002cd0:	e0a6      	b.n	8002e20 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	685b      	ldr	r3, [r3, #4]
 8002cd6:	2b02      	cmp	r3, #2
 8002cd8:	d107      	bne.n	8002cea <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002cda:	4b54      	ldr	r3, [pc, #336]	; (8002e2c <HAL_RCC_ClockConfig+0x1f0>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d115      	bne.n	8002d12 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	e09a      	b.n	8002e20 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d107      	bne.n	8002d02 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002cf2:	4b4e      	ldr	r3, [pc, #312]	; (8002e2c <HAL_RCC_ClockConfig+0x1f0>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f003 0302 	and.w	r3, r3, #2
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d109      	bne.n	8002d12 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002cfe:	2301      	movs	r3, #1
 8002d00:	e08e      	b.n	8002e20 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d02:	4b4a      	ldr	r3, [pc, #296]	; (8002e2c <HAL_RCC_ClockConfig+0x1f0>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d101      	bne.n	8002d12 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002d0e:	2301      	movs	r3, #1
 8002d10:	e086      	b.n	8002e20 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002d12:	4b46      	ldr	r3, [pc, #280]	; (8002e2c <HAL_RCC_ClockConfig+0x1f0>)
 8002d14:	689b      	ldr	r3, [r3, #8]
 8002d16:	f023 0203 	bic.w	r2, r3, #3
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	4943      	ldr	r1, [pc, #268]	; (8002e2c <HAL_RCC_ClockConfig+0x1f0>)
 8002d20:	4313      	orrs	r3, r2
 8002d22:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d24:	f7fe f98e 	bl	8001044 <HAL_GetTick>
 8002d28:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d2a:	e00a      	b.n	8002d42 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d2c:	f7fe f98a 	bl	8001044 <HAL_GetTick>
 8002d30:	4602      	mov	r2, r0
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	1ad3      	subs	r3, r2, r3
 8002d36:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d901      	bls.n	8002d42 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002d3e:	2303      	movs	r3, #3
 8002d40:	e06e      	b.n	8002e20 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d42:	4b3a      	ldr	r3, [pc, #232]	; (8002e2c <HAL_RCC_ClockConfig+0x1f0>)
 8002d44:	689b      	ldr	r3, [r3, #8]
 8002d46:	f003 020c 	and.w	r2, r3, #12
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	685b      	ldr	r3, [r3, #4]
 8002d4e:	009b      	lsls	r3, r3, #2
 8002d50:	429a      	cmp	r2, r3
 8002d52:	d1eb      	bne.n	8002d2c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f003 0302 	and.w	r3, r3, #2
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d010      	beq.n	8002d82 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	689a      	ldr	r2, [r3, #8]
 8002d64:	4b31      	ldr	r3, [pc, #196]	; (8002e2c <HAL_RCC_ClockConfig+0x1f0>)
 8002d66:	689b      	ldr	r3, [r3, #8]
 8002d68:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d6c:	429a      	cmp	r2, r3
 8002d6e:	d208      	bcs.n	8002d82 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d70:	4b2e      	ldr	r3, [pc, #184]	; (8002e2c <HAL_RCC_ClockConfig+0x1f0>)
 8002d72:	689b      	ldr	r3, [r3, #8]
 8002d74:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	689b      	ldr	r3, [r3, #8]
 8002d7c:	492b      	ldr	r1, [pc, #172]	; (8002e2c <HAL_RCC_ClockConfig+0x1f0>)
 8002d7e:	4313      	orrs	r3, r2
 8002d80:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002d82:	4b29      	ldr	r3, [pc, #164]	; (8002e28 <HAL_RCC_ClockConfig+0x1ec>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f003 0307 	and.w	r3, r3, #7
 8002d8a:	683a      	ldr	r2, [r7, #0]
 8002d8c:	429a      	cmp	r2, r3
 8002d8e:	d210      	bcs.n	8002db2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d90:	4b25      	ldr	r3, [pc, #148]	; (8002e28 <HAL_RCC_ClockConfig+0x1ec>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f023 0207 	bic.w	r2, r3, #7
 8002d98:	4923      	ldr	r1, [pc, #140]	; (8002e28 <HAL_RCC_ClockConfig+0x1ec>)
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	4313      	orrs	r3, r2
 8002d9e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002da0:	4b21      	ldr	r3, [pc, #132]	; (8002e28 <HAL_RCC_ClockConfig+0x1ec>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f003 0307 	and.w	r3, r3, #7
 8002da8:	683a      	ldr	r2, [r7, #0]
 8002daa:	429a      	cmp	r2, r3
 8002dac:	d001      	beq.n	8002db2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002dae:	2301      	movs	r3, #1
 8002db0:	e036      	b.n	8002e20 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f003 0304 	and.w	r3, r3, #4
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d008      	beq.n	8002dd0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002dbe:	4b1b      	ldr	r3, [pc, #108]	; (8002e2c <HAL_RCC_ClockConfig+0x1f0>)
 8002dc0:	689b      	ldr	r3, [r3, #8]
 8002dc2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	68db      	ldr	r3, [r3, #12]
 8002dca:	4918      	ldr	r1, [pc, #96]	; (8002e2c <HAL_RCC_ClockConfig+0x1f0>)
 8002dcc:	4313      	orrs	r3, r2
 8002dce:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f003 0308 	and.w	r3, r3, #8
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d009      	beq.n	8002df0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002ddc:	4b13      	ldr	r3, [pc, #76]	; (8002e2c <HAL_RCC_ClockConfig+0x1f0>)
 8002dde:	689b      	ldr	r3, [r3, #8]
 8002de0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	691b      	ldr	r3, [r3, #16]
 8002de8:	00db      	lsls	r3, r3, #3
 8002dea:	4910      	ldr	r1, [pc, #64]	; (8002e2c <HAL_RCC_ClockConfig+0x1f0>)
 8002dec:	4313      	orrs	r3, r2
 8002dee:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002df0:	f000 f824 	bl	8002e3c <HAL_RCC_GetSysClockFreq>
 8002df4:	4602      	mov	r2, r0
 8002df6:	4b0d      	ldr	r3, [pc, #52]	; (8002e2c <HAL_RCC_ClockConfig+0x1f0>)
 8002df8:	689b      	ldr	r3, [r3, #8]
 8002dfa:	091b      	lsrs	r3, r3, #4
 8002dfc:	f003 030f 	and.w	r3, r3, #15
 8002e00:	490b      	ldr	r1, [pc, #44]	; (8002e30 <HAL_RCC_ClockConfig+0x1f4>)
 8002e02:	5ccb      	ldrb	r3, [r1, r3]
 8002e04:	f003 031f 	and.w	r3, r3, #31
 8002e08:	fa22 f303 	lsr.w	r3, r2, r3
 8002e0c:	4a09      	ldr	r2, [pc, #36]	; (8002e34 <HAL_RCC_ClockConfig+0x1f8>)
 8002e0e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002e10:	4b09      	ldr	r3, [pc, #36]	; (8002e38 <HAL_RCC_ClockConfig+0x1fc>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4618      	mov	r0, r3
 8002e16:	f7fe f8c5 	bl	8000fa4 <HAL_InitTick>
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	72fb      	strb	r3, [r7, #11]

  return status;
 8002e1e:	7afb      	ldrb	r3, [r7, #11]
}
 8002e20:	4618      	mov	r0, r3
 8002e22:	3710      	adds	r7, #16
 8002e24:	46bd      	mov	sp, r7
 8002e26:	bd80      	pop	{r7, pc}
 8002e28:	40022000 	.word	0x40022000
 8002e2c:	40021000 	.word	0x40021000
 8002e30:	08004b54 	.word	0x08004b54
 8002e34:	20000000 	.word	0x20000000
 8002e38:	20000004 	.word	0x20000004

08002e3c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	b089      	sub	sp, #36	; 0x24
 8002e40:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002e42:	2300      	movs	r3, #0
 8002e44:	61fb      	str	r3, [r7, #28]
 8002e46:	2300      	movs	r3, #0
 8002e48:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e4a:	4b3e      	ldr	r3, [pc, #248]	; (8002f44 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e4c:	689b      	ldr	r3, [r3, #8]
 8002e4e:	f003 030c 	and.w	r3, r3, #12
 8002e52:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002e54:	4b3b      	ldr	r3, [pc, #236]	; (8002f44 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e56:	68db      	ldr	r3, [r3, #12]
 8002e58:	f003 0303 	and.w	r3, r3, #3
 8002e5c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002e5e:	693b      	ldr	r3, [r7, #16]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d005      	beq.n	8002e70 <HAL_RCC_GetSysClockFreq+0x34>
 8002e64:	693b      	ldr	r3, [r7, #16]
 8002e66:	2b0c      	cmp	r3, #12
 8002e68:	d121      	bne.n	8002eae <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	2b01      	cmp	r3, #1
 8002e6e:	d11e      	bne.n	8002eae <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002e70:	4b34      	ldr	r3, [pc, #208]	; (8002f44 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f003 0308 	and.w	r3, r3, #8
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d107      	bne.n	8002e8c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002e7c:	4b31      	ldr	r3, [pc, #196]	; (8002f44 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e82:	0a1b      	lsrs	r3, r3, #8
 8002e84:	f003 030f 	and.w	r3, r3, #15
 8002e88:	61fb      	str	r3, [r7, #28]
 8002e8a:	e005      	b.n	8002e98 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002e8c:	4b2d      	ldr	r3, [pc, #180]	; (8002f44 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	091b      	lsrs	r3, r3, #4
 8002e92:	f003 030f 	and.w	r3, r3, #15
 8002e96:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002e98:	4a2b      	ldr	r2, [pc, #172]	; (8002f48 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002e9a:	69fb      	ldr	r3, [r7, #28]
 8002e9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ea0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002ea2:	693b      	ldr	r3, [r7, #16]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d10d      	bne.n	8002ec4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002ea8:	69fb      	ldr	r3, [r7, #28]
 8002eaa:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002eac:	e00a      	b.n	8002ec4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002eae:	693b      	ldr	r3, [r7, #16]
 8002eb0:	2b04      	cmp	r3, #4
 8002eb2:	d102      	bne.n	8002eba <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002eb4:	4b25      	ldr	r3, [pc, #148]	; (8002f4c <HAL_RCC_GetSysClockFreq+0x110>)
 8002eb6:	61bb      	str	r3, [r7, #24]
 8002eb8:	e004      	b.n	8002ec4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002eba:	693b      	ldr	r3, [r7, #16]
 8002ebc:	2b08      	cmp	r3, #8
 8002ebe:	d101      	bne.n	8002ec4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002ec0:	4b23      	ldr	r3, [pc, #140]	; (8002f50 <HAL_RCC_GetSysClockFreq+0x114>)
 8002ec2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002ec4:	693b      	ldr	r3, [r7, #16]
 8002ec6:	2b0c      	cmp	r3, #12
 8002ec8:	d134      	bne.n	8002f34 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002eca:	4b1e      	ldr	r3, [pc, #120]	; (8002f44 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ecc:	68db      	ldr	r3, [r3, #12]
 8002ece:	f003 0303 	and.w	r3, r3, #3
 8002ed2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002ed4:	68bb      	ldr	r3, [r7, #8]
 8002ed6:	2b02      	cmp	r3, #2
 8002ed8:	d003      	beq.n	8002ee2 <HAL_RCC_GetSysClockFreq+0xa6>
 8002eda:	68bb      	ldr	r3, [r7, #8]
 8002edc:	2b03      	cmp	r3, #3
 8002ede:	d003      	beq.n	8002ee8 <HAL_RCC_GetSysClockFreq+0xac>
 8002ee0:	e005      	b.n	8002eee <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002ee2:	4b1a      	ldr	r3, [pc, #104]	; (8002f4c <HAL_RCC_GetSysClockFreq+0x110>)
 8002ee4:	617b      	str	r3, [r7, #20]
      break;
 8002ee6:	e005      	b.n	8002ef4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002ee8:	4b19      	ldr	r3, [pc, #100]	; (8002f50 <HAL_RCC_GetSysClockFreq+0x114>)
 8002eea:	617b      	str	r3, [r7, #20]
      break;
 8002eec:	e002      	b.n	8002ef4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002eee:	69fb      	ldr	r3, [r7, #28]
 8002ef0:	617b      	str	r3, [r7, #20]
      break;
 8002ef2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002ef4:	4b13      	ldr	r3, [pc, #76]	; (8002f44 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ef6:	68db      	ldr	r3, [r3, #12]
 8002ef8:	091b      	lsrs	r3, r3, #4
 8002efa:	f003 0307 	and.w	r3, r3, #7
 8002efe:	3301      	adds	r3, #1
 8002f00:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002f02:	4b10      	ldr	r3, [pc, #64]	; (8002f44 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f04:	68db      	ldr	r3, [r3, #12]
 8002f06:	0a1b      	lsrs	r3, r3, #8
 8002f08:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002f0c:	697a      	ldr	r2, [r7, #20]
 8002f0e:	fb03 f202 	mul.w	r2, r3, r2
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f18:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002f1a:	4b0a      	ldr	r3, [pc, #40]	; (8002f44 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f1c:	68db      	ldr	r3, [r3, #12]
 8002f1e:	0e5b      	lsrs	r3, r3, #25
 8002f20:	f003 0303 	and.w	r3, r3, #3
 8002f24:	3301      	adds	r3, #1
 8002f26:	005b      	lsls	r3, r3, #1
 8002f28:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002f2a:	697a      	ldr	r2, [r7, #20]
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f32:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002f34:	69bb      	ldr	r3, [r7, #24]
}
 8002f36:	4618      	mov	r0, r3
 8002f38:	3724      	adds	r7, #36	; 0x24
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f40:	4770      	bx	lr
 8002f42:	bf00      	nop
 8002f44:	40021000 	.word	0x40021000
 8002f48:	08004b6c 	.word	0x08004b6c
 8002f4c:	00f42400 	.word	0x00f42400
 8002f50:	007a1200 	.word	0x007a1200

08002f54 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f54:	b480      	push	{r7}
 8002f56:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f58:	4b03      	ldr	r3, [pc, #12]	; (8002f68 <HAL_RCC_GetHCLKFreq+0x14>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
}
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f64:	4770      	bx	lr
 8002f66:	bf00      	nop
 8002f68:	20000000 	.word	0x20000000

08002f6c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002f70:	f7ff fff0 	bl	8002f54 <HAL_RCC_GetHCLKFreq>
 8002f74:	4602      	mov	r2, r0
 8002f76:	4b06      	ldr	r3, [pc, #24]	; (8002f90 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f78:	689b      	ldr	r3, [r3, #8]
 8002f7a:	0a1b      	lsrs	r3, r3, #8
 8002f7c:	f003 0307 	and.w	r3, r3, #7
 8002f80:	4904      	ldr	r1, [pc, #16]	; (8002f94 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002f82:	5ccb      	ldrb	r3, [r1, r3]
 8002f84:	f003 031f 	and.w	r3, r3, #31
 8002f88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	bd80      	pop	{r7, pc}
 8002f90:	40021000 	.word	0x40021000
 8002f94:	08004b64 	.word	0x08004b64

08002f98 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002f9c:	f7ff ffda 	bl	8002f54 <HAL_RCC_GetHCLKFreq>
 8002fa0:	4602      	mov	r2, r0
 8002fa2:	4b06      	ldr	r3, [pc, #24]	; (8002fbc <HAL_RCC_GetPCLK2Freq+0x24>)
 8002fa4:	689b      	ldr	r3, [r3, #8]
 8002fa6:	0adb      	lsrs	r3, r3, #11
 8002fa8:	f003 0307 	and.w	r3, r3, #7
 8002fac:	4904      	ldr	r1, [pc, #16]	; (8002fc0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002fae:	5ccb      	ldrb	r3, [r1, r3]
 8002fb0:	f003 031f 	and.w	r3, r3, #31
 8002fb4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002fb8:	4618      	mov	r0, r3
 8002fba:	bd80      	pop	{r7, pc}
 8002fbc:	40021000 	.word	0x40021000
 8002fc0:	08004b64 	.word	0x08004b64

08002fc4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b086      	sub	sp, #24
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002fcc:	2300      	movs	r3, #0
 8002fce:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002fd0:	4b2a      	ldr	r3, [pc, #168]	; (800307c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002fd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fd4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d003      	beq.n	8002fe4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002fdc:	f7ff f9b6 	bl	800234c <HAL_PWREx_GetVoltageRange>
 8002fe0:	6178      	str	r0, [r7, #20]
 8002fe2:	e014      	b.n	800300e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002fe4:	4b25      	ldr	r3, [pc, #148]	; (800307c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002fe6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fe8:	4a24      	ldr	r2, [pc, #144]	; (800307c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002fea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fee:	6593      	str	r3, [r2, #88]	; 0x58
 8002ff0:	4b22      	ldr	r3, [pc, #136]	; (800307c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002ff2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ff4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ff8:	60fb      	str	r3, [r7, #12]
 8002ffa:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002ffc:	f7ff f9a6 	bl	800234c <HAL_PWREx_GetVoltageRange>
 8003000:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003002:	4b1e      	ldr	r3, [pc, #120]	; (800307c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003004:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003006:	4a1d      	ldr	r2, [pc, #116]	; (800307c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003008:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800300c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800300e:	697b      	ldr	r3, [r7, #20]
 8003010:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003014:	d10b      	bne.n	800302e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2b80      	cmp	r3, #128	; 0x80
 800301a:	d919      	bls.n	8003050 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2ba0      	cmp	r3, #160	; 0xa0
 8003020:	d902      	bls.n	8003028 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003022:	2302      	movs	r3, #2
 8003024:	613b      	str	r3, [r7, #16]
 8003026:	e013      	b.n	8003050 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003028:	2301      	movs	r3, #1
 800302a:	613b      	str	r3, [r7, #16]
 800302c:	e010      	b.n	8003050 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2b80      	cmp	r3, #128	; 0x80
 8003032:	d902      	bls.n	800303a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003034:	2303      	movs	r3, #3
 8003036:	613b      	str	r3, [r7, #16]
 8003038:	e00a      	b.n	8003050 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2b80      	cmp	r3, #128	; 0x80
 800303e:	d102      	bne.n	8003046 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003040:	2302      	movs	r3, #2
 8003042:	613b      	str	r3, [r7, #16]
 8003044:	e004      	b.n	8003050 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2b70      	cmp	r3, #112	; 0x70
 800304a:	d101      	bne.n	8003050 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800304c:	2301      	movs	r3, #1
 800304e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003050:	4b0b      	ldr	r3, [pc, #44]	; (8003080 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f023 0207 	bic.w	r2, r3, #7
 8003058:	4909      	ldr	r1, [pc, #36]	; (8003080 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800305a:	693b      	ldr	r3, [r7, #16]
 800305c:	4313      	orrs	r3, r2
 800305e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003060:	4b07      	ldr	r3, [pc, #28]	; (8003080 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f003 0307 	and.w	r3, r3, #7
 8003068:	693a      	ldr	r2, [r7, #16]
 800306a:	429a      	cmp	r2, r3
 800306c:	d001      	beq.n	8003072 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800306e:	2301      	movs	r3, #1
 8003070:	e000      	b.n	8003074 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003072:	2300      	movs	r3, #0
}
 8003074:	4618      	mov	r0, r3
 8003076:	3718      	adds	r7, #24
 8003078:	46bd      	mov	sp, r7
 800307a:	bd80      	pop	{r7, pc}
 800307c:	40021000 	.word	0x40021000
 8003080:	40022000 	.word	0x40022000

08003084 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b086      	sub	sp, #24
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800308c:	2300      	movs	r3, #0
 800308e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003090:	2300      	movs	r3, #0
 8003092:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800309c:	2b00      	cmp	r3, #0
 800309e:	d031      	beq.n	8003104 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030a4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80030a8:	d01a      	beq.n	80030e0 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80030aa:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80030ae:	d814      	bhi.n	80030da <HAL_RCCEx_PeriphCLKConfig+0x56>
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d009      	beq.n	80030c8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80030b4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80030b8:	d10f      	bne.n	80030da <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80030ba:	4b5d      	ldr	r3, [pc, #372]	; (8003230 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80030bc:	68db      	ldr	r3, [r3, #12]
 80030be:	4a5c      	ldr	r2, [pc, #368]	; (8003230 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80030c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030c4:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80030c6:	e00c      	b.n	80030e2 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	3304      	adds	r3, #4
 80030cc:	2100      	movs	r1, #0
 80030ce:	4618      	mov	r0, r3
 80030d0:	f000 fa44 	bl	800355c <RCCEx_PLLSAI1_Config>
 80030d4:	4603      	mov	r3, r0
 80030d6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80030d8:	e003      	b.n	80030e2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80030da:	2301      	movs	r3, #1
 80030dc:	74fb      	strb	r3, [r7, #19]
      break;
 80030de:	e000      	b.n	80030e2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80030e0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80030e2:	7cfb      	ldrb	r3, [r7, #19]
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d10b      	bne.n	8003100 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80030e8:	4b51      	ldr	r3, [pc, #324]	; (8003230 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80030ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030ee:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030f6:	494e      	ldr	r1, [pc, #312]	; (8003230 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80030f8:	4313      	orrs	r3, r2
 80030fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80030fe:	e001      	b.n	8003104 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003100:	7cfb      	ldrb	r3, [r7, #19]
 8003102:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800310c:	2b00      	cmp	r3, #0
 800310e:	f000 809e 	beq.w	800324e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003112:	2300      	movs	r3, #0
 8003114:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003116:	4b46      	ldr	r3, [pc, #280]	; (8003230 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003118:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800311a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800311e:	2b00      	cmp	r3, #0
 8003120:	d101      	bne.n	8003126 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8003122:	2301      	movs	r3, #1
 8003124:	e000      	b.n	8003128 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8003126:	2300      	movs	r3, #0
 8003128:	2b00      	cmp	r3, #0
 800312a:	d00d      	beq.n	8003148 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800312c:	4b40      	ldr	r3, [pc, #256]	; (8003230 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800312e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003130:	4a3f      	ldr	r2, [pc, #252]	; (8003230 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003132:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003136:	6593      	str	r3, [r2, #88]	; 0x58
 8003138:	4b3d      	ldr	r3, [pc, #244]	; (8003230 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800313a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800313c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003140:	60bb      	str	r3, [r7, #8]
 8003142:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003144:	2301      	movs	r3, #1
 8003146:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003148:	4b3a      	ldr	r3, [pc, #232]	; (8003234 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4a39      	ldr	r2, [pc, #228]	; (8003234 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800314e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003152:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003154:	f7fd ff76 	bl	8001044 <HAL_GetTick>
 8003158:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800315a:	e009      	b.n	8003170 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800315c:	f7fd ff72 	bl	8001044 <HAL_GetTick>
 8003160:	4602      	mov	r2, r0
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	1ad3      	subs	r3, r2, r3
 8003166:	2b02      	cmp	r3, #2
 8003168:	d902      	bls.n	8003170 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 800316a:	2303      	movs	r3, #3
 800316c:	74fb      	strb	r3, [r7, #19]
        break;
 800316e:	e005      	b.n	800317c <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003170:	4b30      	ldr	r3, [pc, #192]	; (8003234 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003178:	2b00      	cmp	r3, #0
 800317a:	d0ef      	beq.n	800315c <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 800317c:	7cfb      	ldrb	r3, [r7, #19]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d15a      	bne.n	8003238 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003182:	4b2b      	ldr	r3, [pc, #172]	; (8003230 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003184:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003188:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800318c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800318e:	697b      	ldr	r3, [r7, #20]
 8003190:	2b00      	cmp	r3, #0
 8003192:	d01e      	beq.n	80031d2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003198:	697a      	ldr	r2, [r7, #20]
 800319a:	429a      	cmp	r2, r3
 800319c:	d019      	beq.n	80031d2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800319e:	4b24      	ldr	r3, [pc, #144]	; (8003230 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80031a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031a8:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80031aa:	4b21      	ldr	r3, [pc, #132]	; (8003230 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80031ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031b0:	4a1f      	ldr	r2, [pc, #124]	; (8003230 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80031b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031b6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80031ba:	4b1d      	ldr	r3, [pc, #116]	; (8003230 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80031bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031c0:	4a1b      	ldr	r2, [pc, #108]	; (8003230 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80031c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031c6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80031ca:	4a19      	ldr	r2, [pc, #100]	; (8003230 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80031cc:	697b      	ldr	r3, [r7, #20]
 80031ce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80031d2:	697b      	ldr	r3, [r7, #20]
 80031d4:	f003 0301 	and.w	r3, r3, #1
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d016      	beq.n	800320a <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031dc:	f7fd ff32 	bl	8001044 <HAL_GetTick>
 80031e0:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80031e2:	e00b      	b.n	80031fc <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031e4:	f7fd ff2e 	bl	8001044 <HAL_GetTick>
 80031e8:	4602      	mov	r2, r0
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	1ad3      	subs	r3, r2, r3
 80031ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d902      	bls.n	80031fc <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80031f6:	2303      	movs	r3, #3
 80031f8:	74fb      	strb	r3, [r7, #19]
            break;
 80031fa:	e006      	b.n	800320a <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80031fc:	4b0c      	ldr	r3, [pc, #48]	; (8003230 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80031fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003202:	f003 0302 	and.w	r3, r3, #2
 8003206:	2b00      	cmp	r3, #0
 8003208:	d0ec      	beq.n	80031e4 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800320a:	7cfb      	ldrb	r3, [r7, #19]
 800320c:	2b00      	cmp	r3, #0
 800320e:	d10b      	bne.n	8003228 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003210:	4b07      	ldr	r3, [pc, #28]	; (8003230 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003212:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003216:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800321e:	4904      	ldr	r1, [pc, #16]	; (8003230 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003220:	4313      	orrs	r3, r2
 8003222:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003226:	e009      	b.n	800323c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003228:	7cfb      	ldrb	r3, [r7, #19]
 800322a:	74bb      	strb	r3, [r7, #18]
 800322c:	e006      	b.n	800323c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800322e:	bf00      	nop
 8003230:	40021000 	.word	0x40021000
 8003234:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003238:	7cfb      	ldrb	r3, [r7, #19]
 800323a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800323c:	7c7b      	ldrb	r3, [r7, #17]
 800323e:	2b01      	cmp	r3, #1
 8003240:	d105      	bne.n	800324e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003242:	4b9e      	ldr	r3, [pc, #632]	; (80034bc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003244:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003246:	4a9d      	ldr	r2, [pc, #628]	; (80034bc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003248:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800324c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f003 0301 	and.w	r3, r3, #1
 8003256:	2b00      	cmp	r3, #0
 8003258:	d00a      	beq.n	8003270 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800325a:	4b98      	ldr	r3, [pc, #608]	; (80034bc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800325c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003260:	f023 0203 	bic.w	r2, r3, #3
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6a1b      	ldr	r3, [r3, #32]
 8003268:	4994      	ldr	r1, [pc, #592]	; (80034bc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800326a:	4313      	orrs	r3, r2
 800326c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f003 0302 	and.w	r3, r3, #2
 8003278:	2b00      	cmp	r3, #0
 800327a:	d00a      	beq.n	8003292 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800327c:	4b8f      	ldr	r3, [pc, #572]	; (80034bc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800327e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003282:	f023 020c 	bic.w	r2, r3, #12
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800328a:	498c      	ldr	r1, [pc, #560]	; (80034bc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800328c:	4313      	orrs	r3, r2
 800328e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f003 0304 	and.w	r3, r3, #4
 800329a:	2b00      	cmp	r3, #0
 800329c:	d00a      	beq.n	80032b4 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800329e:	4b87      	ldr	r3, [pc, #540]	; (80034bc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80032a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032a4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032ac:	4983      	ldr	r1, [pc, #524]	; (80034bc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80032ae:	4313      	orrs	r3, r2
 80032b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f003 0308 	and.w	r3, r3, #8
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d00a      	beq.n	80032d6 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80032c0:	4b7e      	ldr	r3, [pc, #504]	; (80034bc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80032c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032c6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032ce:	497b      	ldr	r1, [pc, #492]	; (80034bc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80032d0:	4313      	orrs	r3, r2
 80032d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f003 0320 	and.w	r3, r3, #32
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d00a      	beq.n	80032f8 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80032e2:	4b76      	ldr	r3, [pc, #472]	; (80034bc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80032e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032e8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032f0:	4972      	ldr	r1, [pc, #456]	; (80034bc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80032f2:	4313      	orrs	r3, r2
 80032f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003300:	2b00      	cmp	r3, #0
 8003302:	d00a      	beq.n	800331a <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003304:	4b6d      	ldr	r3, [pc, #436]	; (80034bc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003306:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800330a:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003312:	496a      	ldr	r1, [pc, #424]	; (80034bc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003314:	4313      	orrs	r3, r2
 8003316:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003322:	2b00      	cmp	r3, #0
 8003324:	d00a      	beq.n	800333c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003326:	4b65      	ldr	r3, [pc, #404]	; (80034bc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003328:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800332c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003334:	4961      	ldr	r1, [pc, #388]	; (80034bc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003336:	4313      	orrs	r3, r2
 8003338:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003344:	2b00      	cmp	r3, #0
 8003346:	d00a      	beq.n	800335e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003348:	4b5c      	ldr	r3, [pc, #368]	; (80034bc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800334a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800334e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003356:	4959      	ldr	r1, [pc, #356]	; (80034bc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003358:	4313      	orrs	r3, r2
 800335a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003366:	2b00      	cmp	r3, #0
 8003368:	d00a      	beq.n	8003380 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800336a:	4b54      	ldr	r3, [pc, #336]	; (80034bc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800336c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003370:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003378:	4950      	ldr	r1, [pc, #320]	; (80034bc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800337a:	4313      	orrs	r3, r2
 800337c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003388:	2b00      	cmp	r3, #0
 800338a:	d00a      	beq.n	80033a2 <HAL_RCCEx_PeriphCLKConfig+0x31e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800338c:	4b4b      	ldr	r3, [pc, #300]	; (80034bc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800338e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003392:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800339a:	4948      	ldr	r1, [pc, #288]	; (80034bc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800339c:	4313      	orrs	r3, r2
 800339e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d00a      	beq.n	80033c4 <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80033ae:	4b43      	ldr	r3, [pc, #268]	; (80034bc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80033b0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80033b4:	f023 0203 	bic.w	r2, r3, #3
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033bc:	493f      	ldr	r1, [pc, #252]	; (80034bc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80033be:	4313      	orrs	r3, r2
 80033c0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d028      	beq.n	8003422 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80033d0:	4b3a      	ldr	r3, [pc, #232]	; (80034bc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80033d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033d6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033de:	4937      	ldr	r1, [pc, #220]	; (80034bc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80033e0:	4313      	orrs	r3, r2
 80033e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033ea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80033ee:	d106      	bne.n	80033fe <HAL_RCCEx_PeriphCLKConfig+0x37a>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80033f0:	4b32      	ldr	r3, [pc, #200]	; (80034bc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80033f2:	68db      	ldr	r3, [r3, #12]
 80033f4:	4a31      	ldr	r2, [pc, #196]	; (80034bc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80033f6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80033fa:	60d3      	str	r3, [r2, #12]
 80033fc:	e011      	b.n	8003422 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003402:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003406:	d10c      	bne.n	8003422 <HAL_RCCEx_PeriphCLKConfig+0x39e>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	3304      	adds	r3, #4
 800340c:	2101      	movs	r1, #1
 800340e:	4618      	mov	r0, r3
 8003410:	f000 f8a4 	bl	800355c <RCCEx_PLLSAI1_Config>
 8003414:	4603      	mov	r3, r0
 8003416:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003418:	7cfb      	ldrb	r3, [r7, #19]
 800341a:	2b00      	cmp	r3, #0
 800341c:	d001      	beq.n	8003422 <HAL_RCCEx_PeriphCLKConfig+0x39e>
        {
          /* set overall return value */
          status = ret;
 800341e:	7cfb      	ldrb	r3, [r7, #19]
 8003420:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800342a:	2b00      	cmp	r3, #0
 800342c:	d028      	beq.n	8003480 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800342e:	4b23      	ldr	r3, [pc, #140]	; (80034bc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003430:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003434:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800343c:	491f      	ldr	r1, [pc, #124]	; (80034bc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800343e:	4313      	orrs	r3, r2
 8003440:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003448:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800344c:	d106      	bne.n	800345c <HAL_RCCEx_PeriphCLKConfig+0x3d8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800344e:	4b1b      	ldr	r3, [pc, #108]	; (80034bc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003450:	68db      	ldr	r3, [r3, #12]
 8003452:	4a1a      	ldr	r2, [pc, #104]	; (80034bc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003454:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003458:	60d3      	str	r3, [r2, #12]
 800345a:	e011      	b.n	8003480 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003460:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003464:	d10c      	bne.n	8003480 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	3304      	adds	r3, #4
 800346a:	2101      	movs	r1, #1
 800346c:	4618      	mov	r0, r3
 800346e:	f000 f875 	bl	800355c <RCCEx_PLLSAI1_Config>
 8003472:	4603      	mov	r3, r0
 8003474:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003476:	7cfb      	ldrb	r3, [r7, #19]
 8003478:	2b00      	cmp	r3, #0
 800347a:	d001      	beq.n	8003480 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
      {
        /* set overall return value */
        status = ret;
 800347c:	7cfb      	ldrb	r3, [r7, #19]
 800347e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003488:	2b00      	cmp	r3, #0
 800348a:	d02b      	beq.n	80034e4 <HAL_RCCEx_PeriphCLKConfig+0x460>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800348c:	4b0b      	ldr	r3, [pc, #44]	; (80034bc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800348e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003492:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800349a:	4908      	ldr	r1, [pc, #32]	; (80034bc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800349c:	4313      	orrs	r3, r2
 800349e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034a6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80034aa:	d109      	bne.n	80034c0 <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80034ac:	4b03      	ldr	r3, [pc, #12]	; (80034bc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80034ae:	68db      	ldr	r3, [r3, #12]
 80034b0:	4a02      	ldr	r2, [pc, #8]	; (80034bc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80034b2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80034b6:	60d3      	str	r3, [r2, #12]
 80034b8:	e014      	b.n	80034e4 <HAL_RCCEx_PeriphCLKConfig+0x460>
 80034ba:	bf00      	nop
 80034bc:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034c4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80034c8:	d10c      	bne.n	80034e4 <HAL_RCCEx_PeriphCLKConfig+0x460>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	3304      	adds	r3, #4
 80034ce:	2101      	movs	r1, #1
 80034d0:	4618      	mov	r0, r3
 80034d2:	f000 f843 	bl	800355c <RCCEx_PLLSAI1_Config>
 80034d6:	4603      	mov	r3, r0
 80034d8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80034da:	7cfb      	ldrb	r3, [r7, #19]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d001      	beq.n	80034e4 <HAL_RCCEx_PeriphCLKConfig+0x460>
      {
        /* set overall return value */
        status = ret;
 80034e0:	7cfb      	ldrb	r3, [r7, #19]
 80034e2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d01c      	beq.n	800352a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80034f0:	4b19      	ldr	r3, [pc, #100]	; (8003558 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 80034f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034f6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034fe:	4916      	ldr	r1, [pc, #88]	; (8003558 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8003500:	4313      	orrs	r3, r2
 8003502:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800350a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800350e:	d10c      	bne.n	800352a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	3304      	adds	r3, #4
 8003514:	2102      	movs	r1, #2
 8003516:	4618      	mov	r0, r3
 8003518:	f000 f820 	bl	800355c <RCCEx_PLLSAI1_Config>
 800351c:	4603      	mov	r3, r0
 800351e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003520:	7cfb      	ldrb	r3, [r7, #19]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d001      	beq.n	800352a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
      {
        /* set overall return value */
        status = ret;
 8003526:	7cfb      	ldrb	r3, [r7, #19]
 8003528:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003532:	2b00      	cmp	r3, #0
 8003534:	d00a      	beq.n	800354c <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003536:	4b08      	ldr	r3, [pc, #32]	; (8003558 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8003538:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800353c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003544:	4904      	ldr	r1, [pc, #16]	; (8003558 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8003546:	4313      	orrs	r3, r2
 8003548:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800354c:	7cbb      	ldrb	r3, [r7, #18]
}
 800354e:	4618      	mov	r0, r3
 8003550:	3718      	adds	r7, #24
 8003552:	46bd      	mov	sp, r7
 8003554:	bd80      	pop	{r7, pc}
 8003556:	bf00      	nop
 8003558:	40021000 	.word	0x40021000

0800355c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b084      	sub	sp, #16
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
 8003564:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003566:	2300      	movs	r3, #0
 8003568:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800356a:	4b74      	ldr	r3, [pc, #464]	; (800373c <RCCEx_PLLSAI1_Config+0x1e0>)
 800356c:	68db      	ldr	r3, [r3, #12]
 800356e:	f003 0303 	and.w	r3, r3, #3
 8003572:	2b00      	cmp	r3, #0
 8003574:	d018      	beq.n	80035a8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003576:	4b71      	ldr	r3, [pc, #452]	; (800373c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003578:	68db      	ldr	r3, [r3, #12]
 800357a:	f003 0203 	and.w	r2, r3, #3
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	429a      	cmp	r2, r3
 8003584:	d10d      	bne.n	80035a2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
       ||
 800358a:	2b00      	cmp	r3, #0
 800358c:	d009      	beq.n	80035a2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800358e:	4b6b      	ldr	r3, [pc, #428]	; (800373c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003590:	68db      	ldr	r3, [r3, #12]
 8003592:	091b      	lsrs	r3, r3, #4
 8003594:	f003 0307 	and.w	r3, r3, #7
 8003598:	1c5a      	adds	r2, r3, #1
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	685b      	ldr	r3, [r3, #4]
       ||
 800359e:	429a      	cmp	r2, r3
 80035a0:	d047      	beq.n	8003632 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80035a2:	2301      	movs	r3, #1
 80035a4:	73fb      	strb	r3, [r7, #15]
 80035a6:	e044      	b.n	8003632 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	2b03      	cmp	r3, #3
 80035ae:	d018      	beq.n	80035e2 <RCCEx_PLLSAI1_Config+0x86>
 80035b0:	2b03      	cmp	r3, #3
 80035b2:	d825      	bhi.n	8003600 <RCCEx_PLLSAI1_Config+0xa4>
 80035b4:	2b01      	cmp	r3, #1
 80035b6:	d002      	beq.n	80035be <RCCEx_PLLSAI1_Config+0x62>
 80035b8:	2b02      	cmp	r3, #2
 80035ba:	d009      	beq.n	80035d0 <RCCEx_PLLSAI1_Config+0x74>
 80035bc:	e020      	b.n	8003600 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80035be:	4b5f      	ldr	r3, [pc, #380]	; (800373c <RCCEx_PLLSAI1_Config+0x1e0>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f003 0302 	and.w	r3, r3, #2
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d11d      	bne.n	8003606 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80035ca:	2301      	movs	r3, #1
 80035cc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80035ce:	e01a      	b.n	8003606 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80035d0:	4b5a      	ldr	r3, [pc, #360]	; (800373c <RCCEx_PLLSAI1_Config+0x1e0>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d116      	bne.n	800360a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80035dc:	2301      	movs	r3, #1
 80035de:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80035e0:	e013      	b.n	800360a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80035e2:	4b56      	ldr	r3, [pc, #344]	; (800373c <RCCEx_PLLSAI1_Config+0x1e0>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d10f      	bne.n	800360e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80035ee:	4b53      	ldr	r3, [pc, #332]	; (800373c <RCCEx_PLLSAI1_Config+0x1e0>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d109      	bne.n	800360e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80035fa:	2301      	movs	r3, #1
 80035fc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80035fe:	e006      	b.n	800360e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003600:	2301      	movs	r3, #1
 8003602:	73fb      	strb	r3, [r7, #15]
      break;
 8003604:	e004      	b.n	8003610 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003606:	bf00      	nop
 8003608:	e002      	b.n	8003610 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800360a:	bf00      	nop
 800360c:	e000      	b.n	8003610 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800360e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003610:	7bfb      	ldrb	r3, [r7, #15]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d10d      	bne.n	8003632 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003616:	4b49      	ldr	r3, [pc, #292]	; (800373c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003618:	68db      	ldr	r3, [r3, #12]
 800361a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6819      	ldr	r1, [r3, #0]
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	685b      	ldr	r3, [r3, #4]
 8003626:	3b01      	subs	r3, #1
 8003628:	011b      	lsls	r3, r3, #4
 800362a:	430b      	orrs	r3, r1
 800362c:	4943      	ldr	r1, [pc, #268]	; (800373c <RCCEx_PLLSAI1_Config+0x1e0>)
 800362e:	4313      	orrs	r3, r2
 8003630:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003632:	7bfb      	ldrb	r3, [r7, #15]
 8003634:	2b00      	cmp	r3, #0
 8003636:	d17c      	bne.n	8003732 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003638:	4b40      	ldr	r3, [pc, #256]	; (800373c <RCCEx_PLLSAI1_Config+0x1e0>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4a3f      	ldr	r2, [pc, #252]	; (800373c <RCCEx_PLLSAI1_Config+0x1e0>)
 800363e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003642:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003644:	f7fd fcfe 	bl	8001044 <HAL_GetTick>
 8003648:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800364a:	e009      	b.n	8003660 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800364c:	f7fd fcfa 	bl	8001044 <HAL_GetTick>
 8003650:	4602      	mov	r2, r0
 8003652:	68bb      	ldr	r3, [r7, #8]
 8003654:	1ad3      	subs	r3, r2, r3
 8003656:	2b02      	cmp	r3, #2
 8003658:	d902      	bls.n	8003660 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800365a:	2303      	movs	r3, #3
 800365c:	73fb      	strb	r3, [r7, #15]
        break;
 800365e:	e005      	b.n	800366c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003660:	4b36      	ldr	r3, [pc, #216]	; (800373c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003668:	2b00      	cmp	r3, #0
 800366a:	d1ef      	bne.n	800364c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800366c:	7bfb      	ldrb	r3, [r7, #15]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d15f      	bne.n	8003732 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	2b00      	cmp	r3, #0
 8003676:	d110      	bne.n	800369a <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003678:	4b30      	ldr	r3, [pc, #192]	; (800373c <RCCEx_PLLSAI1_Config+0x1e0>)
 800367a:	691b      	ldr	r3, [r3, #16]
 800367c:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8003680:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003684:	687a      	ldr	r2, [r7, #4]
 8003686:	6892      	ldr	r2, [r2, #8]
 8003688:	0211      	lsls	r1, r2, #8
 800368a:	687a      	ldr	r2, [r7, #4]
 800368c:	68d2      	ldr	r2, [r2, #12]
 800368e:	06d2      	lsls	r2, r2, #27
 8003690:	430a      	orrs	r2, r1
 8003692:	492a      	ldr	r1, [pc, #168]	; (800373c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003694:	4313      	orrs	r3, r2
 8003696:	610b      	str	r3, [r1, #16]
 8003698:	e027      	b.n	80036ea <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	2b01      	cmp	r3, #1
 800369e:	d112      	bne.n	80036c6 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80036a0:	4b26      	ldr	r3, [pc, #152]	; (800373c <RCCEx_PLLSAI1_Config+0x1e0>)
 80036a2:	691b      	ldr	r3, [r3, #16]
 80036a4:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80036a8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80036ac:	687a      	ldr	r2, [r7, #4]
 80036ae:	6892      	ldr	r2, [r2, #8]
 80036b0:	0211      	lsls	r1, r2, #8
 80036b2:	687a      	ldr	r2, [r7, #4]
 80036b4:	6912      	ldr	r2, [r2, #16]
 80036b6:	0852      	lsrs	r2, r2, #1
 80036b8:	3a01      	subs	r2, #1
 80036ba:	0552      	lsls	r2, r2, #21
 80036bc:	430a      	orrs	r2, r1
 80036be:	491f      	ldr	r1, [pc, #124]	; (800373c <RCCEx_PLLSAI1_Config+0x1e0>)
 80036c0:	4313      	orrs	r3, r2
 80036c2:	610b      	str	r3, [r1, #16]
 80036c4:	e011      	b.n	80036ea <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80036c6:	4b1d      	ldr	r3, [pc, #116]	; (800373c <RCCEx_PLLSAI1_Config+0x1e0>)
 80036c8:	691b      	ldr	r3, [r3, #16]
 80036ca:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80036ce:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80036d2:	687a      	ldr	r2, [r7, #4]
 80036d4:	6892      	ldr	r2, [r2, #8]
 80036d6:	0211      	lsls	r1, r2, #8
 80036d8:	687a      	ldr	r2, [r7, #4]
 80036da:	6952      	ldr	r2, [r2, #20]
 80036dc:	0852      	lsrs	r2, r2, #1
 80036de:	3a01      	subs	r2, #1
 80036e0:	0652      	lsls	r2, r2, #25
 80036e2:	430a      	orrs	r2, r1
 80036e4:	4915      	ldr	r1, [pc, #84]	; (800373c <RCCEx_PLLSAI1_Config+0x1e0>)
 80036e6:	4313      	orrs	r3, r2
 80036e8:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80036ea:	4b14      	ldr	r3, [pc, #80]	; (800373c <RCCEx_PLLSAI1_Config+0x1e0>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	4a13      	ldr	r2, [pc, #76]	; (800373c <RCCEx_PLLSAI1_Config+0x1e0>)
 80036f0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80036f4:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036f6:	f7fd fca5 	bl	8001044 <HAL_GetTick>
 80036fa:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80036fc:	e009      	b.n	8003712 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80036fe:	f7fd fca1 	bl	8001044 <HAL_GetTick>
 8003702:	4602      	mov	r2, r0
 8003704:	68bb      	ldr	r3, [r7, #8]
 8003706:	1ad3      	subs	r3, r2, r3
 8003708:	2b02      	cmp	r3, #2
 800370a:	d902      	bls.n	8003712 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 800370c:	2303      	movs	r3, #3
 800370e:	73fb      	strb	r3, [r7, #15]
          break;
 8003710:	e005      	b.n	800371e <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003712:	4b0a      	ldr	r3, [pc, #40]	; (800373c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800371a:	2b00      	cmp	r3, #0
 800371c:	d0ef      	beq.n	80036fe <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800371e:	7bfb      	ldrb	r3, [r7, #15]
 8003720:	2b00      	cmp	r3, #0
 8003722:	d106      	bne.n	8003732 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003724:	4b05      	ldr	r3, [pc, #20]	; (800373c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003726:	691a      	ldr	r2, [r3, #16]
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	699b      	ldr	r3, [r3, #24]
 800372c:	4903      	ldr	r1, [pc, #12]	; (800373c <RCCEx_PLLSAI1_Config+0x1e0>)
 800372e:	4313      	orrs	r3, r2
 8003730:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003732:	7bfb      	ldrb	r3, [r7, #15]
}
 8003734:	4618      	mov	r0, r3
 8003736:	3710      	adds	r7, #16
 8003738:	46bd      	mov	sp, r7
 800373a:	bd80      	pop	{r7, pc}
 800373c:	40021000 	.word	0x40021000

08003740 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b082      	sub	sp, #8
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d101      	bne.n	8003752 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800374e:	2301      	movs	r3, #1
 8003750:	e049      	b.n	80037e6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003758:	b2db      	uxtb	r3, r3
 800375a:	2b00      	cmp	r3, #0
 800375c:	d106      	bne.n	800376c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2200      	movs	r2, #0
 8003762:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003766:	6878      	ldr	r0, [r7, #4]
 8003768:	f7fd faee 	bl	8000d48 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2202      	movs	r2, #2
 8003770:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681a      	ldr	r2, [r3, #0]
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	3304      	adds	r3, #4
 800377c:	4619      	mov	r1, r3
 800377e:	4610      	mov	r0, r2
 8003780:	f000 f94a 	bl	8003a18 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2201      	movs	r2, #1
 8003788:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2201      	movs	r2, #1
 8003790:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2201      	movs	r2, #1
 8003798:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2201      	movs	r2, #1
 80037a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2201      	movs	r2, #1
 80037a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2201      	movs	r2, #1
 80037b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2201      	movs	r2, #1
 80037b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2201      	movs	r2, #1
 80037c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2201      	movs	r2, #1
 80037c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2201      	movs	r2, #1
 80037d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2201      	movs	r2, #1
 80037d8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2201      	movs	r2, #1
 80037e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80037e4:	2300      	movs	r3, #0
}
 80037e6:	4618      	mov	r0, r3
 80037e8:	3708      	adds	r7, #8
 80037ea:	46bd      	mov	sp, r7
 80037ec:	bd80      	pop	{r7, pc}
	...

080037f0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b086      	sub	sp, #24
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	60f8      	str	r0, [r7, #12]
 80037f8:	60b9      	str	r1, [r7, #8]
 80037fa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80037fc:	2300      	movs	r3, #0
 80037fe:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003806:	2b01      	cmp	r3, #1
 8003808:	d101      	bne.n	800380e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800380a:	2302      	movs	r3, #2
 800380c:	e0ff      	b.n	8003a0e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	2201      	movs	r2, #1
 8003812:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2b14      	cmp	r3, #20
 800381a:	f200 80f0 	bhi.w	80039fe <HAL_TIM_PWM_ConfigChannel+0x20e>
 800381e:	a201      	add	r2, pc, #4	; (adr r2, 8003824 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003820:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003824:	08003879 	.word	0x08003879
 8003828:	080039ff 	.word	0x080039ff
 800382c:	080039ff 	.word	0x080039ff
 8003830:	080039ff 	.word	0x080039ff
 8003834:	080038b9 	.word	0x080038b9
 8003838:	080039ff 	.word	0x080039ff
 800383c:	080039ff 	.word	0x080039ff
 8003840:	080039ff 	.word	0x080039ff
 8003844:	080038fb 	.word	0x080038fb
 8003848:	080039ff 	.word	0x080039ff
 800384c:	080039ff 	.word	0x080039ff
 8003850:	080039ff 	.word	0x080039ff
 8003854:	0800393b 	.word	0x0800393b
 8003858:	080039ff 	.word	0x080039ff
 800385c:	080039ff 	.word	0x080039ff
 8003860:	080039ff 	.word	0x080039ff
 8003864:	0800397d 	.word	0x0800397d
 8003868:	080039ff 	.word	0x080039ff
 800386c:	080039ff 	.word	0x080039ff
 8003870:	080039ff 	.word	0x080039ff
 8003874:	080039bd 	.word	0x080039bd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	68b9      	ldr	r1, [r7, #8]
 800387e:	4618      	mov	r0, r3
 8003880:	f000 f938 	bl	8003af4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	699a      	ldr	r2, [r3, #24]
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f042 0208 	orr.w	r2, r2, #8
 8003892:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	699a      	ldr	r2, [r3, #24]
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f022 0204 	bic.w	r2, r2, #4
 80038a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	6999      	ldr	r1, [r3, #24]
 80038aa:	68bb      	ldr	r3, [r7, #8]
 80038ac:	691a      	ldr	r2, [r3, #16]
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	430a      	orrs	r2, r1
 80038b4:	619a      	str	r2, [r3, #24]
      break;
 80038b6:	e0a5      	b.n	8003a04 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	68b9      	ldr	r1, [r7, #8]
 80038be:	4618      	mov	r0, r3
 80038c0:	f000 f994 	bl	8003bec <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	699a      	ldr	r2, [r3, #24]
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80038d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	699a      	ldr	r2, [r3, #24]
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	6999      	ldr	r1, [r3, #24]
 80038ea:	68bb      	ldr	r3, [r7, #8]
 80038ec:	691b      	ldr	r3, [r3, #16]
 80038ee:	021a      	lsls	r2, r3, #8
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	430a      	orrs	r2, r1
 80038f6:	619a      	str	r2, [r3, #24]
      break;
 80038f8:	e084      	b.n	8003a04 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	68b9      	ldr	r1, [r7, #8]
 8003900:	4618      	mov	r0, r3
 8003902:	f000 f9ed 	bl	8003ce0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	69da      	ldr	r2, [r3, #28]
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f042 0208 	orr.w	r2, r2, #8
 8003914:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	69da      	ldr	r2, [r3, #28]
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f022 0204 	bic.w	r2, r2, #4
 8003924:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	69d9      	ldr	r1, [r3, #28]
 800392c:	68bb      	ldr	r3, [r7, #8]
 800392e:	691a      	ldr	r2, [r3, #16]
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	430a      	orrs	r2, r1
 8003936:	61da      	str	r2, [r3, #28]
      break;
 8003938:	e064      	b.n	8003a04 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	68b9      	ldr	r1, [r7, #8]
 8003940:	4618      	mov	r0, r3
 8003942:	f000 fa45 	bl	8003dd0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	69da      	ldr	r2, [r3, #28]
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003954:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	69da      	ldr	r2, [r3, #28]
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003964:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	69d9      	ldr	r1, [r3, #28]
 800396c:	68bb      	ldr	r3, [r7, #8]
 800396e:	691b      	ldr	r3, [r3, #16]
 8003970:	021a      	lsls	r2, r3, #8
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	430a      	orrs	r2, r1
 8003978:	61da      	str	r2, [r3, #28]
      break;
 800397a:	e043      	b.n	8003a04 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	68b9      	ldr	r1, [r7, #8]
 8003982:	4618      	mov	r0, r3
 8003984:	f000 fa82 	bl	8003e8c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f042 0208 	orr.w	r2, r2, #8
 8003996:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f022 0204 	bic.w	r2, r2, #4
 80039a6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80039ae:	68bb      	ldr	r3, [r7, #8]
 80039b0:	691a      	ldr	r2, [r3, #16]
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	430a      	orrs	r2, r1
 80039b8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80039ba:	e023      	b.n	8003a04 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	68b9      	ldr	r1, [r7, #8]
 80039c2:	4618      	mov	r0, r3
 80039c4:	f000 faba 	bl	8003f3c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80039d6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80039e6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80039ee:	68bb      	ldr	r3, [r7, #8]
 80039f0:	691b      	ldr	r3, [r3, #16]
 80039f2:	021a      	lsls	r2, r3, #8
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	430a      	orrs	r2, r1
 80039fa:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80039fc:	e002      	b.n	8003a04 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80039fe:	2301      	movs	r3, #1
 8003a00:	75fb      	strb	r3, [r7, #23]
      break;
 8003a02:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	2200      	movs	r2, #0
 8003a08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003a0c:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a0e:	4618      	mov	r0, r3
 8003a10:	3718      	adds	r7, #24
 8003a12:	46bd      	mov	sp, r7
 8003a14:	bd80      	pop	{r7, pc}
 8003a16:	bf00      	nop

08003a18 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003a18:	b480      	push	{r7}
 8003a1a:	b085      	sub	sp, #20
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
 8003a20:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	4a2e      	ldr	r2, [pc, #184]	; (8003ae4 <TIM_Base_SetConfig+0xcc>)
 8003a2c:	4293      	cmp	r3, r2
 8003a2e:	d007      	beq.n	8003a40 <TIM_Base_SetConfig+0x28>
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a36:	d003      	beq.n	8003a40 <TIM_Base_SetConfig+0x28>
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	4a2b      	ldr	r2, [pc, #172]	; (8003ae8 <TIM_Base_SetConfig+0xd0>)
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	d108      	bne.n	8003a52 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a46:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	685b      	ldr	r3, [r3, #4]
 8003a4c:	68fa      	ldr	r2, [r7, #12]
 8003a4e:	4313      	orrs	r3, r2
 8003a50:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	4a23      	ldr	r2, [pc, #140]	; (8003ae4 <TIM_Base_SetConfig+0xcc>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d00f      	beq.n	8003a7a <TIM_Base_SetConfig+0x62>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a60:	d00b      	beq.n	8003a7a <TIM_Base_SetConfig+0x62>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	4a20      	ldr	r2, [pc, #128]	; (8003ae8 <TIM_Base_SetConfig+0xd0>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d007      	beq.n	8003a7a <TIM_Base_SetConfig+0x62>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	4a1f      	ldr	r2, [pc, #124]	; (8003aec <TIM_Base_SetConfig+0xd4>)
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d003      	beq.n	8003a7a <TIM_Base_SetConfig+0x62>
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	4a1e      	ldr	r2, [pc, #120]	; (8003af0 <TIM_Base_SetConfig+0xd8>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d108      	bne.n	8003a8c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a80:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	68db      	ldr	r3, [r3, #12]
 8003a86:	68fa      	ldr	r2, [r7, #12]
 8003a88:	4313      	orrs	r3, r2
 8003a8a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	695b      	ldr	r3, [r3, #20]
 8003a96:	4313      	orrs	r3, r2
 8003a98:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	68fa      	ldr	r2, [r7, #12]
 8003a9e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	689a      	ldr	r2, [r3, #8]
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	681a      	ldr	r2, [r3, #0]
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	4a0c      	ldr	r2, [pc, #48]	; (8003ae4 <TIM_Base_SetConfig+0xcc>)
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	d007      	beq.n	8003ac8 <TIM_Base_SetConfig+0xb0>
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	4a0c      	ldr	r2, [pc, #48]	; (8003aec <TIM_Base_SetConfig+0xd4>)
 8003abc:	4293      	cmp	r3, r2
 8003abe:	d003      	beq.n	8003ac8 <TIM_Base_SetConfig+0xb0>
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	4a0b      	ldr	r2, [pc, #44]	; (8003af0 <TIM_Base_SetConfig+0xd8>)
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d103      	bne.n	8003ad0 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	691a      	ldr	r2, [r3, #16]
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2201      	movs	r2, #1
 8003ad4:	615a      	str	r2, [r3, #20]
}
 8003ad6:	bf00      	nop
 8003ad8:	3714      	adds	r7, #20
 8003ada:	46bd      	mov	sp, r7
 8003adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae0:	4770      	bx	lr
 8003ae2:	bf00      	nop
 8003ae4:	40012c00 	.word	0x40012c00
 8003ae8:	40000400 	.word	0x40000400
 8003aec:	40014000 	.word	0x40014000
 8003af0:	40014400 	.word	0x40014400

08003af4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003af4:	b480      	push	{r7}
 8003af6:	b087      	sub	sp, #28
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
 8003afc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6a1b      	ldr	r3, [r3, #32]
 8003b02:	f023 0201 	bic.w	r2, r3, #1
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6a1b      	ldr	r3, [r3, #32]
 8003b0e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	685b      	ldr	r3, [r3, #4]
 8003b14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	699b      	ldr	r3, [r3, #24]
 8003b1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	f023 0303 	bic.w	r3, r3, #3
 8003b2e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	68fa      	ldr	r2, [r7, #12]
 8003b36:	4313      	orrs	r3, r2
 8003b38:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003b3a:	697b      	ldr	r3, [r7, #20]
 8003b3c:	f023 0302 	bic.w	r3, r3, #2
 8003b40:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	689b      	ldr	r3, [r3, #8]
 8003b46:	697a      	ldr	r2, [r7, #20]
 8003b48:	4313      	orrs	r3, r2
 8003b4a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	4a24      	ldr	r2, [pc, #144]	; (8003be0 <TIM_OC1_SetConfig+0xec>)
 8003b50:	4293      	cmp	r3, r2
 8003b52:	d007      	beq.n	8003b64 <TIM_OC1_SetConfig+0x70>
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	4a23      	ldr	r2, [pc, #140]	; (8003be4 <TIM_OC1_SetConfig+0xf0>)
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d003      	beq.n	8003b64 <TIM_OC1_SetConfig+0x70>
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	4a22      	ldr	r2, [pc, #136]	; (8003be8 <TIM_OC1_SetConfig+0xf4>)
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d10c      	bne.n	8003b7e <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003b64:	697b      	ldr	r3, [r7, #20]
 8003b66:	f023 0308 	bic.w	r3, r3, #8
 8003b6a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	68db      	ldr	r3, [r3, #12]
 8003b70:	697a      	ldr	r2, [r7, #20]
 8003b72:	4313      	orrs	r3, r2
 8003b74:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003b76:	697b      	ldr	r3, [r7, #20]
 8003b78:	f023 0304 	bic.w	r3, r3, #4
 8003b7c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	4a17      	ldr	r2, [pc, #92]	; (8003be0 <TIM_OC1_SetConfig+0xec>)
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d007      	beq.n	8003b96 <TIM_OC1_SetConfig+0xa2>
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	4a16      	ldr	r2, [pc, #88]	; (8003be4 <TIM_OC1_SetConfig+0xf0>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d003      	beq.n	8003b96 <TIM_OC1_SetConfig+0xa2>
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	4a15      	ldr	r2, [pc, #84]	; (8003be8 <TIM_OC1_SetConfig+0xf4>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d111      	bne.n	8003bba <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003b96:	693b      	ldr	r3, [r7, #16]
 8003b98:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003b9c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003b9e:	693b      	ldr	r3, [r7, #16]
 8003ba0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003ba4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	695b      	ldr	r3, [r3, #20]
 8003baa:	693a      	ldr	r2, [r7, #16]
 8003bac:	4313      	orrs	r3, r2
 8003bae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	699b      	ldr	r3, [r3, #24]
 8003bb4:	693a      	ldr	r2, [r7, #16]
 8003bb6:	4313      	orrs	r3, r2
 8003bb8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	693a      	ldr	r2, [r7, #16]
 8003bbe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	68fa      	ldr	r2, [r7, #12]
 8003bc4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	685a      	ldr	r2, [r3, #4]
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	697a      	ldr	r2, [r7, #20]
 8003bd2:	621a      	str	r2, [r3, #32]
}
 8003bd4:	bf00      	nop
 8003bd6:	371c      	adds	r7, #28
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bde:	4770      	bx	lr
 8003be0:	40012c00 	.word	0x40012c00
 8003be4:	40014000 	.word	0x40014000
 8003be8:	40014400 	.word	0x40014400

08003bec <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003bec:	b480      	push	{r7}
 8003bee:	b087      	sub	sp, #28
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
 8003bf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6a1b      	ldr	r3, [r3, #32]
 8003bfa:	f023 0210 	bic.w	r2, r3, #16
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6a1b      	ldr	r3, [r3, #32]
 8003c06:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	699b      	ldr	r3, [r3, #24]
 8003c12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003c1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c26:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	021b      	lsls	r3, r3, #8
 8003c2e:	68fa      	ldr	r2, [r7, #12]
 8003c30:	4313      	orrs	r3, r2
 8003c32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003c34:	697b      	ldr	r3, [r7, #20]
 8003c36:	f023 0320 	bic.w	r3, r3, #32
 8003c3a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	689b      	ldr	r3, [r3, #8]
 8003c40:	011b      	lsls	r3, r3, #4
 8003c42:	697a      	ldr	r2, [r7, #20]
 8003c44:	4313      	orrs	r3, r2
 8003c46:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	4a22      	ldr	r2, [pc, #136]	; (8003cd4 <TIM_OC2_SetConfig+0xe8>)
 8003c4c:	4293      	cmp	r3, r2
 8003c4e:	d10d      	bne.n	8003c6c <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003c50:	697b      	ldr	r3, [r7, #20]
 8003c52:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003c56:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	68db      	ldr	r3, [r3, #12]
 8003c5c:	011b      	lsls	r3, r3, #4
 8003c5e:	697a      	ldr	r2, [r7, #20]
 8003c60:	4313      	orrs	r3, r2
 8003c62:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003c64:	697b      	ldr	r3, [r7, #20]
 8003c66:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c6a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	4a19      	ldr	r2, [pc, #100]	; (8003cd4 <TIM_OC2_SetConfig+0xe8>)
 8003c70:	4293      	cmp	r3, r2
 8003c72:	d007      	beq.n	8003c84 <TIM_OC2_SetConfig+0x98>
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	4a18      	ldr	r2, [pc, #96]	; (8003cd8 <TIM_OC2_SetConfig+0xec>)
 8003c78:	4293      	cmp	r3, r2
 8003c7a:	d003      	beq.n	8003c84 <TIM_OC2_SetConfig+0x98>
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	4a17      	ldr	r2, [pc, #92]	; (8003cdc <TIM_OC2_SetConfig+0xf0>)
 8003c80:	4293      	cmp	r3, r2
 8003c82:	d113      	bne.n	8003cac <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003c84:	693b      	ldr	r3, [r7, #16]
 8003c86:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003c8a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003c8c:	693b      	ldr	r3, [r7, #16]
 8003c8e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003c92:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	695b      	ldr	r3, [r3, #20]
 8003c98:	009b      	lsls	r3, r3, #2
 8003c9a:	693a      	ldr	r2, [r7, #16]
 8003c9c:	4313      	orrs	r3, r2
 8003c9e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	699b      	ldr	r3, [r3, #24]
 8003ca4:	009b      	lsls	r3, r3, #2
 8003ca6:	693a      	ldr	r2, [r7, #16]
 8003ca8:	4313      	orrs	r3, r2
 8003caa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	693a      	ldr	r2, [r7, #16]
 8003cb0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	68fa      	ldr	r2, [r7, #12]
 8003cb6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	685a      	ldr	r2, [r3, #4]
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	697a      	ldr	r2, [r7, #20]
 8003cc4:	621a      	str	r2, [r3, #32]
}
 8003cc6:	bf00      	nop
 8003cc8:	371c      	adds	r7, #28
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd0:	4770      	bx	lr
 8003cd2:	bf00      	nop
 8003cd4:	40012c00 	.word	0x40012c00
 8003cd8:	40014000 	.word	0x40014000
 8003cdc:	40014400 	.word	0x40014400

08003ce0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	b087      	sub	sp, #28
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
 8003ce8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6a1b      	ldr	r3, [r3, #32]
 8003cee:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6a1b      	ldr	r3, [r3, #32]
 8003cfa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	685b      	ldr	r3, [r3, #4]
 8003d00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	69db      	ldr	r3, [r3, #28]
 8003d06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	f023 0303 	bic.w	r3, r3, #3
 8003d1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	68fa      	ldr	r2, [r7, #12]
 8003d22:	4313      	orrs	r3, r2
 8003d24:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003d26:	697b      	ldr	r3, [r7, #20]
 8003d28:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003d2c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	689b      	ldr	r3, [r3, #8]
 8003d32:	021b      	lsls	r3, r3, #8
 8003d34:	697a      	ldr	r2, [r7, #20]
 8003d36:	4313      	orrs	r3, r2
 8003d38:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	4a21      	ldr	r2, [pc, #132]	; (8003dc4 <TIM_OC3_SetConfig+0xe4>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d10d      	bne.n	8003d5e <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003d42:	697b      	ldr	r3, [r7, #20]
 8003d44:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003d48:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	68db      	ldr	r3, [r3, #12]
 8003d4e:	021b      	lsls	r3, r3, #8
 8003d50:	697a      	ldr	r2, [r7, #20]
 8003d52:	4313      	orrs	r3, r2
 8003d54:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003d56:	697b      	ldr	r3, [r7, #20]
 8003d58:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003d5c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	4a18      	ldr	r2, [pc, #96]	; (8003dc4 <TIM_OC3_SetConfig+0xe4>)
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d007      	beq.n	8003d76 <TIM_OC3_SetConfig+0x96>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	4a17      	ldr	r2, [pc, #92]	; (8003dc8 <TIM_OC3_SetConfig+0xe8>)
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d003      	beq.n	8003d76 <TIM_OC3_SetConfig+0x96>
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	4a16      	ldr	r2, [pc, #88]	; (8003dcc <TIM_OC3_SetConfig+0xec>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d113      	bne.n	8003d9e <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003d76:	693b      	ldr	r3, [r7, #16]
 8003d78:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003d7c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003d7e:	693b      	ldr	r3, [r7, #16]
 8003d80:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003d84:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	695b      	ldr	r3, [r3, #20]
 8003d8a:	011b      	lsls	r3, r3, #4
 8003d8c:	693a      	ldr	r2, [r7, #16]
 8003d8e:	4313      	orrs	r3, r2
 8003d90:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	699b      	ldr	r3, [r3, #24]
 8003d96:	011b      	lsls	r3, r3, #4
 8003d98:	693a      	ldr	r2, [r7, #16]
 8003d9a:	4313      	orrs	r3, r2
 8003d9c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	693a      	ldr	r2, [r7, #16]
 8003da2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	68fa      	ldr	r2, [r7, #12]
 8003da8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	685a      	ldr	r2, [r3, #4]
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	697a      	ldr	r2, [r7, #20]
 8003db6:	621a      	str	r2, [r3, #32]
}
 8003db8:	bf00      	nop
 8003dba:	371c      	adds	r7, #28
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc2:	4770      	bx	lr
 8003dc4:	40012c00 	.word	0x40012c00
 8003dc8:	40014000 	.word	0x40014000
 8003dcc:	40014400 	.word	0x40014400

08003dd0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003dd0:	b480      	push	{r7}
 8003dd2:	b087      	sub	sp, #28
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
 8003dd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6a1b      	ldr	r3, [r3, #32]
 8003dde:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6a1b      	ldr	r3, [r3, #32]
 8003dea:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	685b      	ldr	r3, [r3, #4]
 8003df0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	69db      	ldr	r3, [r3, #28]
 8003df6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003dfe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e0a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	021b      	lsls	r3, r3, #8
 8003e12:	68fa      	ldr	r2, [r7, #12]
 8003e14:	4313      	orrs	r3, r2
 8003e16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003e18:	693b      	ldr	r3, [r7, #16]
 8003e1a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003e1e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	689b      	ldr	r3, [r3, #8]
 8003e24:	031b      	lsls	r3, r3, #12
 8003e26:	693a      	ldr	r2, [r7, #16]
 8003e28:	4313      	orrs	r3, r2
 8003e2a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	4a14      	ldr	r2, [pc, #80]	; (8003e80 <TIM_OC4_SetConfig+0xb0>)
 8003e30:	4293      	cmp	r3, r2
 8003e32:	d007      	beq.n	8003e44 <TIM_OC4_SetConfig+0x74>
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	4a13      	ldr	r2, [pc, #76]	; (8003e84 <TIM_OC4_SetConfig+0xb4>)
 8003e38:	4293      	cmp	r3, r2
 8003e3a:	d003      	beq.n	8003e44 <TIM_OC4_SetConfig+0x74>
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	4a12      	ldr	r2, [pc, #72]	; (8003e88 <TIM_OC4_SetConfig+0xb8>)
 8003e40:	4293      	cmp	r3, r2
 8003e42:	d109      	bne.n	8003e58 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003e44:	697b      	ldr	r3, [r7, #20]
 8003e46:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003e4a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	695b      	ldr	r3, [r3, #20]
 8003e50:	019b      	lsls	r3, r3, #6
 8003e52:	697a      	ldr	r2, [r7, #20]
 8003e54:	4313      	orrs	r3, r2
 8003e56:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	697a      	ldr	r2, [r7, #20]
 8003e5c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	68fa      	ldr	r2, [r7, #12]
 8003e62:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	685a      	ldr	r2, [r3, #4]
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	693a      	ldr	r2, [r7, #16]
 8003e70:	621a      	str	r2, [r3, #32]
}
 8003e72:	bf00      	nop
 8003e74:	371c      	adds	r7, #28
 8003e76:	46bd      	mov	sp, r7
 8003e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7c:	4770      	bx	lr
 8003e7e:	bf00      	nop
 8003e80:	40012c00 	.word	0x40012c00
 8003e84:	40014000 	.word	0x40014000
 8003e88:	40014400 	.word	0x40014400

08003e8c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003e8c:	b480      	push	{r7}
 8003e8e:	b087      	sub	sp, #28
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
 8003e94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6a1b      	ldr	r3, [r3, #32]
 8003e9a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6a1b      	ldr	r3, [r3, #32]
 8003ea6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	685b      	ldr	r3, [r3, #4]
 8003eac:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003eb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003eba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ebe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	68fa      	ldr	r2, [r7, #12]
 8003ec6:	4313      	orrs	r3, r2
 8003ec8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003eca:	693b      	ldr	r3, [r7, #16]
 8003ecc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003ed0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	689b      	ldr	r3, [r3, #8]
 8003ed6:	041b      	lsls	r3, r3, #16
 8003ed8:	693a      	ldr	r2, [r7, #16]
 8003eda:	4313      	orrs	r3, r2
 8003edc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	4a13      	ldr	r2, [pc, #76]	; (8003f30 <TIM_OC5_SetConfig+0xa4>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d007      	beq.n	8003ef6 <TIM_OC5_SetConfig+0x6a>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	4a12      	ldr	r2, [pc, #72]	; (8003f34 <TIM_OC5_SetConfig+0xa8>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d003      	beq.n	8003ef6 <TIM_OC5_SetConfig+0x6a>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	4a11      	ldr	r2, [pc, #68]	; (8003f38 <TIM_OC5_SetConfig+0xac>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d109      	bne.n	8003f0a <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003ef6:	697b      	ldr	r3, [r7, #20]
 8003ef8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003efc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	695b      	ldr	r3, [r3, #20]
 8003f02:	021b      	lsls	r3, r3, #8
 8003f04:	697a      	ldr	r2, [r7, #20]
 8003f06:	4313      	orrs	r3, r2
 8003f08:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	697a      	ldr	r2, [r7, #20]
 8003f0e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	68fa      	ldr	r2, [r7, #12]
 8003f14:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003f16:	683b      	ldr	r3, [r7, #0]
 8003f18:	685a      	ldr	r2, [r3, #4]
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	693a      	ldr	r2, [r7, #16]
 8003f22:	621a      	str	r2, [r3, #32]
}
 8003f24:	bf00      	nop
 8003f26:	371c      	adds	r7, #28
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2e:	4770      	bx	lr
 8003f30:	40012c00 	.word	0x40012c00
 8003f34:	40014000 	.word	0x40014000
 8003f38:	40014400 	.word	0x40014400

08003f3c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003f3c:	b480      	push	{r7}
 8003f3e:	b087      	sub	sp, #28
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
 8003f44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6a1b      	ldr	r3, [r3, #32]
 8003f4a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6a1b      	ldr	r3, [r3, #32]
 8003f56:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	685b      	ldr	r3, [r3, #4]
 8003f5c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003f6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	021b      	lsls	r3, r3, #8
 8003f76:	68fa      	ldr	r2, [r7, #12]
 8003f78:	4313      	orrs	r3, r2
 8003f7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003f7c:	693b      	ldr	r3, [r7, #16]
 8003f7e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003f82:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	689b      	ldr	r3, [r3, #8]
 8003f88:	051b      	lsls	r3, r3, #20
 8003f8a:	693a      	ldr	r2, [r7, #16]
 8003f8c:	4313      	orrs	r3, r2
 8003f8e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	4a14      	ldr	r2, [pc, #80]	; (8003fe4 <TIM_OC6_SetConfig+0xa8>)
 8003f94:	4293      	cmp	r3, r2
 8003f96:	d007      	beq.n	8003fa8 <TIM_OC6_SetConfig+0x6c>
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	4a13      	ldr	r2, [pc, #76]	; (8003fe8 <TIM_OC6_SetConfig+0xac>)
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d003      	beq.n	8003fa8 <TIM_OC6_SetConfig+0x6c>
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	4a12      	ldr	r2, [pc, #72]	; (8003fec <TIM_OC6_SetConfig+0xb0>)
 8003fa4:	4293      	cmp	r3, r2
 8003fa6:	d109      	bne.n	8003fbc <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003fa8:	697b      	ldr	r3, [r7, #20]
 8003faa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003fae:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	695b      	ldr	r3, [r3, #20]
 8003fb4:	029b      	lsls	r3, r3, #10
 8003fb6:	697a      	ldr	r2, [r7, #20]
 8003fb8:	4313      	orrs	r3, r2
 8003fba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	697a      	ldr	r2, [r7, #20]
 8003fc0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	68fa      	ldr	r2, [r7, #12]
 8003fc6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	685a      	ldr	r2, [r3, #4]
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	693a      	ldr	r2, [r7, #16]
 8003fd4:	621a      	str	r2, [r3, #32]
}
 8003fd6:	bf00      	nop
 8003fd8:	371c      	adds	r7, #28
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe0:	4770      	bx	lr
 8003fe2:	bf00      	nop
 8003fe4:	40012c00 	.word	0x40012c00
 8003fe8:	40014000 	.word	0x40014000
 8003fec:	40014400 	.word	0x40014400

08003ff0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003ff0:	b480      	push	{r7}
 8003ff2:	b085      	sub	sp, #20
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
 8003ff8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004000:	2b01      	cmp	r3, #1
 8004002:	d101      	bne.n	8004008 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004004:	2302      	movs	r3, #2
 8004006:	e054      	b.n	80040b2 <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2201      	movs	r2, #1
 800400c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2202      	movs	r2, #2
 8004014:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	685b      	ldr	r3, [r3, #4]
 800401e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	689b      	ldr	r3, [r3, #8]
 8004026:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	4a24      	ldr	r2, [pc, #144]	; (80040c0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800402e:	4293      	cmp	r3, r2
 8004030:	d108      	bne.n	8004044 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004038:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	685b      	ldr	r3, [r3, #4]
 800403e:	68fa      	ldr	r2, [r7, #12]
 8004040:	4313      	orrs	r3, r2
 8004042:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800404a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	68fa      	ldr	r2, [r7, #12]
 8004052:	4313      	orrs	r3, r2
 8004054:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	68fa      	ldr	r2, [r7, #12]
 800405c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	4a17      	ldr	r2, [pc, #92]	; (80040c0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004064:	4293      	cmp	r3, r2
 8004066:	d00e      	beq.n	8004086 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004070:	d009      	beq.n	8004086 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	4a13      	ldr	r2, [pc, #76]	; (80040c4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004078:	4293      	cmp	r3, r2
 800407a:	d004      	beq.n	8004086 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	4a11      	ldr	r2, [pc, #68]	; (80040c8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004082:	4293      	cmp	r3, r2
 8004084:	d10c      	bne.n	80040a0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004086:	68bb      	ldr	r3, [r7, #8]
 8004088:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800408c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	689b      	ldr	r3, [r3, #8]
 8004092:	68ba      	ldr	r2, [r7, #8]
 8004094:	4313      	orrs	r3, r2
 8004096:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	68ba      	ldr	r2, [r7, #8]
 800409e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2201      	movs	r2, #1
 80040a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2200      	movs	r2, #0
 80040ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80040b0:	2300      	movs	r3, #0
}
 80040b2:	4618      	mov	r0, r3
 80040b4:	3714      	adds	r7, #20
 80040b6:	46bd      	mov	sp, r7
 80040b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040bc:	4770      	bx	lr
 80040be:	bf00      	nop
 80040c0:	40012c00 	.word	0x40012c00
 80040c4:	40000400 	.word	0x40000400
 80040c8:	40014000 	.word	0x40014000

080040cc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80040cc:	b480      	push	{r7}
 80040ce:	b085      	sub	sp, #20
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
 80040d4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80040d6:	2300      	movs	r3, #0
 80040d8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80040e0:	2b01      	cmp	r3, #1
 80040e2:	d101      	bne.n	80040e8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80040e4:	2302      	movs	r3, #2
 80040e6:	e060      	b.n	80041aa <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2201      	movs	r2, #1
 80040ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	68db      	ldr	r3, [r3, #12]
 80040fa:	4313      	orrs	r3, r2
 80040fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	689b      	ldr	r3, [r3, #8]
 8004108:	4313      	orrs	r3, r2
 800410a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	685b      	ldr	r3, [r3, #4]
 8004116:	4313      	orrs	r3, r2
 8004118:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	4313      	orrs	r3, r2
 8004126:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	691b      	ldr	r3, [r3, #16]
 8004132:	4313      	orrs	r3, r2
 8004134:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	695b      	ldr	r3, [r3, #20]
 8004140:	4313      	orrs	r3, r2
 8004142:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800414e:	4313      	orrs	r3, r2
 8004150:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	699b      	ldr	r3, [r3, #24]
 800415c:	041b      	lsls	r3, r3, #16
 800415e:	4313      	orrs	r3, r2
 8004160:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	4a14      	ldr	r2, [pc, #80]	; (80041b8 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8004168:	4293      	cmp	r3, r2
 800416a:	d115      	bne.n	8004198 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004176:	051b      	lsls	r3, r3, #20
 8004178:	4313      	orrs	r3, r2
 800417a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	69db      	ldr	r3, [r3, #28]
 8004186:	4313      	orrs	r3, r2
 8004188:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	6a1b      	ldr	r3, [r3, #32]
 8004194:	4313      	orrs	r3, r2
 8004196:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	68fa      	ldr	r2, [r7, #12]
 800419e:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2200      	movs	r2, #0
 80041a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80041a8:	2300      	movs	r3, #0
}
 80041aa:	4618      	mov	r0, r3
 80041ac:	3714      	adds	r7, #20
 80041ae:	46bd      	mov	sp, r7
 80041b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b4:	4770      	bx	lr
 80041b6:	bf00      	nop
 80041b8:	40012c00 	.word	0x40012c00

080041bc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b082      	sub	sp, #8
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d101      	bne.n	80041ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80041ca:	2301      	movs	r3, #1
 80041cc:	e040      	b.n	8004250 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d106      	bne.n	80041e4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	2200      	movs	r2, #0
 80041da:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80041de:	6878      	ldr	r0, [r7, #4]
 80041e0:	f7fc fe3a 	bl	8000e58 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2224      	movs	r2, #36	; 0x24
 80041e8:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	681a      	ldr	r2, [r3, #0]
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f022 0201 	bic.w	r2, r2, #1
 80041f8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80041fa:	6878      	ldr	r0, [r7, #4]
 80041fc:	f000 f82c 	bl	8004258 <UART_SetConfig>
 8004200:	4603      	mov	r3, r0
 8004202:	2b01      	cmp	r3, #1
 8004204:	d101      	bne.n	800420a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004206:	2301      	movs	r3, #1
 8004208:	e022      	b.n	8004250 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800420e:	2b00      	cmp	r3, #0
 8004210:	d002      	beq.n	8004218 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004212:	6878      	ldr	r0, [r7, #4]
 8004214:	f000 faa6 	bl	8004764 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	685a      	ldr	r2, [r3, #4]
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004226:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	689a      	ldr	r2, [r3, #8]
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004236:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	681a      	ldr	r2, [r3, #0]
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f042 0201 	orr.w	r2, r2, #1
 8004246:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004248:	6878      	ldr	r0, [r7, #4]
 800424a:	f000 fb2d 	bl	80048a8 <UART_CheckIdleState>
 800424e:	4603      	mov	r3, r0
}
 8004250:	4618      	mov	r0, r3
 8004252:	3708      	adds	r7, #8
 8004254:	46bd      	mov	sp, r7
 8004256:	bd80      	pop	{r7, pc}

08004258 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004258:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800425c:	b08a      	sub	sp, #40	; 0x28
 800425e:	af00      	add	r7, sp, #0
 8004260:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004262:	2300      	movs	r3, #0
 8004264:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	689a      	ldr	r2, [r3, #8]
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	691b      	ldr	r3, [r3, #16]
 8004270:	431a      	orrs	r2, r3
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	695b      	ldr	r3, [r3, #20]
 8004276:	431a      	orrs	r2, r3
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	69db      	ldr	r3, [r3, #28]
 800427c:	4313      	orrs	r3, r2
 800427e:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	681a      	ldr	r2, [r3, #0]
 8004286:	4ba5      	ldr	r3, [pc, #660]	; (800451c <UART_SetConfig+0x2c4>)
 8004288:	4013      	ands	r3, r2
 800428a:	68fa      	ldr	r2, [r7, #12]
 800428c:	6812      	ldr	r2, [r2, #0]
 800428e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004290:	430b      	orrs	r3, r1
 8004292:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	685b      	ldr	r3, [r3, #4]
 800429a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	68da      	ldr	r2, [r3, #12]
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	430a      	orrs	r2, r1
 80042a8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	699b      	ldr	r3, [r3, #24]
 80042ae:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	4a9a      	ldr	r2, [pc, #616]	; (8004520 <UART_SetConfig+0x2c8>)
 80042b6:	4293      	cmp	r3, r2
 80042b8:	d004      	beq.n	80042c4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	6a1b      	ldr	r3, [r3, #32]
 80042be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042c0:	4313      	orrs	r3, r2
 80042c2:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	689b      	ldr	r3, [r3, #8]
 80042ca:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042d4:	430a      	orrs	r2, r1
 80042d6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	4a91      	ldr	r2, [pc, #580]	; (8004524 <UART_SetConfig+0x2cc>)
 80042de:	4293      	cmp	r3, r2
 80042e0:	d126      	bne.n	8004330 <UART_SetConfig+0xd8>
 80042e2:	4b91      	ldr	r3, [pc, #580]	; (8004528 <UART_SetConfig+0x2d0>)
 80042e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042e8:	f003 0303 	and.w	r3, r3, #3
 80042ec:	2b03      	cmp	r3, #3
 80042ee:	d81b      	bhi.n	8004328 <UART_SetConfig+0xd0>
 80042f0:	a201      	add	r2, pc, #4	; (adr r2, 80042f8 <UART_SetConfig+0xa0>)
 80042f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042f6:	bf00      	nop
 80042f8:	08004309 	.word	0x08004309
 80042fc:	08004319 	.word	0x08004319
 8004300:	08004311 	.word	0x08004311
 8004304:	08004321 	.word	0x08004321
 8004308:	2301      	movs	r3, #1
 800430a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800430e:	e0d6      	b.n	80044be <UART_SetConfig+0x266>
 8004310:	2302      	movs	r3, #2
 8004312:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004316:	e0d2      	b.n	80044be <UART_SetConfig+0x266>
 8004318:	2304      	movs	r3, #4
 800431a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800431e:	e0ce      	b.n	80044be <UART_SetConfig+0x266>
 8004320:	2308      	movs	r3, #8
 8004322:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004326:	e0ca      	b.n	80044be <UART_SetConfig+0x266>
 8004328:	2310      	movs	r3, #16
 800432a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800432e:	e0c6      	b.n	80044be <UART_SetConfig+0x266>
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	4a7d      	ldr	r2, [pc, #500]	; (800452c <UART_SetConfig+0x2d4>)
 8004336:	4293      	cmp	r3, r2
 8004338:	d138      	bne.n	80043ac <UART_SetConfig+0x154>
 800433a:	4b7b      	ldr	r3, [pc, #492]	; (8004528 <UART_SetConfig+0x2d0>)
 800433c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004340:	f003 030c 	and.w	r3, r3, #12
 8004344:	2b0c      	cmp	r3, #12
 8004346:	d82d      	bhi.n	80043a4 <UART_SetConfig+0x14c>
 8004348:	a201      	add	r2, pc, #4	; (adr r2, 8004350 <UART_SetConfig+0xf8>)
 800434a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800434e:	bf00      	nop
 8004350:	08004385 	.word	0x08004385
 8004354:	080043a5 	.word	0x080043a5
 8004358:	080043a5 	.word	0x080043a5
 800435c:	080043a5 	.word	0x080043a5
 8004360:	08004395 	.word	0x08004395
 8004364:	080043a5 	.word	0x080043a5
 8004368:	080043a5 	.word	0x080043a5
 800436c:	080043a5 	.word	0x080043a5
 8004370:	0800438d 	.word	0x0800438d
 8004374:	080043a5 	.word	0x080043a5
 8004378:	080043a5 	.word	0x080043a5
 800437c:	080043a5 	.word	0x080043a5
 8004380:	0800439d 	.word	0x0800439d
 8004384:	2300      	movs	r3, #0
 8004386:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800438a:	e098      	b.n	80044be <UART_SetConfig+0x266>
 800438c:	2302      	movs	r3, #2
 800438e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004392:	e094      	b.n	80044be <UART_SetConfig+0x266>
 8004394:	2304      	movs	r3, #4
 8004396:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800439a:	e090      	b.n	80044be <UART_SetConfig+0x266>
 800439c:	2308      	movs	r3, #8
 800439e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043a2:	e08c      	b.n	80044be <UART_SetConfig+0x266>
 80043a4:	2310      	movs	r3, #16
 80043a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043aa:	e088      	b.n	80044be <UART_SetConfig+0x266>
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	4a5f      	ldr	r2, [pc, #380]	; (8004530 <UART_SetConfig+0x2d8>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d125      	bne.n	8004402 <UART_SetConfig+0x1aa>
 80043b6:	4b5c      	ldr	r3, [pc, #368]	; (8004528 <UART_SetConfig+0x2d0>)
 80043b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043bc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80043c0:	2b30      	cmp	r3, #48	; 0x30
 80043c2:	d016      	beq.n	80043f2 <UART_SetConfig+0x19a>
 80043c4:	2b30      	cmp	r3, #48	; 0x30
 80043c6:	d818      	bhi.n	80043fa <UART_SetConfig+0x1a2>
 80043c8:	2b20      	cmp	r3, #32
 80043ca:	d00a      	beq.n	80043e2 <UART_SetConfig+0x18a>
 80043cc:	2b20      	cmp	r3, #32
 80043ce:	d814      	bhi.n	80043fa <UART_SetConfig+0x1a2>
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d002      	beq.n	80043da <UART_SetConfig+0x182>
 80043d4:	2b10      	cmp	r3, #16
 80043d6:	d008      	beq.n	80043ea <UART_SetConfig+0x192>
 80043d8:	e00f      	b.n	80043fa <UART_SetConfig+0x1a2>
 80043da:	2300      	movs	r3, #0
 80043dc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043e0:	e06d      	b.n	80044be <UART_SetConfig+0x266>
 80043e2:	2302      	movs	r3, #2
 80043e4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043e8:	e069      	b.n	80044be <UART_SetConfig+0x266>
 80043ea:	2304      	movs	r3, #4
 80043ec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043f0:	e065      	b.n	80044be <UART_SetConfig+0x266>
 80043f2:	2308      	movs	r3, #8
 80043f4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043f8:	e061      	b.n	80044be <UART_SetConfig+0x266>
 80043fa:	2310      	movs	r3, #16
 80043fc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004400:	e05d      	b.n	80044be <UART_SetConfig+0x266>
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	4a4b      	ldr	r2, [pc, #300]	; (8004534 <UART_SetConfig+0x2dc>)
 8004408:	4293      	cmp	r3, r2
 800440a:	d125      	bne.n	8004458 <UART_SetConfig+0x200>
 800440c:	4b46      	ldr	r3, [pc, #280]	; (8004528 <UART_SetConfig+0x2d0>)
 800440e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004412:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004416:	2bc0      	cmp	r3, #192	; 0xc0
 8004418:	d016      	beq.n	8004448 <UART_SetConfig+0x1f0>
 800441a:	2bc0      	cmp	r3, #192	; 0xc0
 800441c:	d818      	bhi.n	8004450 <UART_SetConfig+0x1f8>
 800441e:	2b80      	cmp	r3, #128	; 0x80
 8004420:	d00a      	beq.n	8004438 <UART_SetConfig+0x1e0>
 8004422:	2b80      	cmp	r3, #128	; 0x80
 8004424:	d814      	bhi.n	8004450 <UART_SetConfig+0x1f8>
 8004426:	2b00      	cmp	r3, #0
 8004428:	d002      	beq.n	8004430 <UART_SetConfig+0x1d8>
 800442a:	2b40      	cmp	r3, #64	; 0x40
 800442c:	d008      	beq.n	8004440 <UART_SetConfig+0x1e8>
 800442e:	e00f      	b.n	8004450 <UART_SetConfig+0x1f8>
 8004430:	2300      	movs	r3, #0
 8004432:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004436:	e042      	b.n	80044be <UART_SetConfig+0x266>
 8004438:	2302      	movs	r3, #2
 800443a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800443e:	e03e      	b.n	80044be <UART_SetConfig+0x266>
 8004440:	2304      	movs	r3, #4
 8004442:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004446:	e03a      	b.n	80044be <UART_SetConfig+0x266>
 8004448:	2308      	movs	r3, #8
 800444a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800444e:	e036      	b.n	80044be <UART_SetConfig+0x266>
 8004450:	2310      	movs	r3, #16
 8004452:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004456:	e032      	b.n	80044be <UART_SetConfig+0x266>
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	4a30      	ldr	r2, [pc, #192]	; (8004520 <UART_SetConfig+0x2c8>)
 800445e:	4293      	cmp	r3, r2
 8004460:	d12a      	bne.n	80044b8 <UART_SetConfig+0x260>
 8004462:	4b31      	ldr	r3, [pc, #196]	; (8004528 <UART_SetConfig+0x2d0>)
 8004464:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004468:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800446c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004470:	d01a      	beq.n	80044a8 <UART_SetConfig+0x250>
 8004472:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004476:	d81b      	bhi.n	80044b0 <UART_SetConfig+0x258>
 8004478:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800447c:	d00c      	beq.n	8004498 <UART_SetConfig+0x240>
 800447e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004482:	d815      	bhi.n	80044b0 <UART_SetConfig+0x258>
 8004484:	2b00      	cmp	r3, #0
 8004486:	d003      	beq.n	8004490 <UART_SetConfig+0x238>
 8004488:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800448c:	d008      	beq.n	80044a0 <UART_SetConfig+0x248>
 800448e:	e00f      	b.n	80044b0 <UART_SetConfig+0x258>
 8004490:	2300      	movs	r3, #0
 8004492:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004496:	e012      	b.n	80044be <UART_SetConfig+0x266>
 8004498:	2302      	movs	r3, #2
 800449a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800449e:	e00e      	b.n	80044be <UART_SetConfig+0x266>
 80044a0:	2304      	movs	r3, #4
 80044a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80044a6:	e00a      	b.n	80044be <UART_SetConfig+0x266>
 80044a8:	2308      	movs	r3, #8
 80044aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80044ae:	e006      	b.n	80044be <UART_SetConfig+0x266>
 80044b0:	2310      	movs	r3, #16
 80044b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80044b6:	e002      	b.n	80044be <UART_SetConfig+0x266>
 80044b8:	2310      	movs	r3, #16
 80044ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	4a17      	ldr	r2, [pc, #92]	; (8004520 <UART_SetConfig+0x2c8>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	f040 808b 	bne.w	80045e0 <UART_SetConfig+0x388>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80044ca:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80044ce:	2b08      	cmp	r3, #8
 80044d0:	d834      	bhi.n	800453c <UART_SetConfig+0x2e4>
 80044d2:	a201      	add	r2, pc, #4	; (adr r2, 80044d8 <UART_SetConfig+0x280>)
 80044d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044d8:	080044fd 	.word	0x080044fd
 80044dc:	0800453d 	.word	0x0800453d
 80044e0:	08004505 	.word	0x08004505
 80044e4:	0800453d 	.word	0x0800453d
 80044e8:	0800450b 	.word	0x0800450b
 80044ec:	0800453d 	.word	0x0800453d
 80044f0:	0800453d 	.word	0x0800453d
 80044f4:	0800453d 	.word	0x0800453d
 80044f8:	08004513 	.word	0x08004513
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80044fc:	f7fe fd36 	bl	8002f6c <HAL_RCC_GetPCLK1Freq>
 8004500:	61f8      	str	r0, [r7, #28]
        break;
 8004502:	e021      	b.n	8004548 <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004504:	4b0c      	ldr	r3, [pc, #48]	; (8004538 <UART_SetConfig+0x2e0>)
 8004506:	61fb      	str	r3, [r7, #28]
        break;
 8004508:	e01e      	b.n	8004548 <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800450a:	f7fe fc97 	bl	8002e3c <HAL_RCC_GetSysClockFreq>
 800450e:	61f8      	str	r0, [r7, #28]
        break;
 8004510:	e01a      	b.n	8004548 <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004512:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004516:	61fb      	str	r3, [r7, #28]
        break;
 8004518:	e016      	b.n	8004548 <UART_SetConfig+0x2f0>
 800451a:	bf00      	nop
 800451c:	efff69f3 	.word	0xefff69f3
 8004520:	40008000 	.word	0x40008000
 8004524:	40013800 	.word	0x40013800
 8004528:	40021000 	.word	0x40021000
 800452c:	40004400 	.word	0x40004400
 8004530:	40004800 	.word	0x40004800
 8004534:	40004c00 	.word	0x40004c00
 8004538:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800453c:	2300      	movs	r3, #0
 800453e:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004540:	2301      	movs	r3, #1
 8004542:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004546:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004548:	69fb      	ldr	r3, [r7, #28]
 800454a:	2b00      	cmp	r3, #0
 800454c:	f000 80fa 	beq.w	8004744 <UART_SetConfig+0x4ec>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	685a      	ldr	r2, [r3, #4]
 8004554:	4613      	mov	r3, r2
 8004556:	005b      	lsls	r3, r3, #1
 8004558:	4413      	add	r3, r2
 800455a:	69fa      	ldr	r2, [r7, #28]
 800455c:	429a      	cmp	r2, r3
 800455e:	d305      	bcc.n	800456c <UART_SetConfig+0x314>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	685b      	ldr	r3, [r3, #4]
 8004564:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004566:	69fa      	ldr	r2, [r7, #28]
 8004568:	429a      	cmp	r2, r3
 800456a:	d903      	bls.n	8004574 <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 800456c:	2301      	movs	r3, #1
 800456e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004572:	e0e7      	b.n	8004744 <UART_SetConfig+0x4ec>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004574:	69fb      	ldr	r3, [r7, #28]
 8004576:	2200      	movs	r2, #0
 8004578:	461c      	mov	r4, r3
 800457a:	4615      	mov	r5, r2
 800457c:	f04f 0200 	mov.w	r2, #0
 8004580:	f04f 0300 	mov.w	r3, #0
 8004584:	022b      	lsls	r3, r5, #8
 8004586:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800458a:	0222      	lsls	r2, r4, #8
 800458c:	68f9      	ldr	r1, [r7, #12]
 800458e:	6849      	ldr	r1, [r1, #4]
 8004590:	0849      	lsrs	r1, r1, #1
 8004592:	2000      	movs	r0, #0
 8004594:	4688      	mov	r8, r1
 8004596:	4681      	mov	r9, r0
 8004598:	eb12 0a08 	adds.w	sl, r2, r8
 800459c:	eb43 0b09 	adc.w	fp, r3, r9
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	685b      	ldr	r3, [r3, #4]
 80045a4:	2200      	movs	r2, #0
 80045a6:	603b      	str	r3, [r7, #0]
 80045a8:	607a      	str	r2, [r7, #4]
 80045aa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80045ae:	4650      	mov	r0, sl
 80045b0:	4659      	mov	r1, fp
 80045b2:	f7fb fe0f 	bl	80001d4 <__aeabi_uldivmod>
 80045b6:	4602      	mov	r2, r0
 80045b8:	460b      	mov	r3, r1
 80045ba:	4613      	mov	r3, r2
 80045bc:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80045be:	69bb      	ldr	r3, [r7, #24]
 80045c0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80045c4:	d308      	bcc.n	80045d8 <UART_SetConfig+0x380>
 80045c6:	69bb      	ldr	r3, [r7, #24]
 80045c8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80045cc:	d204      	bcs.n	80045d8 <UART_SetConfig+0x380>
        {
          huart->Instance->BRR = usartdiv;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	69ba      	ldr	r2, [r7, #24]
 80045d4:	60da      	str	r2, [r3, #12]
 80045d6:	e0b5      	b.n	8004744 <UART_SetConfig+0x4ec>
        }
        else
        {
          ret = HAL_ERROR;
 80045d8:	2301      	movs	r3, #1
 80045da:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80045de:	e0b1      	b.n	8004744 <UART_SetConfig+0x4ec>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	69db      	ldr	r3, [r3, #28]
 80045e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80045e8:	d15d      	bne.n	80046a6 <UART_SetConfig+0x44e>
  {
    switch (clocksource)
 80045ea:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80045ee:	2b08      	cmp	r3, #8
 80045f0:	d827      	bhi.n	8004642 <UART_SetConfig+0x3ea>
 80045f2:	a201      	add	r2, pc, #4	; (adr r2, 80045f8 <UART_SetConfig+0x3a0>)
 80045f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045f8:	0800461d 	.word	0x0800461d
 80045fc:	08004625 	.word	0x08004625
 8004600:	0800462d 	.word	0x0800462d
 8004604:	08004643 	.word	0x08004643
 8004608:	08004633 	.word	0x08004633
 800460c:	08004643 	.word	0x08004643
 8004610:	08004643 	.word	0x08004643
 8004614:	08004643 	.word	0x08004643
 8004618:	0800463b 	.word	0x0800463b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800461c:	f7fe fca6 	bl	8002f6c <HAL_RCC_GetPCLK1Freq>
 8004620:	61f8      	str	r0, [r7, #28]
        break;
 8004622:	e014      	b.n	800464e <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004624:	f7fe fcb8 	bl	8002f98 <HAL_RCC_GetPCLK2Freq>
 8004628:	61f8      	str	r0, [r7, #28]
        break;
 800462a:	e010      	b.n	800464e <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800462c:	4b4c      	ldr	r3, [pc, #304]	; (8004760 <UART_SetConfig+0x508>)
 800462e:	61fb      	str	r3, [r7, #28]
        break;
 8004630:	e00d      	b.n	800464e <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004632:	f7fe fc03 	bl	8002e3c <HAL_RCC_GetSysClockFreq>
 8004636:	61f8      	str	r0, [r7, #28]
        break;
 8004638:	e009      	b.n	800464e <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800463a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800463e:	61fb      	str	r3, [r7, #28]
        break;
 8004640:	e005      	b.n	800464e <UART_SetConfig+0x3f6>
      default:
        pclk = 0U;
 8004642:	2300      	movs	r3, #0
 8004644:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004646:	2301      	movs	r3, #1
 8004648:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800464c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800464e:	69fb      	ldr	r3, [r7, #28]
 8004650:	2b00      	cmp	r3, #0
 8004652:	d077      	beq.n	8004744 <UART_SetConfig+0x4ec>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004654:	69fb      	ldr	r3, [r7, #28]
 8004656:	005a      	lsls	r2, r3, #1
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	685b      	ldr	r3, [r3, #4]
 800465c:	085b      	lsrs	r3, r3, #1
 800465e:	441a      	add	r2, r3
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	685b      	ldr	r3, [r3, #4]
 8004664:	fbb2 f3f3 	udiv	r3, r2, r3
 8004668:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800466a:	69bb      	ldr	r3, [r7, #24]
 800466c:	2b0f      	cmp	r3, #15
 800466e:	d916      	bls.n	800469e <UART_SetConfig+0x446>
 8004670:	69bb      	ldr	r3, [r7, #24]
 8004672:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004676:	d212      	bcs.n	800469e <UART_SetConfig+0x446>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004678:	69bb      	ldr	r3, [r7, #24]
 800467a:	b29b      	uxth	r3, r3
 800467c:	f023 030f 	bic.w	r3, r3, #15
 8004680:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004682:	69bb      	ldr	r3, [r7, #24]
 8004684:	085b      	lsrs	r3, r3, #1
 8004686:	b29b      	uxth	r3, r3
 8004688:	f003 0307 	and.w	r3, r3, #7
 800468c:	b29a      	uxth	r2, r3
 800468e:	8afb      	ldrh	r3, [r7, #22]
 8004690:	4313      	orrs	r3, r2
 8004692:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	8afa      	ldrh	r2, [r7, #22]
 800469a:	60da      	str	r2, [r3, #12]
 800469c:	e052      	b.n	8004744 <UART_SetConfig+0x4ec>
      }
      else
      {
        ret = HAL_ERROR;
 800469e:	2301      	movs	r3, #1
 80046a0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80046a4:	e04e      	b.n	8004744 <UART_SetConfig+0x4ec>
      }
    }
  }
  else
  {
    switch (clocksource)
 80046a6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80046aa:	2b08      	cmp	r3, #8
 80046ac:	d827      	bhi.n	80046fe <UART_SetConfig+0x4a6>
 80046ae:	a201      	add	r2, pc, #4	; (adr r2, 80046b4 <UART_SetConfig+0x45c>)
 80046b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046b4:	080046d9 	.word	0x080046d9
 80046b8:	080046e1 	.word	0x080046e1
 80046bc:	080046e9 	.word	0x080046e9
 80046c0:	080046ff 	.word	0x080046ff
 80046c4:	080046ef 	.word	0x080046ef
 80046c8:	080046ff 	.word	0x080046ff
 80046cc:	080046ff 	.word	0x080046ff
 80046d0:	080046ff 	.word	0x080046ff
 80046d4:	080046f7 	.word	0x080046f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80046d8:	f7fe fc48 	bl	8002f6c <HAL_RCC_GetPCLK1Freq>
 80046dc:	61f8      	str	r0, [r7, #28]
        break;
 80046de:	e014      	b.n	800470a <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80046e0:	f7fe fc5a 	bl	8002f98 <HAL_RCC_GetPCLK2Freq>
 80046e4:	61f8      	str	r0, [r7, #28]
        break;
 80046e6:	e010      	b.n	800470a <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80046e8:	4b1d      	ldr	r3, [pc, #116]	; (8004760 <UART_SetConfig+0x508>)
 80046ea:	61fb      	str	r3, [r7, #28]
        break;
 80046ec:	e00d      	b.n	800470a <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80046ee:	f7fe fba5 	bl	8002e3c <HAL_RCC_GetSysClockFreq>
 80046f2:	61f8      	str	r0, [r7, #28]
        break;
 80046f4:	e009      	b.n	800470a <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80046f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80046fa:	61fb      	str	r3, [r7, #28]
        break;
 80046fc:	e005      	b.n	800470a <UART_SetConfig+0x4b2>
      default:
        pclk = 0U;
 80046fe:	2300      	movs	r3, #0
 8004700:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004702:	2301      	movs	r3, #1
 8004704:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004708:	bf00      	nop
    }

    if (pclk != 0U)
 800470a:	69fb      	ldr	r3, [r7, #28]
 800470c:	2b00      	cmp	r3, #0
 800470e:	d019      	beq.n	8004744 <UART_SetConfig+0x4ec>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	685b      	ldr	r3, [r3, #4]
 8004714:	085a      	lsrs	r2, r3, #1
 8004716:	69fb      	ldr	r3, [r7, #28]
 8004718:	441a      	add	r2, r3
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	685b      	ldr	r3, [r3, #4]
 800471e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004722:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004724:	69bb      	ldr	r3, [r7, #24]
 8004726:	2b0f      	cmp	r3, #15
 8004728:	d909      	bls.n	800473e <UART_SetConfig+0x4e6>
 800472a:	69bb      	ldr	r3, [r7, #24]
 800472c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004730:	d205      	bcs.n	800473e <UART_SetConfig+0x4e6>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004732:	69bb      	ldr	r3, [r7, #24]
 8004734:	b29a      	uxth	r2, r3
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	60da      	str	r2, [r3, #12]
 800473c:	e002      	b.n	8004744 <UART_SetConfig+0x4ec>
      }
      else
      {
        ret = HAL_ERROR;
 800473e:	2301      	movs	r3, #1
 8004740:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	2200      	movs	r2, #0
 8004748:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	2200      	movs	r2, #0
 800474e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004750:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8004754:	4618      	mov	r0, r3
 8004756:	3728      	adds	r7, #40	; 0x28
 8004758:	46bd      	mov	sp, r7
 800475a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800475e:	bf00      	nop
 8004760:	00f42400 	.word	0x00f42400

08004764 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004764:	b480      	push	{r7}
 8004766:	b083      	sub	sp, #12
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004770:	f003 0301 	and.w	r3, r3, #1
 8004774:	2b00      	cmp	r3, #0
 8004776:	d00a      	beq.n	800478e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	685b      	ldr	r3, [r3, #4]
 800477e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	430a      	orrs	r2, r1
 800478c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004792:	f003 0302 	and.w	r3, r3, #2
 8004796:	2b00      	cmp	r3, #0
 8004798:	d00a      	beq.n	80047b0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	685b      	ldr	r3, [r3, #4]
 80047a0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	430a      	orrs	r2, r1
 80047ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047b4:	f003 0304 	and.w	r3, r3, #4
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d00a      	beq.n	80047d2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	685b      	ldr	r3, [r3, #4]
 80047c2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	430a      	orrs	r2, r1
 80047d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047d6:	f003 0308 	and.w	r3, r3, #8
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d00a      	beq.n	80047f4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	685b      	ldr	r3, [r3, #4]
 80047e4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	430a      	orrs	r2, r1
 80047f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047f8:	f003 0310 	and.w	r3, r3, #16
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d00a      	beq.n	8004816 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	689b      	ldr	r3, [r3, #8]
 8004806:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	430a      	orrs	r2, r1
 8004814:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800481a:	f003 0320 	and.w	r3, r3, #32
 800481e:	2b00      	cmp	r3, #0
 8004820:	d00a      	beq.n	8004838 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	689b      	ldr	r3, [r3, #8]
 8004828:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	430a      	orrs	r2, r1
 8004836:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800483c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004840:	2b00      	cmp	r3, #0
 8004842:	d01a      	beq.n	800487a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	685b      	ldr	r3, [r3, #4]
 800484a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	430a      	orrs	r2, r1
 8004858:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800485e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004862:	d10a      	bne.n	800487a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	685b      	ldr	r3, [r3, #4]
 800486a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	430a      	orrs	r2, r1
 8004878:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800487e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004882:	2b00      	cmp	r3, #0
 8004884:	d00a      	beq.n	800489c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	685b      	ldr	r3, [r3, #4]
 800488c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	430a      	orrs	r2, r1
 800489a:	605a      	str	r2, [r3, #4]
  }
}
 800489c:	bf00      	nop
 800489e:	370c      	adds	r7, #12
 80048a0:	46bd      	mov	sp, r7
 80048a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a6:	4770      	bx	lr

080048a8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b086      	sub	sp, #24
 80048ac:	af02      	add	r7, sp, #8
 80048ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2200      	movs	r2, #0
 80048b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80048b8:	f7fc fbc4 	bl	8001044 <HAL_GetTick>
 80048bc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f003 0308 	and.w	r3, r3, #8
 80048c8:	2b08      	cmp	r3, #8
 80048ca:	d10e      	bne.n	80048ea <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80048cc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80048d0:	9300      	str	r3, [sp, #0]
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	2200      	movs	r2, #0
 80048d6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80048da:	6878      	ldr	r0, [r7, #4]
 80048dc:	f000 f82d 	bl	800493a <UART_WaitOnFlagUntilTimeout>
 80048e0:	4603      	mov	r3, r0
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d001      	beq.n	80048ea <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80048e6:	2303      	movs	r3, #3
 80048e8:	e023      	b.n	8004932 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f003 0304 	and.w	r3, r3, #4
 80048f4:	2b04      	cmp	r3, #4
 80048f6:	d10e      	bne.n	8004916 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80048f8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80048fc:	9300      	str	r3, [sp, #0]
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	2200      	movs	r2, #0
 8004902:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004906:	6878      	ldr	r0, [r7, #4]
 8004908:	f000 f817 	bl	800493a <UART_WaitOnFlagUntilTimeout>
 800490c:	4603      	mov	r3, r0
 800490e:	2b00      	cmp	r3, #0
 8004910:	d001      	beq.n	8004916 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004912:	2303      	movs	r3, #3
 8004914:	e00d      	b.n	8004932 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2220      	movs	r2, #32
 800491a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2220      	movs	r2, #32
 8004920:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	2200      	movs	r2, #0
 8004926:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2200      	movs	r2, #0
 800492c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004930:	2300      	movs	r3, #0
}
 8004932:	4618      	mov	r0, r3
 8004934:	3710      	adds	r7, #16
 8004936:	46bd      	mov	sp, r7
 8004938:	bd80      	pop	{r7, pc}

0800493a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800493a:	b580      	push	{r7, lr}
 800493c:	b09c      	sub	sp, #112	; 0x70
 800493e:	af00      	add	r7, sp, #0
 8004940:	60f8      	str	r0, [r7, #12]
 8004942:	60b9      	str	r1, [r7, #8]
 8004944:	603b      	str	r3, [r7, #0]
 8004946:	4613      	mov	r3, r2
 8004948:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800494a:	e0a5      	b.n	8004a98 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800494c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800494e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004952:	f000 80a1 	beq.w	8004a98 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004956:	f7fc fb75 	bl	8001044 <HAL_GetTick>
 800495a:	4602      	mov	r2, r0
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	1ad3      	subs	r3, r2, r3
 8004960:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004962:	429a      	cmp	r2, r3
 8004964:	d302      	bcc.n	800496c <UART_WaitOnFlagUntilTimeout+0x32>
 8004966:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004968:	2b00      	cmp	r3, #0
 800496a:	d13e      	bne.n	80049ea <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004972:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004974:	e853 3f00 	ldrex	r3, [r3]
 8004978:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800497a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800497c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004980:	667b      	str	r3, [r7, #100]	; 0x64
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	461a      	mov	r2, r3
 8004988:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800498a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800498c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800498e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004990:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004992:	e841 2300 	strex	r3, r2, [r1]
 8004996:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004998:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800499a:	2b00      	cmp	r3, #0
 800499c:	d1e6      	bne.n	800496c <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	3308      	adds	r3, #8
 80049a4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049a8:	e853 3f00 	ldrex	r3, [r3]
 80049ac:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80049ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049b0:	f023 0301 	bic.w	r3, r3, #1
 80049b4:	663b      	str	r3, [r7, #96]	; 0x60
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	3308      	adds	r3, #8
 80049bc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80049be:	64ba      	str	r2, [r7, #72]	; 0x48
 80049c0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049c2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80049c4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80049c6:	e841 2300 	strex	r3, r2, [r1]
 80049ca:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80049cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d1e5      	bne.n	800499e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	2220      	movs	r2, #32
 80049d6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	2220      	movs	r2, #32
 80049dc:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	2200      	movs	r2, #0
 80049e2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80049e6:	2303      	movs	r3, #3
 80049e8:	e067      	b.n	8004aba <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f003 0304 	and.w	r3, r3, #4
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d04f      	beq.n	8004a98 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	69db      	ldr	r3, [r3, #28]
 80049fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a02:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a06:	d147      	bne.n	8004a98 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004a10:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a1a:	e853 3f00 	ldrex	r3, [r3]
 8004a1e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a22:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004a26:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	461a      	mov	r2, r3
 8004a2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a30:	637b      	str	r3, [r7, #52]	; 0x34
 8004a32:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a34:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004a36:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004a38:	e841 2300 	strex	r3, r2, [r1]
 8004a3c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004a3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d1e6      	bne.n	8004a12 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	3308      	adds	r3, #8
 8004a4a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a4c:	697b      	ldr	r3, [r7, #20]
 8004a4e:	e853 3f00 	ldrex	r3, [r3]
 8004a52:	613b      	str	r3, [r7, #16]
   return(result);
 8004a54:	693b      	ldr	r3, [r7, #16]
 8004a56:	f023 0301 	bic.w	r3, r3, #1
 8004a5a:	66bb      	str	r3, [r7, #104]	; 0x68
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	3308      	adds	r3, #8
 8004a62:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004a64:	623a      	str	r2, [r7, #32]
 8004a66:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a68:	69f9      	ldr	r1, [r7, #28]
 8004a6a:	6a3a      	ldr	r2, [r7, #32]
 8004a6c:	e841 2300 	strex	r3, r2, [r1]
 8004a70:	61bb      	str	r3, [r7, #24]
   return(result);
 8004a72:	69bb      	ldr	r3, [r7, #24]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d1e5      	bne.n	8004a44 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	2220      	movs	r2, #32
 8004a7c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	2220      	movs	r2, #32
 8004a82:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	2220      	movs	r2, #32
 8004a88:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	2200      	movs	r2, #0
 8004a90:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004a94:	2303      	movs	r3, #3
 8004a96:	e010      	b.n	8004aba <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	69da      	ldr	r2, [r3, #28]
 8004a9e:	68bb      	ldr	r3, [r7, #8]
 8004aa0:	4013      	ands	r3, r2
 8004aa2:	68ba      	ldr	r2, [r7, #8]
 8004aa4:	429a      	cmp	r2, r3
 8004aa6:	bf0c      	ite	eq
 8004aa8:	2301      	moveq	r3, #1
 8004aaa:	2300      	movne	r3, #0
 8004aac:	b2db      	uxtb	r3, r3
 8004aae:	461a      	mov	r2, r3
 8004ab0:	79fb      	ldrb	r3, [r7, #7]
 8004ab2:	429a      	cmp	r2, r3
 8004ab4:	f43f af4a 	beq.w	800494c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004ab8:	2300      	movs	r3, #0
}
 8004aba:	4618      	mov	r0, r3
 8004abc:	3770      	adds	r7, #112	; 0x70
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	bd80      	pop	{r7, pc}
	...

08004ac4 <__libc_init_array>:
 8004ac4:	b570      	push	{r4, r5, r6, lr}
 8004ac6:	4d0d      	ldr	r5, [pc, #52]	; (8004afc <__libc_init_array+0x38>)
 8004ac8:	4c0d      	ldr	r4, [pc, #52]	; (8004b00 <__libc_init_array+0x3c>)
 8004aca:	1b64      	subs	r4, r4, r5
 8004acc:	10a4      	asrs	r4, r4, #2
 8004ace:	2600      	movs	r6, #0
 8004ad0:	42a6      	cmp	r6, r4
 8004ad2:	d109      	bne.n	8004ae8 <__libc_init_array+0x24>
 8004ad4:	4d0b      	ldr	r5, [pc, #44]	; (8004b04 <__libc_init_array+0x40>)
 8004ad6:	4c0c      	ldr	r4, [pc, #48]	; (8004b08 <__libc_init_array+0x44>)
 8004ad8:	f000 f820 	bl	8004b1c <_init>
 8004adc:	1b64      	subs	r4, r4, r5
 8004ade:	10a4      	asrs	r4, r4, #2
 8004ae0:	2600      	movs	r6, #0
 8004ae2:	42a6      	cmp	r6, r4
 8004ae4:	d105      	bne.n	8004af2 <__libc_init_array+0x2e>
 8004ae6:	bd70      	pop	{r4, r5, r6, pc}
 8004ae8:	f855 3b04 	ldr.w	r3, [r5], #4
 8004aec:	4798      	blx	r3
 8004aee:	3601      	adds	r6, #1
 8004af0:	e7ee      	b.n	8004ad0 <__libc_init_array+0xc>
 8004af2:	f855 3b04 	ldr.w	r3, [r5], #4
 8004af6:	4798      	blx	r3
 8004af8:	3601      	adds	r6, #1
 8004afa:	e7f2      	b.n	8004ae2 <__libc_init_array+0x1e>
 8004afc:	08004ba4 	.word	0x08004ba4
 8004b00:	08004ba4 	.word	0x08004ba4
 8004b04:	08004ba4 	.word	0x08004ba4
 8004b08:	08004ba8 	.word	0x08004ba8

08004b0c <memset>:
 8004b0c:	4402      	add	r2, r0
 8004b0e:	4603      	mov	r3, r0
 8004b10:	4293      	cmp	r3, r2
 8004b12:	d100      	bne.n	8004b16 <memset+0xa>
 8004b14:	4770      	bx	lr
 8004b16:	f803 1b01 	strb.w	r1, [r3], #1
 8004b1a:	e7f9      	b.n	8004b10 <memset+0x4>

08004b1c <_init>:
 8004b1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b1e:	bf00      	nop
 8004b20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b22:	bc08      	pop	{r3}
 8004b24:	469e      	mov	lr, r3
 8004b26:	4770      	bx	lr

08004b28 <_fini>:
 8004b28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b2a:	bf00      	nop
 8004b2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b2e:	bc08      	pop	{r3}
 8004b30:	469e      	mov	lr, r3
 8004b32:	4770      	bx	lr
