
pwm_adc_gpio.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000060a0  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08006234  08006234  00016234  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800629c  0800629c  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  0800629c  0800629c  0001629c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080062a4  080062a4  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080062a4  080062a4  000162a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080062a8  080062a8  000162a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080062ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001ec  20000010  080062bc  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001fc  080062bc  000201fc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015faa  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002f3f  00000000  00000000  00035fea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001278  00000000  00000000  00038f30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001120  00000000  00000000  0003a1a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025b15  00000000  00000000  0003b2c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017156  00000000  00000000  00060ddd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e9b6c  00000000  00000000  00077f33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00161a9f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004c88  00000000  00000000  00161af0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000010 	.word	0x20000010
 80001b0:	00000000 	.word	0x00000000
 80001b4:	0800621c 	.word	0x0800621c

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000014 	.word	0x20000014
 80001d0:	0800621c 	.word	0x0800621c

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b974 	b.w	80004d4 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	4604      	mov	r4, r0
 800020c:	468e      	mov	lr, r1
 800020e:	2b00      	cmp	r3, #0
 8000210:	d14d      	bne.n	80002ae <__udivmoddi4+0xaa>
 8000212:	428a      	cmp	r2, r1
 8000214:	4694      	mov	ip, r2
 8000216:	d969      	bls.n	80002ec <__udivmoddi4+0xe8>
 8000218:	fab2 f282 	clz	r2, r2
 800021c:	b152      	cbz	r2, 8000234 <__udivmoddi4+0x30>
 800021e:	fa01 f302 	lsl.w	r3, r1, r2
 8000222:	f1c2 0120 	rsb	r1, r2, #32
 8000226:	fa20 f101 	lsr.w	r1, r0, r1
 800022a:	fa0c fc02 	lsl.w	ip, ip, r2
 800022e:	ea41 0e03 	orr.w	lr, r1, r3
 8000232:	4094      	lsls	r4, r2
 8000234:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000238:	0c21      	lsrs	r1, r4, #16
 800023a:	fbbe f6f8 	udiv	r6, lr, r8
 800023e:	fa1f f78c 	uxth.w	r7, ip
 8000242:	fb08 e316 	mls	r3, r8, r6, lr
 8000246:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024a:	fb06 f107 	mul.w	r1, r6, r7
 800024e:	4299      	cmp	r1, r3
 8000250:	d90a      	bls.n	8000268 <__udivmoddi4+0x64>
 8000252:	eb1c 0303 	adds.w	r3, ip, r3
 8000256:	f106 30ff 	add.w	r0, r6, #4294967295
 800025a:	f080 811f 	bcs.w	800049c <__udivmoddi4+0x298>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 811c 	bls.w	800049c <__udivmoddi4+0x298>
 8000264:	3e02      	subs	r6, #2
 8000266:	4463      	add	r3, ip
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000270:	fb08 3310 	mls	r3, r8, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 f707 	mul.w	r7, r0, r7
 800027c:	42a7      	cmp	r7, r4
 800027e:	d90a      	bls.n	8000296 <__udivmoddi4+0x92>
 8000280:	eb1c 0404 	adds.w	r4, ip, r4
 8000284:	f100 33ff 	add.w	r3, r0, #4294967295
 8000288:	f080 810a 	bcs.w	80004a0 <__udivmoddi4+0x29c>
 800028c:	42a7      	cmp	r7, r4
 800028e:	f240 8107 	bls.w	80004a0 <__udivmoddi4+0x29c>
 8000292:	4464      	add	r4, ip
 8000294:	3802      	subs	r0, #2
 8000296:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029a:	1be4      	subs	r4, r4, r7
 800029c:	2600      	movs	r6, #0
 800029e:	b11d      	cbz	r5, 80002a8 <__udivmoddi4+0xa4>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c5 4300 	strd	r4, r3, [r5]
 80002a8:	4631      	mov	r1, r6
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d909      	bls.n	80002c6 <__udivmoddi4+0xc2>
 80002b2:	2d00      	cmp	r5, #0
 80002b4:	f000 80ef 	beq.w	8000496 <__udivmoddi4+0x292>
 80002b8:	2600      	movs	r6, #0
 80002ba:	e9c5 0100 	strd	r0, r1, [r5]
 80002be:	4630      	mov	r0, r6
 80002c0:	4631      	mov	r1, r6
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	fab3 f683 	clz	r6, r3
 80002ca:	2e00      	cmp	r6, #0
 80002cc:	d14a      	bne.n	8000364 <__udivmoddi4+0x160>
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xd4>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 80f9 	bhi.w	80004ca <__udivmoddi4+0x2c6>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb61 0303 	sbc.w	r3, r1, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	469e      	mov	lr, r3
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	d0e0      	beq.n	80002a8 <__udivmoddi4+0xa4>
 80002e6:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ea:	e7dd      	b.n	80002a8 <__udivmoddi4+0xa4>
 80002ec:	b902      	cbnz	r2, 80002f0 <__udivmoddi4+0xec>
 80002ee:	deff      	udf	#255	; 0xff
 80002f0:	fab2 f282 	clz	r2, r2
 80002f4:	2a00      	cmp	r2, #0
 80002f6:	f040 8092 	bne.w	800041e <__udivmoddi4+0x21a>
 80002fa:	eba1 010c 	sub.w	r1, r1, ip
 80002fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000302:	fa1f fe8c 	uxth.w	lr, ip
 8000306:	2601      	movs	r6, #1
 8000308:	0c20      	lsrs	r0, r4, #16
 800030a:	fbb1 f3f7 	udiv	r3, r1, r7
 800030e:	fb07 1113 	mls	r1, r7, r3, r1
 8000312:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000316:	fb0e f003 	mul.w	r0, lr, r3
 800031a:	4288      	cmp	r0, r1
 800031c:	d908      	bls.n	8000330 <__udivmoddi4+0x12c>
 800031e:	eb1c 0101 	adds.w	r1, ip, r1
 8000322:	f103 38ff 	add.w	r8, r3, #4294967295
 8000326:	d202      	bcs.n	800032e <__udivmoddi4+0x12a>
 8000328:	4288      	cmp	r0, r1
 800032a:	f200 80cb 	bhi.w	80004c4 <__udivmoddi4+0x2c0>
 800032e:	4643      	mov	r3, r8
 8000330:	1a09      	subs	r1, r1, r0
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb1 f0f7 	udiv	r0, r1, r7
 8000338:	fb07 1110 	mls	r1, r7, r0, r1
 800033c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000340:	fb0e fe00 	mul.w	lr, lr, r0
 8000344:	45a6      	cmp	lr, r4
 8000346:	d908      	bls.n	800035a <__udivmoddi4+0x156>
 8000348:	eb1c 0404 	adds.w	r4, ip, r4
 800034c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000350:	d202      	bcs.n	8000358 <__udivmoddi4+0x154>
 8000352:	45a6      	cmp	lr, r4
 8000354:	f200 80bb 	bhi.w	80004ce <__udivmoddi4+0x2ca>
 8000358:	4608      	mov	r0, r1
 800035a:	eba4 040e 	sub.w	r4, r4, lr
 800035e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000362:	e79c      	b.n	800029e <__udivmoddi4+0x9a>
 8000364:	f1c6 0720 	rsb	r7, r6, #32
 8000368:	40b3      	lsls	r3, r6
 800036a:	fa22 fc07 	lsr.w	ip, r2, r7
 800036e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000372:	fa20 f407 	lsr.w	r4, r0, r7
 8000376:	fa01 f306 	lsl.w	r3, r1, r6
 800037a:	431c      	orrs	r4, r3
 800037c:	40f9      	lsrs	r1, r7
 800037e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000382:	fa00 f306 	lsl.w	r3, r0, r6
 8000386:	fbb1 f8f9 	udiv	r8, r1, r9
 800038a:	0c20      	lsrs	r0, r4, #16
 800038c:	fa1f fe8c 	uxth.w	lr, ip
 8000390:	fb09 1118 	mls	r1, r9, r8, r1
 8000394:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000398:	fb08 f00e 	mul.w	r0, r8, lr
 800039c:	4288      	cmp	r0, r1
 800039e:	fa02 f206 	lsl.w	r2, r2, r6
 80003a2:	d90b      	bls.n	80003bc <__udivmoddi4+0x1b8>
 80003a4:	eb1c 0101 	adds.w	r1, ip, r1
 80003a8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003ac:	f080 8088 	bcs.w	80004c0 <__udivmoddi4+0x2bc>
 80003b0:	4288      	cmp	r0, r1
 80003b2:	f240 8085 	bls.w	80004c0 <__udivmoddi4+0x2bc>
 80003b6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ba:	4461      	add	r1, ip
 80003bc:	1a09      	subs	r1, r1, r0
 80003be:	b2a4      	uxth	r4, r4
 80003c0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c4:	fb09 1110 	mls	r1, r9, r0, r1
 80003c8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003cc:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d0:	458e      	cmp	lr, r1
 80003d2:	d908      	bls.n	80003e6 <__udivmoddi4+0x1e2>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f100 34ff 	add.w	r4, r0, #4294967295
 80003dc:	d26c      	bcs.n	80004b8 <__udivmoddi4+0x2b4>
 80003de:	458e      	cmp	lr, r1
 80003e0:	d96a      	bls.n	80004b8 <__udivmoddi4+0x2b4>
 80003e2:	3802      	subs	r0, #2
 80003e4:	4461      	add	r1, ip
 80003e6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ea:	fba0 9402 	umull	r9, r4, r0, r2
 80003ee:	eba1 010e 	sub.w	r1, r1, lr
 80003f2:	42a1      	cmp	r1, r4
 80003f4:	46c8      	mov	r8, r9
 80003f6:	46a6      	mov	lr, r4
 80003f8:	d356      	bcc.n	80004a8 <__udivmoddi4+0x2a4>
 80003fa:	d053      	beq.n	80004a4 <__udivmoddi4+0x2a0>
 80003fc:	b15d      	cbz	r5, 8000416 <__udivmoddi4+0x212>
 80003fe:	ebb3 0208 	subs.w	r2, r3, r8
 8000402:	eb61 010e 	sbc.w	r1, r1, lr
 8000406:	fa01 f707 	lsl.w	r7, r1, r7
 800040a:	fa22 f306 	lsr.w	r3, r2, r6
 800040e:	40f1      	lsrs	r1, r6
 8000410:	431f      	orrs	r7, r3
 8000412:	e9c5 7100 	strd	r7, r1, [r5]
 8000416:	2600      	movs	r6, #0
 8000418:	4631      	mov	r1, r6
 800041a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041e:	f1c2 0320 	rsb	r3, r2, #32
 8000422:	40d8      	lsrs	r0, r3
 8000424:	fa0c fc02 	lsl.w	ip, ip, r2
 8000428:	fa21 f303 	lsr.w	r3, r1, r3
 800042c:	4091      	lsls	r1, r2
 800042e:	4301      	orrs	r1, r0
 8000430:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000434:	fa1f fe8c 	uxth.w	lr, ip
 8000438:	fbb3 f0f7 	udiv	r0, r3, r7
 800043c:	fb07 3610 	mls	r6, r7, r0, r3
 8000440:	0c0b      	lsrs	r3, r1, #16
 8000442:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000446:	fb00 f60e 	mul.w	r6, r0, lr
 800044a:	429e      	cmp	r6, r3
 800044c:	fa04 f402 	lsl.w	r4, r4, r2
 8000450:	d908      	bls.n	8000464 <__udivmoddi4+0x260>
 8000452:	eb1c 0303 	adds.w	r3, ip, r3
 8000456:	f100 38ff 	add.w	r8, r0, #4294967295
 800045a:	d22f      	bcs.n	80004bc <__udivmoddi4+0x2b8>
 800045c:	429e      	cmp	r6, r3
 800045e:	d92d      	bls.n	80004bc <__udivmoddi4+0x2b8>
 8000460:	3802      	subs	r0, #2
 8000462:	4463      	add	r3, ip
 8000464:	1b9b      	subs	r3, r3, r6
 8000466:	b289      	uxth	r1, r1
 8000468:	fbb3 f6f7 	udiv	r6, r3, r7
 800046c:	fb07 3316 	mls	r3, r7, r6, r3
 8000470:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000474:	fb06 f30e 	mul.w	r3, r6, lr
 8000478:	428b      	cmp	r3, r1
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x28a>
 800047c:	eb1c 0101 	adds.w	r1, ip, r1
 8000480:	f106 38ff 	add.w	r8, r6, #4294967295
 8000484:	d216      	bcs.n	80004b4 <__udivmoddi4+0x2b0>
 8000486:	428b      	cmp	r3, r1
 8000488:	d914      	bls.n	80004b4 <__udivmoddi4+0x2b0>
 800048a:	3e02      	subs	r6, #2
 800048c:	4461      	add	r1, ip
 800048e:	1ac9      	subs	r1, r1, r3
 8000490:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000494:	e738      	b.n	8000308 <__udivmoddi4+0x104>
 8000496:	462e      	mov	r6, r5
 8000498:	4628      	mov	r0, r5
 800049a:	e705      	b.n	80002a8 <__udivmoddi4+0xa4>
 800049c:	4606      	mov	r6, r0
 800049e:	e6e3      	b.n	8000268 <__udivmoddi4+0x64>
 80004a0:	4618      	mov	r0, r3
 80004a2:	e6f8      	b.n	8000296 <__udivmoddi4+0x92>
 80004a4:	454b      	cmp	r3, r9
 80004a6:	d2a9      	bcs.n	80003fc <__udivmoddi4+0x1f8>
 80004a8:	ebb9 0802 	subs.w	r8, r9, r2
 80004ac:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b0:	3801      	subs	r0, #1
 80004b2:	e7a3      	b.n	80003fc <__udivmoddi4+0x1f8>
 80004b4:	4646      	mov	r6, r8
 80004b6:	e7ea      	b.n	800048e <__udivmoddi4+0x28a>
 80004b8:	4620      	mov	r0, r4
 80004ba:	e794      	b.n	80003e6 <__udivmoddi4+0x1e2>
 80004bc:	4640      	mov	r0, r8
 80004be:	e7d1      	b.n	8000464 <__udivmoddi4+0x260>
 80004c0:	46d0      	mov	r8, sl
 80004c2:	e77b      	b.n	80003bc <__udivmoddi4+0x1b8>
 80004c4:	3b02      	subs	r3, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	e732      	b.n	8000330 <__udivmoddi4+0x12c>
 80004ca:	4630      	mov	r0, r6
 80004cc:	e709      	b.n	80002e2 <__udivmoddi4+0xde>
 80004ce:	4464      	add	r4, ip
 80004d0:	3802      	subs	r0, #2
 80004d2:	e742      	b.n	800035a <__udivmoddi4+0x156>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b086      	sub	sp, #24
 80004dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80004de:	463b      	mov	r3, r7
 80004e0:	2200      	movs	r2, #0
 80004e2:	601a      	str	r2, [r3, #0]
 80004e4:	605a      	str	r2, [r3, #4]
 80004e6:	609a      	str	r2, [r3, #8]
 80004e8:	60da      	str	r2, [r3, #12]
 80004ea:	611a      	str	r2, [r3, #16]
 80004ec:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80004ee:	4b29      	ldr	r3, [pc, #164]	; (8000594 <MX_ADC1_Init+0xbc>)
 80004f0:	4a29      	ldr	r2, [pc, #164]	; (8000598 <MX_ADC1_Init+0xc0>)
 80004f2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80004f4:	4b27      	ldr	r3, [pc, #156]	; (8000594 <MX_ADC1_Init+0xbc>)
 80004f6:	2200      	movs	r2, #0
 80004f8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80004fa:	4b26      	ldr	r3, [pc, #152]	; (8000594 <MX_ADC1_Init+0xbc>)
 80004fc:	2200      	movs	r2, #0
 80004fe:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000500:	4b24      	ldr	r3, [pc, #144]	; (8000594 <MX_ADC1_Init+0xbc>)
 8000502:	2200      	movs	r2, #0
 8000504:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000506:	4b23      	ldr	r3, [pc, #140]	; (8000594 <MX_ADC1_Init+0xbc>)
 8000508:	2200      	movs	r2, #0
 800050a:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800050c:	4b21      	ldr	r3, [pc, #132]	; (8000594 <MX_ADC1_Init+0xbc>)
 800050e:	2204      	movs	r2, #4
 8000510:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000512:	4b20      	ldr	r3, [pc, #128]	; (8000594 <MX_ADC1_Init+0xbc>)
 8000514:	2200      	movs	r2, #0
 8000516:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000518:	4b1e      	ldr	r3, [pc, #120]	; (8000594 <MX_ADC1_Init+0xbc>)
 800051a:	2200      	movs	r2, #0
 800051c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800051e:	4b1d      	ldr	r3, [pc, #116]	; (8000594 <MX_ADC1_Init+0xbc>)
 8000520:	2201      	movs	r2, #1
 8000522:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000524:	4b1b      	ldr	r3, [pc, #108]	; (8000594 <MX_ADC1_Init+0xbc>)
 8000526:	2200      	movs	r2, #0
 8000528:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800052c:	4b19      	ldr	r3, [pc, #100]	; (8000594 <MX_ADC1_Init+0xbc>)
 800052e:	2200      	movs	r2, #0
 8000530:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000532:	4b18      	ldr	r3, [pc, #96]	; (8000594 <MX_ADC1_Init+0xbc>)
 8000534:	2200      	movs	r2, #0
 8000536:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000538:	4b16      	ldr	r3, [pc, #88]	; (8000594 <MX_ADC1_Init+0xbc>)
 800053a:	2200      	movs	r2, #0
 800053c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000540:	4b14      	ldr	r3, [pc, #80]	; (8000594 <MX_ADC1_Init+0xbc>)
 8000542:	2200      	movs	r2, #0
 8000544:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000546:	4b13      	ldr	r3, [pc, #76]	; (8000594 <MX_ADC1_Init+0xbc>)
 8000548:	2200      	movs	r2, #0
 800054a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800054e:	4811      	ldr	r0, [pc, #68]	; (8000594 <MX_ADC1_Init+0xbc>)
 8000550:	f000 fff2 	bl	8001538 <HAL_ADC_Init>
 8000554:	4603      	mov	r3, r0
 8000556:	2b00      	cmp	r3, #0
 8000558:	d001      	beq.n	800055e <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 800055a:	f000 fb15 	bl	8000b88 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800055e:	4b0f      	ldr	r3, [pc, #60]	; (800059c <MX_ADC1_Init+0xc4>)
 8000560:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000562:	2306      	movs	r3, #6
 8000564:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000566:	2300      	movs	r3, #0
 8000568:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800056a:	237f      	movs	r3, #127	; 0x7f
 800056c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800056e:	2304      	movs	r3, #4
 8000570:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000572:	2300      	movs	r3, #0
 8000574:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000576:	463b      	mov	r3, r7
 8000578:	4619      	mov	r1, r3
 800057a:	4806      	ldr	r0, [pc, #24]	; (8000594 <MX_ADC1_Init+0xbc>)
 800057c:	f001 f928 	bl	80017d0 <HAL_ADC_ConfigChannel>
 8000580:	4603      	mov	r3, r0
 8000582:	2b00      	cmp	r3, #0
 8000584:	d001      	beq.n	800058a <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000586:	f000 faff 	bl	8000b88 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800058a:	bf00      	nop
 800058c:	3718      	adds	r7, #24
 800058e:	46bd      	mov	sp, r7
 8000590:	bd80      	pop	{r7, pc}
 8000592:	bf00      	nop
 8000594:	2000002c 	.word	0x2000002c
 8000598:	50040000 	.word	0x50040000
 800059c:	04300002 	.word	0x04300002

080005a0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b0a4      	sub	sp, #144	; 0x90
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005a8:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80005ac:	2200      	movs	r2, #0
 80005ae:	601a      	str	r2, [r3, #0]
 80005b0:	605a      	str	r2, [r3, #4]
 80005b2:	609a      	str	r2, [r3, #8]
 80005b4:	60da      	str	r2, [r3, #12]
 80005b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80005b8:	f107 0314 	add.w	r3, r7, #20
 80005bc:	2268      	movs	r2, #104	; 0x68
 80005be:	2100      	movs	r1, #0
 80005c0:	4618      	mov	r0, r3
 80005c2:	f005 fe23 	bl	800620c <memset>
  if(adcHandle->Instance==ADC1)
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	4a26      	ldr	r2, [pc, #152]	; (8000664 <HAL_ADC_MspInit+0xc4>)
 80005cc:	4293      	cmp	r3, r2
 80005ce:	d144      	bne.n	800065a <HAL_ADC_MspInit+0xba>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80005d0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80005d4:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80005d6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80005da:	673b      	str	r3, [r7, #112]	; 0x70
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 80005dc:	2302      	movs	r3, #2
 80005de:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80005e0:	2301      	movs	r3, #1
 80005e2:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 80005e4:	2308      	movs	r3, #8
 80005e6:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80005e8:	2307      	movs	r3, #7
 80005ea:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80005ec:	2302      	movs	r3, #2
 80005ee:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80005f0:	2302      	movs	r3, #2
 80005f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80005f4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80005f8:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005fa:	f107 0314 	add.w	r3, r7, #20
 80005fe:	4618      	mov	r0, r3
 8000600:	f002 fea0 	bl	8003344 <HAL_RCCEx_PeriphCLKConfig>
 8000604:	4603      	mov	r3, r0
 8000606:	2b00      	cmp	r3, #0
 8000608:	d001      	beq.n	800060e <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 800060a:	f000 fabd 	bl	8000b88 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800060e:	4b16      	ldr	r3, [pc, #88]	; (8000668 <HAL_ADC_MspInit+0xc8>)
 8000610:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000612:	4a15      	ldr	r2, [pc, #84]	; (8000668 <HAL_ADC_MspInit+0xc8>)
 8000614:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000618:	64d3      	str	r3, [r2, #76]	; 0x4c
 800061a:	4b13      	ldr	r3, [pc, #76]	; (8000668 <HAL_ADC_MspInit+0xc8>)
 800061c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800061e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000622:	613b      	str	r3, [r7, #16]
 8000624:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000626:	4b10      	ldr	r3, [pc, #64]	; (8000668 <HAL_ADC_MspInit+0xc8>)
 8000628:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800062a:	4a0f      	ldr	r2, [pc, #60]	; (8000668 <HAL_ADC_MspInit+0xc8>)
 800062c:	f043 0304 	orr.w	r3, r3, #4
 8000630:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000632:	4b0d      	ldr	r3, [pc, #52]	; (8000668 <HAL_ADC_MspInit+0xc8>)
 8000634:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000636:	f003 0304 	and.w	r3, r3, #4
 800063a:	60fb      	str	r3, [r7, #12]
 800063c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800063e:	2301      	movs	r3, #1
 8000640:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000642:	230b      	movs	r3, #11
 8000644:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000648:	2300      	movs	r3, #0
 800064a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800064e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000652:	4619      	mov	r1, r3
 8000654:	4805      	ldr	r0, [pc, #20]	; (800066c <HAL_ADC_MspInit+0xcc>)
 8000656:	f001 fe47 	bl	80022e8 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800065a:	bf00      	nop
 800065c:	3790      	adds	r7, #144	; 0x90
 800065e:	46bd      	mov	sp, r7
 8000660:	bd80      	pop	{r7, pc}
 8000662:	bf00      	nop
 8000664:	50040000 	.word	0x50040000
 8000668:	40021000 	.word	0x40021000
 800066c:	48000800 	.word	0x48000800

08000670 <decode_pc_command>:
/*- COMANDOS ---------------------------------------------------------*/
#define READ_POT 1;
#define WRITE_LED 2;

int decode_pc_command(device *dev, uint8_t command_1, uint8_t command_2)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b082      	sub	sp, #8
 8000674:	af00      	add	r7, sp, #0
 8000676:	6078      	str	r0, [r7, #4]
 8000678:	460b      	mov	r3, r1
 800067a:	70fb      	strb	r3, [r7, #3]
 800067c:	4613      	mov	r3, r2
 800067e:	70bb      	strb	r3, [r7, #2]
	if(dev->modo==SLAVE)
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	781b      	ldrb	r3, [r3, #0]
 8000684:	2b01      	cmp	r3, #1
 8000686:	d102      	bne.n	800068e <decode_pc_command+0x1e>
	{
		return -1;
 8000688:	f04f 33ff 	mov.w	r3, #4294967295
 800068c:	e00c      	b.n	80006a8 <decode_pc_command+0x38>
	}
	else
	{
		HAL_UART_Transmit_IT(&huart1, &command_1, 1);
 800068e:	1cfb      	adds	r3, r7, #3
 8000690:	2201      	movs	r2, #1
 8000692:	4619      	mov	r1, r3
 8000694:	4806      	ldr	r0, [pc, #24]	; (80006b0 <decode_pc_command+0x40>)
 8000696:	f004 fa0f 	bl	8004ab8 <HAL_UART_Transmit_IT>
		HAL_UART_Transmit_IT(&huart1, &command_2, 1);
 800069a:	1cbb      	adds	r3, r7, #2
 800069c:	2201      	movs	r2, #1
 800069e:	4619      	mov	r1, r3
 80006a0:	4803      	ldr	r0, [pc, #12]	; (80006b0 <decode_pc_command+0x40>)
 80006a2:	f004 fa09 	bl	8004ab8 <HAL_UART_Transmit_IT>
		return 0;
 80006a6:	2300      	movs	r3, #0
	}
}
 80006a8:	4618      	mov	r0, r3
 80006aa:	3708      	adds	r7, #8
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bd80      	pop	{r7, pc}
 80006b0:	200000f0 	.word	0x200000f0

080006b4 <device_if_init>:

#include <stdlib.h>
#include "device.h"

void device_if_init( device *device_gc, int set_id)
{
 80006b4:	b480      	push	{r7}
 80006b6:	b083      	sub	sp, #12
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
 80006bc:	6039      	str	r1, [r7, #0]
	if(set_id==0)
 80006be:	683b      	ldr	r3, [r7, #0]
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d103      	bne.n	80006cc <device_if_init+0x18>
	{
		device_gc->modo = MASTER;
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	2200      	movs	r2, #0
 80006c8:	701a      	strb	r2, [r3, #0]
 80006ca:	e002      	b.n	80006d2 <device_if_init+0x1e>
	}
	else
	{
		device_gc->modo = SLAVE;
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	2201      	movs	r2, #1
 80006d0:	701a      	strb	r2, [r3, #0]
	}
	device_gc->id = set_id;
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	683a      	ldr	r2, [r7, #0]
 80006d6:	605a      	str	r2, [r3, #4]
}
 80006d8:	bf00      	nop
 80006da:	370c      	adds	r7, #12
 80006dc:	46bd      	mov	sp, r7
 80006de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e2:	4770      	bx	lr

080006e4 <dip_switch_ports_init>:
#include "dip_switch.h"
#include "gpio_if.h"


void dip_switch_ports_init(dip_switch *dip, t_gpio_if *gpio_1, t_gpio_if *gpio_2, t_gpio_if *gpio_3, t_gpio_if *gpio_4)
{
 80006e4:	b480      	push	{r7}
 80006e6:	b085      	sub	sp, #20
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	60f8      	str	r0, [r7, #12]
 80006ec:	60b9      	str	r1, [r7, #8]
 80006ee:	607a      	str	r2, [r7, #4]
 80006f0:	603b      	str	r3, [r7, #0]
	dip->sw_1 = gpio_1;
 80006f2:	68fb      	ldr	r3, [r7, #12]
 80006f4:	68ba      	ldr	r2, [r7, #8]
 80006f6:	601a      	str	r2, [r3, #0]
	dip->sw_2 = gpio_2;
 80006f8:	68fb      	ldr	r3, [r7, #12]
 80006fa:	687a      	ldr	r2, [r7, #4]
 80006fc:	605a      	str	r2, [r3, #4]
	dip->sw_3 = gpio_3;
 80006fe:	68fb      	ldr	r3, [r7, #12]
 8000700:	683a      	ldr	r2, [r7, #0]
 8000702:	609a      	str	r2, [r3, #8]
	dip->sw_4 = gpio_4;
 8000704:	68fb      	ldr	r3, [r7, #12]
 8000706:	69ba      	ldr	r2, [r7, #24]
 8000708:	60da      	str	r2, [r3, #12]
}
 800070a:	bf00      	nop
 800070c:	3714      	adds	r7, #20
 800070e:	46bd      	mov	sp, r7
 8000710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000714:	4770      	bx	lr
	...

08000718 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b08a      	sub	sp, #40	; 0x28
 800071c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800071e:	f107 0314 	add.w	r3, r7, #20
 8000722:	2200      	movs	r2, #0
 8000724:	601a      	str	r2, [r3, #0]
 8000726:	605a      	str	r2, [r3, #4]
 8000728:	609a      	str	r2, [r3, #8]
 800072a:	60da      	str	r2, [r3, #12]
 800072c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800072e:	4b2d      	ldr	r3, [pc, #180]	; (80007e4 <MX_GPIO_Init+0xcc>)
 8000730:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000732:	4a2c      	ldr	r2, [pc, #176]	; (80007e4 <MX_GPIO_Init+0xcc>)
 8000734:	f043 0304 	orr.w	r3, r3, #4
 8000738:	64d3      	str	r3, [r2, #76]	; 0x4c
 800073a:	4b2a      	ldr	r3, [pc, #168]	; (80007e4 <MX_GPIO_Init+0xcc>)
 800073c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800073e:	f003 0304 	and.w	r3, r3, #4
 8000742:	613b      	str	r3, [r7, #16]
 8000744:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000746:	4b27      	ldr	r3, [pc, #156]	; (80007e4 <MX_GPIO_Init+0xcc>)
 8000748:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800074a:	4a26      	ldr	r2, [pc, #152]	; (80007e4 <MX_GPIO_Init+0xcc>)
 800074c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000750:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000752:	4b24      	ldr	r3, [pc, #144]	; (80007e4 <MX_GPIO_Init+0xcc>)
 8000754:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000756:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800075a:	60fb      	str	r3, [r7, #12]
 800075c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800075e:	4b21      	ldr	r3, [pc, #132]	; (80007e4 <MX_GPIO_Init+0xcc>)
 8000760:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000762:	4a20      	ldr	r2, [pc, #128]	; (80007e4 <MX_GPIO_Init+0xcc>)
 8000764:	f043 0301 	orr.w	r3, r3, #1
 8000768:	64d3      	str	r3, [r2, #76]	; 0x4c
 800076a:	4b1e      	ldr	r3, [pc, #120]	; (80007e4 <MX_GPIO_Init+0xcc>)
 800076c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800076e:	f003 0301 	and.w	r3, r3, #1
 8000772:	60bb      	str	r3, [r7, #8]
 8000774:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000776:	4b1b      	ldr	r3, [pc, #108]	; (80007e4 <MX_GPIO_Init+0xcc>)
 8000778:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800077a:	4a1a      	ldr	r2, [pc, #104]	; (80007e4 <MX_GPIO_Init+0xcc>)
 800077c:	f043 0302 	orr.w	r3, r3, #2
 8000780:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000782:	4b18      	ldr	r3, [pc, #96]	; (80007e4 <MX_GPIO_Init+0xcc>)
 8000784:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000786:	f003 0302 	and.w	r3, r3, #2
 800078a:	607b      	str	r3, [r7, #4]
 800078c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800078e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000792:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000794:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000798:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800079a:	2300      	movs	r3, #0
 800079c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800079e:	f107 0314 	add.w	r3, r7, #20
 80007a2:	4619      	mov	r1, r3
 80007a4:	4810      	ldr	r0, [pc, #64]	; (80007e8 <MX_GPIO_Init+0xd0>)
 80007a6:	f001 fd9f 	bl	80022e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = SW4_Pin|SW3_Pin|SW2_Pin;
 80007aa:	23e0      	movs	r3, #224	; 0xe0
 80007ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007ae:	2300      	movs	r3, #0
 80007b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b2:	2300      	movs	r3, #0
 80007b4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007b6:	f107 0314 	add.w	r3, r7, #20
 80007ba:	4619      	mov	r1, r3
 80007bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007c0:	f001 fd92 	bl	80022e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SW1_Pin;
 80007c4:	2340      	movs	r3, #64	; 0x40
 80007c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007c8:	2300      	movs	r3, #0
 80007ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007cc:	2300      	movs	r3, #0
 80007ce:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SW1_GPIO_Port, &GPIO_InitStruct);
 80007d0:	f107 0314 	add.w	r3, r7, #20
 80007d4:	4619      	mov	r1, r3
 80007d6:	4805      	ldr	r0, [pc, #20]	; (80007ec <MX_GPIO_Init+0xd4>)
 80007d8:	f001 fd86 	bl	80022e8 <HAL_GPIO_Init>

}
 80007dc:	bf00      	nop
 80007de:	3728      	adds	r7, #40	; 0x28
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bd80      	pop	{r7, pc}
 80007e4:	40021000 	.word	0x40021000
 80007e8:	48000800 	.word	0x48000800
 80007ec:	48000400 	.word	0x48000400

080007f0 <gpio_if_init>:
/*- PUBLIC_API ---------------------------------------------------------------*/
/*
 * API: gpio_if_init
 */
void gpio_if_init( t_gpio_if *gpio_if, t_gpio_active active, t_gpio_pin *pin, t_gpio_state initial_state )
{
 80007f0:	b480      	push	{r7}
 80007f2:	b085      	sub	sp, #20
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	60f8      	str	r0, [r7, #12]
 80007f8:	607a      	str	r2, [r7, #4]
 80007fa:	461a      	mov	r2, r3
 80007fc:	460b      	mov	r3, r1
 80007fe:	72fb      	strb	r3, [r7, #11]
 8000800:	4613      	mov	r3, r2
 8000802:	72bb      	strb	r3, [r7, #10]
  gpio_if->active = active;
 8000804:	68fb      	ldr	r3, [r7, #12]
 8000806:	7afa      	ldrb	r2, [r7, #11]
 8000808:	701a      	strb	r2, [r3, #0]
  gpio_if->pin = pin;
 800080a:	68fb      	ldr	r3, [r7, #12]
 800080c:	687a      	ldr	r2, [r7, #4]
 800080e:	605a      	str	r2, [r3, #4]
  gpio_if->initial_state = initial_state;
 8000810:	68fb      	ldr	r3, [r7, #12]
 8000812:	7aba      	ldrb	r2, [r7, #10]
 8000814:	721a      	strb	r2, [r3, #8]
}
 8000816:	bf00      	nop
 8000818:	3714      	adds	r7, #20
 800081a:	46bd      	mov	sp, r7
 800081c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000820:	4770      	bx	lr

08000822 <gpio_if_open>:

/*
 * API: gpio_if_open
 */
t_gpio_if_status gpio_if_open(t_gpio_if *gpio_if)
{
 8000822:	b580      	push	{r7, lr}
 8000824:	b082      	sub	sp, #8
 8000826:	af00      	add	r7, sp, #0
 8000828:	6078      	str	r0, [r7, #4]
  /* Sanity check */
  if (gpio_if->pin == NULL)
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	685b      	ldr	r3, [r3, #4]
 800082e:	2b00      	cmp	r3, #0
 8000830:	d101      	bne.n	8000836 <gpio_if_open+0x14>
  {
    return GPIO_IF_OPEN_FAILURE;
 8000832:	2301      	movs	r3, #1
 8000834:	e00f      	b.n	8000856 <gpio_if_open+0x34>
  }

  /* Init variables */

  /* Start peripherals */
  if (gpio_if->initial_state == GPIO_IF_SET)
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	7a1b      	ldrb	r3, [r3, #8]
 800083a:	2b01      	cmp	r3, #1
 800083c:	d103      	bne.n	8000846 <gpio_if_open+0x24>
  {
    gpio_if_set(gpio_if);
 800083e:	6878      	ldr	r0, [r7, #4]
 8000840:	f000 f80d 	bl	800085e <gpio_if_set>
 8000844:	e006      	b.n	8000854 <gpio_if_open+0x32>
  }
  else if (gpio_if->initial_state == GPIO_IF_CLEAR)
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	7a1b      	ldrb	r3, [r3, #8]
 800084a:	2b00      	cmp	r3, #0
 800084c:	d102      	bne.n	8000854 <gpio_if_open+0x32>
  {
    gpio_if_clear(gpio_if);
 800084e:	6878      	ldr	r0, [r7, #4]
 8000850:	f000 f826 	bl	80008a0 <gpio_if_clear>
  else
  {
    /* Nothing to do */
  }

  return GPIO_IF_SUCCESS;
 8000854:	2300      	movs	r3, #0
}
 8000856:	4618      	mov	r0, r3
 8000858:	3708      	adds	r7, #8
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}

0800085e <gpio_if_set>:

/*
 * API: gpio_if_set
 */
void gpio_if_set(t_gpio_if *gpio_if)
{
 800085e:	b580      	push	{r7, lr}
 8000860:	b082      	sub	sp, #8
 8000862:	af00      	add	r7, sp, #0
 8000864:	6078      	str	r0, [r7, #4]
  if (gpio_if->active == ACTIVE_HIGH)
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	781b      	ldrb	r3, [r3, #0]
 800086a:	2b01      	cmp	r3, #1
 800086c:	d10a      	bne.n	8000884 <gpio_if_set+0x26>
  {
    HAL_GPIO_WritePin(gpio_if->pin->port, gpio_if->pin->pin, GPIO_PIN_SET);
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	685b      	ldr	r3, [r3, #4]
 8000872:	6818      	ldr	r0, [r3, #0]
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	685b      	ldr	r3, [r3, #4]
 8000878:	889b      	ldrh	r3, [r3, #4]
 800087a:	2201      	movs	r2, #1
 800087c:	4619      	mov	r1, r3
 800087e:	f001 fead 	bl	80025dc <HAL_GPIO_WritePin>
  }
  else
  {
    HAL_GPIO_WritePin(gpio_if->pin->port, gpio_if->pin->pin, GPIO_PIN_RESET);
  }
}
 8000882:	e009      	b.n	8000898 <gpio_if_set+0x3a>
    HAL_GPIO_WritePin(gpio_if->pin->port, gpio_if->pin->pin, GPIO_PIN_RESET);
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	685b      	ldr	r3, [r3, #4]
 8000888:	6818      	ldr	r0, [r3, #0]
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	685b      	ldr	r3, [r3, #4]
 800088e:	889b      	ldrh	r3, [r3, #4]
 8000890:	2200      	movs	r2, #0
 8000892:	4619      	mov	r1, r3
 8000894:	f001 fea2 	bl	80025dc <HAL_GPIO_WritePin>
}
 8000898:	bf00      	nop
 800089a:	3708      	adds	r7, #8
 800089c:	46bd      	mov	sp, r7
 800089e:	bd80      	pop	{r7, pc}

080008a0 <gpio_if_clear>:

/*
 * API: gpio_if_clear
 */
void gpio_if_clear(t_gpio_if *gpio_if)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b082      	sub	sp, #8
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
  if (gpio_if->active == ACTIVE_HIGH)
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	781b      	ldrb	r3, [r3, #0]
 80008ac:	2b01      	cmp	r3, #1
 80008ae:	d10a      	bne.n	80008c6 <gpio_if_clear+0x26>
  {
    HAL_GPIO_WritePin(gpio_if->pin->port, gpio_if->pin->pin, GPIO_PIN_RESET);
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	685b      	ldr	r3, [r3, #4]
 80008b4:	6818      	ldr	r0, [r3, #0]
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	685b      	ldr	r3, [r3, #4]
 80008ba:	889b      	ldrh	r3, [r3, #4]
 80008bc:	2200      	movs	r2, #0
 80008be:	4619      	mov	r1, r3
 80008c0:	f001 fe8c 	bl	80025dc <HAL_GPIO_WritePin>
  }
  else
  {
    HAL_GPIO_WritePin(gpio_if->pin->port, gpio_if->pin->pin, GPIO_PIN_SET);
  }
}
 80008c4:	e009      	b.n	80008da <gpio_if_clear+0x3a>
    HAL_GPIO_WritePin(gpio_if->pin->port, gpio_if->pin->pin, GPIO_PIN_SET);
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	685b      	ldr	r3, [r3, #4]
 80008ca:	6818      	ldr	r0, [r3, #0]
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	685b      	ldr	r3, [r3, #4]
 80008d0:	889b      	ldrh	r3, [r3, #4]
 80008d2:	2201      	movs	r2, #1
 80008d4:	4619      	mov	r1, r3
 80008d6:	f001 fe81 	bl	80025dc <HAL_GPIO_WritePin>
}
 80008da:	bf00      	nop
 80008dc:	3708      	adds	r7, #8
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}
	...

080008e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008e4:	b590      	push	{r4, r7, lr}
 80008e6:	b09d      	sub	sp, #116	; 0x74
 80008e8:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */

	/*pines de switches*/
	t_gpio_pin user_switch1_pin = {SW1_GPIO_Port, SW1_Pin};
 80008ea:	4a4a      	ldr	r2, [pc, #296]	; (8000a14 <main+0x130>)
 80008ec:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80008f0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80008f4:	e883 0003 	stmia.w	r3, {r0, r1}
	t_gpio_if switch_1;
	t_gpio_pin user_switch2_pin = {SW2_GPIO_Port, SW2_Pin};
 80008f8:	4a47      	ldr	r2, [pc, #284]	; (8000a18 <main+0x134>)
 80008fa:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80008fe:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000902:	e883 0003 	stmia.w	r3, {r0, r1}
	t_gpio_if switch_2;
	t_gpio_pin user_switch3_pin = {SW3_GPIO_Port, SW3_Pin};
 8000906:	4a45      	ldr	r2, [pc, #276]	; (8000a1c <main+0x138>)
 8000908:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800090c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000910:	e883 0003 	stmia.w	r3, {r0, r1}
	t_gpio_if switch_3;
	t_gpio_pin user_switch4_pin = {SW4_GPIO_Port, SW4_Pin};
 8000914:	4a42      	ldr	r2, [pc, #264]	; (8000a20 <main+0x13c>)
 8000916:	f107 0320 	add.w	r3, r7, #32
 800091a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800091e:	e883 0003 	stmia.w	r3, {r0, r1}
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000922:	f000 fbed 	bl	8001100 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000926:	f000 f889 	bl	8000a3c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800092a:	f7ff fef5 	bl	8000718 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800092e:	f000 fadb 	bl	8000ee8 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000932:	f7ff fdd1 	bl	80004d8 <MX_ADC1_Init>
  MX_TIM1_Init();
 8000936:	f000 f9a1 	bl	8000c7c <MX_TIM1_Init>
  MX_USART1_UART_Init();
 800093a:	f000 faa5 	bl	8000e88 <MX_USART1_UART_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */


  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);			// inicializacion pwm
 800093e:	2100      	movs	r1, #0
 8000940:	4838      	ldr	r0, [pc, #224]	; (8000a24 <main+0x140>)
 8000942:	f003 f915 	bl	8003b70 <HAL_TIM_PWM_Start>

  HAL_UART_Receive_IT(&huart2, &uart_pc, 1);		// inicializacion interrupciones UART2
 8000946:	2201      	movs	r2, #1
 8000948:	4937      	ldr	r1, [pc, #220]	; (8000a28 <main+0x144>)
 800094a:	4838      	ldr	r0, [pc, #224]	; (8000a2c <main+0x148>)
 800094c:	f004 f922 	bl	8004b94 <HAL_UART_Receive_IT>
  HAL_UART_Transmit_IT(&huart1, &uart_red, 1);		// inicializacion interrupciones UART1
 8000950:	2201      	movs	r2, #1
 8000952:	4937      	ldr	r1, [pc, #220]	; (8000a30 <main+0x14c>)
 8000954:	4837      	ldr	r0, [pc, #220]	; (8000a34 <main+0x150>)
 8000956:	f004 f8af 	bl	8004ab8 <HAL_UART_Transmit_IT>

  gpio_if_init(&switch_1, ACTIVE_HIGH, &user_switch1_pin, GPIO_IF_INPUT);
 800095a:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 800095e:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8000962:	2302      	movs	r3, #2
 8000964:	2101      	movs	r1, #1
 8000966:	f7ff ff43 	bl	80007f0 <gpio_if_init>
  if (gpio_if_open(&switch_1) != GPIO_IF_SUCCESS)
 800096a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800096e:	4618      	mov	r0, r3
 8000970:	f7ff ff57 	bl	8000822 <gpio_if_open>
 8000974:	4603      	mov	r3, r0
 8000976:	2b00      	cmp	r3, #0
 8000978:	d001      	beq.n	800097e <main+0x9a>
    {
      Error_Handler();
 800097a:	f000 f905 	bl	8000b88 <Error_Handler>
    }
  gpio_if_init(&switch_2, ACTIVE_HIGH, &user_switch2_pin, GPIO_IF_INPUT);
 800097e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8000982:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 8000986:	2302      	movs	r3, #2
 8000988:	2101      	movs	r1, #1
 800098a:	f7ff ff31 	bl	80007f0 <gpio_if_init>
  if (gpio_if_open(&switch_2) != GPIO_IF_SUCCESS)
 800098e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000992:	4618      	mov	r0, r3
 8000994:	f7ff ff45 	bl	8000822 <gpio_if_open>
 8000998:	4603      	mov	r3, r0
 800099a:	2b00      	cmp	r3, #0
 800099c:	d001      	beq.n	80009a2 <main+0xbe>
    {
      Error_Handler();
 800099e:	f000 f8f3 	bl	8000b88 <Error_Handler>
    }
  gpio_if_init(&switch_3, ACTIVE_HIGH, &user_switch3_pin, GPIO_IF_INPUT);
 80009a2:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80009a6:	f107 0028 	add.w	r0, r7, #40	; 0x28
 80009aa:	2302      	movs	r3, #2
 80009ac:	2101      	movs	r1, #1
 80009ae:	f7ff ff1f 	bl	80007f0 <gpio_if_init>
  if (gpio_if_open(&switch_3) != GPIO_IF_SUCCESS)
 80009b2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80009b6:	4618      	mov	r0, r3
 80009b8:	f7ff ff33 	bl	8000822 <gpio_if_open>
 80009bc:	4603      	mov	r3, r0
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d001      	beq.n	80009c6 <main+0xe2>
    {
      Error_Handler();
 80009c2:	f000 f8e1 	bl	8000b88 <Error_Handler>
    }
  gpio_if_init(&switch_4, ACTIVE_HIGH, &user_switch4_pin, GPIO_IF_INPUT);
 80009c6:	f107 0220 	add.w	r2, r7, #32
 80009ca:	f107 0014 	add.w	r0, r7, #20
 80009ce:	2302      	movs	r3, #2
 80009d0:	2101      	movs	r1, #1
 80009d2:	f7ff ff0d 	bl	80007f0 <gpio_if_init>
  if (gpio_if_open(&switch_4) != GPIO_IF_SUCCESS)
 80009d6:	f107 0314 	add.w	r3, r7, #20
 80009da:	4618      	mov	r0, r3
 80009dc:	f7ff ff21 	bl	8000822 <gpio_if_open>
 80009e0:	4603      	mov	r3, r0
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d001      	beq.n	80009ea <main+0x106>
    {
      Error_Handler();
 80009e6:	f000 f8cf 	bl	8000b88 <Error_Handler>
    }


  dip_switch_ports_init(&this_dip, &switch_1, &switch_2, &switch_3, &switch_4);
 80009ea:	f107 0428 	add.w	r4, r7, #40	; 0x28
 80009ee:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80009f2:	f107 0150 	add.w	r1, r7, #80	; 0x50
 80009f6:	1d38      	adds	r0, r7, #4
 80009f8:	f107 0314 	add.w	r3, r7, #20
 80009fc:	9300      	str	r3, [sp, #0]
 80009fe:	4623      	mov	r3, r4
 8000a00:	f7ff fe70 	bl	80006e4 <dip_switch_ports_init>
  int dip_value = 5;//get_dip_value(&this_dip);
 8000a04:	2305      	movs	r3, #5
 8000a06:	667b      	str	r3, [r7, #100]	; 0x64
  device_if_init(&this_device, dip_value);
 8000a08:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8000a0a:	480b      	ldr	r0, [pc, #44]	; (8000a38 <main+0x154>)
 8000a0c:	f7ff fe52 	bl	80006b4 <device_if_init>

  while (1)
 8000a10:	e7fe      	b.n	8000a10 <main+0x12c>
 8000a12:	bf00      	nop
 8000a14:	08006234 	.word	0x08006234
 8000a18:	0800623c 	.word	0x0800623c
 8000a1c:	08006244 	.word	0x08006244
 8000a20:	0800624c 	.word	0x0800624c
 8000a24:	200000a4 	.word	0x200000a4
 8000a28:	20000094 	.word	0x20000094
 8000a2c:	20000174 	.word	0x20000174
 8000a30:	20000095 	.word	0x20000095
 8000a34:	200000f0 	.word	0x200000f0
 8000a38:	20000098 	.word	0x20000098

08000a3c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b096      	sub	sp, #88	; 0x58
 8000a40:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a42:	f107 0314 	add.w	r3, r7, #20
 8000a46:	2244      	movs	r2, #68	; 0x44
 8000a48:	2100      	movs	r1, #0
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	f005 fbde 	bl	800620c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a50:	463b      	mov	r3, r7
 8000a52:	2200      	movs	r2, #0
 8000a54:	601a      	str	r2, [r3, #0]
 8000a56:	605a      	str	r2, [r3, #4]
 8000a58:	609a      	str	r2, [r3, #8]
 8000a5a:	60da      	str	r2, [r3, #12]
 8000a5c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000a5e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000a62:	f001 fde1 	bl	8002628 <HAL_PWREx_ControlVoltageScaling>
 8000a66:	4603      	mov	r3, r0
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d001      	beq.n	8000a70 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000a6c:	f000 f88c 	bl	8000b88 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a70:	2302      	movs	r3, #2
 8000a72:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a74:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a78:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a7a:	2340      	movs	r3, #64	; 0x40
 8000a7c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a7e:	2302      	movs	r3, #2
 8000a80:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a82:	2302      	movs	r3, #2
 8000a84:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000a86:	2301      	movs	r3, #1
 8000a88:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000a8a:	230a      	movs	r3, #10
 8000a8c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000a8e:	2307      	movs	r3, #7
 8000a90:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000a92:	2302      	movs	r3, #2
 8000a94:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000a96:	2302      	movs	r3, #2
 8000a98:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a9a:	f107 0314 	add.w	r3, r7, #20
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	f001 fe18 	bl	80026d4 <HAL_RCC_OscConfig>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d001      	beq.n	8000aae <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000aaa:	f000 f86d 	bl	8000b88 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000aae:	230f      	movs	r3, #15
 8000ab0:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ab2:	2303      	movs	r3, #3
 8000ab4:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000aba:	2300      	movs	r3, #0
 8000abc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000ac2:	463b      	mov	r3, r7
 8000ac4:	2104      	movs	r1, #4
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	f002 fa18 	bl	8002efc <HAL_RCC_ClockConfig>
 8000acc:	4603      	mov	r3, r0
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d001      	beq.n	8000ad6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000ad2:	f000 f859 	bl	8000b88 <Error_Handler>
  }
}
 8000ad6:	bf00      	nop
 8000ad8:	3758      	adds	r7, #88	; 0x58
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}
	...

08000ae0 <HAL_UART_RxCpltCallback>:
// rutina de interrupcion por UART
uint8_t dato_1;
uint8_t dato_2;

void HAL_UART_RxCpltCallback (UART_HandleTypeDef *huart)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b084      	sub	sp, #16
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
	static uint8_t cont = 1;
	device_mode = this_device.modo;
 8000ae8:	4b1a      	ldr	r3, [pc, #104]	; (8000b54 <HAL_UART_RxCpltCallback+0x74>)
 8000aea:	781a      	ldrb	r2, [r3, #0]
 8000aec:	4b1a      	ldr	r3, [pc, #104]	; (8000b58 <HAL_UART_RxCpltCallback+0x78>)
 8000aee:	701a      	strb	r2, [r3, #0]

	if(huart->Instance == USART2)
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	4a19      	ldr	r2, [pc, #100]	; (8000b5c <HAL_UART_RxCpltCallback+0x7c>)
 8000af6:	4293      	cmp	r3, r2
 8000af8:	d116      	bne.n	8000b28 <HAL_UART_RxCpltCallback+0x48>
	{
		// sdkjfsdfjk aqui convertir valor 8 bits a valor entre 0 y 1960.
		// uint16_t dc_pwm = pwm_val;
		// __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, dc_pwm);		// setea el valor del PWM

		if (cont == 1)
 8000afa:	4b19      	ldr	r3, [pc, #100]	; (8000b60 <HAL_UART_RxCpltCallback+0x80>)
 8000afc:	781b      	ldrb	r3, [r3, #0]
 8000afe:	2b01      	cmp	r3, #1
 8000b00:	d107      	bne.n	8000b12 <HAL_UART_RxCpltCallback+0x32>
		{
			dato_1 = uart_pc;
 8000b02:	4b18      	ldr	r3, [pc, #96]	; (8000b64 <HAL_UART_RxCpltCallback+0x84>)
 8000b04:	781a      	ldrb	r2, [r3, #0]
 8000b06:	4b18      	ldr	r3, [pc, #96]	; (8000b68 <HAL_UART_RxCpltCallback+0x88>)
 8000b08:	701a      	strb	r2, [r3, #0]
			cont = 2;
 8000b0a:	4b15      	ldr	r3, [pc, #84]	; (8000b60 <HAL_UART_RxCpltCallback+0x80>)
 8000b0c:	2202      	movs	r2, #2
 8000b0e:	701a      	strb	r2, [r3, #0]
 8000b10:	e00a      	b.n	8000b28 <HAL_UART_RxCpltCallback+0x48>
		}
		else if (cont == 2)
 8000b12:	4b13      	ldr	r3, [pc, #76]	; (8000b60 <HAL_UART_RxCpltCallback+0x80>)
 8000b14:	781b      	ldrb	r3, [r3, #0]
 8000b16:	2b02      	cmp	r3, #2
 8000b18:	d106      	bne.n	8000b28 <HAL_UART_RxCpltCallback+0x48>
		{
			dato_2 = uart_pc;
 8000b1a:	4b12      	ldr	r3, [pc, #72]	; (8000b64 <HAL_UART_RxCpltCallback+0x84>)
 8000b1c:	781a      	ldrb	r2, [r3, #0]
 8000b1e:	4b13      	ldr	r3, [pc, #76]	; (8000b6c <HAL_UART_RxCpltCallback+0x8c>)
 8000b20:	701a      	strb	r2, [r3, #0]
			cont = 1;
 8000b22:	4b0f      	ldr	r3, [pc, #60]	; (8000b60 <HAL_UART_RxCpltCallback+0x80>)
 8000b24:	2201      	movs	r2, #1
 8000b26:	701a      	strb	r2, [r3, #0]
		}
	}

	if ( device_mode == MASTER)
 8000b28:	4b0b      	ldr	r3, [pc, #44]	; (8000b58 <HAL_UART_RxCpltCallback+0x78>)
 8000b2a:	781b      	ldrb	r3, [r3, #0]
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d108      	bne.n	8000b42 <HAL_UART_RxCpltCallback+0x62>
	{
		int command = decode_pc_command(&this_device, dato_1, dato_2);
 8000b30:	4b0d      	ldr	r3, [pc, #52]	; (8000b68 <HAL_UART_RxCpltCallback+0x88>)
 8000b32:	781b      	ldrb	r3, [r3, #0]
 8000b34:	4a0d      	ldr	r2, [pc, #52]	; (8000b6c <HAL_UART_RxCpltCallback+0x8c>)
 8000b36:	7812      	ldrb	r2, [r2, #0]
 8000b38:	4619      	mov	r1, r3
 8000b3a:	4806      	ldr	r0, [pc, #24]	; (8000b54 <HAL_UART_RxCpltCallback+0x74>)
 8000b3c:	f7ff fd98 	bl	8000670 <decode_pc_command>
 8000b40:	60f8      	str	r0, [r7, #12]
	}

	HAL_UART_Receive_IT(&huart2, &uart_pc, 1);
 8000b42:	2201      	movs	r2, #1
 8000b44:	4907      	ldr	r1, [pc, #28]	; (8000b64 <HAL_UART_RxCpltCallback+0x84>)
 8000b46:	480a      	ldr	r0, [pc, #40]	; (8000b70 <HAL_UART_RxCpltCallback+0x90>)
 8000b48:	f004 f824 	bl	8004b94 <HAL_UART_Receive_IT>
}
 8000b4c:	bf00      	nop
 8000b4e:	3710      	adds	r7, #16
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bd80      	pop	{r7, pc}
 8000b54:	20000098 	.word	0x20000098
 8000b58:	200000a0 	.word	0x200000a0
 8000b5c:	40004400 	.word	0x40004400
 8000b60:	20000000 	.word	0x20000000
 8000b64:	20000094 	.word	0x20000094
 8000b68:	200000a1 	.word	0x200000a1
 8000b6c:	200000a2 	.word	0x200000a2
 8000b70:	20000174 	.word	0x20000174

08000b74 <HAL_UART_TxCpltCallback>:


void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8000b74:	b480      	push	{r7}
 8000b76:	b083      	sub	sp, #12
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1)
	{
		// alo sans

	}
}
 8000b7c:	bf00      	nop
 8000b7e:	370c      	adds	r7, #12
 8000b80:	46bd      	mov	sp, r7
 8000b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b86:	4770      	bx	lr

08000b88 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b8c:	b672      	cpsid	i
}
 8000b8e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b90:	e7fe      	b.n	8000b90 <Error_Handler+0x8>
	...

08000b94 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	b083      	sub	sp, #12
 8000b98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b9a:	4b0f      	ldr	r3, [pc, #60]	; (8000bd8 <HAL_MspInit+0x44>)
 8000b9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b9e:	4a0e      	ldr	r2, [pc, #56]	; (8000bd8 <HAL_MspInit+0x44>)
 8000ba0:	f043 0301 	orr.w	r3, r3, #1
 8000ba4:	6613      	str	r3, [r2, #96]	; 0x60
 8000ba6:	4b0c      	ldr	r3, [pc, #48]	; (8000bd8 <HAL_MspInit+0x44>)
 8000ba8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000baa:	f003 0301 	and.w	r3, r3, #1
 8000bae:	607b      	str	r3, [r7, #4]
 8000bb0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bb2:	4b09      	ldr	r3, [pc, #36]	; (8000bd8 <HAL_MspInit+0x44>)
 8000bb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bb6:	4a08      	ldr	r2, [pc, #32]	; (8000bd8 <HAL_MspInit+0x44>)
 8000bb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bbc:	6593      	str	r3, [r2, #88]	; 0x58
 8000bbe:	4b06      	ldr	r3, [pc, #24]	; (8000bd8 <HAL_MspInit+0x44>)
 8000bc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bc6:	603b      	str	r3, [r7, #0]
 8000bc8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bca:	bf00      	nop
 8000bcc:	370c      	adds	r7, #12
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop
 8000bd8:	40021000 	.word	0x40021000

08000bdc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000be0:	e7fe      	b.n	8000be0 <NMI_Handler+0x4>

08000be2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000be2:	b480      	push	{r7}
 8000be4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000be6:	e7fe      	b.n	8000be6 <HardFault_Handler+0x4>

08000be8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bec:	e7fe      	b.n	8000bec <MemManage_Handler+0x4>

08000bee <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bee:	b480      	push	{r7}
 8000bf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bf2:	e7fe      	b.n	8000bf2 <BusFault_Handler+0x4>

08000bf4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bf8:	e7fe      	b.n	8000bf8 <UsageFault_Handler+0x4>

08000bfa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bfa:	b480      	push	{r7}
 8000bfc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bfe:	bf00      	nop
 8000c00:	46bd      	mov	sp, r7
 8000c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c06:	4770      	bx	lr

08000c08 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c0c:	bf00      	nop
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c14:	4770      	bx	lr

08000c16 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c16:	b480      	push	{r7}
 8000c18:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c1a:	bf00      	nop
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c22:	4770      	bx	lr

08000c24 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c28:	f000 fac6 	bl	80011b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c2c:	bf00      	nop
 8000c2e:	bd80      	pop	{r7, pc}

08000c30 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000c34:	4802      	ldr	r0, [pc, #8]	; (8000c40 <USART1_IRQHandler+0x10>)
 8000c36:	f004 f803 	bl	8004c40 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000c3a:	bf00      	nop
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	200000f0 	.word	0x200000f0

08000c44 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000c48:	4802      	ldr	r0, [pc, #8]	; (8000c54 <USART2_IRQHandler+0x10>)
 8000c4a:	f003 fff9 	bl	8004c40 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000c4e:	bf00      	nop
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	20000174 	.word	0x20000174

08000c58 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000c5c:	4b06      	ldr	r3, [pc, #24]	; (8000c78 <SystemInit+0x20>)
 8000c5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c62:	4a05      	ldr	r2, [pc, #20]	; (8000c78 <SystemInit+0x20>)
 8000c64:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c68:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000c6c:	bf00      	nop
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop
 8000c78:	e000ed00 	.word	0xe000ed00

08000c7c <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b09a      	sub	sp, #104	; 0x68
 8000c80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c82:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000c86:	2200      	movs	r2, #0
 8000c88:	601a      	str	r2, [r3, #0]
 8000c8a:	605a      	str	r2, [r3, #4]
 8000c8c:	609a      	str	r2, [r3, #8]
 8000c8e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c90:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000c94:	2200      	movs	r2, #0
 8000c96:	601a      	str	r2, [r3, #0]
 8000c98:	605a      	str	r2, [r3, #4]
 8000c9a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c9c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	601a      	str	r2, [r3, #0]
 8000ca4:	605a      	str	r2, [r3, #4]
 8000ca6:	609a      	str	r2, [r3, #8]
 8000ca8:	60da      	str	r2, [r3, #12]
 8000caa:	611a      	str	r2, [r3, #16]
 8000cac:	615a      	str	r2, [r3, #20]
 8000cae:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000cb0:	1d3b      	adds	r3, r7, #4
 8000cb2:	222c      	movs	r2, #44	; 0x2c
 8000cb4:	2100      	movs	r1, #0
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	f005 faa8 	bl	800620c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000cbc:	4b44      	ldr	r3, [pc, #272]	; (8000dd0 <MX_TIM1_Init+0x154>)
 8000cbe:	4a45      	ldr	r2, [pc, #276]	; (8000dd4 <MX_TIM1_Init+0x158>)
 8000cc0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 655;
 8000cc2:	4b43      	ldr	r3, [pc, #268]	; (8000dd0 <MX_TIM1_Init+0x154>)
 8000cc4:	f240 228f 	movw	r2, #655	; 0x28f
 8000cc8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cca:	4b41      	ldr	r3, [pc, #260]	; (8000dd0 <MX_TIM1_Init+0x154>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1960;
 8000cd0:	4b3f      	ldr	r3, [pc, #252]	; (8000dd0 <MX_TIM1_Init+0x154>)
 8000cd2:	f44f 62f5 	mov.w	r2, #1960	; 0x7a8
 8000cd6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cd8:	4b3d      	ldr	r3, [pc, #244]	; (8000dd0 <MX_TIM1_Init+0x154>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000cde:	4b3c      	ldr	r3, [pc, #240]	; (8000dd0 <MX_TIM1_Init+0x154>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ce4:	4b3a      	ldr	r3, [pc, #232]	; (8000dd0 <MX_TIM1_Init+0x154>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000cea:	4839      	ldr	r0, [pc, #228]	; (8000dd0 <MX_TIM1_Init+0x154>)
 8000cec:	f002 fe88 	bl	8003a00 <HAL_TIM_Base_Init>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d001      	beq.n	8000cfa <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 8000cf6:	f7ff ff47 	bl	8000b88 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000cfa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cfe:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000d00:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000d04:	4619      	mov	r1, r3
 8000d06:	4832      	ldr	r0, [pc, #200]	; (8000dd0 <MX_TIM1_Init+0x154>)
 8000d08:	f003 f92c 	bl	8003f64 <HAL_TIM_ConfigClockSource>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d001      	beq.n	8000d16 <MX_TIM1_Init+0x9a>
  {
    Error_Handler();
 8000d12:	f7ff ff39 	bl	8000b88 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000d16:	482e      	ldr	r0, [pc, #184]	; (8000dd0 <MX_TIM1_Init+0x154>)
 8000d18:	f002 fec9 	bl	8003aae <HAL_TIM_PWM_Init>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d001      	beq.n	8000d26 <MX_TIM1_Init+0xaa>
  {
    Error_Handler();
 8000d22:	f7ff ff31 	bl	8000b88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d26:	2300      	movs	r3, #0
 8000d28:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000d32:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000d36:	4619      	mov	r1, r3
 8000d38:	4825      	ldr	r0, [pc, #148]	; (8000dd0 <MX_TIM1_Init+0x154>)
 8000d3a:	f003 fd89 	bl	8004850 <HAL_TIMEx_MasterConfigSynchronization>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d001      	beq.n	8000d48 <MX_TIM1_Init+0xcc>
  {
    Error_Handler();
 8000d44:	f7ff ff20 	bl	8000b88 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d48:	2360      	movs	r3, #96	; 0x60
 8000d4a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d50:	2300      	movs	r3, #0
 8000d52:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000d54:	2300      	movs	r3, #0
 8000d56:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000d60:	2300      	movs	r3, #0
 8000d62:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d64:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000d68:	2200      	movs	r2, #0
 8000d6a:	4619      	mov	r1, r3
 8000d6c:	4818      	ldr	r0, [pc, #96]	; (8000dd0 <MX_TIM1_Init+0x154>)
 8000d6e:	f002 ffe5 	bl	8003d3c <HAL_TIM_PWM_ConfigChannel>
 8000d72:	4603      	mov	r3, r0
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d001      	beq.n	8000d7c <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8000d78:	f7ff ff06 	bl	8000b88 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000d80:	2300      	movs	r3, #0
 8000d82:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000d84:	2300      	movs	r3, #0
 8000d86:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000d90:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d94:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000d96:	2300      	movs	r3, #0
 8000d98:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000d9e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000da2:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000da4:	2300      	movs	r3, #0
 8000da6:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000da8:	2300      	movs	r3, #0
 8000daa:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000dac:	1d3b      	adds	r3, r7, #4
 8000dae:	4619      	mov	r1, r3
 8000db0:	4807      	ldr	r0, [pc, #28]	; (8000dd0 <MX_TIM1_Init+0x154>)
 8000db2:	f003 fdbb 	bl	800492c <HAL_TIMEx_ConfigBreakDeadTime>
 8000db6:	4603      	mov	r3, r0
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d001      	beq.n	8000dc0 <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 8000dbc:	f7ff fee4 	bl	8000b88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000dc0:	4803      	ldr	r0, [pc, #12]	; (8000dd0 <MX_TIM1_Init+0x154>)
 8000dc2:	f000 f829 	bl	8000e18 <HAL_TIM_MspPostInit>

}
 8000dc6:	bf00      	nop
 8000dc8:	3768      	adds	r7, #104	; 0x68
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	200000a4 	.word	0x200000a4
 8000dd4:	40012c00 	.word	0x40012c00

08000dd8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	b085      	sub	sp, #20
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	4a0a      	ldr	r2, [pc, #40]	; (8000e10 <HAL_TIM_Base_MspInit+0x38>)
 8000de6:	4293      	cmp	r3, r2
 8000de8:	d10b      	bne.n	8000e02 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000dea:	4b0a      	ldr	r3, [pc, #40]	; (8000e14 <HAL_TIM_Base_MspInit+0x3c>)
 8000dec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000dee:	4a09      	ldr	r2, [pc, #36]	; (8000e14 <HAL_TIM_Base_MspInit+0x3c>)
 8000df0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000df4:	6613      	str	r3, [r2, #96]	; 0x60
 8000df6:	4b07      	ldr	r3, [pc, #28]	; (8000e14 <HAL_TIM_Base_MspInit+0x3c>)
 8000df8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000dfa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000dfe:	60fb      	str	r3, [r7, #12]
 8000e00:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8000e02:	bf00      	nop
 8000e04:	3714      	adds	r7, #20
 8000e06:	46bd      	mov	sp, r7
 8000e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0c:	4770      	bx	lr
 8000e0e:	bf00      	nop
 8000e10:	40012c00 	.word	0x40012c00
 8000e14:	40021000 	.word	0x40021000

08000e18 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b088      	sub	sp, #32
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e20:	f107 030c 	add.w	r3, r7, #12
 8000e24:	2200      	movs	r2, #0
 8000e26:	601a      	str	r2, [r3, #0]
 8000e28:	605a      	str	r2, [r3, #4]
 8000e2a:	609a      	str	r2, [r3, #8]
 8000e2c:	60da      	str	r2, [r3, #12]
 8000e2e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	4a12      	ldr	r2, [pc, #72]	; (8000e80 <HAL_TIM_MspPostInit+0x68>)
 8000e36:	4293      	cmp	r3, r2
 8000e38:	d11d      	bne.n	8000e76 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e3a:	4b12      	ldr	r3, [pc, #72]	; (8000e84 <HAL_TIM_MspPostInit+0x6c>)
 8000e3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e3e:	4a11      	ldr	r2, [pc, #68]	; (8000e84 <HAL_TIM_MspPostInit+0x6c>)
 8000e40:	f043 0301 	orr.w	r3, r3, #1
 8000e44:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e46:	4b0f      	ldr	r3, [pc, #60]	; (8000e84 <HAL_TIM_MspPostInit+0x6c>)
 8000e48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e4a:	f003 0301 	and.w	r3, r3, #1
 8000e4e:	60bb      	str	r3, [r7, #8]
 8000e50:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000e52:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e56:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e58:	2302      	movs	r3, #2
 8000e5a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e60:	2300      	movs	r3, #0
 8000e62:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000e64:	2301      	movs	r3, #1
 8000e66:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e68:	f107 030c 	add.w	r3, r7, #12
 8000e6c:	4619      	mov	r1, r3
 8000e6e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e72:	f001 fa39 	bl	80022e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000e76:	bf00      	nop
 8000e78:	3720      	adds	r7, #32
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	40012c00 	.word	0x40012c00
 8000e84:	40021000 	.word	0x40021000

08000e88 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000e8c:	4b14      	ldr	r3, [pc, #80]	; (8000ee0 <MX_USART1_UART_Init+0x58>)
 8000e8e:	4a15      	ldr	r2, [pc, #84]	; (8000ee4 <MX_USART1_UART_Init+0x5c>)
 8000e90:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000e92:	4b13      	ldr	r3, [pc, #76]	; (8000ee0 <MX_USART1_UART_Init+0x58>)
 8000e94:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e98:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000e9a:	4b11      	ldr	r3, [pc, #68]	; (8000ee0 <MX_USART1_UART_Init+0x58>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000ea0:	4b0f      	ldr	r3, [pc, #60]	; (8000ee0 <MX_USART1_UART_Init+0x58>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000ea6:	4b0e      	ldr	r3, [pc, #56]	; (8000ee0 <MX_USART1_UART_Init+0x58>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000eac:	4b0c      	ldr	r3, [pc, #48]	; (8000ee0 <MX_USART1_UART_Init+0x58>)
 8000eae:	220c      	movs	r2, #12
 8000eb0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000eb2:	4b0b      	ldr	r3, [pc, #44]	; (8000ee0 <MX_USART1_UART_Init+0x58>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000eb8:	4b09      	ldr	r3, [pc, #36]	; (8000ee0 <MX_USART1_UART_Init+0x58>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ebe:	4b08      	ldr	r3, [pc, #32]	; (8000ee0 <MX_USART1_UART_Init+0x58>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ec4:	4b06      	ldr	r3, [pc, #24]	; (8000ee0 <MX_USART1_UART_Init+0x58>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000eca:	4805      	ldr	r0, [pc, #20]	; (8000ee0 <MX_USART1_UART_Init+0x58>)
 8000ecc:	f003 fda6 	bl	8004a1c <HAL_UART_Init>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d001      	beq.n	8000eda <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000ed6:	f7ff fe57 	bl	8000b88 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000eda:	bf00      	nop
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	200000f0 	.word	0x200000f0
 8000ee4:	40013800 	.word	0x40013800

08000ee8 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000eec:	4b14      	ldr	r3, [pc, #80]	; (8000f40 <MX_USART2_UART_Init+0x58>)
 8000eee:	4a15      	ldr	r2, [pc, #84]	; (8000f44 <MX_USART2_UART_Init+0x5c>)
 8000ef0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000ef2:	4b13      	ldr	r3, [pc, #76]	; (8000f40 <MX_USART2_UART_Init+0x58>)
 8000ef4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ef8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000efa:	4b11      	ldr	r3, [pc, #68]	; (8000f40 <MX_USART2_UART_Init+0x58>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000f00:	4b0f      	ldr	r3, [pc, #60]	; (8000f40 <MX_USART2_UART_Init+0x58>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000f06:	4b0e      	ldr	r3, [pc, #56]	; (8000f40 <MX_USART2_UART_Init+0x58>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000f0c:	4b0c      	ldr	r3, [pc, #48]	; (8000f40 <MX_USART2_UART_Init+0x58>)
 8000f0e:	220c      	movs	r2, #12
 8000f10:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f12:	4b0b      	ldr	r3, [pc, #44]	; (8000f40 <MX_USART2_UART_Init+0x58>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f18:	4b09      	ldr	r3, [pc, #36]	; (8000f40 <MX_USART2_UART_Init+0x58>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f1e:	4b08      	ldr	r3, [pc, #32]	; (8000f40 <MX_USART2_UART_Init+0x58>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f24:	4b06      	ldr	r3, [pc, #24]	; (8000f40 <MX_USART2_UART_Init+0x58>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f2a:	4805      	ldr	r0, [pc, #20]	; (8000f40 <MX_USART2_UART_Init+0x58>)
 8000f2c:	f003 fd76 	bl	8004a1c <HAL_UART_Init>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d001      	beq.n	8000f3a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000f36:	f7ff fe27 	bl	8000b88 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000f3a:	bf00      	nop
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	20000174 	.word	0x20000174
 8000f44:	40004400 	.word	0x40004400

08000f48 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b0a6      	sub	sp, #152	; 0x98
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f50:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8000f54:	2200      	movs	r2, #0
 8000f56:	601a      	str	r2, [r3, #0]
 8000f58:	605a      	str	r2, [r3, #4]
 8000f5a:	609a      	str	r2, [r3, #8]
 8000f5c:	60da      	str	r2, [r3, #12]
 8000f5e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f60:	f107 031c 	add.w	r3, r7, #28
 8000f64:	2268      	movs	r2, #104	; 0x68
 8000f66:	2100      	movs	r1, #0
 8000f68:	4618      	mov	r0, r3
 8000f6a:	f005 f94f 	bl	800620c <memset>
  if(uartHandle->Instance==USART1)
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	4a4b      	ldr	r2, [pc, #300]	; (80010a0 <HAL_UART_MspInit+0x158>)
 8000f74:	4293      	cmp	r3, r2
 8000f76:	d145      	bne.n	8001004 <HAL_UART_MspInit+0xbc>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000f78:	2301      	movs	r3, #1
 8000f7a:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f80:	f107 031c 	add.w	r3, r7, #28
 8000f84:	4618      	mov	r0, r3
 8000f86:	f002 f9dd 	bl	8003344 <HAL_RCCEx_PeriphCLKConfig>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d001      	beq.n	8000f94 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000f90:	f7ff fdfa 	bl	8000b88 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000f94:	4b43      	ldr	r3, [pc, #268]	; (80010a4 <HAL_UART_MspInit+0x15c>)
 8000f96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f98:	4a42      	ldr	r2, [pc, #264]	; (80010a4 <HAL_UART_MspInit+0x15c>)
 8000f9a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f9e:	6613      	str	r3, [r2, #96]	; 0x60
 8000fa0:	4b40      	ldr	r3, [pc, #256]	; (80010a4 <HAL_UART_MspInit+0x15c>)
 8000fa2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fa4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fa8:	61bb      	str	r3, [r7, #24]
 8000faa:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fac:	4b3d      	ldr	r3, [pc, #244]	; (80010a4 <HAL_UART_MspInit+0x15c>)
 8000fae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fb0:	4a3c      	ldr	r2, [pc, #240]	; (80010a4 <HAL_UART_MspInit+0x15c>)
 8000fb2:	f043 0301 	orr.w	r3, r3, #1
 8000fb6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fb8:	4b3a      	ldr	r3, [pc, #232]	; (80010a4 <HAL_UART_MspInit+0x15c>)
 8000fba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fbc:	f003 0301 	and.w	r3, r3, #1
 8000fc0:	617b      	str	r3, [r7, #20]
 8000fc2:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000fc4:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000fc8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fcc:	2302      	movs	r3, #2
 8000fce:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fd8:	2303      	movs	r3, #3
 8000fda:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000fde:	2307      	movs	r3, #7
 8000fe0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fe4:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8000fe8:	4619      	mov	r1, r3
 8000fea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fee:	f001 f97b 	bl	80022e8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	2100      	movs	r1, #0
 8000ff6:	2025      	movs	r0, #37	; 0x25
 8000ff8:	f001 f8c1 	bl	800217e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000ffc:	2025      	movs	r0, #37	; 0x25
 8000ffe:	f001 f8da 	bl	80021b6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001002:	e048      	b.n	8001096 <HAL_UART_MspInit+0x14e>
  else if(uartHandle->Instance==USART2)
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	4a27      	ldr	r2, [pc, #156]	; (80010a8 <HAL_UART_MspInit+0x160>)
 800100a:	4293      	cmp	r3, r2
 800100c:	d143      	bne.n	8001096 <HAL_UART_MspInit+0x14e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800100e:	2302      	movs	r3, #2
 8001010:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001012:	2300      	movs	r3, #0
 8001014:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001016:	f107 031c 	add.w	r3, r7, #28
 800101a:	4618      	mov	r0, r3
 800101c:	f002 f992 	bl	8003344 <HAL_RCCEx_PeriphCLKConfig>
 8001020:	4603      	mov	r3, r0
 8001022:	2b00      	cmp	r3, #0
 8001024:	d001      	beq.n	800102a <HAL_UART_MspInit+0xe2>
      Error_Handler();
 8001026:	f7ff fdaf 	bl	8000b88 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 800102a:	4b1e      	ldr	r3, [pc, #120]	; (80010a4 <HAL_UART_MspInit+0x15c>)
 800102c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800102e:	4a1d      	ldr	r2, [pc, #116]	; (80010a4 <HAL_UART_MspInit+0x15c>)
 8001030:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001034:	6593      	str	r3, [r2, #88]	; 0x58
 8001036:	4b1b      	ldr	r3, [pc, #108]	; (80010a4 <HAL_UART_MspInit+0x15c>)
 8001038:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800103a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800103e:	613b      	str	r3, [r7, #16]
 8001040:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001042:	4b18      	ldr	r3, [pc, #96]	; (80010a4 <HAL_UART_MspInit+0x15c>)
 8001044:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001046:	4a17      	ldr	r2, [pc, #92]	; (80010a4 <HAL_UART_MspInit+0x15c>)
 8001048:	f043 0301 	orr.w	r3, r3, #1
 800104c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800104e:	4b15      	ldr	r3, [pc, #84]	; (80010a4 <HAL_UART_MspInit+0x15c>)
 8001050:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001052:	f003 0301 	and.w	r3, r3, #1
 8001056:	60fb      	str	r3, [r7, #12]
 8001058:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800105a:	230c      	movs	r3, #12
 800105c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001060:	2302      	movs	r3, #2
 8001062:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001066:	2300      	movs	r3, #0
 8001068:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800106c:	2303      	movs	r3, #3
 800106e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001072:	2307      	movs	r3, #7
 8001074:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001078:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800107c:	4619      	mov	r1, r3
 800107e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001082:	f001 f931 	bl	80022e8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001086:	2200      	movs	r2, #0
 8001088:	2100      	movs	r1, #0
 800108a:	2026      	movs	r0, #38	; 0x26
 800108c:	f001 f877 	bl	800217e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001090:	2026      	movs	r0, #38	; 0x26
 8001092:	f001 f890 	bl	80021b6 <HAL_NVIC_EnableIRQ>
}
 8001096:	bf00      	nop
 8001098:	3798      	adds	r7, #152	; 0x98
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	40013800 	.word	0x40013800
 80010a4:	40021000 	.word	0x40021000
 80010a8:	40004400 	.word	0x40004400

080010ac <Reset_Handler>:
 80010ac:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010e4 <LoopForever+0x2>
 80010b0:	f7ff fdd2 	bl	8000c58 <SystemInit>
 80010b4:	480c      	ldr	r0, [pc, #48]	; (80010e8 <LoopForever+0x6>)
 80010b6:	490d      	ldr	r1, [pc, #52]	; (80010ec <LoopForever+0xa>)
 80010b8:	4a0d      	ldr	r2, [pc, #52]	; (80010f0 <LoopForever+0xe>)
 80010ba:	2300      	movs	r3, #0
 80010bc:	e002      	b.n	80010c4 <LoopCopyDataInit>

080010be <CopyDataInit>:
 80010be:	58d4      	ldr	r4, [r2, r3]
 80010c0:	50c4      	str	r4, [r0, r3]
 80010c2:	3304      	adds	r3, #4

080010c4 <LoopCopyDataInit>:
 80010c4:	18c4      	adds	r4, r0, r3
 80010c6:	428c      	cmp	r4, r1
 80010c8:	d3f9      	bcc.n	80010be <CopyDataInit>
 80010ca:	4a0a      	ldr	r2, [pc, #40]	; (80010f4 <LoopForever+0x12>)
 80010cc:	4c0a      	ldr	r4, [pc, #40]	; (80010f8 <LoopForever+0x16>)
 80010ce:	2300      	movs	r3, #0
 80010d0:	e001      	b.n	80010d6 <LoopFillZerobss>

080010d2 <FillZerobss>:
 80010d2:	6013      	str	r3, [r2, #0]
 80010d4:	3204      	adds	r2, #4

080010d6 <LoopFillZerobss>:
 80010d6:	42a2      	cmp	r2, r4
 80010d8:	d3fb      	bcc.n	80010d2 <FillZerobss>
 80010da:	f005 f873 	bl	80061c4 <__libc_init_array>
 80010de:	f7ff fc01 	bl	80008e4 <main>

080010e2 <LoopForever>:
 80010e2:	e7fe      	b.n	80010e2 <LoopForever>
 80010e4:	20028000 	.word	0x20028000
 80010e8:	20000000 	.word	0x20000000
 80010ec:	20000010 	.word	0x20000010
 80010f0:	080062ac 	.word	0x080062ac
 80010f4:	20000010 	.word	0x20000010
 80010f8:	200001fc 	.word	0x200001fc

080010fc <ADC1_IRQHandler>:
 80010fc:	e7fe      	b.n	80010fc <ADC1_IRQHandler>
	...

08001100 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b082      	sub	sp, #8
 8001104:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001106:	2300      	movs	r3, #0
 8001108:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800110a:	4b0c      	ldr	r3, [pc, #48]	; (800113c <HAL_Init+0x3c>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	4a0b      	ldr	r2, [pc, #44]	; (800113c <HAL_Init+0x3c>)
 8001110:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001114:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001116:	2003      	movs	r0, #3
 8001118:	f001 f826 	bl	8002168 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800111c:	2000      	movs	r0, #0
 800111e:	f000 f80f 	bl	8001140 <HAL_InitTick>
 8001122:	4603      	mov	r3, r0
 8001124:	2b00      	cmp	r3, #0
 8001126:	d002      	beq.n	800112e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001128:	2301      	movs	r3, #1
 800112a:	71fb      	strb	r3, [r7, #7]
 800112c:	e001      	b.n	8001132 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800112e:	f7ff fd31 	bl	8000b94 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001132:	79fb      	ldrb	r3, [r7, #7]
}
 8001134:	4618      	mov	r0, r3
 8001136:	3708      	adds	r7, #8
 8001138:	46bd      	mov	sp, r7
 800113a:	bd80      	pop	{r7, pc}
 800113c:	40022000 	.word	0x40022000

08001140 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b084      	sub	sp, #16
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001148:	2300      	movs	r3, #0
 800114a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800114c:	4b17      	ldr	r3, [pc, #92]	; (80011ac <HAL_InitTick+0x6c>)
 800114e:	781b      	ldrb	r3, [r3, #0]
 8001150:	2b00      	cmp	r3, #0
 8001152:	d023      	beq.n	800119c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001154:	4b16      	ldr	r3, [pc, #88]	; (80011b0 <HAL_InitTick+0x70>)
 8001156:	681a      	ldr	r2, [r3, #0]
 8001158:	4b14      	ldr	r3, [pc, #80]	; (80011ac <HAL_InitTick+0x6c>)
 800115a:	781b      	ldrb	r3, [r3, #0]
 800115c:	4619      	mov	r1, r3
 800115e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001162:	fbb3 f3f1 	udiv	r3, r3, r1
 8001166:	fbb2 f3f3 	udiv	r3, r2, r3
 800116a:	4618      	mov	r0, r3
 800116c:	f001 f831 	bl	80021d2 <HAL_SYSTICK_Config>
 8001170:	4603      	mov	r3, r0
 8001172:	2b00      	cmp	r3, #0
 8001174:	d10f      	bne.n	8001196 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	2b0f      	cmp	r3, #15
 800117a:	d809      	bhi.n	8001190 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800117c:	2200      	movs	r2, #0
 800117e:	6879      	ldr	r1, [r7, #4]
 8001180:	f04f 30ff 	mov.w	r0, #4294967295
 8001184:	f000 fffb 	bl	800217e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001188:	4a0a      	ldr	r2, [pc, #40]	; (80011b4 <HAL_InitTick+0x74>)
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	6013      	str	r3, [r2, #0]
 800118e:	e007      	b.n	80011a0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001190:	2301      	movs	r3, #1
 8001192:	73fb      	strb	r3, [r7, #15]
 8001194:	e004      	b.n	80011a0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001196:	2301      	movs	r3, #1
 8001198:	73fb      	strb	r3, [r7, #15]
 800119a:	e001      	b.n	80011a0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800119c:	2301      	movs	r3, #1
 800119e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80011a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80011a2:	4618      	mov	r0, r3
 80011a4:	3710      	adds	r7, #16
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	2000000c 	.word	0x2000000c
 80011b0:	20000004 	.word	0x20000004
 80011b4:	20000008 	.word	0x20000008

080011b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011b8:	b480      	push	{r7}
 80011ba:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80011bc:	4b06      	ldr	r3, [pc, #24]	; (80011d8 <HAL_IncTick+0x20>)
 80011be:	781b      	ldrb	r3, [r3, #0]
 80011c0:	461a      	mov	r2, r3
 80011c2:	4b06      	ldr	r3, [pc, #24]	; (80011dc <HAL_IncTick+0x24>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	4413      	add	r3, r2
 80011c8:	4a04      	ldr	r2, [pc, #16]	; (80011dc <HAL_IncTick+0x24>)
 80011ca:	6013      	str	r3, [r2, #0]
}
 80011cc:	bf00      	nop
 80011ce:	46bd      	mov	sp, r7
 80011d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d4:	4770      	bx	lr
 80011d6:	bf00      	nop
 80011d8:	2000000c 	.word	0x2000000c
 80011dc:	200001f8 	.word	0x200001f8

080011e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011e0:	b480      	push	{r7}
 80011e2:	af00      	add	r7, sp, #0
  return uwTick;
 80011e4:	4b03      	ldr	r3, [pc, #12]	; (80011f4 <HAL_GetTick+0x14>)
 80011e6:	681b      	ldr	r3, [r3, #0]
}
 80011e8:	4618      	mov	r0, r3
 80011ea:	46bd      	mov	sp, r7
 80011ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f0:	4770      	bx	lr
 80011f2:	bf00      	nop
 80011f4:	200001f8 	.word	0x200001f8

080011f8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80011f8:	b480      	push	{r7}
 80011fa:	b083      	sub	sp, #12
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
 8001200:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	689b      	ldr	r3, [r3, #8]
 8001206:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	431a      	orrs	r2, r3
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	609a      	str	r2, [r3, #8]
}
 8001212:	bf00      	nop
 8001214:	370c      	adds	r7, #12
 8001216:	46bd      	mov	sp, r7
 8001218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121c:	4770      	bx	lr

0800121e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800121e:	b480      	push	{r7}
 8001220:	b083      	sub	sp, #12
 8001222:	af00      	add	r7, sp, #0
 8001224:	6078      	str	r0, [r7, #4]
 8001226:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	689b      	ldr	r3, [r3, #8]
 800122c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	431a      	orrs	r2, r3
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	609a      	str	r2, [r3, #8]
}
 8001238:	bf00      	nop
 800123a:	370c      	adds	r7, #12
 800123c:	46bd      	mov	sp, r7
 800123e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001242:	4770      	bx	lr

08001244 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001244:	b480      	push	{r7}
 8001246:	b083      	sub	sp, #12
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	689b      	ldr	r3, [r3, #8]
 8001250:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001254:	4618      	mov	r0, r3
 8001256:	370c      	adds	r7, #12
 8001258:	46bd      	mov	sp, r7
 800125a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125e:	4770      	bx	lr

08001260 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001260:	b480      	push	{r7}
 8001262:	b087      	sub	sp, #28
 8001264:	af00      	add	r7, sp, #0
 8001266:	60f8      	str	r0, [r7, #12]
 8001268:	60b9      	str	r1, [r7, #8]
 800126a:	607a      	str	r2, [r7, #4]
 800126c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	3360      	adds	r3, #96	; 0x60
 8001272:	461a      	mov	r2, r3
 8001274:	68bb      	ldr	r3, [r7, #8]
 8001276:	009b      	lsls	r3, r3, #2
 8001278:	4413      	add	r3, r2
 800127a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800127c:	697b      	ldr	r3, [r7, #20]
 800127e:	681a      	ldr	r2, [r3, #0]
 8001280:	4b08      	ldr	r3, [pc, #32]	; (80012a4 <LL_ADC_SetOffset+0x44>)
 8001282:	4013      	ands	r3, r2
 8001284:	687a      	ldr	r2, [r7, #4]
 8001286:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800128a:	683a      	ldr	r2, [r7, #0]
 800128c:	430a      	orrs	r2, r1
 800128e:	4313      	orrs	r3, r2
 8001290:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001294:	697b      	ldr	r3, [r7, #20]
 8001296:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001298:	bf00      	nop
 800129a:	371c      	adds	r7, #28
 800129c:	46bd      	mov	sp, r7
 800129e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a2:	4770      	bx	lr
 80012a4:	03fff000 	.word	0x03fff000

080012a8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80012a8:	b480      	push	{r7}
 80012aa:	b085      	sub	sp, #20
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
 80012b0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	3360      	adds	r3, #96	; 0x60
 80012b6:	461a      	mov	r2, r3
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	009b      	lsls	r3, r3, #2
 80012bc:	4413      	add	r3, r2
 80012be:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80012c8:	4618      	mov	r0, r3
 80012ca:	3714      	adds	r7, #20
 80012cc:	46bd      	mov	sp, r7
 80012ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d2:	4770      	bx	lr

080012d4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80012d4:	b480      	push	{r7}
 80012d6:	b087      	sub	sp, #28
 80012d8:	af00      	add	r7, sp, #0
 80012da:	60f8      	str	r0, [r7, #12]
 80012dc:	60b9      	str	r1, [r7, #8]
 80012de:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	3360      	adds	r3, #96	; 0x60
 80012e4:	461a      	mov	r2, r3
 80012e6:	68bb      	ldr	r3, [r7, #8]
 80012e8:	009b      	lsls	r3, r3, #2
 80012ea:	4413      	add	r3, r2
 80012ec:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80012ee:	697b      	ldr	r3, [r7, #20]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	431a      	orrs	r2, r3
 80012fa:	697b      	ldr	r3, [r7, #20]
 80012fc:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80012fe:	bf00      	nop
 8001300:	371c      	adds	r7, #28
 8001302:	46bd      	mov	sp, r7
 8001304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001308:	4770      	bx	lr

0800130a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800130a:	b480      	push	{r7}
 800130c:	b083      	sub	sp, #12
 800130e:	af00      	add	r7, sp, #0
 8001310:	6078      	str	r0, [r7, #4]
 8001312:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	695b      	ldr	r3, [r3, #20]
 8001318:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	431a      	orrs	r2, r3
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	615a      	str	r2, [r3, #20]
}
 8001324:	bf00      	nop
 8001326:	370c      	adds	r7, #12
 8001328:	46bd      	mov	sp, r7
 800132a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132e:	4770      	bx	lr

08001330 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001330:	b480      	push	{r7}
 8001332:	b087      	sub	sp, #28
 8001334:	af00      	add	r7, sp, #0
 8001336:	60f8      	str	r0, [r7, #12]
 8001338:	60b9      	str	r1, [r7, #8]
 800133a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	3330      	adds	r3, #48	; 0x30
 8001340:	461a      	mov	r2, r3
 8001342:	68bb      	ldr	r3, [r7, #8]
 8001344:	0a1b      	lsrs	r3, r3, #8
 8001346:	009b      	lsls	r3, r3, #2
 8001348:	f003 030c 	and.w	r3, r3, #12
 800134c:	4413      	add	r3, r2
 800134e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001350:	697b      	ldr	r3, [r7, #20]
 8001352:	681a      	ldr	r2, [r3, #0]
 8001354:	68bb      	ldr	r3, [r7, #8]
 8001356:	f003 031f 	and.w	r3, r3, #31
 800135a:	211f      	movs	r1, #31
 800135c:	fa01 f303 	lsl.w	r3, r1, r3
 8001360:	43db      	mvns	r3, r3
 8001362:	401a      	ands	r2, r3
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	0e9b      	lsrs	r3, r3, #26
 8001368:	f003 011f 	and.w	r1, r3, #31
 800136c:	68bb      	ldr	r3, [r7, #8]
 800136e:	f003 031f 	and.w	r3, r3, #31
 8001372:	fa01 f303 	lsl.w	r3, r1, r3
 8001376:	431a      	orrs	r2, r3
 8001378:	697b      	ldr	r3, [r7, #20]
 800137a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800137c:	bf00      	nop
 800137e:	371c      	adds	r7, #28
 8001380:	46bd      	mov	sp, r7
 8001382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001386:	4770      	bx	lr

08001388 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001388:	b480      	push	{r7}
 800138a:	b087      	sub	sp, #28
 800138c:	af00      	add	r7, sp, #0
 800138e:	60f8      	str	r0, [r7, #12]
 8001390:	60b9      	str	r1, [r7, #8]
 8001392:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	3314      	adds	r3, #20
 8001398:	461a      	mov	r2, r3
 800139a:	68bb      	ldr	r3, [r7, #8]
 800139c:	0e5b      	lsrs	r3, r3, #25
 800139e:	009b      	lsls	r3, r3, #2
 80013a0:	f003 0304 	and.w	r3, r3, #4
 80013a4:	4413      	add	r3, r2
 80013a6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80013a8:	697b      	ldr	r3, [r7, #20]
 80013aa:	681a      	ldr	r2, [r3, #0]
 80013ac:	68bb      	ldr	r3, [r7, #8]
 80013ae:	0d1b      	lsrs	r3, r3, #20
 80013b0:	f003 031f 	and.w	r3, r3, #31
 80013b4:	2107      	movs	r1, #7
 80013b6:	fa01 f303 	lsl.w	r3, r1, r3
 80013ba:	43db      	mvns	r3, r3
 80013bc:	401a      	ands	r2, r3
 80013be:	68bb      	ldr	r3, [r7, #8]
 80013c0:	0d1b      	lsrs	r3, r3, #20
 80013c2:	f003 031f 	and.w	r3, r3, #31
 80013c6:	6879      	ldr	r1, [r7, #4]
 80013c8:	fa01 f303 	lsl.w	r3, r1, r3
 80013cc:	431a      	orrs	r2, r3
 80013ce:	697b      	ldr	r3, [r7, #20]
 80013d0:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80013d2:	bf00      	nop
 80013d4:	371c      	adds	r7, #28
 80013d6:	46bd      	mov	sp, r7
 80013d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013dc:	4770      	bx	lr
	...

080013e0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80013e0:	b480      	push	{r7}
 80013e2:	b085      	sub	sp, #20
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	60f8      	str	r0, [r7, #12]
 80013e8:	60b9      	str	r1, [r7, #8]
 80013ea:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80013f2:	68bb      	ldr	r3, [r7, #8]
 80013f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80013f8:	43db      	mvns	r3, r3
 80013fa:	401a      	ands	r2, r3
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	f003 0318 	and.w	r3, r3, #24
 8001402:	4908      	ldr	r1, [pc, #32]	; (8001424 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001404:	40d9      	lsrs	r1, r3
 8001406:	68bb      	ldr	r3, [r7, #8]
 8001408:	400b      	ands	r3, r1
 800140a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800140e:	431a      	orrs	r2, r3
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001416:	bf00      	nop
 8001418:	3714      	adds	r7, #20
 800141a:	46bd      	mov	sp, r7
 800141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001420:	4770      	bx	lr
 8001422:	bf00      	nop
 8001424:	0007ffff 	.word	0x0007ffff

08001428 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001428:	b480      	push	{r7}
 800142a:	b083      	sub	sp, #12
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	689b      	ldr	r3, [r3, #8]
 8001434:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001438:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800143c:	687a      	ldr	r2, [r7, #4]
 800143e:	6093      	str	r3, [r2, #8]
}
 8001440:	bf00      	nop
 8001442:	370c      	adds	r7, #12
 8001444:	46bd      	mov	sp, r7
 8001446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144a:	4770      	bx	lr

0800144c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 800144c:	b480      	push	{r7}
 800144e:	b083      	sub	sp, #12
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	689b      	ldr	r3, [r3, #8]
 8001458:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800145c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001460:	d101      	bne.n	8001466 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001462:	2301      	movs	r3, #1
 8001464:	e000      	b.n	8001468 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001466:	2300      	movs	r3, #0
}
 8001468:	4618      	mov	r0, r3
 800146a:	370c      	adds	r7, #12
 800146c:	46bd      	mov	sp, r7
 800146e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001472:	4770      	bx	lr

08001474 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001474:	b480      	push	{r7}
 8001476:	b083      	sub	sp, #12
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	689b      	ldr	r3, [r3, #8]
 8001480:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001484:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001488:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001490:	bf00      	nop
 8001492:	370c      	adds	r7, #12
 8001494:	46bd      	mov	sp, r7
 8001496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149a:	4770      	bx	lr

0800149c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800149c:	b480      	push	{r7}
 800149e:	b083      	sub	sp, #12
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	689b      	ldr	r3, [r3, #8]
 80014a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014ac:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80014b0:	d101      	bne.n	80014b6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80014b2:	2301      	movs	r3, #1
 80014b4:	e000      	b.n	80014b8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80014b6:	2300      	movs	r3, #0
}
 80014b8:	4618      	mov	r0, r3
 80014ba:	370c      	adds	r7, #12
 80014bc:	46bd      	mov	sp, r7
 80014be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c2:	4770      	bx	lr

080014c4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80014c4:	b480      	push	{r7}
 80014c6:	b083      	sub	sp, #12
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	689b      	ldr	r3, [r3, #8]
 80014d0:	f003 0301 	and.w	r3, r3, #1
 80014d4:	2b01      	cmp	r3, #1
 80014d6:	d101      	bne.n	80014dc <LL_ADC_IsEnabled+0x18>
 80014d8:	2301      	movs	r3, #1
 80014da:	e000      	b.n	80014de <LL_ADC_IsEnabled+0x1a>
 80014dc:	2300      	movs	r3, #0
}
 80014de:	4618      	mov	r0, r3
 80014e0:	370c      	adds	r7, #12
 80014e2:	46bd      	mov	sp, r7
 80014e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e8:	4770      	bx	lr

080014ea <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80014ea:	b480      	push	{r7}
 80014ec:	b083      	sub	sp, #12
 80014ee:	af00      	add	r7, sp, #0
 80014f0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	689b      	ldr	r3, [r3, #8]
 80014f6:	f003 0304 	and.w	r3, r3, #4
 80014fa:	2b04      	cmp	r3, #4
 80014fc:	d101      	bne.n	8001502 <LL_ADC_REG_IsConversionOngoing+0x18>
 80014fe:	2301      	movs	r3, #1
 8001500:	e000      	b.n	8001504 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001502:	2300      	movs	r3, #0
}
 8001504:	4618      	mov	r0, r3
 8001506:	370c      	adds	r7, #12
 8001508:	46bd      	mov	sp, r7
 800150a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150e:	4770      	bx	lr

08001510 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001510:	b480      	push	{r7}
 8001512:	b083      	sub	sp, #12
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	689b      	ldr	r3, [r3, #8]
 800151c:	f003 0308 	and.w	r3, r3, #8
 8001520:	2b08      	cmp	r3, #8
 8001522:	d101      	bne.n	8001528 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001524:	2301      	movs	r3, #1
 8001526:	e000      	b.n	800152a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001528:	2300      	movs	r3, #0
}
 800152a:	4618      	mov	r0, r3
 800152c:	370c      	adds	r7, #12
 800152e:	46bd      	mov	sp, r7
 8001530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001534:	4770      	bx	lr
	...

08001538 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b088      	sub	sp, #32
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001540:	2300      	movs	r3, #0
 8001542:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001544:	2300      	movs	r3, #0
 8001546:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	2b00      	cmp	r3, #0
 800154c:	d101      	bne.n	8001552 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800154e:	2301      	movs	r3, #1
 8001550:	e12f      	b.n	80017b2 <HAL_ADC_Init+0x27a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	691b      	ldr	r3, [r3, #16]
 8001556:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800155c:	2b00      	cmp	r3, #0
 800155e:	d109      	bne.n	8001574 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001560:	6878      	ldr	r0, [r7, #4]
 8001562:	f7ff f81d 	bl	80005a0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	2200      	movs	r2, #0
 800156a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	2200      	movs	r2, #0
 8001570:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	4618      	mov	r0, r3
 800157a:	f7ff ff67 	bl	800144c <LL_ADC_IsDeepPowerDownEnabled>
 800157e:	4603      	mov	r3, r0
 8001580:	2b00      	cmp	r3, #0
 8001582:	d004      	beq.n	800158e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	4618      	mov	r0, r3
 800158a:	f7ff ff4d 	bl	8001428 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	4618      	mov	r0, r3
 8001594:	f7ff ff82 	bl	800149c <LL_ADC_IsInternalRegulatorEnabled>
 8001598:	4603      	mov	r3, r0
 800159a:	2b00      	cmp	r3, #0
 800159c:	d115      	bne.n	80015ca <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	4618      	mov	r0, r3
 80015a4:	f7ff ff66 	bl	8001474 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80015a8:	4b84      	ldr	r3, [pc, #528]	; (80017bc <HAL_ADC_Init+0x284>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	099b      	lsrs	r3, r3, #6
 80015ae:	4a84      	ldr	r2, [pc, #528]	; (80017c0 <HAL_ADC_Init+0x288>)
 80015b0:	fba2 2303 	umull	r2, r3, r2, r3
 80015b4:	099b      	lsrs	r3, r3, #6
 80015b6:	3301      	adds	r3, #1
 80015b8:	005b      	lsls	r3, r3, #1
 80015ba:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80015bc:	e002      	b.n	80015c4 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80015be:	68bb      	ldr	r3, [r7, #8]
 80015c0:	3b01      	subs	r3, #1
 80015c2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80015c4:	68bb      	ldr	r3, [r7, #8]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d1f9      	bne.n	80015be <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	4618      	mov	r0, r3
 80015d0:	f7ff ff64 	bl	800149c <LL_ADC_IsInternalRegulatorEnabled>
 80015d4:	4603      	mov	r3, r0
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d10d      	bne.n	80015f6 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015de:	f043 0210 	orr.w	r2, r3, #16
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015ea:	f043 0201 	orr.w	r2, r3, #1
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80015f2:	2301      	movs	r3, #1
 80015f4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	4618      	mov	r0, r3
 80015fc:	f7ff ff75 	bl	80014ea <LL_ADC_REG_IsConversionOngoing>
 8001600:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001606:	f003 0310 	and.w	r3, r3, #16
 800160a:	2b00      	cmp	r3, #0
 800160c:	f040 80c8 	bne.w	80017a0 <HAL_ADC_Init+0x268>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001610:	697b      	ldr	r3, [r7, #20]
 8001612:	2b00      	cmp	r3, #0
 8001614:	f040 80c4 	bne.w	80017a0 <HAL_ADC_Init+0x268>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800161c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001620:	f043 0202 	orr.w	r2, r3, #2
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4618      	mov	r0, r3
 800162e:	f7ff ff49 	bl	80014c4 <LL_ADC_IsEnabled>
 8001632:	4603      	mov	r3, r0
 8001634:	2b00      	cmp	r3, #0
 8001636:	d10b      	bne.n	8001650 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001638:	4862      	ldr	r0, [pc, #392]	; (80017c4 <HAL_ADC_Init+0x28c>)
 800163a:	f7ff ff43 	bl	80014c4 <LL_ADC_IsEnabled>
 800163e:	4603      	mov	r3, r0
 8001640:	2b00      	cmp	r3, #0
 8001642:	d105      	bne.n	8001650 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	685b      	ldr	r3, [r3, #4]
 8001648:	4619      	mov	r1, r3
 800164a:	485f      	ldr	r0, [pc, #380]	; (80017c8 <HAL_ADC_Init+0x290>)
 800164c:	f7ff fdd4 	bl	80011f8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	7e5b      	ldrb	r3, [r3, #25]
 8001654:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800165a:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001660:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001666:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800166e:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001670:	4313      	orrs	r3, r2
 8001672:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	f893 3020 	ldrb.w	r3, [r3, #32]
 800167a:	2b01      	cmp	r3, #1
 800167c:	d106      	bne.n	800168c <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001682:	3b01      	subs	r3, #1
 8001684:	045b      	lsls	r3, r3, #17
 8001686:	69ba      	ldr	r2, [r7, #24]
 8001688:	4313      	orrs	r3, r2
 800168a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001690:	2b00      	cmp	r3, #0
 8001692:	d009      	beq.n	80016a8 <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001698:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016a0:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80016a2:	69ba      	ldr	r2, [r7, #24]
 80016a4:	4313      	orrs	r3, r2
 80016a6:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	68da      	ldr	r2, [r3, #12]
 80016ae:	4b47      	ldr	r3, [pc, #284]	; (80017cc <HAL_ADC_Init+0x294>)
 80016b0:	4013      	ands	r3, r2
 80016b2:	687a      	ldr	r2, [r7, #4]
 80016b4:	6812      	ldr	r2, [r2, #0]
 80016b6:	69b9      	ldr	r1, [r7, #24]
 80016b8:	430b      	orrs	r3, r1
 80016ba:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4618      	mov	r0, r3
 80016c2:	f7ff ff12 	bl	80014ea <LL_ADC_REG_IsConversionOngoing>
 80016c6:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	4618      	mov	r0, r3
 80016ce:	f7ff ff1f 	bl	8001510 <LL_ADC_INJ_IsConversionOngoing>
 80016d2:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80016d4:	693b      	ldr	r3, [r7, #16]
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d140      	bne.n	800175c <HAL_ADC_Init+0x224>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d13d      	bne.n	800175c <HAL_ADC_Init+0x224>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	7e1b      	ldrb	r3, [r3, #24]
 80016e8:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80016ea:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80016f2:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80016f4:	4313      	orrs	r3, r2
 80016f6:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	68db      	ldr	r3, [r3, #12]
 80016fe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001702:	f023 0306 	bic.w	r3, r3, #6
 8001706:	687a      	ldr	r2, [r7, #4]
 8001708:	6812      	ldr	r2, [r2, #0]
 800170a:	69b9      	ldr	r1, [r7, #24]
 800170c:	430b      	orrs	r3, r1
 800170e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001716:	2b01      	cmp	r3, #1
 8001718:	d118      	bne.n	800174c <HAL_ADC_Init+0x214>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	691b      	ldr	r3, [r3, #16]
 8001720:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001724:	f023 0304 	bic.w	r3, r3, #4
 8001728:	687a      	ldr	r2, [r7, #4]
 800172a:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800172c:	687a      	ldr	r2, [r7, #4]
 800172e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001730:	4311      	orrs	r1, r2
 8001732:	687a      	ldr	r2, [r7, #4]
 8001734:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001736:	4311      	orrs	r1, r2
 8001738:	687a      	ldr	r2, [r7, #4]
 800173a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800173c:	430a      	orrs	r2, r1
 800173e:	431a      	orrs	r2, r3
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f042 0201 	orr.w	r2, r2, #1
 8001748:	611a      	str	r2, [r3, #16]
 800174a:	e007      	b.n	800175c <HAL_ADC_Init+0x224>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	691a      	ldr	r2, [r3, #16]
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f022 0201 	bic.w	r2, r2, #1
 800175a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	691b      	ldr	r3, [r3, #16]
 8001760:	2b01      	cmp	r3, #1
 8001762:	d10c      	bne.n	800177e <HAL_ADC_Init+0x246>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800176a:	f023 010f 	bic.w	r1, r3, #15
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	69db      	ldr	r3, [r3, #28]
 8001772:	1e5a      	subs	r2, r3, #1
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	430a      	orrs	r2, r1
 800177a:	631a      	str	r2, [r3, #48]	; 0x30
 800177c:	e007      	b.n	800178e <HAL_ADC_Init+0x256>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f022 020f 	bic.w	r2, r2, #15
 800178c:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001792:	f023 0303 	bic.w	r3, r3, #3
 8001796:	f043 0201 	orr.w	r2, r3, #1
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	659a      	str	r2, [r3, #88]	; 0x58
 800179e:	e007      	b.n	80017b0 <HAL_ADC_Init+0x278>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017a4:	f043 0210 	orr.w	r2, r3, #16
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80017ac:	2301      	movs	r3, #1
 80017ae:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80017b0:	7ffb      	ldrb	r3, [r7, #31]
}
 80017b2:	4618      	mov	r0, r3
 80017b4:	3720      	adds	r7, #32
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	bf00      	nop
 80017bc:	20000004 	.word	0x20000004
 80017c0:	053e2d63 	.word	0x053e2d63
 80017c4:	50040000 	.word	0x50040000
 80017c8:	50040300 	.word	0x50040300
 80017cc:	fff0c007 	.word	0xfff0c007

080017d0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b0b6      	sub	sp, #216	; 0xd8
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
 80017d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80017da:	2300      	movs	r3, #0
 80017dc:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80017e0:	2300      	movs	r3, #0
 80017e2:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80017ea:	2b01      	cmp	r3, #1
 80017ec:	d101      	bne.n	80017f2 <HAL_ADC_ConfigChannel+0x22>
 80017ee:	2302      	movs	r3, #2
 80017f0:	e3d5      	b.n	8001f9e <HAL_ADC_ConfigChannel+0x7ce>
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	2201      	movs	r2, #1
 80017f6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	4618      	mov	r0, r3
 8001800:	f7ff fe73 	bl	80014ea <LL_ADC_REG_IsConversionOngoing>
 8001804:	4603      	mov	r3, r0
 8001806:	2b00      	cmp	r3, #0
 8001808:	f040 83ba 	bne.w	8001f80 <HAL_ADC_ConfigChannel+0x7b0>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	685b      	ldr	r3, [r3, #4]
 8001810:	2b05      	cmp	r3, #5
 8001812:	d824      	bhi.n	800185e <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	3b02      	subs	r3, #2
 800181a:	2b03      	cmp	r3, #3
 800181c:	d81b      	bhi.n	8001856 <HAL_ADC_ConfigChannel+0x86>
 800181e:	a201      	add	r2, pc, #4	; (adr r2, 8001824 <HAL_ADC_ConfigChannel+0x54>)
 8001820:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001824:	08001835 	.word	0x08001835
 8001828:	0800183d 	.word	0x0800183d
 800182c:	08001845 	.word	0x08001845
 8001830:	0800184d 	.word	0x0800184d
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	220c      	movs	r2, #12
 8001838:	605a      	str	r2, [r3, #4]
          break;
 800183a:	e011      	b.n	8001860 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	2212      	movs	r2, #18
 8001840:	605a      	str	r2, [r3, #4]
          break;
 8001842:	e00d      	b.n	8001860 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	2218      	movs	r2, #24
 8001848:	605a      	str	r2, [r3, #4]
          break;
 800184a:	e009      	b.n	8001860 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001852:	605a      	str	r2, [r3, #4]
          break;
 8001854:	e004      	b.n	8001860 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	2206      	movs	r2, #6
 800185a:	605a      	str	r2, [r3, #4]
          break;
 800185c:	e000      	b.n	8001860 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 800185e:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	6818      	ldr	r0, [r3, #0]
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	6859      	ldr	r1, [r3, #4]
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	461a      	mov	r2, r3
 800186e:	f7ff fd5f 	bl	8001330 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	4618      	mov	r0, r3
 8001878:	f7ff fe37 	bl	80014ea <LL_ADC_REG_IsConversionOngoing>
 800187c:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4618      	mov	r0, r3
 8001886:	f7ff fe43 	bl	8001510 <LL_ADC_INJ_IsConversionOngoing>
 800188a:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800188e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001892:	2b00      	cmp	r3, #0
 8001894:	f040 81c1 	bne.w	8001c1a <HAL_ADC_ConfigChannel+0x44a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001898:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800189c:	2b00      	cmp	r3, #0
 800189e:	f040 81bc 	bne.w	8001c1a <HAL_ADC_ConfigChannel+0x44a>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	689b      	ldr	r3, [r3, #8]
 80018a6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80018aa:	d10f      	bne.n	80018cc <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	6818      	ldr	r0, [r3, #0]
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	2200      	movs	r2, #0
 80018b6:	4619      	mov	r1, r3
 80018b8:	f7ff fd66 	bl	8001388 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80018c4:	4618      	mov	r0, r3
 80018c6:	f7ff fd20 	bl	800130a <LL_ADC_SetSamplingTimeCommonConfig>
 80018ca:	e00e      	b.n	80018ea <HAL_ADC_ConfigChannel+0x11a>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	6818      	ldr	r0, [r3, #0]
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	6819      	ldr	r1, [r3, #0]
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	689b      	ldr	r3, [r3, #8]
 80018d8:	461a      	mov	r2, r3
 80018da:	f7ff fd55 	bl	8001388 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	2100      	movs	r1, #0
 80018e4:	4618      	mov	r0, r3
 80018e6:	f7ff fd10 	bl	800130a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	695a      	ldr	r2, [r3, #20]
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	68db      	ldr	r3, [r3, #12]
 80018f4:	08db      	lsrs	r3, r3, #3
 80018f6:	f003 0303 	and.w	r3, r3, #3
 80018fa:	005b      	lsls	r3, r3, #1
 80018fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001900:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	691b      	ldr	r3, [r3, #16]
 8001908:	2b04      	cmp	r3, #4
 800190a:	d00a      	beq.n	8001922 <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	6818      	ldr	r0, [r3, #0]
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	6919      	ldr	r1, [r3, #16]
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	681a      	ldr	r2, [r3, #0]
 8001918:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800191c:	f7ff fca0 	bl	8001260 <LL_ADC_SetOffset>
 8001920:	e17b      	b.n	8001c1a <HAL_ADC_ConfigChannel+0x44a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	2100      	movs	r1, #0
 8001928:	4618      	mov	r0, r3
 800192a:	f7ff fcbd 	bl	80012a8 <LL_ADC_GetOffsetChannel>
 800192e:	4603      	mov	r3, r0
 8001930:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001934:	2b00      	cmp	r3, #0
 8001936:	d10a      	bne.n	800194e <HAL_ADC_ConfigChannel+0x17e>
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	2100      	movs	r1, #0
 800193e:	4618      	mov	r0, r3
 8001940:	f7ff fcb2 	bl	80012a8 <LL_ADC_GetOffsetChannel>
 8001944:	4603      	mov	r3, r0
 8001946:	0e9b      	lsrs	r3, r3, #26
 8001948:	f003 021f 	and.w	r2, r3, #31
 800194c:	e01e      	b.n	800198c <HAL_ADC_ConfigChannel+0x1bc>
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	2100      	movs	r1, #0
 8001954:	4618      	mov	r0, r3
 8001956:	f7ff fca7 	bl	80012a8 <LL_ADC_GetOffsetChannel>
 800195a:	4603      	mov	r3, r0
 800195c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001960:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001964:	fa93 f3a3 	rbit	r3, r3
 8001968:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800196c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001970:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001974:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001978:	2b00      	cmp	r3, #0
 800197a:	d101      	bne.n	8001980 <HAL_ADC_ConfigChannel+0x1b0>
  {
    return 32U;
 800197c:	2320      	movs	r3, #32
 800197e:	e004      	b.n	800198a <HAL_ADC_ConfigChannel+0x1ba>
  }
  return __builtin_clz(value);
 8001980:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001984:	fab3 f383 	clz	r3, r3
 8001988:	b2db      	uxtb	r3, r3
 800198a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001994:	2b00      	cmp	r3, #0
 8001996:	d105      	bne.n	80019a4 <HAL_ADC_ConfigChannel+0x1d4>
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	0e9b      	lsrs	r3, r3, #26
 800199e:	f003 031f 	and.w	r3, r3, #31
 80019a2:	e018      	b.n	80019d6 <HAL_ADC_ConfigChannel+0x206>
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019ac:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80019b0:	fa93 f3a3 	rbit	r3, r3
 80019b4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80019b8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80019bc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80019c0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d101      	bne.n	80019cc <HAL_ADC_ConfigChannel+0x1fc>
    return 32U;
 80019c8:	2320      	movs	r3, #32
 80019ca:	e004      	b.n	80019d6 <HAL_ADC_ConfigChannel+0x206>
  return __builtin_clz(value);
 80019cc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80019d0:	fab3 f383 	clz	r3, r3
 80019d4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80019d6:	429a      	cmp	r2, r3
 80019d8:	d106      	bne.n	80019e8 <HAL_ADC_ConfigChannel+0x218>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	2200      	movs	r2, #0
 80019e0:	2100      	movs	r1, #0
 80019e2:	4618      	mov	r0, r3
 80019e4:	f7ff fc76 	bl	80012d4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	2101      	movs	r1, #1
 80019ee:	4618      	mov	r0, r3
 80019f0:	f7ff fc5a 	bl	80012a8 <LL_ADC_GetOffsetChannel>
 80019f4:	4603      	mov	r3, r0
 80019f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d10a      	bne.n	8001a14 <HAL_ADC_ConfigChannel+0x244>
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	2101      	movs	r1, #1
 8001a04:	4618      	mov	r0, r3
 8001a06:	f7ff fc4f 	bl	80012a8 <LL_ADC_GetOffsetChannel>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	0e9b      	lsrs	r3, r3, #26
 8001a0e:	f003 021f 	and.w	r2, r3, #31
 8001a12:	e01e      	b.n	8001a52 <HAL_ADC_ConfigChannel+0x282>
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	2101      	movs	r1, #1
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f7ff fc44 	bl	80012a8 <LL_ADC_GetOffsetChannel>
 8001a20:	4603      	mov	r3, r0
 8001a22:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a26:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001a2a:	fa93 f3a3 	rbit	r3, r3
 8001a2e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8001a32:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001a36:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8001a3a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d101      	bne.n	8001a46 <HAL_ADC_ConfigChannel+0x276>
    return 32U;
 8001a42:	2320      	movs	r3, #32
 8001a44:	e004      	b.n	8001a50 <HAL_ADC_ConfigChannel+0x280>
  return __builtin_clz(value);
 8001a46:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001a4a:	fab3 f383 	clz	r3, r3
 8001a4e:	b2db      	uxtb	r3, r3
 8001a50:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d105      	bne.n	8001a6a <HAL_ADC_ConfigChannel+0x29a>
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	0e9b      	lsrs	r3, r3, #26
 8001a64:	f003 031f 	and.w	r3, r3, #31
 8001a68:	e018      	b.n	8001a9c <HAL_ADC_ConfigChannel+0x2cc>
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a72:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001a76:	fa93 f3a3 	rbit	r3, r3
 8001a7a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8001a7e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001a82:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8001a86:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d101      	bne.n	8001a92 <HAL_ADC_ConfigChannel+0x2c2>
    return 32U;
 8001a8e:	2320      	movs	r3, #32
 8001a90:	e004      	b.n	8001a9c <HAL_ADC_ConfigChannel+0x2cc>
  return __builtin_clz(value);
 8001a92:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001a96:	fab3 f383 	clz	r3, r3
 8001a9a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001a9c:	429a      	cmp	r2, r3
 8001a9e:	d106      	bne.n	8001aae <HAL_ADC_ConfigChannel+0x2de>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	2101      	movs	r1, #1
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f7ff fc13 	bl	80012d4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	2102      	movs	r1, #2
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	f7ff fbf7 	bl	80012a8 <LL_ADC_GetOffsetChannel>
 8001aba:	4603      	mov	r3, r0
 8001abc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d10a      	bne.n	8001ada <HAL_ADC_ConfigChannel+0x30a>
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	2102      	movs	r1, #2
 8001aca:	4618      	mov	r0, r3
 8001acc:	f7ff fbec 	bl	80012a8 <LL_ADC_GetOffsetChannel>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	0e9b      	lsrs	r3, r3, #26
 8001ad4:	f003 021f 	and.w	r2, r3, #31
 8001ad8:	e01e      	b.n	8001b18 <HAL_ADC_ConfigChannel+0x348>
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	2102      	movs	r1, #2
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f7ff fbe1 	bl	80012a8 <LL_ADC_GetOffsetChannel>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aec:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001af0:	fa93 f3a3 	rbit	r3, r3
 8001af4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8001af8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001afc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8001b00:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d101      	bne.n	8001b0c <HAL_ADC_ConfigChannel+0x33c>
    return 32U;
 8001b08:	2320      	movs	r3, #32
 8001b0a:	e004      	b.n	8001b16 <HAL_ADC_ConfigChannel+0x346>
  return __builtin_clz(value);
 8001b0c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001b10:	fab3 f383 	clz	r3, r3
 8001b14:	b2db      	uxtb	r3, r3
 8001b16:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d105      	bne.n	8001b30 <HAL_ADC_ConfigChannel+0x360>
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	0e9b      	lsrs	r3, r3, #26
 8001b2a:	f003 031f 	and.w	r3, r3, #31
 8001b2e:	e016      	b.n	8001b5e <HAL_ADC_ConfigChannel+0x38e>
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b38:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001b3c:	fa93 f3a3 	rbit	r3, r3
 8001b40:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8001b42:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001b44:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8001b48:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d101      	bne.n	8001b54 <HAL_ADC_ConfigChannel+0x384>
    return 32U;
 8001b50:	2320      	movs	r3, #32
 8001b52:	e004      	b.n	8001b5e <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 8001b54:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001b58:	fab3 f383 	clz	r3, r3
 8001b5c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001b5e:	429a      	cmp	r2, r3
 8001b60:	d106      	bne.n	8001b70 <HAL_ADC_ConfigChannel+0x3a0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	2200      	movs	r2, #0
 8001b68:	2102      	movs	r1, #2
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	f7ff fbb2 	bl	80012d4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	2103      	movs	r1, #3
 8001b76:	4618      	mov	r0, r3
 8001b78:	f7ff fb96 	bl	80012a8 <LL_ADC_GetOffsetChannel>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d10a      	bne.n	8001b9c <HAL_ADC_ConfigChannel+0x3cc>
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	2103      	movs	r1, #3
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	f7ff fb8b 	bl	80012a8 <LL_ADC_GetOffsetChannel>
 8001b92:	4603      	mov	r3, r0
 8001b94:	0e9b      	lsrs	r3, r3, #26
 8001b96:	f003 021f 	and.w	r2, r3, #31
 8001b9a:	e017      	b.n	8001bcc <HAL_ADC_ConfigChannel+0x3fc>
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	2103      	movs	r1, #3
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	f7ff fb80 	bl	80012a8 <LL_ADC_GetOffsetChannel>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001bae:	fa93 f3a3 	rbit	r3, r3
 8001bb2:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8001bb4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001bb6:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8001bb8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d101      	bne.n	8001bc2 <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 8001bbe:	2320      	movs	r3, #32
 8001bc0:	e003      	b.n	8001bca <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 8001bc2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001bc4:	fab3 f383 	clz	r3, r3
 8001bc8:	b2db      	uxtb	r3, r3
 8001bca:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d105      	bne.n	8001be4 <HAL_ADC_ConfigChannel+0x414>
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	0e9b      	lsrs	r3, r3, #26
 8001bde:	f003 031f 	and.w	r3, r3, #31
 8001be2:	e011      	b.n	8001c08 <HAL_ADC_ConfigChannel+0x438>
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bea:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001bec:	fa93 f3a3 	rbit	r3, r3
 8001bf0:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8001bf2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001bf4:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8001bf6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d101      	bne.n	8001c00 <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 8001bfc:	2320      	movs	r3, #32
 8001bfe:	e003      	b.n	8001c08 <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 8001c00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001c02:	fab3 f383 	clz	r3, r3
 8001c06:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001c08:	429a      	cmp	r2, r3
 8001c0a:	d106      	bne.n	8001c1a <HAL_ADC_ConfigChannel+0x44a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	2200      	movs	r2, #0
 8001c12:	2103      	movs	r1, #3
 8001c14:	4618      	mov	r0, r3
 8001c16:	f7ff fb5d 	bl	80012d4 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4618      	mov	r0, r3
 8001c20:	f7ff fc50 	bl	80014c4 <LL_ADC_IsEnabled>
 8001c24:	4603      	mov	r3, r0
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	f040 8140 	bne.w	8001eac <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	6818      	ldr	r0, [r3, #0]
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	6819      	ldr	r1, [r3, #0]
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	68db      	ldr	r3, [r3, #12]
 8001c38:	461a      	mov	r2, r3
 8001c3a:	f7ff fbd1 	bl	80013e0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	68db      	ldr	r3, [r3, #12]
 8001c42:	4a8f      	ldr	r2, [pc, #572]	; (8001e80 <HAL_ADC_ConfigChannel+0x6b0>)
 8001c44:	4293      	cmp	r3, r2
 8001c46:	f040 8131 	bne.w	8001eac <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d10b      	bne.n	8001c72 <HAL_ADC_ConfigChannel+0x4a2>
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	0e9b      	lsrs	r3, r3, #26
 8001c60:	3301      	adds	r3, #1
 8001c62:	f003 031f 	and.w	r3, r3, #31
 8001c66:	2b09      	cmp	r3, #9
 8001c68:	bf94      	ite	ls
 8001c6a:	2301      	movls	r3, #1
 8001c6c:	2300      	movhi	r3, #0
 8001c6e:	b2db      	uxtb	r3, r3
 8001c70:	e019      	b.n	8001ca6 <HAL_ADC_ConfigChannel+0x4d6>
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c78:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001c7a:	fa93 f3a3 	rbit	r3, r3
 8001c7e:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8001c80:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001c82:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8001c84:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d101      	bne.n	8001c8e <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 8001c8a:	2320      	movs	r3, #32
 8001c8c:	e003      	b.n	8001c96 <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 8001c8e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001c90:	fab3 f383 	clz	r3, r3
 8001c94:	b2db      	uxtb	r3, r3
 8001c96:	3301      	adds	r3, #1
 8001c98:	f003 031f 	and.w	r3, r3, #31
 8001c9c:	2b09      	cmp	r3, #9
 8001c9e:	bf94      	ite	ls
 8001ca0:	2301      	movls	r3, #1
 8001ca2:	2300      	movhi	r3, #0
 8001ca4:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d079      	beq.n	8001d9e <HAL_ADC_ConfigChannel+0x5ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d107      	bne.n	8001cc6 <HAL_ADC_ConfigChannel+0x4f6>
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	0e9b      	lsrs	r3, r3, #26
 8001cbc:	3301      	adds	r3, #1
 8001cbe:	069b      	lsls	r3, r3, #26
 8001cc0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001cc4:	e015      	b.n	8001cf2 <HAL_ADC_ConfigChannel+0x522>
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ccc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001cce:	fa93 f3a3 	rbit	r3, r3
 8001cd2:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001cd4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001cd6:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8001cd8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d101      	bne.n	8001ce2 <HAL_ADC_ConfigChannel+0x512>
    return 32U;
 8001cde:	2320      	movs	r3, #32
 8001ce0:	e003      	b.n	8001cea <HAL_ADC_ConfigChannel+0x51a>
  return __builtin_clz(value);
 8001ce2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ce4:	fab3 f383 	clz	r3, r3
 8001ce8:	b2db      	uxtb	r3, r3
 8001cea:	3301      	adds	r3, #1
 8001cec:	069b      	lsls	r3, r3, #26
 8001cee:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d109      	bne.n	8001d12 <HAL_ADC_ConfigChannel+0x542>
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	0e9b      	lsrs	r3, r3, #26
 8001d04:	3301      	adds	r3, #1
 8001d06:	f003 031f 	and.w	r3, r3, #31
 8001d0a:	2101      	movs	r1, #1
 8001d0c:	fa01 f303 	lsl.w	r3, r1, r3
 8001d10:	e017      	b.n	8001d42 <HAL_ADC_ConfigChannel+0x572>
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001d1a:	fa93 f3a3 	rbit	r3, r3
 8001d1e:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8001d20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001d22:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8001d24:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d101      	bne.n	8001d2e <HAL_ADC_ConfigChannel+0x55e>
    return 32U;
 8001d2a:	2320      	movs	r3, #32
 8001d2c:	e003      	b.n	8001d36 <HAL_ADC_ConfigChannel+0x566>
  return __builtin_clz(value);
 8001d2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001d30:	fab3 f383 	clz	r3, r3
 8001d34:	b2db      	uxtb	r3, r3
 8001d36:	3301      	adds	r3, #1
 8001d38:	f003 031f 	and.w	r3, r3, #31
 8001d3c:	2101      	movs	r1, #1
 8001d3e:	fa01 f303 	lsl.w	r3, r1, r3
 8001d42:	ea42 0103 	orr.w	r1, r2, r3
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d10a      	bne.n	8001d68 <HAL_ADC_ConfigChannel+0x598>
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	0e9b      	lsrs	r3, r3, #26
 8001d58:	3301      	adds	r3, #1
 8001d5a:	f003 021f 	and.w	r2, r3, #31
 8001d5e:	4613      	mov	r3, r2
 8001d60:	005b      	lsls	r3, r3, #1
 8001d62:	4413      	add	r3, r2
 8001d64:	051b      	lsls	r3, r3, #20
 8001d66:	e018      	b.n	8001d9a <HAL_ADC_ConfigChannel+0x5ca>
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d70:	fa93 f3a3 	rbit	r3, r3
 8001d74:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8001d76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d78:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8001d7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d101      	bne.n	8001d84 <HAL_ADC_ConfigChannel+0x5b4>
    return 32U;
 8001d80:	2320      	movs	r3, #32
 8001d82:	e003      	b.n	8001d8c <HAL_ADC_ConfigChannel+0x5bc>
  return __builtin_clz(value);
 8001d84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001d86:	fab3 f383 	clz	r3, r3
 8001d8a:	b2db      	uxtb	r3, r3
 8001d8c:	3301      	adds	r3, #1
 8001d8e:	f003 021f 	and.w	r2, r3, #31
 8001d92:	4613      	mov	r3, r2
 8001d94:	005b      	lsls	r3, r3, #1
 8001d96:	4413      	add	r3, r2
 8001d98:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001d9a:	430b      	orrs	r3, r1
 8001d9c:	e081      	b.n	8001ea2 <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d107      	bne.n	8001dba <HAL_ADC_ConfigChannel+0x5ea>
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	0e9b      	lsrs	r3, r3, #26
 8001db0:	3301      	adds	r3, #1
 8001db2:	069b      	lsls	r3, r3, #26
 8001db4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001db8:	e015      	b.n	8001de6 <HAL_ADC_ConfigChannel+0x616>
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dc2:	fa93 f3a3 	rbit	r3, r3
 8001dc6:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8001dc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dca:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8001dcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d101      	bne.n	8001dd6 <HAL_ADC_ConfigChannel+0x606>
    return 32U;
 8001dd2:	2320      	movs	r3, #32
 8001dd4:	e003      	b.n	8001dde <HAL_ADC_ConfigChannel+0x60e>
  return __builtin_clz(value);
 8001dd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001dd8:	fab3 f383 	clz	r3, r3
 8001ddc:	b2db      	uxtb	r3, r3
 8001dde:	3301      	adds	r3, #1
 8001de0:	069b      	lsls	r3, r3, #26
 8001de2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d109      	bne.n	8001e06 <HAL_ADC_ConfigChannel+0x636>
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	0e9b      	lsrs	r3, r3, #26
 8001df8:	3301      	adds	r3, #1
 8001dfa:	f003 031f 	and.w	r3, r3, #31
 8001dfe:	2101      	movs	r1, #1
 8001e00:	fa01 f303 	lsl.w	r3, r1, r3
 8001e04:	e017      	b.n	8001e36 <HAL_ADC_ConfigChannel+0x666>
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e0c:	6a3b      	ldr	r3, [r7, #32]
 8001e0e:	fa93 f3a3 	rbit	r3, r3
 8001e12:	61fb      	str	r3, [r7, #28]
  return result;
 8001e14:	69fb      	ldr	r3, [r7, #28]
 8001e16:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d101      	bne.n	8001e22 <HAL_ADC_ConfigChannel+0x652>
    return 32U;
 8001e1e:	2320      	movs	r3, #32
 8001e20:	e003      	b.n	8001e2a <HAL_ADC_ConfigChannel+0x65a>
  return __builtin_clz(value);
 8001e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e24:	fab3 f383 	clz	r3, r3
 8001e28:	b2db      	uxtb	r3, r3
 8001e2a:	3301      	adds	r3, #1
 8001e2c:	f003 031f 	and.w	r3, r3, #31
 8001e30:	2101      	movs	r1, #1
 8001e32:	fa01 f303 	lsl.w	r3, r1, r3
 8001e36:	ea42 0103 	orr.w	r1, r2, r3
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d10d      	bne.n	8001e62 <HAL_ADC_ConfigChannel+0x692>
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	0e9b      	lsrs	r3, r3, #26
 8001e4c:	3301      	adds	r3, #1
 8001e4e:	f003 021f 	and.w	r2, r3, #31
 8001e52:	4613      	mov	r3, r2
 8001e54:	005b      	lsls	r3, r3, #1
 8001e56:	4413      	add	r3, r2
 8001e58:	3b1e      	subs	r3, #30
 8001e5a:	051b      	lsls	r3, r3, #20
 8001e5c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001e60:	e01e      	b.n	8001ea0 <HAL_ADC_ConfigChannel+0x6d0>
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e68:	697b      	ldr	r3, [r7, #20]
 8001e6a:	fa93 f3a3 	rbit	r3, r3
 8001e6e:	613b      	str	r3, [r7, #16]
  return result;
 8001e70:	693b      	ldr	r3, [r7, #16]
 8001e72:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001e74:	69bb      	ldr	r3, [r7, #24]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d104      	bne.n	8001e84 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8001e7a:	2320      	movs	r3, #32
 8001e7c:	e006      	b.n	8001e8c <HAL_ADC_ConfigChannel+0x6bc>
 8001e7e:	bf00      	nop
 8001e80:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8001e84:	69bb      	ldr	r3, [r7, #24]
 8001e86:	fab3 f383 	clz	r3, r3
 8001e8a:	b2db      	uxtb	r3, r3
 8001e8c:	3301      	adds	r3, #1
 8001e8e:	f003 021f 	and.w	r2, r3, #31
 8001e92:	4613      	mov	r3, r2
 8001e94:	005b      	lsls	r3, r3, #1
 8001e96:	4413      	add	r3, r2
 8001e98:	3b1e      	subs	r3, #30
 8001e9a:	051b      	lsls	r3, r3, #20
 8001e9c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001ea0:	430b      	orrs	r3, r1
 8001ea2:	683a      	ldr	r2, [r7, #0]
 8001ea4:	6892      	ldr	r2, [r2, #8]
 8001ea6:	4619      	mov	r1, r3
 8001ea8:	f7ff fa6e 	bl	8001388 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	681a      	ldr	r2, [r3, #0]
 8001eb0:	4b3d      	ldr	r3, [pc, #244]	; (8001fa8 <HAL_ADC_ConfigChannel+0x7d8>)
 8001eb2:	4013      	ands	r3, r2
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d06c      	beq.n	8001f92 <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001eb8:	483c      	ldr	r0, [pc, #240]	; (8001fac <HAL_ADC_ConfigChannel+0x7dc>)
 8001eba:	f7ff f9c3 	bl	8001244 <LL_ADC_GetCommonPathInternalCh>
 8001ebe:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	4a3a      	ldr	r2, [pc, #232]	; (8001fb0 <HAL_ADC_ConfigChannel+0x7e0>)
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	d127      	bne.n	8001f1c <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001ecc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001ed0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d121      	bne.n	8001f1c <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4a35      	ldr	r2, [pc, #212]	; (8001fb4 <HAL_ADC_ConfigChannel+0x7e4>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d157      	bne.n	8001f92 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001ee2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001ee6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001eea:	4619      	mov	r1, r3
 8001eec:	482f      	ldr	r0, [pc, #188]	; (8001fac <HAL_ADC_ConfigChannel+0x7dc>)
 8001eee:	f7ff f996 	bl	800121e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001ef2:	4b31      	ldr	r3, [pc, #196]	; (8001fb8 <HAL_ADC_ConfigChannel+0x7e8>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	099b      	lsrs	r3, r3, #6
 8001ef8:	4a30      	ldr	r2, [pc, #192]	; (8001fbc <HAL_ADC_ConfigChannel+0x7ec>)
 8001efa:	fba2 2303 	umull	r2, r3, r2, r3
 8001efe:	099b      	lsrs	r3, r3, #6
 8001f00:	1c5a      	adds	r2, r3, #1
 8001f02:	4613      	mov	r3, r2
 8001f04:	005b      	lsls	r3, r3, #1
 8001f06:	4413      	add	r3, r2
 8001f08:	009b      	lsls	r3, r3, #2
 8001f0a:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001f0c:	e002      	b.n	8001f14 <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	3b01      	subs	r3, #1
 8001f12:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d1f9      	bne.n	8001f0e <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001f1a:	e03a      	b.n	8001f92 <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4a27      	ldr	r2, [pc, #156]	; (8001fc0 <HAL_ADC_ConfigChannel+0x7f0>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d113      	bne.n	8001f4e <HAL_ADC_ConfigChannel+0x77e>
 8001f26:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001f2a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d10d      	bne.n	8001f4e <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4a1f      	ldr	r2, [pc, #124]	; (8001fb4 <HAL_ADC_ConfigChannel+0x7e4>)
 8001f38:	4293      	cmp	r3, r2
 8001f3a:	d12a      	bne.n	8001f92 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001f3c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001f40:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f44:	4619      	mov	r1, r3
 8001f46:	4819      	ldr	r0, [pc, #100]	; (8001fac <HAL_ADC_ConfigChannel+0x7dc>)
 8001f48:	f7ff f969 	bl	800121e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001f4c:	e021      	b.n	8001f92 <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	4a1c      	ldr	r2, [pc, #112]	; (8001fc4 <HAL_ADC_ConfigChannel+0x7f4>)
 8001f54:	4293      	cmp	r3, r2
 8001f56:	d11c      	bne.n	8001f92 <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001f58:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001f5c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d116      	bne.n	8001f92 <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4a12      	ldr	r2, [pc, #72]	; (8001fb4 <HAL_ADC_ConfigChannel+0x7e4>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d111      	bne.n	8001f92 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001f6e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001f72:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001f76:	4619      	mov	r1, r3
 8001f78:	480c      	ldr	r0, [pc, #48]	; (8001fac <HAL_ADC_ConfigChannel+0x7dc>)
 8001f7a:	f7ff f950 	bl	800121e <LL_ADC_SetCommonPathInternalCh>
 8001f7e:	e008      	b.n	8001f92 <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f84:	f043 0220 	orr.w	r2, r3, #32
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001f8c:	2301      	movs	r3, #1
 8001f8e:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2200      	movs	r2, #0
 8001f96:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8001f9a:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	37d8      	adds	r7, #216	; 0xd8
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bd80      	pop	{r7, pc}
 8001fa6:	bf00      	nop
 8001fa8:	80080000 	.word	0x80080000
 8001fac:	50040300 	.word	0x50040300
 8001fb0:	c7520000 	.word	0xc7520000
 8001fb4:	50040000 	.word	0x50040000
 8001fb8:	20000004 	.word	0x20000004
 8001fbc:	053e2d63 	.word	0x053e2d63
 8001fc0:	cb840000 	.word	0xcb840000
 8001fc4:	80000001 	.word	0x80000001

08001fc8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	b085      	sub	sp, #20
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	f003 0307 	and.w	r3, r3, #7
 8001fd6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001fd8:	4b0c      	ldr	r3, [pc, #48]	; (800200c <__NVIC_SetPriorityGrouping+0x44>)
 8001fda:	68db      	ldr	r3, [r3, #12]
 8001fdc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001fde:	68ba      	ldr	r2, [r7, #8]
 8001fe0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001fe4:	4013      	ands	r3, r2
 8001fe6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001fec:	68bb      	ldr	r3, [r7, #8]
 8001fee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ff0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ff4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ff8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ffa:	4a04      	ldr	r2, [pc, #16]	; (800200c <__NVIC_SetPriorityGrouping+0x44>)
 8001ffc:	68bb      	ldr	r3, [r7, #8]
 8001ffe:	60d3      	str	r3, [r2, #12]
}
 8002000:	bf00      	nop
 8002002:	3714      	adds	r7, #20
 8002004:	46bd      	mov	sp, r7
 8002006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200a:	4770      	bx	lr
 800200c:	e000ed00 	.word	0xe000ed00

08002010 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002010:	b480      	push	{r7}
 8002012:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002014:	4b04      	ldr	r3, [pc, #16]	; (8002028 <__NVIC_GetPriorityGrouping+0x18>)
 8002016:	68db      	ldr	r3, [r3, #12]
 8002018:	0a1b      	lsrs	r3, r3, #8
 800201a:	f003 0307 	and.w	r3, r3, #7
}
 800201e:	4618      	mov	r0, r3
 8002020:	46bd      	mov	sp, r7
 8002022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002026:	4770      	bx	lr
 8002028:	e000ed00 	.word	0xe000ed00

0800202c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800202c:	b480      	push	{r7}
 800202e:	b083      	sub	sp, #12
 8002030:	af00      	add	r7, sp, #0
 8002032:	4603      	mov	r3, r0
 8002034:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002036:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800203a:	2b00      	cmp	r3, #0
 800203c:	db0b      	blt.n	8002056 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800203e:	79fb      	ldrb	r3, [r7, #7]
 8002040:	f003 021f 	and.w	r2, r3, #31
 8002044:	4907      	ldr	r1, [pc, #28]	; (8002064 <__NVIC_EnableIRQ+0x38>)
 8002046:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800204a:	095b      	lsrs	r3, r3, #5
 800204c:	2001      	movs	r0, #1
 800204e:	fa00 f202 	lsl.w	r2, r0, r2
 8002052:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002056:	bf00      	nop
 8002058:	370c      	adds	r7, #12
 800205a:	46bd      	mov	sp, r7
 800205c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002060:	4770      	bx	lr
 8002062:	bf00      	nop
 8002064:	e000e100 	.word	0xe000e100

08002068 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002068:	b480      	push	{r7}
 800206a:	b083      	sub	sp, #12
 800206c:	af00      	add	r7, sp, #0
 800206e:	4603      	mov	r3, r0
 8002070:	6039      	str	r1, [r7, #0]
 8002072:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002074:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002078:	2b00      	cmp	r3, #0
 800207a:	db0a      	blt.n	8002092 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	b2da      	uxtb	r2, r3
 8002080:	490c      	ldr	r1, [pc, #48]	; (80020b4 <__NVIC_SetPriority+0x4c>)
 8002082:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002086:	0112      	lsls	r2, r2, #4
 8002088:	b2d2      	uxtb	r2, r2
 800208a:	440b      	add	r3, r1
 800208c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002090:	e00a      	b.n	80020a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	b2da      	uxtb	r2, r3
 8002096:	4908      	ldr	r1, [pc, #32]	; (80020b8 <__NVIC_SetPriority+0x50>)
 8002098:	79fb      	ldrb	r3, [r7, #7]
 800209a:	f003 030f 	and.w	r3, r3, #15
 800209e:	3b04      	subs	r3, #4
 80020a0:	0112      	lsls	r2, r2, #4
 80020a2:	b2d2      	uxtb	r2, r2
 80020a4:	440b      	add	r3, r1
 80020a6:	761a      	strb	r2, [r3, #24]
}
 80020a8:	bf00      	nop
 80020aa:	370c      	adds	r7, #12
 80020ac:	46bd      	mov	sp, r7
 80020ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b2:	4770      	bx	lr
 80020b4:	e000e100 	.word	0xe000e100
 80020b8:	e000ed00 	.word	0xe000ed00

080020bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020bc:	b480      	push	{r7}
 80020be:	b089      	sub	sp, #36	; 0x24
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	60f8      	str	r0, [r7, #12]
 80020c4:	60b9      	str	r1, [r7, #8]
 80020c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	f003 0307 	and.w	r3, r3, #7
 80020ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020d0:	69fb      	ldr	r3, [r7, #28]
 80020d2:	f1c3 0307 	rsb	r3, r3, #7
 80020d6:	2b04      	cmp	r3, #4
 80020d8:	bf28      	it	cs
 80020da:	2304      	movcs	r3, #4
 80020dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020de:	69fb      	ldr	r3, [r7, #28]
 80020e0:	3304      	adds	r3, #4
 80020e2:	2b06      	cmp	r3, #6
 80020e4:	d902      	bls.n	80020ec <NVIC_EncodePriority+0x30>
 80020e6:	69fb      	ldr	r3, [r7, #28]
 80020e8:	3b03      	subs	r3, #3
 80020ea:	e000      	b.n	80020ee <NVIC_EncodePriority+0x32>
 80020ec:	2300      	movs	r3, #0
 80020ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020f0:	f04f 32ff 	mov.w	r2, #4294967295
 80020f4:	69bb      	ldr	r3, [r7, #24]
 80020f6:	fa02 f303 	lsl.w	r3, r2, r3
 80020fa:	43da      	mvns	r2, r3
 80020fc:	68bb      	ldr	r3, [r7, #8]
 80020fe:	401a      	ands	r2, r3
 8002100:	697b      	ldr	r3, [r7, #20]
 8002102:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002104:	f04f 31ff 	mov.w	r1, #4294967295
 8002108:	697b      	ldr	r3, [r7, #20]
 800210a:	fa01 f303 	lsl.w	r3, r1, r3
 800210e:	43d9      	mvns	r1, r3
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002114:	4313      	orrs	r3, r2
         );
}
 8002116:	4618      	mov	r0, r3
 8002118:	3724      	adds	r7, #36	; 0x24
 800211a:	46bd      	mov	sp, r7
 800211c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002120:	4770      	bx	lr
	...

08002124 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b082      	sub	sp, #8
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	3b01      	subs	r3, #1
 8002130:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002134:	d301      	bcc.n	800213a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002136:	2301      	movs	r3, #1
 8002138:	e00f      	b.n	800215a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800213a:	4a0a      	ldr	r2, [pc, #40]	; (8002164 <SysTick_Config+0x40>)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	3b01      	subs	r3, #1
 8002140:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002142:	210f      	movs	r1, #15
 8002144:	f04f 30ff 	mov.w	r0, #4294967295
 8002148:	f7ff ff8e 	bl	8002068 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800214c:	4b05      	ldr	r3, [pc, #20]	; (8002164 <SysTick_Config+0x40>)
 800214e:	2200      	movs	r2, #0
 8002150:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002152:	4b04      	ldr	r3, [pc, #16]	; (8002164 <SysTick_Config+0x40>)
 8002154:	2207      	movs	r2, #7
 8002156:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002158:	2300      	movs	r3, #0
}
 800215a:	4618      	mov	r0, r3
 800215c:	3708      	adds	r7, #8
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}
 8002162:	bf00      	nop
 8002164:	e000e010 	.word	0xe000e010

08002168 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b082      	sub	sp, #8
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002170:	6878      	ldr	r0, [r7, #4]
 8002172:	f7ff ff29 	bl	8001fc8 <__NVIC_SetPriorityGrouping>
}
 8002176:	bf00      	nop
 8002178:	3708      	adds	r7, #8
 800217a:	46bd      	mov	sp, r7
 800217c:	bd80      	pop	{r7, pc}

0800217e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800217e:	b580      	push	{r7, lr}
 8002180:	b086      	sub	sp, #24
 8002182:	af00      	add	r7, sp, #0
 8002184:	4603      	mov	r3, r0
 8002186:	60b9      	str	r1, [r7, #8]
 8002188:	607a      	str	r2, [r7, #4]
 800218a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800218c:	2300      	movs	r3, #0
 800218e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002190:	f7ff ff3e 	bl	8002010 <__NVIC_GetPriorityGrouping>
 8002194:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002196:	687a      	ldr	r2, [r7, #4]
 8002198:	68b9      	ldr	r1, [r7, #8]
 800219a:	6978      	ldr	r0, [r7, #20]
 800219c:	f7ff ff8e 	bl	80020bc <NVIC_EncodePriority>
 80021a0:	4602      	mov	r2, r0
 80021a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021a6:	4611      	mov	r1, r2
 80021a8:	4618      	mov	r0, r3
 80021aa:	f7ff ff5d 	bl	8002068 <__NVIC_SetPriority>
}
 80021ae:	bf00      	nop
 80021b0:	3718      	adds	r7, #24
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}

080021b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021b6:	b580      	push	{r7, lr}
 80021b8:	b082      	sub	sp, #8
 80021ba:	af00      	add	r7, sp, #0
 80021bc:	4603      	mov	r3, r0
 80021be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80021c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021c4:	4618      	mov	r0, r3
 80021c6:	f7ff ff31 	bl	800202c <__NVIC_EnableIRQ>
}
 80021ca:	bf00      	nop
 80021cc:	3708      	adds	r7, #8
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}

080021d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80021d2:	b580      	push	{r7, lr}
 80021d4:	b082      	sub	sp, #8
 80021d6:	af00      	add	r7, sp, #0
 80021d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80021da:	6878      	ldr	r0, [r7, #4]
 80021dc:	f7ff ffa2 	bl	8002124 <SysTick_Config>
 80021e0:	4603      	mov	r3, r0
}
 80021e2:	4618      	mov	r0, r3
 80021e4:	3708      	adds	r7, #8
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd80      	pop	{r7, pc}

080021ea <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80021ea:	b480      	push	{r7}
 80021ec:	b085      	sub	sp, #20
 80021ee:	af00      	add	r7, sp, #0
 80021f0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80021f2:	2300      	movs	r3, #0
 80021f4:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80021fc:	b2db      	uxtb	r3, r3
 80021fe:	2b02      	cmp	r3, #2
 8002200:	d008      	beq.n	8002214 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2204      	movs	r2, #4
 8002206:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2200      	movs	r2, #0
 800220c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002210:	2301      	movs	r3, #1
 8002212:	e022      	b.n	800225a <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	681a      	ldr	r2, [r3, #0]
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f022 020e 	bic.w	r2, r2, #14
 8002222:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	681a      	ldr	r2, [r3, #0]
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f022 0201 	bic.w	r2, r2, #1
 8002232:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002238:	f003 021c 	and.w	r2, r3, #28
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002240:	2101      	movs	r1, #1
 8002242:	fa01 f202 	lsl.w	r2, r1, r2
 8002246:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2201      	movs	r2, #1
 800224c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2200      	movs	r2, #0
 8002254:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8002258:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800225a:	4618      	mov	r0, r3
 800225c:	3714      	adds	r7, #20
 800225e:	46bd      	mov	sp, r7
 8002260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002264:	4770      	bx	lr

08002266 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002266:	b580      	push	{r7, lr}
 8002268:	b084      	sub	sp, #16
 800226a:	af00      	add	r7, sp, #0
 800226c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800226e:	2300      	movs	r3, #0
 8002270:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002278:	b2db      	uxtb	r3, r3
 800227a:	2b02      	cmp	r3, #2
 800227c:	d005      	beq.n	800228a <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2204      	movs	r2, #4
 8002282:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002284:	2301      	movs	r3, #1
 8002286:	73fb      	strb	r3, [r7, #15]
 8002288:	e029      	b.n	80022de <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	681a      	ldr	r2, [r3, #0]
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f022 020e 	bic.w	r2, r2, #14
 8002298:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	681a      	ldr	r2, [r3, #0]
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f022 0201 	bic.w	r2, r2, #1
 80022a8:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022ae:	f003 021c 	and.w	r2, r3, #28
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022b6:	2101      	movs	r1, #1
 80022b8:	fa01 f202 	lsl.w	r2, r1, r2
 80022bc:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2201      	movs	r2, #1
 80022c2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2200      	movs	r2, #0
 80022ca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d003      	beq.n	80022de <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022da:	6878      	ldr	r0, [r7, #4]
 80022dc:	4798      	blx	r3
    }
  }
  return status;
 80022de:	7bfb      	ldrb	r3, [r7, #15]
}
 80022e0:	4618      	mov	r0, r3
 80022e2:	3710      	adds	r7, #16
 80022e4:	46bd      	mov	sp, r7
 80022e6:	bd80      	pop	{r7, pc}

080022e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022e8:	b480      	push	{r7}
 80022ea:	b087      	sub	sp, #28
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
 80022f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80022f2:	2300      	movs	r3, #0
 80022f4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022f6:	e154      	b.n	80025a2 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	681a      	ldr	r2, [r3, #0]
 80022fc:	2101      	movs	r1, #1
 80022fe:	697b      	ldr	r3, [r7, #20]
 8002300:	fa01 f303 	lsl.w	r3, r1, r3
 8002304:	4013      	ands	r3, r2
 8002306:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	2b00      	cmp	r3, #0
 800230c:	f000 8146 	beq.w	800259c <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	f003 0303 	and.w	r3, r3, #3
 8002318:	2b01      	cmp	r3, #1
 800231a:	d005      	beq.n	8002328 <HAL_GPIO_Init+0x40>
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	f003 0303 	and.w	r3, r3, #3
 8002324:	2b02      	cmp	r3, #2
 8002326:	d130      	bne.n	800238a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	689b      	ldr	r3, [r3, #8]
 800232c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800232e:	697b      	ldr	r3, [r7, #20]
 8002330:	005b      	lsls	r3, r3, #1
 8002332:	2203      	movs	r2, #3
 8002334:	fa02 f303 	lsl.w	r3, r2, r3
 8002338:	43db      	mvns	r3, r3
 800233a:	693a      	ldr	r2, [r7, #16]
 800233c:	4013      	ands	r3, r2
 800233e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	68da      	ldr	r2, [r3, #12]
 8002344:	697b      	ldr	r3, [r7, #20]
 8002346:	005b      	lsls	r3, r3, #1
 8002348:	fa02 f303 	lsl.w	r3, r2, r3
 800234c:	693a      	ldr	r2, [r7, #16]
 800234e:	4313      	orrs	r3, r2
 8002350:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	693a      	ldr	r2, [r7, #16]
 8002356:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800235e:	2201      	movs	r2, #1
 8002360:	697b      	ldr	r3, [r7, #20]
 8002362:	fa02 f303 	lsl.w	r3, r2, r3
 8002366:	43db      	mvns	r3, r3
 8002368:	693a      	ldr	r2, [r7, #16]
 800236a:	4013      	ands	r3, r2
 800236c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	091b      	lsrs	r3, r3, #4
 8002374:	f003 0201 	and.w	r2, r3, #1
 8002378:	697b      	ldr	r3, [r7, #20]
 800237a:	fa02 f303 	lsl.w	r3, r2, r3
 800237e:	693a      	ldr	r2, [r7, #16]
 8002380:	4313      	orrs	r3, r2
 8002382:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	693a      	ldr	r2, [r7, #16]
 8002388:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	f003 0303 	and.w	r3, r3, #3
 8002392:	2b03      	cmp	r3, #3
 8002394:	d017      	beq.n	80023c6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	68db      	ldr	r3, [r3, #12]
 800239a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800239c:	697b      	ldr	r3, [r7, #20]
 800239e:	005b      	lsls	r3, r3, #1
 80023a0:	2203      	movs	r2, #3
 80023a2:	fa02 f303 	lsl.w	r3, r2, r3
 80023a6:	43db      	mvns	r3, r3
 80023a8:	693a      	ldr	r2, [r7, #16]
 80023aa:	4013      	ands	r3, r2
 80023ac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	689a      	ldr	r2, [r3, #8]
 80023b2:	697b      	ldr	r3, [r7, #20]
 80023b4:	005b      	lsls	r3, r3, #1
 80023b6:	fa02 f303 	lsl.w	r3, r2, r3
 80023ba:	693a      	ldr	r2, [r7, #16]
 80023bc:	4313      	orrs	r3, r2
 80023be:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	693a      	ldr	r2, [r7, #16]
 80023c4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	f003 0303 	and.w	r3, r3, #3
 80023ce:	2b02      	cmp	r3, #2
 80023d0:	d123      	bne.n	800241a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80023d2:	697b      	ldr	r3, [r7, #20]
 80023d4:	08da      	lsrs	r2, r3, #3
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	3208      	adds	r2, #8
 80023da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023de:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80023e0:	697b      	ldr	r3, [r7, #20]
 80023e2:	f003 0307 	and.w	r3, r3, #7
 80023e6:	009b      	lsls	r3, r3, #2
 80023e8:	220f      	movs	r2, #15
 80023ea:	fa02 f303 	lsl.w	r3, r2, r3
 80023ee:	43db      	mvns	r3, r3
 80023f0:	693a      	ldr	r2, [r7, #16]
 80023f2:	4013      	ands	r3, r2
 80023f4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	691a      	ldr	r2, [r3, #16]
 80023fa:	697b      	ldr	r3, [r7, #20]
 80023fc:	f003 0307 	and.w	r3, r3, #7
 8002400:	009b      	lsls	r3, r3, #2
 8002402:	fa02 f303 	lsl.w	r3, r2, r3
 8002406:	693a      	ldr	r2, [r7, #16]
 8002408:	4313      	orrs	r3, r2
 800240a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800240c:	697b      	ldr	r3, [r7, #20]
 800240e:	08da      	lsrs	r2, r3, #3
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	3208      	adds	r2, #8
 8002414:	6939      	ldr	r1, [r7, #16]
 8002416:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002420:	697b      	ldr	r3, [r7, #20]
 8002422:	005b      	lsls	r3, r3, #1
 8002424:	2203      	movs	r2, #3
 8002426:	fa02 f303 	lsl.w	r3, r2, r3
 800242a:	43db      	mvns	r3, r3
 800242c:	693a      	ldr	r2, [r7, #16]
 800242e:	4013      	ands	r3, r2
 8002430:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	f003 0203 	and.w	r2, r3, #3
 800243a:	697b      	ldr	r3, [r7, #20]
 800243c:	005b      	lsls	r3, r3, #1
 800243e:	fa02 f303 	lsl.w	r3, r2, r3
 8002442:	693a      	ldr	r2, [r7, #16]
 8002444:	4313      	orrs	r3, r2
 8002446:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	693a      	ldr	r2, [r7, #16]
 800244c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002456:	2b00      	cmp	r3, #0
 8002458:	f000 80a0 	beq.w	800259c <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800245c:	4b58      	ldr	r3, [pc, #352]	; (80025c0 <HAL_GPIO_Init+0x2d8>)
 800245e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002460:	4a57      	ldr	r2, [pc, #348]	; (80025c0 <HAL_GPIO_Init+0x2d8>)
 8002462:	f043 0301 	orr.w	r3, r3, #1
 8002466:	6613      	str	r3, [r2, #96]	; 0x60
 8002468:	4b55      	ldr	r3, [pc, #340]	; (80025c0 <HAL_GPIO_Init+0x2d8>)
 800246a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800246c:	f003 0301 	and.w	r3, r3, #1
 8002470:	60bb      	str	r3, [r7, #8]
 8002472:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002474:	4a53      	ldr	r2, [pc, #332]	; (80025c4 <HAL_GPIO_Init+0x2dc>)
 8002476:	697b      	ldr	r3, [r7, #20]
 8002478:	089b      	lsrs	r3, r3, #2
 800247a:	3302      	adds	r3, #2
 800247c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002480:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002482:	697b      	ldr	r3, [r7, #20]
 8002484:	f003 0303 	and.w	r3, r3, #3
 8002488:	009b      	lsls	r3, r3, #2
 800248a:	220f      	movs	r2, #15
 800248c:	fa02 f303 	lsl.w	r3, r2, r3
 8002490:	43db      	mvns	r3, r3
 8002492:	693a      	ldr	r2, [r7, #16]
 8002494:	4013      	ands	r3, r2
 8002496:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800249e:	d019      	beq.n	80024d4 <HAL_GPIO_Init+0x1ec>
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	4a49      	ldr	r2, [pc, #292]	; (80025c8 <HAL_GPIO_Init+0x2e0>)
 80024a4:	4293      	cmp	r3, r2
 80024a6:	d013      	beq.n	80024d0 <HAL_GPIO_Init+0x1e8>
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	4a48      	ldr	r2, [pc, #288]	; (80025cc <HAL_GPIO_Init+0x2e4>)
 80024ac:	4293      	cmp	r3, r2
 80024ae:	d00d      	beq.n	80024cc <HAL_GPIO_Init+0x1e4>
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	4a47      	ldr	r2, [pc, #284]	; (80025d0 <HAL_GPIO_Init+0x2e8>)
 80024b4:	4293      	cmp	r3, r2
 80024b6:	d007      	beq.n	80024c8 <HAL_GPIO_Init+0x1e0>
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	4a46      	ldr	r2, [pc, #280]	; (80025d4 <HAL_GPIO_Init+0x2ec>)
 80024bc:	4293      	cmp	r3, r2
 80024be:	d101      	bne.n	80024c4 <HAL_GPIO_Init+0x1dc>
 80024c0:	2304      	movs	r3, #4
 80024c2:	e008      	b.n	80024d6 <HAL_GPIO_Init+0x1ee>
 80024c4:	2307      	movs	r3, #7
 80024c6:	e006      	b.n	80024d6 <HAL_GPIO_Init+0x1ee>
 80024c8:	2303      	movs	r3, #3
 80024ca:	e004      	b.n	80024d6 <HAL_GPIO_Init+0x1ee>
 80024cc:	2302      	movs	r3, #2
 80024ce:	e002      	b.n	80024d6 <HAL_GPIO_Init+0x1ee>
 80024d0:	2301      	movs	r3, #1
 80024d2:	e000      	b.n	80024d6 <HAL_GPIO_Init+0x1ee>
 80024d4:	2300      	movs	r3, #0
 80024d6:	697a      	ldr	r2, [r7, #20]
 80024d8:	f002 0203 	and.w	r2, r2, #3
 80024dc:	0092      	lsls	r2, r2, #2
 80024de:	4093      	lsls	r3, r2
 80024e0:	693a      	ldr	r2, [r7, #16]
 80024e2:	4313      	orrs	r3, r2
 80024e4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80024e6:	4937      	ldr	r1, [pc, #220]	; (80025c4 <HAL_GPIO_Init+0x2dc>)
 80024e8:	697b      	ldr	r3, [r7, #20]
 80024ea:	089b      	lsrs	r3, r3, #2
 80024ec:	3302      	adds	r3, #2
 80024ee:	693a      	ldr	r2, [r7, #16]
 80024f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80024f4:	4b38      	ldr	r3, [pc, #224]	; (80025d8 <HAL_GPIO_Init+0x2f0>)
 80024f6:	689b      	ldr	r3, [r3, #8]
 80024f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	43db      	mvns	r3, r3
 80024fe:	693a      	ldr	r2, [r7, #16]
 8002500:	4013      	ands	r3, r2
 8002502:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800250c:	2b00      	cmp	r3, #0
 800250e:	d003      	beq.n	8002518 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8002510:	693a      	ldr	r2, [r7, #16]
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	4313      	orrs	r3, r2
 8002516:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002518:	4a2f      	ldr	r2, [pc, #188]	; (80025d8 <HAL_GPIO_Init+0x2f0>)
 800251a:	693b      	ldr	r3, [r7, #16]
 800251c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800251e:	4b2e      	ldr	r3, [pc, #184]	; (80025d8 <HAL_GPIO_Init+0x2f0>)
 8002520:	68db      	ldr	r3, [r3, #12]
 8002522:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	43db      	mvns	r3, r3
 8002528:	693a      	ldr	r2, [r7, #16]
 800252a:	4013      	ands	r3, r2
 800252c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002536:	2b00      	cmp	r3, #0
 8002538:	d003      	beq.n	8002542 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 800253a:	693a      	ldr	r2, [r7, #16]
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	4313      	orrs	r3, r2
 8002540:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002542:	4a25      	ldr	r2, [pc, #148]	; (80025d8 <HAL_GPIO_Init+0x2f0>)
 8002544:	693b      	ldr	r3, [r7, #16]
 8002546:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002548:	4b23      	ldr	r3, [pc, #140]	; (80025d8 <HAL_GPIO_Init+0x2f0>)
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	43db      	mvns	r3, r3
 8002552:	693a      	ldr	r2, [r7, #16]
 8002554:	4013      	ands	r3, r2
 8002556:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002560:	2b00      	cmp	r3, #0
 8002562:	d003      	beq.n	800256c <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8002564:	693a      	ldr	r2, [r7, #16]
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	4313      	orrs	r3, r2
 800256a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800256c:	4a1a      	ldr	r2, [pc, #104]	; (80025d8 <HAL_GPIO_Init+0x2f0>)
 800256e:	693b      	ldr	r3, [r7, #16]
 8002570:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002572:	4b19      	ldr	r3, [pc, #100]	; (80025d8 <HAL_GPIO_Init+0x2f0>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	43db      	mvns	r3, r3
 800257c:	693a      	ldr	r2, [r7, #16]
 800257e:	4013      	ands	r3, r2
 8002580:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800258a:	2b00      	cmp	r3, #0
 800258c:	d003      	beq.n	8002596 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800258e:	693a      	ldr	r2, [r7, #16]
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	4313      	orrs	r3, r2
 8002594:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002596:	4a10      	ldr	r2, [pc, #64]	; (80025d8 <HAL_GPIO_Init+0x2f0>)
 8002598:	693b      	ldr	r3, [r7, #16]
 800259a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800259c:	697b      	ldr	r3, [r7, #20]
 800259e:	3301      	adds	r3, #1
 80025a0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	681a      	ldr	r2, [r3, #0]
 80025a6:	697b      	ldr	r3, [r7, #20]
 80025a8:	fa22 f303 	lsr.w	r3, r2, r3
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	f47f aea3 	bne.w	80022f8 <HAL_GPIO_Init+0x10>
  }
}
 80025b2:	bf00      	nop
 80025b4:	bf00      	nop
 80025b6:	371c      	adds	r7, #28
 80025b8:	46bd      	mov	sp, r7
 80025ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025be:	4770      	bx	lr
 80025c0:	40021000 	.word	0x40021000
 80025c4:	40010000 	.word	0x40010000
 80025c8:	48000400 	.word	0x48000400
 80025cc:	48000800 	.word	0x48000800
 80025d0:	48000c00 	.word	0x48000c00
 80025d4:	48001000 	.word	0x48001000
 80025d8:	40010400 	.word	0x40010400

080025dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025dc:	b480      	push	{r7}
 80025de:	b083      	sub	sp, #12
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
 80025e4:	460b      	mov	r3, r1
 80025e6:	807b      	strh	r3, [r7, #2]
 80025e8:	4613      	mov	r3, r2
 80025ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80025ec:	787b      	ldrb	r3, [r7, #1]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d003      	beq.n	80025fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80025f2:	887a      	ldrh	r2, [r7, #2]
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80025f8:	e002      	b.n	8002600 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80025fa:	887a      	ldrh	r2, [r7, #2]
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002600:	bf00      	nop
 8002602:	370c      	adds	r7, #12
 8002604:	46bd      	mov	sp, r7
 8002606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260a:	4770      	bx	lr

0800260c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800260c:	b480      	push	{r7}
 800260e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002610:	4b04      	ldr	r3, [pc, #16]	; (8002624 <HAL_PWREx_GetVoltageRange+0x18>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002618:	4618      	mov	r0, r3
 800261a:	46bd      	mov	sp, r7
 800261c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002620:	4770      	bx	lr
 8002622:	bf00      	nop
 8002624:	40007000 	.word	0x40007000

08002628 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002628:	b480      	push	{r7}
 800262a:	b085      	sub	sp, #20
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002636:	d130      	bne.n	800269a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002638:	4b23      	ldr	r3, [pc, #140]	; (80026c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002640:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002644:	d038      	beq.n	80026b8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002646:	4b20      	ldr	r3, [pc, #128]	; (80026c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800264e:	4a1e      	ldr	r2, [pc, #120]	; (80026c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002650:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002654:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002656:	4b1d      	ldr	r3, [pc, #116]	; (80026cc <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	2232      	movs	r2, #50	; 0x32
 800265c:	fb02 f303 	mul.w	r3, r2, r3
 8002660:	4a1b      	ldr	r2, [pc, #108]	; (80026d0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002662:	fba2 2303 	umull	r2, r3, r2, r3
 8002666:	0c9b      	lsrs	r3, r3, #18
 8002668:	3301      	adds	r3, #1
 800266a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800266c:	e002      	b.n	8002674 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	3b01      	subs	r3, #1
 8002672:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002674:	4b14      	ldr	r3, [pc, #80]	; (80026c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002676:	695b      	ldr	r3, [r3, #20]
 8002678:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800267c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002680:	d102      	bne.n	8002688 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d1f2      	bne.n	800266e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002688:	4b0f      	ldr	r3, [pc, #60]	; (80026c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800268a:	695b      	ldr	r3, [r3, #20]
 800268c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002690:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002694:	d110      	bne.n	80026b8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002696:	2303      	movs	r3, #3
 8002698:	e00f      	b.n	80026ba <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800269a:	4b0b      	ldr	r3, [pc, #44]	; (80026c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80026a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026a6:	d007      	beq.n	80026b8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80026a8:	4b07      	ldr	r3, [pc, #28]	; (80026c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80026b0:	4a05      	ldr	r2, [pc, #20]	; (80026c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80026b2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80026b6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80026b8:	2300      	movs	r3, #0
}
 80026ba:	4618      	mov	r0, r3
 80026bc:	3714      	adds	r7, #20
 80026be:	46bd      	mov	sp, r7
 80026c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c4:	4770      	bx	lr
 80026c6:	bf00      	nop
 80026c8:	40007000 	.word	0x40007000
 80026cc:	20000004 	.word	0x20000004
 80026d0:	431bde83 	.word	0x431bde83

080026d4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b088      	sub	sp, #32
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d102      	bne.n	80026e8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80026e2:	2301      	movs	r3, #1
 80026e4:	f000 bc02 	b.w	8002eec <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80026e8:	4b96      	ldr	r3, [pc, #600]	; (8002944 <HAL_RCC_OscConfig+0x270>)
 80026ea:	689b      	ldr	r3, [r3, #8]
 80026ec:	f003 030c 	and.w	r3, r3, #12
 80026f0:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80026f2:	4b94      	ldr	r3, [pc, #592]	; (8002944 <HAL_RCC_OscConfig+0x270>)
 80026f4:	68db      	ldr	r3, [r3, #12]
 80026f6:	f003 0303 	and.w	r3, r3, #3
 80026fa:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f003 0310 	and.w	r3, r3, #16
 8002704:	2b00      	cmp	r3, #0
 8002706:	f000 80e4 	beq.w	80028d2 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800270a:	69bb      	ldr	r3, [r7, #24]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d007      	beq.n	8002720 <HAL_RCC_OscConfig+0x4c>
 8002710:	69bb      	ldr	r3, [r7, #24]
 8002712:	2b0c      	cmp	r3, #12
 8002714:	f040 808b 	bne.w	800282e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002718:	697b      	ldr	r3, [r7, #20]
 800271a:	2b01      	cmp	r3, #1
 800271c:	f040 8087 	bne.w	800282e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002720:	4b88      	ldr	r3, [pc, #544]	; (8002944 <HAL_RCC_OscConfig+0x270>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f003 0302 	and.w	r3, r3, #2
 8002728:	2b00      	cmp	r3, #0
 800272a:	d005      	beq.n	8002738 <HAL_RCC_OscConfig+0x64>
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	699b      	ldr	r3, [r3, #24]
 8002730:	2b00      	cmp	r3, #0
 8002732:	d101      	bne.n	8002738 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002734:	2301      	movs	r3, #1
 8002736:	e3d9      	b.n	8002eec <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6a1a      	ldr	r2, [r3, #32]
 800273c:	4b81      	ldr	r3, [pc, #516]	; (8002944 <HAL_RCC_OscConfig+0x270>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f003 0308 	and.w	r3, r3, #8
 8002744:	2b00      	cmp	r3, #0
 8002746:	d004      	beq.n	8002752 <HAL_RCC_OscConfig+0x7e>
 8002748:	4b7e      	ldr	r3, [pc, #504]	; (8002944 <HAL_RCC_OscConfig+0x270>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002750:	e005      	b.n	800275e <HAL_RCC_OscConfig+0x8a>
 8002752:	4b7c      	ldr	r3, [pc, #496]	; (8002944 <HAL_RCC_OscConfig+0x270>)
 8002754:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002758:	091b      	lsrs	r3, r3, #4
 800275a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800275e:	4293      	cmp	r3, r2
 8002760:	d223      	bcs.n	80027aa <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6a1b      	ldr	r3, [r3, #32]
 8002766:	4618      	mov	r0, r3
 8002768:	f000 fd8c 	bl	8003284 <RCC_SetFlashLatencyFromMSIRange>
 800276c:	4603      	mov	r3, r0
 800276e:	2b00      	cmp	r3, #0
 8002770:	d001      	beq.n	8002776 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002772:	2301      	movs	r3, #1
 8002774:	e3ba      	b.n	8002eec <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002776:	4b73      	ldr	r3, [pc, #460]	; (8002944 <HAL_RCC_OscConfig+0x270>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4a72      	ldr	r2, [pc, #456]	; (8002944 <HAL_RCC_OscConfig+0x270>)
 800277c:	f043 0308 	orr.w	r3, r3, #8
 8002780:	6013      	str	r3, [r2, #0]
 8002782:	4b70      	ldr	r3, [pc, #448]	; (8002944 <HAL_RCC_OscConfig+0x270>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6a1b      	ldr	r3, [r3, #32]
 800278e:	496d      	ldr	r1, [pc, #436]	; (8002944 <HAL_RCC_OscConfig+0x270>)
 8002790:	4313      	orrs	r3, r2
 8002792:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002794:	4b6b      	ldr	r3, [pc, #428]	; (8002944 <HAL_RCC_OscConfig+0x270>)
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	69db      	ldr	r3, [r3, #28]
 80027a0:	021b      	lsls	r3, r3, #8
 80027a2:	4968      	ldr	r1, [pc, #416]	; (8002944 <HAL_RCC_OscConfig+0x270>)
 80027a4:	4313      	orrs	r3, r2
 80027a6:	604b      	str	r3, [r1, #4]
 80027a8:	e025      	b.n	80027f6 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80027aa:	4b66      	ldr	r3, [pc, #408]	; (8002944 <HAL_RCC_OscConfig+0x270>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4a65      	ldr	r2, [pc, #404]	; (8002944 <HAL_RCC_OscConfig+0x270>)
 80027b0:	f043 0308 	orr.w	r3, r3, #8
 80027b4:	6013      	str	r3, [r2, #0]
 80027b6:	4b63      	ldr	r3, [pc, #396]	; (8002944 <HAL_RCC_OscConfig+0x270>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6a1b      	ldr	r3, [r3, #32]
 80027c2:	4960      	ldr	r1, [pc, #384]	; (8002944 <HAL_RCC_OscConfig+0x270>)
 80027c4:	4313      	orrs	r3, r2
 80027c6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80027c8:	4b5e      	ldr	r3, [pc, #376]	; (8002944 <HAL_RCC_OscConfig+0x270>)
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	69db      	ldr	r3, [r3, #28]
 80027d4:	021b      	lsls	r3, r3, #8
 80027d6:	495b      	ldr	r1, [pc, #364]	; (8002944 <HAL_RCC_OscConfig+0x270>)
 80027d8:	4313      	orrs	r3, r2
 80027da:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80027dc:	69bb      	ldr	r3, [r7, #24]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d109      	bne.n	80027f6 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6a1b      	ldr	r3, [r3, #32]
 80027e6:	4618      	mov	r0, r3
 80027e8:	f000 fd4c 	bl	8003284 <RCC_SetFlashLatencyFromMSIRange>
 80027ec:	4603      	mov	r3, r0
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d001      	beq.n	80027f6 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80027f2:	2301      	movs	r3, #1
 80027f4:	e37a      	b.n	8002eec <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80027f6:	f000 fc81 	bl	80030fc <HAL_RCC_GetSysClockFreq>
 80027fa:	4602      	mov	r2, r0
 80027fc:	4b51      	ldr	r3, [pc, #324]	; (8002944 <HAL_RCC_OscConfig+0x270>)
 80027fe:	689b      	ldr	r3, [r3, #8]
 8002800:	091b      	lsrs	r3, r3, #4
 8002802:	f003 030f 	and.w	r3, r3, #15
 8002806:	4950      	ldr	r1, [pc, #320]	; (8002948 <HAL_RCC_OscConfig+0x274>)
 8002808:	5ccb      	ldrb	r3, [r1, r3]
 800280a:	f003 031f 	and.w	r3, r3, #31
 800280e:	fa22 f303 	lsr.w	r3, r2, r3
 8002812:	4a4e      	ldr	r2, [pc, #312]	; (800294c <HAL_RCC_OscConfig+0x278>)
 8002814:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002816:	4b4e      	ldr	r3, [pc, #312]	; (8002950 <HAL_RCC_OscConfig+0x27c>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	4618      	mov	r0, r3
 800281c:	f7fe fc90 	bl	8001140 <HAL_InitTick>
 8002820:	4603      	mov	r3, r0
 8002822:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002824:	7bfb      	ldrb	r3, [r7, #15]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d052      	beq.n	80028d0 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800282a:	7bfb      	ldrb	r3, [r7, #15]
 800282c:	e35e      	b.n	8002eec <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	699b      	ldr	r3, [r3, #24]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d032      	beq.n	800289c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002836:	4b43      	ldr	r3, [pc, #268]	; (8002944 <HAL_RCC_OscConfig+0x270>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4a42      	ldr	r2, [pc, #264]	; (8002944 <HAL_RCC_OscConfig+0x270>)
 800283c:	f043 0301 	orr.w	r3, r3, #1
 8002840:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002842:	f7fe fccd 	bl	80011e0 <HAL_GetTick>
 8002846:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002848:	e008      	b.n	800285c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800284a:	f7fe fcc9 	bl	80011e0 <HAL_GetTick>
 800284e:	4602      	mov	r2, r0
 8002850:	693b      	ldr	r3, [r7, #16]
 8002852:	1ad3      	subs	r3, r2, r3
 8002854:	2b02      	cmp	r3, #2
 8002856:	d901      	bls.n	800285c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002858:	2303      	movs	r3, #3
 800285a:	e347      	b.n	8002eec <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800285c:	4b39      	ldr	r3, [pc, #228]	; (8002944 <HAL_RCC_OscConfig+0x270>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f003 0302 	and.w	r3, r3, #2
 8002864:	2b00      	cmp	r3, #0
 8002866:	d0f0      	beq.n	800284a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002868:	4b36      	ldr	r3, [pc, #216]	; (8002944 <HAL_RCC_OscConfig+0x270>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a35      	ldr	r2, [pc, #212]	; (8002944 <HAL_RCC_OscConfig+0x270>)
 800286e:	f043 0308 	orr.w	r3, r3, #8
 8002872:	6013      	str	r3, [r2, #0]
 8002874:	4b33      	ldr	r3, [pc, #204]	; (8002944 <HAL_RCC_OscConfig+0x270>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6a1b      	ldr	r3, [r3, #32]
 8002880:	4930      	ldr	r1, [pc, #192]	; (8002944 <HAL_RCC_OscConfig+0x270>)
 8002882:	4313      	orrs	r3, r2
 8002884:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002886:	4b2f      	ldr	r3, [pc, #188]	; (8002944 <HAL_RCC_OscConfig+0x270>)
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	69db      	ldr	r3, [r3, #28]
 8002892:	021b      	lsls	r3, r3, #8
 8002894:	492b      	ldr	r1, [pc, #172]	; (8002944 <HAL_RCC_OscConfig+0x270>)
 8002896:	4313      	orrs	r3, r2
 8002898:	604b      	str	r3, [r1, #4]
 800289a:	e01a      	b.n	80028d2 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800289c:	4b29      	ldr	r3, [pc, #164]	; (8002944 <HAL_RCC_OscConfig+0x270>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	4a28      	ldr	r2, [pc, #160]	; (8002944 <HAL_RCC_OscConfig+0x270>)
 80028a2:	f023 0301 	bic.w	r3, r3, #1
 80028a6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80028a8:	f7fe fc9a 	bl	80011e0 <HAL_GetTick>
 80028ac:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80028ae:	e008      	b.n	80028c2 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80028b0:	f7fe fc96 	bl	80011e0 <HAL_GetTick>
 80028b4:	4602      	mov	r2, r0
 80028b6:	693b      	ldr	r3, [r7, #16]
 80028b8:	1ad3      	subs	r3, r2, r3
 80028ba:	2b02      	cmp	r3, #2
 80028bc:	d901      	bls.n	80028c2 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80028be:	2303      	movs	r3, #3
 80028c0:	e314      	b.n	8002eec <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80028c2:	4b20      	ldr	r3, [pc, #128]	; (8002944 <HAL_RCC_OscConfig+0x270>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f003 0302 	and.w	r3, r3, #2
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d1f0      	bne.n	80028b0 <HAL_RCC_OscConfig+0x1dc>
 80028ce:	e000      	b.n	80028d2 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80028d0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f003 0301 	and.w	r3, r3, #1
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d073      	beq.n	80029c6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80028de:	69bb      	ldr	r3, [r7, #24]
 80028e0:	2b08      	cmp	r3, #8
 80028e2:	d005      	beq.n	80028f0 <HAL_RCC_OscConfig+0x21c>
 80028e4:	69bb      	ldr	r3, [r7, #24]
 80028e6:	2b0c      	cmp	r3, #12
 80028e8:	d10e      	bne.n	8002908 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80028ea:	697b      	ldr	r3, [r7, #20]
 80028ec:	2b03      	cmp	r3, #3
 80028ee:	d10b      	bne.n	8002908 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028f0:	4b14      	ldr	r3, [pc, #80]	; (8002944 <HAL_RCC_OscConfig+0x270>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d063      	beq.n	80029c4 <HAL_RCC_OscConfig+0x2f0>
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d15f      	bne.n	80029c4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002904:	2301      	movs	r3, #1
 8002906:	e2f1      	b.n	8002eec <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	685b      	ldr	r3, [r3, #4]
 800290c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002910:	d106      	bne.n	8002920 <HAL_RCC_OscConfig+0x24c>
 8002912:	4b0c      	ldr	r3, [pc, #48]	; (8002944 <HAL_RCC_OscConfig+0x270>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4a0b      	ldr	r2, [pc, #44]	; (8002944 <HAL_RCC_OscConfig+0x270>)
 8002918:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800291c:	6013      	str	r3, [r2, #0]
 800291e:	e025      	b.n	800296c <HAL_RCC_OscConfig+0x298>
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	685b      	ldr	r3, [r3, #4]
 8002924:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002928:	d114      	bne.n	8002954 <HAL_RCC_OscConfig+0x280>
 800292a:	4b06      	ldr	r3, [pc, #24]	; (8002944 <HAL_RCC_OscConfig+0x270>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	4a05      	ldr	r2, [pc, #20]	; (8002944 <HAL_RCC_OscConfig+0x270>)
 8002930:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002934:	6013      	str	r3, [r2, #0]
 8002936:	4b03      	ldr	r3, [pc, #12]	; (8002944 <HAL_RCC_OscConfig+0x270>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	4a02      	ldr	r2, [pc, #8]	; (8002944 <HAL_RCC_OscConfig+0x270>)
 800293c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002940:	6013      	str	r3, [r2, #0]
 8002942:	e013      	b.n	800296c <HAL_RCC_OscConfig+0x298>
 8002944:	40021000 	.word	0x40021000
 8002948:	08006254 	.word	0x08006254
 800294c:	20000004 	.word	0x20000004
 8002950:	20000008 	.word	0x20000008
 8002954:	4ba0      	ldr	r3, [pc, #640]	; (8002bd8 <HAL_RCC_OscConfig+0x504>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4a9f      	ldr	r2, [pc, #636]	; (8002bd8 <HAL_RCC_OscConfig+0x504>)
 800295a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800295e:	6013      	str	r3, [r2, #0]
 8002960:	4b9d      	ldr	r3, [pc, #628]	; (8002bd8 <HAL_RCC_OscConfig+0x504>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4a9c      	ldr	r2, [pc, #624]	; (8002bd8 <HAL_RCC_OscConfig+0x504>)
 8002966:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800296a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d013      	beq.n	800299c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002974:	f7fe fc34 	bl	80011e0 <HAL_GetTick>
 8002978:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800297a:	e008      	b.n	800298e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800297c:	f7fe fc30 	bl	80011e0 <HAL_GetTick>
 8002980:	4602      	mov	r2, r0
 8002982:	693b      	ldr	r3, [r7, #16]
 8002984:	1ad3      	subs	r3, r2, r3
 8002986:	2b64      	cmp	r3, #100	; 0x64
 8002988:	d901      	bls.n	800298e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800298a:	2303      	movs	r3, #3
 800298c:	e2ae      	b.n	8002eec <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800298e:	4b92      	ldr	r3, [pc, #584]	; (8002bd8 <HAL_RCC_OscConfig+0x504>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002996:	2b00      	cmp	r3, #0
 8002998:	d0f0      	beq.n	800297c <HAL_RCC_OscConfig+0x2a8>
 800299a:	e014      	b.n	80029c6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800299c:	f7fe fc20 	bl	80011e0 <HAL_GetTick>
 80029a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80029a2:	e008      	b.n	80029b6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029a4:	f7fe fc1c 	bl	80011e0 <HAL_GetTick>
 80029a8:	4602      	mov	r2, r0
 80029aa:	693b      	ldr	r3, [r7, #16]
 80029ac:	1ad3      	subs	r3, r2, r3
 80029ae:	2b64      	cmp	r3, #100	; 0x64
 80029b0:	d901      	bls.n	80029b6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80029b2:	2303      	movs	r3, #3
 80029b4:	e29a      	b.n	8002eec <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80029b6:	4b88      	ldr	r3, [pc, #544]	; (8002bd8 <HAL_RCC_OscConfig+0x504>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d1f0      	bne.n	80029a4 <HAL_RCC_OscConfig+0x2d0>
 80029c2:	e000      	b.n	80029c6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f003 0302 	and.w	r3, r3, #2
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d060      	beq.n	8002a94 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80029d2:	69bb      	ldr	r3, [r7, #24]
 80029d4:	2b04      	cmp	r3, #4
 80029d6:	d005      	beq.n	80029e4 <HAL_RCC_OscConfig+0x310>
 80029d8:	69bb      	ldr	r3, [r7, #24]
 80029da:	2b0c      	cmp	r3, #12
 80029dc:	d119      	bne.n	8002a12 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80029de:	697b      	ldr	r3, [r7, #20]
 80029e0:	2b02      	cmp	r3, #2
 80029e2:	d116      	bne.n	8002a12 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80029e4:	4b7c      	ldr	r3, [pc, #496]	; (8002bd8 <HAL_RCC_OscConfig+0x504>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d005      	beq.n	80029fc <HAL_RCC_OscConfig+0x328>
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	68db      	ldr	r3, [r3, #12]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d101      	bne.n	80029fc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80029f8:	2301      	movs	r3, #1
 80029fa:	e277      	b.n	8002eec <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029fc:	4b76      	ldr	r3, [pc, #472]	; (8002bd8 <HAL_RCC_OscConfig+0x504>)
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	691b      	ldr	r3, [r3, #16]
 8002a08:	061b      	lsls	r3, r3, #24
 8002a0a:	4973      	ldr	r1, [pc, #460]	; (8002bd8 <HAL_RCC_OscConfig+0x504>)
 8002a0c:	4313      	orrs	r3, r2
 8002a0e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002a10:	e040      	b.n	8002a94 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	68db      	ldr	r3, [r3, #12]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d023      	beq.n	8002a62 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a1a:	4b6f      	ldr	r3, [pc, #444]	; (8002bd8 <HAL_RCC_OscConfig+0x504>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4a6e      	ldr	r2, [pc, #440]	; (8002bd8 <HAL_RCC_OscConfig+0x504>)
 8002a20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a24:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a26:	f7fe fbdb 	bl	80011e0 <HAL_GetTick>
 8002a2a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a2c:	e008      	b.n	8002a40 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a2e:	f7fe fbd7 	bl	80011e0 <HAL_GetTick>
 8002a32:	4602      	mov	r2, r0
 8002a34:	693b      	ldr	r3, [r7, #16]
 8002a36:	1ad3      	subs	r3, r2, r3
 8002a38:	2b02      	cmp	r3, #2
 8002a3a:	d901      	bls.n	8002a40 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002a3c:	2303      	movs	r3, #3
 8002a3e:	e255      	b.n	8002eec <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a40:	4b65      	ldr	r3, [pc, #404]	; (8002bd8 <HAL_RCC_OscConfig+0x504>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d0f0      	beq.n	8002a2e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a4c:	4b62      	ldr	r3, [pc, #392]	; (8002bd8 <HAL_RCC_OscConfig+0x504>)
 8002a4e:	685b      	ldr	r3, [r3, #4]
 8002a50:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	691b      	ldr	r3, [r3, #16]
 8002a58:	061b      	lsls	r3, r3, #24
 8002a5a:	495f      	ldr	r1, [pc, #380]	; (8002bd8 <HAL_RCC_OscConfig+0x504>)
 8002a5c:	4313      	orrs	r3, r2
 8002a5e:	604b      	str	r3, [r1, #4]
 8002a60:	e018      	b.n	8002a94 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a62:	4b5d      	ldr	r3, [pc, #372]	; (8002bd8 <HAL_RCC_OscConfig+0x504>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4a5c      	ldr	r2, [pc, #368]	; (8002bd8 <HAL_RCC_OscConfig+0x504>)
 8002a68:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002a6c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a6e:	f7fe fbb7 	bl	80011e0 <HAL_GetTick>
 8002a72:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002a74:	e008      	b.n	8002a88 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a76:	f7fe fbb3 	bl	80011e0 <HAL_GetTick>
 8002a7a:	4602      	mov	r2, r0
 8002a7c:	693b      	ldr	r3, [r7, #16]
 8002a7e:	1ad3      	subs	r3, r2, r3
 8002a80:	2b02      	cmp	r3, #2
 8002a82:	d901      	bls.n	8002a88 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002a84:	2303      	movs	r3, #3
 8002a86:	e231      	b.n	8002eec <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002a88:	4b53      	ldr	r3, [pc, #332]	; (8002bd8 <HAL_RCC_OscConfig+0x504>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d1f0      	bne.n	8002a76 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f003 0308 	and.w	r3, r3, #8
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d03c      	beq.n	8002b1a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	695b      	ldr	r3, [r3, #20]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d01c      	beq.n	8002ae2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002aa8:	4b4b      	ldr	r3, [pc, #300]	; (8002bd8 <HAL_RCC_OscConfig+0x504>)
 8002aaa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002aae:	4a4a      	ldr	r2, [pc, #296]	; (8002bd8 <HAL_RCC_OscConfig+0x504>)
 8002ab0:	f043 0301 	orr.w	r3, r3, #1
 8002ab4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ab8:	f7fe fb92 	bl	80011e0 <HAL_GetTick>
 8002abc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002abe:	e008      	b.n	8002ad2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ac0:	f7fe fb8e 	bl	80011e0 <HAL_GetTick>
 8002ac4:	4602      	mov	r2, r0
 8002ac6:	693b      	ldr	r3, [r7, #16]
 8002ac8:	1ad3      	subs	r3, r2, r3
 8002aca:	2b02      	cmp	r3, #2
 8002acc:	d901      	bls.n	8002ad2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002ace:	2303      	movs	r3, #3
 8002ad0:	e20c      	b.n	8002eec <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002ad2:	4b41      	ldr	r3, [pc, #260]	; (8002bd8 <HAL_RCC_OscConfig+0x504>)
 8002ad4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ad8:	f003 0302 	and.w	r3, r3, #2
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d0ef      	beq.n	8002ac0 <HAL_RCC_OscConfig+0x3ec>
 8002ae0:	e01b      	b.n	8002b1a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ae2:	4b3d      	ldr	r3, [pc, #244]	; (8002bd8 <HAL_RCC_OscConfig+0x504>)
 8002ae4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ae8:	4a3b      	ldr	r2, [pc, #236]	; (8002bd8 <HAL_RCC_OscConfig+0x504>)
 8002aea:	f023 0301 	bic.w	r3, r3, #1
 8002aee:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002af2:	f7fe fb75 	bl	80011e0 <HAL_GetTick>
 8002af6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002af8:	e008      	b.n	8002b0c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002afa:	f7fe fb71 	bl	80011e0 <HAL_GetTick>
 8002afe:	4602      	mov	r2, r0
 8002b00:	693b      	ldr	r3, [r7, #16]
 8002b02:	1ad3      	subs	r3, r2, r3
 8002b04:	2b02      	cmp	r3, #2
 8002b06:	d901      	bls.n	8002b0c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002b08:	2303      	movs	r3, #3
 8002b0a:	e1ef      	b.n	8002eec <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002b0c:	4b32      	ldr	r3, [pc, #200]	; (8002bd8 <HAL_RCC_OscConfig+0x504>)
 8002b0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b12:	f003 0302 	and.w	r3, r3, #2
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d1ef      	bne.n	8002afa <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f003 0304 	and.w	r3, r3, #4
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	f000 80a6 	beq.w	8002c74 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b28:	2300      	movs	r3, #0
 8002b2a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002b2c:	4b2a      	ldr	r3, [pc, #168]	; (8002bd8 <HAL_RCC_OscConfig+0x504>)
 8002b2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d10d      	bne.n	8002b54 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b38:	4b27      	ldr	r3, [pc, #156]	; (8002bd8 <HAL_RCC_OscConfig+0x504>)
 8002b3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b3c:	4a26      	ldr	r2, [pc, #152]	; (8002bd8 <HAL_RCC_OscConfig+0x504>)
 8002b3e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b42:	6593      	str	r3, [r2, #88]	; 0x58
 8002b44:	4b24      	ldr	r3, [pc, #144]	; (8002bd8 <HAL_RCC_OscConfig+0x504>)
 8002b46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b4c:	60bb      	str	r3, [r7, #8]
 8002b4e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b50:	2301      	movs	r3, #1
 8002b52:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b54:	4b21      	ldr	r3, [pc, #132]	; (8002bdc <HAL_RCC_OscConfig+0x508>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d118      	bne.n	8002b92 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002b60:	4b1e      	ldr	r3, [pc, #120]	; (8002bdc <HAL_RCC_OscConfig+0x508>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4a1d      	ldr	r2, [pc, #116]	; (8002bdc <HAL_RCC_OscConfig+0x508>)
 8002b66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b6a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b6c:	f7fe fb38 	bl	80011e0 <HAL_GetTick>
 8002b70:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b72:	e008      	b.n	8002b86 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b74:	f7fe fb34 	bl	80011e0 <HAL_GetTick>
 8002b78:	4602      	mov	r2, r0
 8002b7a:	693b      	ldr	r3, [r7, #16]
 8002b7c:	1ad3      	subs	r3, r2, r3
 8002b7e:	2b02      	cmp	r3, #2
 8002b80:	d901      	bls.n	8002b86 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002b82:	2303      	movs	r3, #3
 8002b84:	e1b2      	b.n	8002eec <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b86:	4b15      	ldr	r3, [pc, #84]	; (8002bdc <HAL_RCC_OscConfig+0x508>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d0f0      	beq.n	8002b74 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	689b      	ldr	r3, [r3, #8]
 8002b96:	2b01      	cmp	r3, #1
 8002b98:	d108      	bne.n	8002bac <HAL_RCC_OscConfig+0x4d8>
 8002b9a:	4b0f      	ldr	r3, [pc, #60]	; (8002bd8 <HAL_RCC_OscConfig+0x504>)
 8002b9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ba0:	4a0d      	ldr	r2, [pc, #52]	; (8002bd8 <HAL_RCC_OscConfig+0x504>)
 8002ba2:	f043 0301 	orr.w	r3, r3, #1
 8002ba6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002baa:	e029      	b.n	8002c00 <HAL_RCC_OscConfig+0x52c>
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	689b      	ldr	r3, [r3, #8]
 8002bb0:	2b05      	cmp	r3, #5
 8002bb2:	d115      	bne.n	8002be0 <HAL_RCC_OscConfig+0x50c>
 8002bb4:	4b08      	ldr	r3, [pc, #32]	; (8002bd8 <HAL_RCC_OscConfig+0x504>)
 8002bb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bba:	4a07      	ldr	r2, [pc, #28]	; (8002bd8 <HAL_RCC_OscConfig+0x504>)
 8002bbc:	f043 0304 	orr.w	r3, r3, #4
 8002bc0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002bc4:	4b04      	ldr	r3, [pc, #16]	; (8002bd8 <HAL_RCC_OscConfig+0x504>)
 8002bc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bca:	4a03      	ldr	r2, [pc, #12]	; (8002bd8 <HAL_RCC_OscConfig+0x504>)
 8002bcc:	f043 0301 	orr.w	r3, r3, #1
 8002bd0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002bd4:	e014      	b.n	8002c00 <HAL_RCC_OscConfig+0x52c>
 8002bd6:	bf00      	nop
 8002bd8:	40021000 	.word	0x40021000
 8002bdc:	40007000 	.word	0x40007000
 8002be0:	4b9a      	ldr	r3, [pc, #616]	; (8002e4c <HAL_RCC_OscConfig+0x778>)
 8002be2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002be6:	4a99      	ldr	r2, [pc, #612]	; (8002e4c <HAL_RCC_OscConfig+0x778>)
 8002be8:	f023 0301 	bic.w	r3, r3, #1
 8002bec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002bf0:	4b96      	ldr	r3, [pc, #600]	; (8002e4c <HAL_RCC_OscConfig+0x778>)
 8002bf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bf6:	4a95      	ldr	r2, [pc, #596]	; (8002e4c <HAL_RCC_OscConfig+0x778>)
 8002bf8:	f023 0304 	bic.w	r3, r3, #4
 8002bfc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	689b      	ldr	r3, [r3, #8]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d016      	beq.n	8002c36 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c08:	f7fe faea 	bl	80011e0 <HAL_GetTick>
 8002c0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c0e:	e00a      	b.n	8002c26 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c10:	f7fe fae6 	bl	80011e0 <HAL_GetTick>
 8002c14:	4602      	mov	r2, r0
 8002c16:	693b      	ldr	r3, [r7, #16]
 8002c18:	1ad3      	subs	r3, r2, r3
 8002c1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d901      	bls.n	8002c26 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002c22:	2303      	movs	r3, #3
 8002c24:	e162      	b.n	8002eec <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c26:	4b89      	ldr	r3, [pc, #548]	; (8002e4c <HAL_RCC_OscConfig+0x778>)
 8002c28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c2c:	f003 0302 	and.w	r3, r3, #2
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d0ed      	beq.n	8002c10 <HAL_RCC_OscConfig+0x53c>
 8002c34:	e015      	b.n	8002c62 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c36:	f7fe fad3 	bl	80011e0 <HAL_GetTick>
 8002c3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002c3c:	e00a      	b.n	8002c54 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c3e:	f7fe facf 	bl	80011e0 <HAL_GetTick>
 8002c42:	4602      	mov	r2, r0
 8002c44:	693b      	ldr	r3, [r7, #16]
 8002c46:	1ad3      	subs	r3, r2, r3
 8002c48:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	d901      	bls.n	8002c54 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002c50:	2303      	movs	r3, #3
 8002c52:	e14b      	b.n	8002eec <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002c54:	4b7d      	ldr	r3, [pc, #500]	; (8002e4c <HAL_RCC_OscConfig+0x778>)
 8002c56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c5a:	f003 0302 	and.w	r3, r3, #2
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d1ed      	bne.n	8002c3e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002c62:	7ffb      	ldrb	r3, [r7, #31]
 8002c64:	2b01      	cmp	r3, #1
 8002c66:	d105      	bne.n	8002c74 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c68:	4b78      	ldr	r3, [pc, #480]	; (8002e4c <HAL_RCC_OscConfig+0x778>)
 8002c6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c6c:	4a77      	ldr	r2, [pc, #476]	; (8002e4c <HAL_RCC_OscConfig+0x778>)
 8002c6e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c72:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f003 0320 	and.w	r3, r3, #32
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d03c      	beq.n	8002cfa <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d01c      	beq.n	8002cc2 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002c88:	4b70      	ldr	r3, [pc, #448]	; (8002e4c <HAL_RCC_OscConfig+0x778>)
 8002c8a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002c8e:	4a6f      	ldr	r2, [pc, #444]	; (8002e4c <HAL_RCC_OscConfig+0x778>)
 8002c90:	f043 0301 	orr.w	r3, r3, #1
 8002c94:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c98:	f7fe faa2 	bl	80011e0 <HAL_GetTick>
 8002c9c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002c9e:	e008      	b.n	8002cb2 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002ca0:	f7fe fa9e 	bl	80011e0 <HAL_GetTick>
 8002ca4:	4602      	mov	r2, r0
 8002ca6:	693b      	ldr	r3, [r7, #16]
 8002ca8:	1ad3      	subs	r3, r2, r3
 8002caa:	2b02      	cmp	r3, #2
 8002cac:	d901      	bls.n	8002cb2 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002cae:	2303      	movs	r3, #3
 8002cb0:	e11c      	b.n	8002eec <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002cb2:	4b66      	ldr	r3, [pc, #408]	; (8002e4c <HAL_RCC_OscConfig+0x778>)
 8002cb4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002cb8:	f003 0302 	and.w	r3, r3, #2
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d0ef      	beq.n	8002ca0 <HAL_RCC_OscConfig+0x5cc>
 8002cc0:	e01b      	b.n	8002cfa <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002cc2:	4b62      	ldr	r3, [pc, #392]	; (8002e4c <HAL_RCC_OscConfig+0x778>)
 8002cc4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002cc8:	4a60      	ldr	r2, [pc, #384]	; (8002e4c <HAL_RCC_OscConfig+0x778>)
 8002cca:	f023 0301 	bic.w	r3, r3, #1
 8002cce:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cd2:	f7fe fa85 	bl	80011e0 <HAL_GetTick>
 8002cd6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002cd8:	e008      	b.n	8002cec <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002cda:	f7fe fa81 	bl	80011e0 <HAL_GetTick>
 8002cde:	4602      	mov	r2, r0
 8002ce0:	693b      	ldr	r3, [r7, #16]
 8002ce2:	1ad3      	subs	r3, r2, r3
 8002ce4:	2b02      	cmp	r3, #2
 8002ce6:	d901      	bls.n	8002cec <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002ce8:	2303      	movs	r3, #3
 8002cea:	e0ff      	b.n	8002eec <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002cec:	4b57      	ldr	r3, [pc, #348]	; (8002e4c <HAL_RCC_OscConfig+0x778>)
 8002cee:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002cf2:	f003 0302 	and.w	r3, r3, #2
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d1ef      	bne.n	8002cda <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	f000 80f3 	beq.w	8002eea <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d08:	2b02      	cmp	r3, #2
 8002d0a:	f040 80c9 	bne.w	8002ea0 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002d0e:	4b4f      	ldr	r3, [pc, #316]	; (8002e4c <HAL_RCC_OscConfig+0x778>)
 8002d10:	68db      	ldr	r3, [r3, #12]
 8002d12:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d14:	697b      	ldr	r3, [r7, #20]
 8002d16:	f003 0203 	and.w	r2, r3, #3
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d1e:	429a      	cmp	r2, r3
 8002d20:	d12c      	bne.n	8002d7c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002d22:	697b      	ldr	r3, [r7, #20]
 8002d24:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d2c:	3b01      	subs	r3, #1
 8002d2e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d30:	429a      	cmp	r2, r3
 8002d32:	d123      	bne.n	8002d7c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002d34:	697b      	ldr	r3, [r7, #20]
 8002d36:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d3e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002d40:	429a      	cmp	r2, r3
 8002d42:	d11b      	bne.n	8002d7c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002d44:	697b      	ldr	r3, [r7, #20]
 8002d46:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d4e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002d50:	429a      	cmp	r2, r3
 8002d52:	d113      	bne.n	8002d7c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002d54:	697b      	ldr	r3, [r7, #20]
 8002d56:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d5e:	085b      	lsrs	r3, r3, #1
 8002d60:	3b01      	subs	r3, #1
 8002d62:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002d64:	429a      	cmp	r2, r3
 8002d66:	d109      	bne.n	8002d7c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002d68:	697b      	ldr	r3, [r7, #20]
 8002d6a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d72:	085b      	lsrs	r3, r3, #1
 8002d74:	3b01      	subs	r3, #1
 8002d76:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002d78:	429a      	cmp	r2, r3
 8002d7a:	d06b      	beq.n	8002e54 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002d7c:	69bb      	ldr	r3, [r7, #24]
 8002d7e:	2b0c      	cmp	r3, #12
 8002d80:	d062      	beq.n	8002e48 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002d82:	4b32      	ldr	r3, [pc, #200]	; (8002e4c <HAL_RCC_OscConfig+0x778>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d001      	beq.n	8002d92 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8002d8e:	2301      	movs	r3, #1
 8002d90:	e0ac      	b.n	8002eec <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002d92:	4b2e      	ldr	r3, [pc, #184]	; (8002e4c <HAL_RCC_OscConfig+0x778>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4a2d      	ldr	r2, [pc, #180]	; (8002e4c <HAL_RCC_OscConfig+0x778>)
 8002d98:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002d9c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002d9e:	f7fe fa1f 	bl	80011e0 <HAL_GetTick>
 8002da2:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002da4:	e008      	b.n	8002db8 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002da6:	f7fe fa1b 	bl	80011e0 <HAL_GetTick>
 8002daa:	4602      	mov	r2, r0
 8002dac:	693b      	ldr	r3, [r7, #16]
 8002dae:	1ad3      	subs	r3, r2, r3
 8002db0:	2b02      	cmp	r3, #2
 8002db2:	d901      	bls.n	8002db8 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8002db4:	2303      	movs	r3, #3
 8002db6:	e099      	b.n	8002eec <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002db8:	4b24      	ldr	r3, [pc, #144]	; (8002e4c <HAL_RCC_OscConfig+0x778>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d1f0      	bne.n	8002da6 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002dc4:	4b21      	ldr	r3, [pc, #132]	; (8002e4c <HAL_RCC_OscConfig+0x778>)
 8002dc6:	68da      	ldr	r2, [r3, #12]
 8002dc8:	4b21      	ldr	r3, [pc, #132]	; (8002e50 <HAL_RCC_OscConfig+0x77c>)
 8002dca:	4013      	ands	r3, r2
 8002dcc:	687a      	ldr	r2, [r7, #4]
 8002dce:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002dd0:	687a      	ldr	r2, [r7, #4]
 8002dd2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002dd4:	3a01      	subs	r2, #1
 8002dd6:	0112      	lsls	r2, r2, #4
 8002dd8:	4311      	orrs	r1, r2
 8002dda:	687a      	ldr	r2, [r7, #4]
 8002ddc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002dde:	0212      	lsls	r2, r2, #8
 8002de0:	4311      	orrs	r1, r2
 8002de2:	687a      	ldr	r2, [r7, #4]
 8002de4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002de6:	0852      	lsrs	r2, r2, #1
 8002de8:	3a01      	subs	r2, #1
 8002dea:	0552      	lsls	r2, r2, #21
 8002dec:	4311      	orrs	r1, r2
 8002dee:	687a      	ldr	r2, [r7, #4]
 8002df0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002df2:	0852      	lsrs	r2, r2, #1
 8002df4:	3a01      	subs	r2, #1
 8002df6:	0652      	lsls	r2, r2, #25
 8002df8:	4311      	orrs	r1, r2
 8002dfa:	687a      	ldr	r2, [r7, #4]
 8002dfc:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002dfe:	06d2      	lsls	r2, r2, #27
 8002e00:	430a      	orrs	r2, r1
 8002e02:	4912      	ldr	r1, [pc, #72]	; (8002e4c <HAL_RCC_OscConfig+0x778>)
 8002e04:	4313      	orrs	r3, r2
 8002e06:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002e08:	4b10      	ldr	r3, [pc, #64]	; (8002e4c <HAL_RCC_OscConfig+0x778>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4a0f      	ldr	r2, [pc, #60]	; (8002e4c <HAL_RCC_OscConfig+0x778>)
 8002e0e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e12:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002e14:	4b0d      	ldr	r3, [pc, #52]	; (8002e4c <HAL_RCC_OscConfig+0x778>)
 8002e16:	68db      	ldr	r3, [r3, #12]
 8002e18:	4a0c      	ldr	r2, [pc, #48]	; (8002e4c <HAL_RCC_OscConfig+0x778>)
 8002e1a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e1e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002e20:	f7fe f9de 	bl	80011e0 <HAL_GetTick>
 8002e24:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e26:	e008      	b.n	8002e3a <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e28:	f7fe f9da 	bl	80011e0 <HAL_GetTick>
 8002e2c:	4602      	mov	r2, r0
 8002e2e:	693b      	ldr	r3, [r7, #16]
 8002e30:	1ad3      	subs	r3, r2, r3
 8002e32:	2b02      	cmp	r3, #2
 8002e34:	d901      	bls.n	8002e3a <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8002e36:	2303      	movs	r3, #3
 8002e38:	e058      	b.n	8002eec <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e3a:	4b04      	ldr	r3, [pc, #16]	; (8002e4c <HAL_RCC_OscConfig+0x778>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d0f0      	beq.n	8002e28 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002e46:	e050      	b.n	8002eea <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002e48:	2301      	movs	r3, #1
 8002e4a:	e04f      	b.n	8002eec <HAL_RCC_OscConfig+0x818>
 8002e4c:	40021000 	.word	0x40021000
 8002e50:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e54:	4b27      	ldr	r3, [pc, #156]	; (8002ef4 <HAL_RCC_OscConfig+0x820>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d144      	bne.n	8002eea <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002e60:	4b24      	ldr	r3, [pc, #144]	; (8002ef4 <HAL_RCC_OscConfig+0x820>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4a23      	ldr	r2, [pc, #140]	; (8002ef4 <HAL_RCC_OscConfig+0x820>)
 8002e66:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e6a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002e6c:	4b21      	ldr	r3, [pc, #132]	; (8002ef4 <HAL_RCC_OscConfig+0x820>)
 8002e6e:	68db      	ldr	r3, [r3, #12]
 8002e70:	4a20      	ldr	r2, [pc, #128]	; (8002ef4 <HAL_RCC_OscConfig+0x820>)
 8002e72:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e76:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002e78:	f7fe f9b2 	bl	80011e0 <HAL_GetTick>
 8002e7c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e7e:	e008      	b.n	8002e92 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e80:	f7fe f9ae 	bl	80011e0 <HAL_GetTick>
 8002e84:	4602      	mov	r2, r0
 8002e86:	693b      	ldr	r3, [r7, #16]
 8002e88:	1ad3      	subs	r3, r2, r3
 8002e8a:	2b02      	cmp	r3, #2
 8002e8c:	d901      	bls.n	8002e92 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8002e8e:	2303      	movs	r3, #3
 8002e90:	e02c      	b.n	8002eec <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e92:	4b18      	ldr	r3, [pc, #96]	; (8002ef4 <HAL_RCC_OscConfig+0x820>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d0f0      	beq.n	8002e80 <HAL_RCC_OscConfig+0x7ac>
 8002e9e:	e024      	b.n	8002eea <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002ea0:	69bb      	ldr	r3, [r7, #24]
 8002ea2:	2b0c      	cmp	r3, #12
 8002ea4:	d01f      	beq.n	8002ee6 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ea6:	4b13      	ldr	r3, [pc, #76]	; (8002ef4 <HAL_RCC_OscConfig+0x820>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4a12      	ldr	r2, [pc, #72]	; (8002ef4 <HAL_RCC_OscConfig+0x820>)
 8002eac:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002eb0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002eb2:	f7fe f995 	bl	80011e0 <HAL_GetTick>
 8002eb6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002eb8:	e008      	b.n	8002ecc <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002eba:	f7fe f991 	bl	80011e0 <HAL_GetTick>
 8002ebe:	4602      	mov	r2, r0
 8002ec0:	693b      	ldr	r3, [r7, #16]
 8002ec2:	1ad3      	subs	r3, r2, r3
 8002ec4:	2b02      	cmp	r3, #2
 8002ec6:	d901      	bls.n	8002ecc <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8002ec8:	2303      	movs	r3, #3
 8002eca:	e00f      	b.n	8002eec <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ecc:	4b09      	ldr	r3, [pc, #36]	; (8002ef4 <HAL_RCC_OscConfig+0x820>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d1f0      	bne.n	8002eba <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8002ed8:	4b06      	ldr	r3, [pc, #24]	; (8002ef4 <HAL_RCC_OscConfig+0x820>)
 8002eda:	68da      	ldr	r2, [r3, #12]
 8002edc:	4905      	ldr	r1, [pc, #20]	; (8002ef4 <HAL_RCC_OscConfig+0x820>)
 8002ede:	4b06      	ldr	r3, [pc, #24]	; (8002ef8 <HAL_RCC_OscConfig+0x824>)
 8002ee0:	4013      	ands	r3, r2
 8002ee2:	60cb      	str	r3, [r1, #12]
 8002ee4:	e001      	b.n	8002eea <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	e000      	b.n	8002eec <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8002eea:	2300      	movs	r3, #0
}
 8002eec:	4618      	mov	r0, r3
 8002eee:	3720      	adds	r7, #32
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	bd80      	pop	{r7, pc}
 8002ef4:	40021000 	.word	0x40021000
 8002ef8:	feeefffc 	.word	0xfeeefffc

08002efc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b084      	sub	sp, #16
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
 8002f04:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d101      	bne.n	8002f10 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f0c:	2301      	movs	r3, #1
 8002f0e:	e0e7      	b.n	80030e0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002f10:	4b75      	ldr	r3, [pc, #468]	; (80030e8 <HAL_RCC_ClockConfig+0x1ec>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f003 0307 	and.w	r3, r3, #7
 8002f18:	683a      	ldr	r2, [r7, #0]
 8002f1a:	429a      	cmp	r2, r3
 8002f1c:	d910      	bls.n	8002f40 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f1e:	4b72      	ldr	r3, [pc, #456]	; (80030e8 <HAL_RCC_ClockConfig+0x1ec>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f023 0207 	bic.w	r2, r3, #7
 8002f26:	4970      	ldr	r1, [pc, #448]	; (80030e8 <HAL_RCC_ClockConfig+0x1ec>)
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	4313      	orrs	r3, r2
 8002f2c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f2e:	4b6e      	ldr	r3, [pc, #440]	; (80030e8 <HAL_RCC_ClockConfig+0x1ec>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f003 0307 	and.w	r3, r3, #7
 8002f36:	683a      	ldr	r2, [r7, #0]
 8002f38:	429a      	cmp	r2, r3
 8002f3a:	d001      	beq.n	8002f40 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	e0cf      	b.n	80030e0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f003 0302 	and.w	r3, r3, #2
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d010      	beq.n	8002f6e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	689a      	ldr	r2, [r3, #8]
 8002f50:	4b66      	ldr	r3, [pc, #408]	; (80030ec <HAL_RCC_ClockConfig+0x1f0>)
 8002f52:	689b      	ldr	r3, [r3, #8]
 8002f54:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002f58:	429a      	cmp	r2, r3
 8002f5a:	d908      	bls.n	8002f6e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f5c:	4b63      	ldr	r3, [pc, #396]	; (80030ec <HAL_RCC_ClockConfig+0x1f0>)
 8002f5e:	689b      	ldr	r3, [r3, #8]
 8002f60:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	689b      	ldr	r3, [r3, #8]
 8002f68:	4960      	ldr	r1, [pc, #384]	; (80030ec <HAL_RCC_ClockConfig+0x1f0>)
 8002f6a:	4313      	orrs	r3, r2
 8002f6c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f003 0301 	and.w	r3, r3, #1
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d04c      	beq.n	8003014 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	685b      	ldr	r3, [r3, #4]
 8002f7e:	2b03      	cmp	r3, #3
 8002f80:	d107      	bne.n	8002f92 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f82:	4b5a      	ldr	r3, [pc, #360]	; (80030ec <HAL_RCC_ClockConfig+0x1f0>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d121      	bne.n	8002fd2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002f8e:	2301      	movs	r3, #1
 8002f90:	e0a6      	b.n	80030e0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	685b      	ldr	r3, [r3, #4]
 8002f96:	2b02      	cmp	r3, #2
 8002f98:	d107      	bne.n	8002faa <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002f9a:	4b54      	ldr	r3, [pc, #336]	; (80030ec <HAL_RCC_ClockConfig+0x1f0>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d115      	bne.n	8002fd2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	e09a      	b.n	80030e0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d107      	bne.n	8002fc2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002fb2:	4b4e      	ldr	r3, [pc, #312]	; (80030ec <HAL_RCC_ClockConfig+0x1f0>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f003 0302 	and.w	r3, r3, #2
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d109      	bne.n	8002fd2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	e08e      	b.n	80030e0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002fc2:	4b4a      	ldr	r3, [pc, #296]	; (80030ec <HAL_RCC_ClockConfig+0x1f0>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d101      	bne.n	8002fd2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	e086      	b.n	80030e0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002fd2:	4b46      	ldr	r3, [pc, #280]	; (80030ec <HAL_RCC_ClockConfig+0x1f0>)
 8002fd4:	689b      	ldr	r3, [r3, #8]
 8002fd6:	f023 0203 	bic.w	r2, r3, #3
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	4943      	ldr	r1, [pc, #268]	; (80030ec <HAL_RCC_ClockConfig+0x1f0>)
 8002fe0:	4313      	orrs	r3, r2
 8002fe2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002fe4:	f7fe f8fc 	bl	80011e0 <HAL_GetTick>
 8002fe8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fea:	e00a      	b.n	8003002 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fec:	f7fe f8f8 	bl	80011e0 <HAL_GetTick>
 8002ff0:	4602      	mov	r2, r0
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	1ad3      	subs	r3, r2, r3
 8002ff6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d901      	bls.n	8003002 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002ffe:	2303      	movs	r3, #3
 8003000:	e06e      	b.n	80030e0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003002:	4b3a      	ldr	r3, [pc, #232]	; (80030ec <HAL_RCC_ClockConfig+0x1f0>)
 8003004:	689b      	ldr	r3, [r3, #8]
 8003006:	f003 020c 	and.w	r2, r3, #12
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	009b      	lsls	r3, r3, #2
 8003010:	429a      	cmp	r2, r3
 8003012:	d1eb      	bne.n	8002fec <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f003 0302 	and.w	r3, r3, #2
 800301c:	2b00      	cmp	r3, #0
 800301e:	d010      	beq.n	8003042 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	689a      	ldr	r2, [r3, #8]
 8003024:	4b31      	ldr	r3, [pc, #196]	; (80030ec <HAL_RCC_ClockConfig+0x1f0>)
 8003026:	689b      	ldr	r3, [r3, #8]
 8003028:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800302c:	429a      	cmp	r2, r3
 800302e:	d208      	bcs.n	8003042 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003030:	4b2e      	ldr	r3, [pc, #184]	; (80030ec <HAL_RCC_ClockConfig+0x1f0>)
 8003032:	689b      	ldr	r3, [r3, #8]
 8003034:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	689b      	ldr	r3, [r3, #8]
 800303c:	492b      	ldr	r1, [pc, #172]	; (80030ec <HAL_RCC_ClockConfig+0x1f0>)
 800303e:	4313      	orrs	r3, r2
 8003040:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003042:	4b29      	ldr	r3, [pc, #164]	; (80030e8 <HAL_RCC_ClockConfig+0x1ec>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f003 0307 	and.w	r3, r3, #7
 800304a:	683a      	ldr	r2, [r7, #0]
 800304c:	429a      	cmp	r2, r3
 800304e:	d210      	bcs.n	8003072 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003050:	4b25      	ldr	r3, [pc, #148]	; (80030e8 <HAL_RCC_ClockConfig+0x1ec>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f023 0207 	bic.w	r2, r3, #7
 8003058:	4923      	ldr	r1, [pc, #140]	; (80030e8 <HAL_RCC_ClockConfig+0x1ec>)
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	4313      	orrs	r3, r2
 800305e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003060:	4b21      	ldr	r3, [pc, #132]	; (80030e8 <HAL_RCC_ClockConfig+0x1ec>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f003 0307 	and.w	r3, r3, #7
 8003068:	683a      	ldr	r2, [r7, #0]
 800306a:	429a      	cmp	r2, r3
 800306c:	d001      	beq.n	8003072 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800306e:	2301      	movs	r3, #1
 8003070:	e036      	b.n	80030e0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f003 0304 	and.w	r3, r3, #4
 800307a:	2b00      	cmp	r3, #0
 800307c:	d008      	beq.n	8003090 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800307e:	4b1b      	ldr	r3, [pc, #108]	; (80030ec <HAL_RCC_ClockConfig+0x1f0>)
 8003080:	689b      	ldr	r3, [r3, #8]
 8003082:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	68db      	ldr	r3, [r3, #12]
 800308a:	4918      	ldr	r1, [pc, #96]	; (80030ec <HAL_RCC_ClockConfig+0x1f0>)
 800308c:	4313      	orrs	r3, r2
 800308e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f003 0308 	and.w	r3, r3, #8
 8003098:	2b00      	cmp	r3, #0
 800309a:	d009      	beq.n	80030b0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800309c:	4b13      	ldr	r3, [pc, #76]	; (80030ec <HAL_RCC_ClockConfig+0x1f0>)
 800309e:	689b      	ldr	r3, [r3, #8]
 80030a0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	691b      	ldr	r3, [r3, #16]
 80030a8:	00db      	lsls	r3, r3, #3
 80030aa:	4910      	ldr	r1, [pc, #64]	; (80030ec <HAL_RCC_ClockConfig+0x1f0>)
 80030ac:	4313      	orrs	r3, r2
 80030ae:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80030b0:	f000 f824 	bl	80030fc <HAL_RCC_GetSysClockFreq>
 80030b4:	4602      	mov	r2, r0
 80030b6:	4b0d      	ldr	r3, [pc, #52]	; (80030ec <HAL_RCC_ClockConfig+0x1f0>)
 80030b8:	689b      	ldr	r3, [r3, #8]
 80030ba:	091b      	lsrs	r3, r3, #4
 80030bc:	f003 030f 	and.w	r3, r3, #15
 80030c0:	490b      	ldr	r1, [pc, #44]	; (80030f0 <HAL_RCC_ClockConfig+0x1f4>)
 80030c2:	5ccb      	ldrb	r3, [r1, r3]
 80030c4:	f003 031f 	and.w	r3, r3, #31
 80030c8:	fa22 f303 	lsr.w	r3, r2, r3
 80030cc:	4a09      	ldr	r2, [pc, #36]	; (80030f4 <HAL_RCC_ClockConfig+0x1f8>)
 80030ce:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80030d0:	4b09      	ldr	r3, [pc, #36]	; (80030f8 <HAL_RCC_ClockConfig+0x1fc>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	4618      	mov	r0, r3
 80030d6:	f7fe f833 	bl	8001140 <HAL_InitTick>
 80030da:	4603      	mov	r3, r0
 80030dc:	72fb      	strb	r3, [r7, #11]

  return status;
 80030de:	7afb      	ldrb	r3, [r7, #11]
}
 80030e0:	4618      	mov	r0, r3
 80030e2:	3710      	adds	r7, #16
 80030e4:	46bd      	mov	sp, r7
 80030e6:	bd80      	pop	{r7, pc}
 80030e8:	40022000 	.word	0x40022000
 80030ec:	40021000 	.word	0x40021000
 80030f0:	08006254 	.word	0x08006254
 80030f4:	20000004 	.word	0x20000004
 80030f8:	20000008 	.word	0x20000008

080030fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80030fc:	b480      	push	{r7}
 80030fe:	b089      	sub	sp, #36	; 0x24
 8003100:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003102:	2300      	movs	r3, #0
 8003104:	61fb      	str	r3, [r7, #28]
 8003106:	2300      	movs	r3, #0
 8003108:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800310a:	4b3e      	ldr	r3, [pc, #248]	; (8003204 <HAL_RCC_GetSysClockFreq+0x108>)
 800310c:	689b      	ldr	r3, [r3, #8]
 800310e:	f003 030c 	and.w	r3, r3, #12
 8003112:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003114:	4b3b      	ldr	r3, [pc, #236]	; (8003204 <HAL_RCC_GetSysClockFreq+0x108>)
 8003116:	68db      	ldr	r3, [r3, #12]
 8003118:	f003 0303 	and.w	r3, r3, #3
 800311c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800311e:	693b      	ldr	r3, [r7, #16]
 8003120:	2b00      	cmp	r3, #0
 8003122:	d005      	beq.n	8003130 <HAL_RCC_GetSysClockFreq+0x34>
 8003124:	693b      	ldr	r3, [r7, #16]
 8003126:	2b0c      	cmp	r3, #12
 8003128:	d121      	bne.n	800316e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	2b01      	cmp	r3, #1
 800312e:	d11e      	bne.n	800316e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003130:	4b34      	ldr	r3, [pc, #208]	; (8003204 <HAL_RCC_GetSysClockFreq+0x108>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f003 0308 	and.w	r3, r3, #8
 8003138:	2b00      	cmp	r3, #0
 800313a:	d107      	bne.n	800314c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800313c:	4b31      	ldr	r3, [pc, #196]	; (8003204 <HAL_RCC_GetSysClockFreq+0x108>)
 800313e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003142:	0a1b      	lsrs	r3, r3, #8
 8003144:	f003 030f 	and.w	r3, r3, #15
 8003148:	61fb      	str	r3, [r7, #28]
 800314a:	e005      	b.n	8003158 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800314c:	4b2d      	ldr	r3, [pc, #180]	; (8003204 <HAL_RCC_GetSysClockFreq+0x108>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	091b      	lsrs	r3, r3, #4
 8003152:	f003 030f 	and.w	r3, r3, #15
 8003156:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003158:	4a2b      	ldr	r2, [pc, #172]	; (8003208 <HAL_RCC_GetSysClockFreq+0x10c>)
 800315a:	69fb      	ldr	r3, [r7, #28]
 800315c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003160:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003162:	693b      	ldr	r3, [r7, #16]
 8003164:	2b00      	cmp	r3, #0
 8003166:	d10d      	bne.n	8003184 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003168:	69fb      	ldr	r3, [r7, #28]
 800316a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800316c:	e00a      	b.n	8003184 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800316e:	693b      	ldr	r3, [r7, #16]
 8003170:	2b04      	cmp	r3, #4
 8003172:	d102      	bne.n	800317a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003174:	4b25      	ldr	r3, [pc, #148]	; (800320c <HAL_RCC_GetSysClockFreq+0x110>)
 8003176:	61bb      	str	r3, [r7, #24]
 8003178:	e004      	b.n	8003184 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800317a:	693b      	ldr	r3, [r7, #16]
 800317c:	2b08      	cmp	r3, #8
 800317e:	d101      	bne.n	8003184 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003180:	4b23      	ldr	r3, [pc, #140]	; (8003210 <HAL_RCC_GetSysClockFreq+0x114>)
 8003182:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003184:	693b      	ldr	r3, [r7, #16]
 8003186:	2b0c      	cmp	r3, #12
 8003188:	d134      	bne.n	80031f4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800318a:	4b1e      	ldr	r3, [pc, #120]	; (8003204 <HAL_RCC_GetSysClockFreq+0x108>)
 800318c:	68db      	ldr	r3, [r3, #12]
 800318e:	f003 0303 	and.w	r3, r3, #3
 8003192:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003194:	68bb      	ldr	r3, [r7, #8]
 8003196:	2b02      	cmp	r3, #2
 8003198:	d003      	beq.n	80031a2 <HAL_RCC_GetSysClockFreq+0xa6>
 800319a:	68bb      	ldr	r3, [r7, #8]
 800319c:	2b03      	cmp	r3, #3
 800319e:	d003      	beq.n	80031a8 <HAL_RCC_GetSysClockFreq+0xac>
 80031a0:	e005      	b.n	80031ae <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80031a2:	4b1a      	ldr	r3, [pc, #104]	; (800320c <HAL_RCC_GetSysClockFreq+0x110>)
 80031a4:	617b      	str	r3, [r7, #20]
      break;
 80031a6:	e005      	b.n	80031b4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80031a8:	4b19      	ldr	r3, [pc, #100]	; (8003210 <HAL_RCC_GetSysClockFreq+0x114>)
 80031aa:	617b      	str	r3, [r7, #20]
      break;
 80031ac:	e002      	b.n	80031b4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80031ae:	69fb      	ldr	r3, [r7, #28]
 80031b0:	617b      	str	r3, [r7, #20]
      break;
 80031b2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80031b4:	4b13      	ldr	r3, [pc, #76]	; (8003204 <HAL_RCC_GetSysClockFreq+0x108>)
 80031b6:	68db      	ldr	r3, [r3, #12]
 80031b8:	091b      	lsrs	r3, r3, #4
 80031ba:	f003 0307 	and.w	r3, r3, #7
 80031be:	3301      	adds	r3, #1
 80031c0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80031c2:	4b10      	ldr	r3, [pc, #64]	; (8003204 <HAL_RCC_GetSysClockFreq+0x108>)
 80031c4:	68db      	ldr	r3, [r3, #12]
 80031c6:	0a1b      	lsrs	r3, r3, #8
 80031c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80031cc:	697a      	ldr	r2, [r7, #20]
 80031ce:	fb03 f202 	mul.w	r2, r3, r2
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80031d8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80031da:	4b0a      	ldr	r3, [pc, #40]	; (8003204 <HAL_RCC_GetSysClockFreq+0x108>)
 80031dc:	68db      	ldr	r3, [r3, #12]
 80031de:	0e5b      	lsrs	r3, r3, #25
 80031e0:	f003 0303 	and.w	r3, r3, #3
 80031e4:	3301      	adds	r3, #1
 80031e6:	005b      	lsls	r3, r3, #1
 80031e8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80031ea:	697a      	ldr	r2, [r7, #20]
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80031f2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80031f4:	69bb      	ldr	r3, [r7, #24]
}
 80031f6:	4618      	mov	r0, r3
 80031f8:	3724      	adds	r7, #36	; 0x24
 80031fa:	46bd      	mov	sp, r7
 80031fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003200:	4770      	bx	lr
 8003202:	bf00      	nop
 8003204:	40021000 	.word	0x40021000
 8003208:	0800626c 	.word	0x0800626c
 800320c:	00f42400 	.word	0x00f42400
 8003210:	007a1200 	.word	0x007a1200

08003214 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003214:	b480      	push	{r7}
 8003216:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003218:	4b03      	ldr	r3, [pc, #12]	; (8003228 <HAL_RCC_GetHCLKFreq+0x14>)
 800321a:	681b      	ldr	r3, [r3, #0]
}
 800321c:	4618      	mov	r0, r3
 800321e:	46bd      	mov	sp, r7
 8003220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003224:	4770      	bx	lr
 8003226:	bf00      	nop
 8003228:	20000004 	.word	0x20000004

0800322c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003230:	f7ff fff0 	bl	8003214 <HAL_RCC_GetHCLKFreq>
 8003234:	4602      	mov	r2, r0
 8003236:	4b06      	ldr	r3, [pc, #24]	; (8003250 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003238:	689b      	ldr	r3, [r3, #8]
 800323a:	0a1b      	lsrs	r3, r3, #8
 800323c:	f003 0307 	and.w	r3, r3, #7
 8003240:	4904      	ldr	r1, [pc, #16]	; (8003254 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003242:	5ccb      	ldrb	r3, [r1, r3]
 8003244:	f003 031f 	and.w	r3, r3, #31
 8003248:	fa22 f303 	lsr.w	r3, r2, r3
}
 800324c:	4618      	mov	r0, r3
 800324e:	bd80      	pop	{r7, pc}
 8003250:	40021000 	.word	0x40021000
 8003254:	08006264 	.word	0x08006264

08003258 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800325c:	f7ff ffda 	bl	8003214 <HAL_RCC_GetHCLKFreq>
 8003260:	4602      	mov	r2, r0
 8003262:	4b06      	ldr	r3, [pc, #24]	; (800327c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003264:	689b      	ldr	r3, [r3, #8]
 8003266:	0adb      	lsrs	r3, r3, #11
 8003268:	f003 0307 	and.w	r3, r3, #7
 800326c:	4904      	ldr	r1, [pc, #16]	; (8003280 <HAL_RCC_GetPCLK2Freq+0x28>)
 800326e:	5ccb      	ldrb	r3, [r1, r3]
 8003270:	f003 031f 	and.w	r3, r3, #31
 8003274:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003278:	4618      	mov	r0, r3
 800327a:	bd80      	pop	{r7, pc}
 800327c:	40021000 	.word	0x40021000
 8003280:	08006264 	.word	0x08006264

08003284 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b086      	sub	sp, #24
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800328c:	2300      	movs	r3, #0
 800328e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003290:	4b2a      	ldr	r3, [pc, #168]	; (800333c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003292:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003294:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003298:	2b00      	cmp	r3, #0
 800329a:	d003      	beq.n	80032a4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800329c:	f7ff f9b6 	bl	800260c <HAL_PWREx_GetVoltageRange>
 80032a0:	6178      	str	r0, [r7, #20]
 80032a2:	e014      	b.n	80032ce <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80032a4:	4b25      	ldr	r3, [pc, #148]	; (800333c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80032a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032a8:	4a24      	ldr	r2, [pc, #144]	; (800333c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80032aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032ae:	6593      	str	r3, [r2, #88]	; 0x58
 80032b0:	4b22      	ldr	r3, [pc, #136]	; (800333c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80032b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032b8:	60fb      	str	r3, [r7, #12]
 80032ba:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80032bc:	f7ff f9a6 	bl	800260c <HAL_PWREx_GetVoltageRange>
 80032c0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80032c2:	4b1e      	ldr	r3, [pc, #120]	; (800333c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80032c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032c6:	4a1d      	ldr	r2, [pc, #116]	; (800333c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80032c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80032cc:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80032ce:	697b      	ldr	r3, [r7, #20]
 80032d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80032d4:	d10b      	bne.n	80032ee <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2b80      	cmp	r3, #128	; 0x80
 80032da:	d919      	bls.n	8003310 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2ba0      	cmp	r3, #160	; 0xa0
 80032e0:	d902      	bls.n	80032e8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80032e2:	2302      	movs	r3, #2
 80032e4:	613b      	str	r3, [r7, #16]
 80032e6:	e013      	b.n	8003310 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80032e8:	2301      	movs	r3, #1
 80032ea:	613b      	str	r3, [r7, #16]
 80032ec:	e010      	b.n	8003310 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2b80      	cmp	r3, #128	; 0x80
 80032f2:	d902      	bls.n	80032fa <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80032f4:	2303      	movs	r3, #3
 80032f6:	613b      	str	r3, [r7, #16]
 80032f8:	e00a      	b.n	8003310 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	2b80      	cmp	r3, #128	; 0x80
 80032fe:	d102      	bne.n	8003306 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003300:	2302      	movs	r3, #2
 8003302:	613b      	str	r3, [r7, #16]
 8003304:	e004      	b.n	8003310 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2b70      	cmp	r3, #112	; 0x70
 800330a:	d101      	bne.n	8003310 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800330c:	2301      	movs	r3, #1
 800330e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003310:	4b0b      	ldr	r3, [pc, #44]	; (8003340 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f023 0207 	bic.w	r2, r3, #7
 8003318:	4909      	ldr	r1, [pc, #36]	; (8003340 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800331a:	693b      	ldr	r3, [r7, #16]
 800331c:	4313      	orrs	r3, r2
 800331e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003320:	4b07      	ldr	r3, [pc, #28]	; (8003340 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f003 0307 	and.w	r3, r3, #7
 8003328:	693a      	ldr	r2, [r7, #16]
 800332a:	429a      	cmp	r2, r3
 800332c:	d001      	beq.n	8003332 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800332e:	2301      	movs	r3, #1
 8003330:	e000      	b.n	8003334 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003332:	2300      	movs	r3, #0
}
 8003334:	4618      	mov	r0, r3
 8003336:	3718      	adds	r7, #24
 8003338:	46bd      	mov	sp, r7
 800333a:	bd80      	pop	{r7, pc}
 800333c:	40021000 	.word	0x40021000
 8003340:	40022000 	.word	0x40022000

08003344 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b086      	sub	sp, #24
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800334c:	2300      	movs	r3, #0
 800334e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003350:	2300      	movs	r3, #0
 8003352:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800335c:	2b00      	cmp	r3, #0
 800335e:	d031      	beq.n	80033c4 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003364:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003368:	d01a      	beq.n	80033a0 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800336a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800336e:	d814      	bhi.n	800339a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003370:	2b00      	cmp	r3, #0
 8003372:	d009      	beq.n	8003388 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003374:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003378:	d10f      	bne.n	800339a <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800337a:	4b5d      	ldr	r3, [pc, #372]	; (80034f0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800337c:	68db      	ldr	r3, [r3, #12]
 800337e:	4a5c      	ldr	r2, [pc, #368]	; (80034f0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003380:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003384:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003386:	e00c      	b.n	80033a2 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	3304      	adds	r3, #4
 800338c:	2100      	movs	r1, #0
 800338e:	4618      	mov	r0, r3
 8003390:	f000 fa44 	bl	800381c <RCCEx_PLLSAI1_Config>
 8003394:	4603      	mov	r3, r0
 8003396:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003398:	e003      	b.n	80033a2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800339a:	2301      	movs	r3, #1
 800339c:	74fb      	strb	r3, [r7, #19]
      break;
 800339e:	e000      	b.n	80033a2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80033a0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80033a2:	7cfb      	ldrb	r3, [r7, #19]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d10b      	bne.n	80033c0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80033a8:	4b51      	ldr	r3, [pc, #324]	; (80034f0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80033aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033ae:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033b6:	494e      	ldr	r1, [pc, #312]	; (80034f0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80033b8:	4313      	orrs	r3, r2
 80033ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80033be:	e001      	b.n	80033c4 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033c0:	7cfb      	ldrb	r3, [r7, #19]
 80033c2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	f000 809e 	beq.w	800350e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80033d2:	2300      	movs	r3, #0
 80033d4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80033d6:	4b46      	ldr	r3, [pc, #280]	; (80034f0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80033d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d101      	bne.n	80033e6 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80033e2:	2301      	movs	r3, #1
 80033e4:	e000      	b.n	80033e8 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 80033e6:	2300      	movs	r3, #0
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d00d      	beq.n	8003408 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033ec:	4b40      	ldr	r3, [pc, #256]	; (80034f0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80033ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033f0:	4a3f      	ldr	r2, [pc, #252]	; (80034f0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80033f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033f6:	6593      	str	r3, [r2, #88]	; 0x58
 80033f8:	4b3d      	ldr	r3, [pc, #244]	; (80034f0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80033fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003400:	60bb      	str	r3, [r7, #8]
 8003402:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003404:	2301      	movs	r3, #1
 8003406:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003408:	4b3a      	ldr	r3, [pc, #232]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4a39      	ldr	r2, [pc, #228]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800340e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003412:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003414:	f7fd fee4 	bl	80011e0 <HAL_GetTick>
 8003418:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800341a:	e009      	b.n	8003430 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800341c:	f7fd fee0 	bl	80011e0 <HAL_GetTick>
 8003420:	4602      	mov	r2, r0
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	1ad3      	subs	r3, r2, r3
 8003426:	2b02      	cmp	r3, #2
 8003428:	d902      	bls.n	8003430 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 800342a:	2303      	movs	r3, #3
 800342c:	74fb      	strb	r3, [r7, #19]
        break;
 800342e:	e005      	b.n	800343c <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003430:	4b30      	ldr	r3, [pc, #192]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003438:	2b00      	cmp	r3, #0
 800343a:	d0ef      	beq.n	800341c <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 800343c:	7cfb      	ldrb	r3, [r7, #19]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d15a      	bne.n	80034f8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003442:	4b2b      	ldr	r3, [pc, #172]	; (80034f0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003444:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003448:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800344c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800344e:	697b      	ldr	r3, [r7, #20]
 8003450:	2b00      	cmp	r3, #0
 8003452:	d01e      	beq.n	8003492 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003458:	697a      	ldr	r2, [r7, #20]
 800345a:	429a      	cmp	r2, r3
 800345c:	d019      	beq.n	8003492 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800345e:	4b24      	ldr	r3, [pc, #144]	; (80034f0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003460:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003464:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003468:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800346a:	4b21      	ldr	r3, [pc, #132]	; (80034f0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800346c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003470:	4a1f      	ldr	r2, [pc, #124]	; (80034f0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003472:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003476:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800347a:	4b1d      	ldr	r3, [pc, #116]	; (80034f0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800347c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003480:	4a1b      	ldr	r2, [pc, #108]	; (80034f0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003482:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003486:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800348a:	4a19      	ldr	r2, [pc, #100]	; (80034f0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800348c:	697b      	ldr	r3, [r7, #20]
 800348e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003492:	697b      	ldr	r3, [r7, #20]
 8003494:	f003 0301 	and.w	r3, r3, #1
 8003498:	2b00      	cmp	r3, #0
 800349a:	d016      	beq.n	80034ca <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800349c:	f7fd fea0 	bl	80011e0 <HAL_GetTick>
 80034a0:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80034a2:	e00b      	b.n	80034bc <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034a4:	f7fd fe9c 	bl	80011e0 <HAL_GetTick>
 80034a8:	4602      	mov	r2, r0
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	1ad3      	subs	r3, r2, r3
 80034ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d902      	bls.n	80034bc <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80034b6:	2303      	movs	r3, #3
 80034b8:	74fb      	strb	r3, [r7, #19]
            break;
 80034ba:	e006      	b.n	80034ca <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80034bc:	4b0c      	ldr	r3, [pc, #48]	; (80034f0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80034be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034c2:	f003 0302 	and.w	r3, r3, #2
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d0ec      	beq.n	80034a4 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 80034ca:	7cfb      	ldrb	r3, [r7, #19]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d10b      	bne.n	80034e8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80034d0:	4b07      	ldr	r3, [pc, #28]	; (80034f0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80034d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034d6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80034de:	4904      	ldr	r1, [pc, #16]	; (80034f0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80034e0:	4313      	orrs	r3, r2
 80034e2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80034e6:	e009      	b.n	80034fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80034e8:	7cfb      	ldrb	r3, [r7, #19]
 80034ea:	74bb      	strb	r3, [r7, #18]
 80034ec:	e006      	b.n	80034fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 80034ee:	bf00      	nop
 80034f0:	40021000 	.word	0x40021000
 80034f4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034f8:	7cfb      	ldrb	r3, [r7, #19]
 80034fa:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80034fc:	7c7b      	ldrb	r3, [r7, #17]
 80034fe:	2b01      	cmp	r3, #1
 8003500:	d105      	bne.n	800350e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003502:	4b9e      	ldr	r3, [pc, #632]	; (800377c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003504:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003506:	4a9d      	ldr	r2, [pc, #628]	; (800377c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003508:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800350c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f003 0301 	and.w	r3, r3, #1
 8003516:	2b00      	cmp	r3, #0
 8003518:	d00a      	beq.n	8003530 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800351a:	4b98      	ldr	r3, [pc, #608]	; (800377c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800351c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003520:	f023 0203 	bic.w	r2, r3, #3
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6a1b      	ldr	r3, [r3, #32]
 8003528:	4994      	ldr	r1, [pc, #592]	; (800377c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800352a:	4313      	orrs	r3, r2
 800352c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f003 0302 	and.w	r3, r3, #2
 8003538:	2b00      	cmp	r3, #0
 800353a:	d00a      	beq.n	8003552 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800353c:	4b8f      	ldr	r3, [pc, #572]	; (800377c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800353e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003542:	f023 020c 	bic.w	r2, r3, #12
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800354a:	498c      	ldr	r1, [pc, #560]	; (800377c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800354c:	4313      	orrs	r3, r2
 800354e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f003 0304 	and.w	r3, r3, #4
 800355a:	2b00      	cmp	r3, #0
 800355c:	d00a      	beq.n	8003574 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800355e:	4b87      	ldr	r3, [pc, #540]	; (800377c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003560:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003564:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800356c:	4983      	ldr	r1, [pc, #524]	; (800377c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800356e:	4313      	orrs	r3, r2
 8003570:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f003 0308 	and.w	r3, r3, #8
 800357c:	2b00      	cmp	r3, #0
 800357e:	d00a      	beq.n	8003596 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003580:	4b7e      	ldr	r3, [pc, #504]	; (800377c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003582:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003586:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800358e:	497b      	ldr	r1, [pc, #492]	; (800377c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003590:	4313      	orrs	r3, r2
 8003592:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f003 0320 	and.w	r3, r3, #32
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d00a      	beq.n	80035b8 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80035a2:	4b76      	ldr	r3, [pc, #472]	; (800377c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80035a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035a8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035b0:	4972      	ldr	r1, [pc, #456]	; (800377c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80035b2:	4313      	orrs	r3, r2
 80035b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d00a      	beq.n	80035da <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80035c4:	4b6d      	ldr	r3, [pc, #436]	; (800377c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80035c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035ca:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035d2:	496a      	ldr	r1, [pc, #424]	; (800377c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80035d4:	4313      	orrs	r3, r2
 80035d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d00a      	beq.n	80035fc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80035e6:	4b65      	ldr	r3, [pc, #404]	; (800377c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80035e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035ec:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035f4:	4961      	ldr	r1, [pc, #388]	; (800377c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80035f6:	4313      	orrs	r3, r2
 80035f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003604:	2b00      	cmp	r3, #0
 8003606:	d00a      	beq.n	800361e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003608:	4b5c      	ldr	r3, [pc, #368]	; (800377c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800360a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800360e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003616:	4959      	ldr	r1, [pc, #356]	; (800377c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003618:	4313      	orrs	r3, r2
 800361a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003626:	2b00      	cmp	r3, #0
 8003628:	d00a      	beq.n	8003640 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800362a:	4b54      	ldr	r3, [pc, #336]	; (800377c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800362c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003630:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003638:	4950      	ldr	r1, [pc, #320]	; (800377c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800363a:	4313      	orrs	r3, r2
 800363c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003648:	2b00      	cmp	r3, #0
 800364a:	d00a      	beq.n	8003662 <HAL_RCCEx_PeriphCLKConfig+0x31e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800364c:	4b4b      	ldr	r3, [pc, #300]	; (800377c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800364e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003652:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800365a:	4948      	ldr	r1, [pc, #288]	; (800377c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800365c:	4313      	orrs	r3, r2
 800365e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800366a:	2b00      	cmp	r3, #0
 800366c:	d00a      	beq.n	8003684 <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800366e:	4b43      	ldr	r3, [pc, #268]	; (800377c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003670:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003674:	f023 0203 	bic.w	r2, r3, #3
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800367c:	493f      	ldr	r1, [pc, #252]	; (800377c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800367e:	4313      	orrs	r3, r2
 8003680:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800368c:	2b00      	cmp	r3, #0
 800368e:	d028      	beq.n	80036e2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003690:	4b3a      	ldr	r3, [pc, #232]	; (800377c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003692:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003696:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800369e:	4937      	ldr	r1, [pc, #220]	; (800377c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80036a0:	4313      	orrs	r3, r2
 80036a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036aa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80036ae:	d106      	bne.n	80036be <HAL_RCCEx_PeriphCLKConfig+0x37a>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80036b0:	4b32      	ldr	r3, [pc, #200]	; (800377c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80036b2:	68db      	ldr	r3, [r3, #12]
 80036b4:	4a31      	ldr	r2, [pc, #196]	; (800377c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80036b6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80036ba:	60d3      	str	r3, [r2, #12]
 80036bc:	e011      	b.n	80036e2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036c2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80036c6:	d10c      	bne.n	80036e2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	3304      	adds	r3, #4
 80036cc:	2101      	movs	r1, #1
 80036ce:	4618      	mov	r0, r3
 80036d0:	f000 f8a4 	bl	800381c <RCCEx_PLLSAI1_Config>
 80036d4:	4603      	mov	r3, r0
 80036d6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80036d8:	7cfb      	ldrb	r3, [r7, #19]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d001      	beq.n	80036e2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
        {
          /* set overall return value */
          status = ret;
 80036de:	7cfb      	ldrb	r3, [r7, #19]
 80036e0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d028      	beq.n	8003740 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80036ee:	4b23      	ldr	r3, [pc, #140]	; (800377c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80036f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036f4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036fc:	491f      	ldr	r1, [pc, #124]	; (800377c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80036fe:	4313      	orrs	r3, r2
 8003700:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003708:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800370c:	d106      	bne.n	800371c <HAL_RCCEx_PeriphCLKConfig+0x3d8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800370e:	4b1b      	ldr	r3, [pc, #108]	; (800377c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003710:	68db      	ldr	r3, [r3, #12]
 8003712:	4a1a      	ldr	r2, [pc, #104]	; (800377c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003714:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003718:	60d3      	str	r3, [r2, #12]
 800371a:	e011      	b.n	8003740 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003720:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003724:	d10c      	bne.n	8003740 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	3304      	adds	r3, #4
 800372a:	2101      	movs	r1, #1
 800372c:	4618      	mov	r0, r3
 800372e:	f000 f875 	bl	800381c <RCCEx_PLLSAI1_Config>
 8003732:	4603      	mov	r3, r0
 8003734:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003736:	7cfb      	ldrb	r3, [r7, #19]
 8003738:	2b00      	cmp	r3, #0
 800373a:	d001      	beq.n	8003740 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
      {
        /* set overall return value */
        status = ret;
 800373c:	7cfb      	ldrb	r3, [r7, #19]
 800373e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003748:	2b00      	cmp	r3, #0
 800374a:	d02b      	beq.n	80037a4 <HAL_RCCEx_PeriphCLKConfig+0x460>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800374c:	4b0b      	ldr	r3, [pc, #44]	; (800377c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800374e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003752:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800375a:	4908      	ldr	r1, [pc, #32]	; (800377c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800375c:	4313      	orrs	r3, r2
 800375e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003766:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800376a:	d109      	bne.n	8003780 <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800376c:	4b03      	ldr	r3, [pc, #12]	; (800377c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800376e:	68db      	ldr	r3, [r3, #12]
 8003770:	4a02      	ldr	r2, [pc, #8]	; (800377c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003772:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003776:	60d3      	str	r3, [r2, #12]
 8003778:	e014      	b.n	80037a4 <HAL_RCCEx_PeriphCLKConfig+0x460>
 800377a:	bf00      	nop
 800377c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003784:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003788:	d10c      	bne.n	80037a4 <HAL_RCCEx_PeriphCLKConfig+0x460>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	3304      	adds	r3, #4
 800378e:	2101      	movs	r1, #1
 8003790:	4618      	mov	r0, r3
 8003792:	f000 f843 	bl	800381c <RCCEx_PLLSAI1_Config>
 8003796:	4603      	mov	r3, r0
 8003798:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800379a:	7cfb      	ldrb	r3, [r7, #19]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d001      	beq.n	80037a4 <HAL_RCCEx_PeriphCLKConfig+0x460>
      {
        /* set overall return value */
        status = ret;
 80037a0:	7cfb      	ldrb	r3, [r7, #19]
 80037a2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d01c      	beq.n	80037ea <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80037b0:	4b19      	ldr	r3, [pc, #100]	; (8003818 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 80037b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037b6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037be:	4916      	ldr	r1, [pc, #88]	; (8003818 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 80037c0:	4313      	orrs	r3, r2
 80037c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037ca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80037ce:	d10c      	bne.n	80037ea <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	3304      	adds	r3, #4
 80037d4:	2102      	movs	r1, #2
 80037d6:	4618      	mov	r0, r3
 80037d8:	f000 f820 	bl	800381c <RCCEx_PLLSAI1_Config>
 80037dc:	4603      	mov	r3, r0
 80037de:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80037e0:	7cfb      	ldrb	r3, [r7, #19]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d001      	beq.n	80037ea <HAL_RCCEx_PeriphCLKConfig+0x4a6>
      {
        /* set overall return value */
        status = ret;
 80037e6:	7cfb      	ldrb	r3, [r7, #19]
 80037e8:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d00a      	beq.n	800380c <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80037f6:	4b08      	ldr	r3, [pc, #32]	; (8003818 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 80037f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037fc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003804:	4904      	ldr	r1, [pc, #16]	; (8003818 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8003806:	4313      	orrs	r3, r2
 8003808:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800380c:	7cbb      	ldrb	r3, [r7, #18]
}
 800380e:	4618      	mov	r0, r3
 8003810:	3718      	adds	r7, #24
 8003812:	46bd      	mov	sp, r7
 8003814:	bd80      	pop	{r7, pc}
 8003816:	bf00      	nop
 8003818:	40021000 	.word	0x40021000

0800381c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b084      	sub	sp, #16
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
 8003824:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003826:	2300      	movs	r3, #0
 8003828:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800382a:	4b74      	ldr	r3, [pc, #464]	; (80039fc <RCCEx_PLLSAI1_Config+0x1e0>)
 800382c:	68db      	ldr	r3, [r3, #12]
 800382e:	f003 0303 	and.w	r3, r3, #3
 8003832:	2b00      	cmp	r3, #0
 8003834:	d018      	beq.n	8003868 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003836:	4b71      	ldr	r3, [pc, #452]	; (80039fc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003838:	68db      	ldr	r3, [r3, #12]
 800383a:	f003 0203 	and.w	r2, r3, #3
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	429a      	cmp	r2, r3
 8003844:	d10d      	bne.n	8003862 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
       ||
 800384a:	2b00      	cmp	r3, #0
 800384c:	d009      	beq.n	8003862 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800384e:	4b6b      	ldr	r3, [pc, #428]	; (80039fc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003850:	68db      	ldr	r3, [r3, #12]
 8003852:	091b      	lsrs	r3, r3, #4
 8003854:	f003 0307 	and.w	r3, r3, #7
 8003858:	1c5a      	adds	r2, r3, #1
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	685b      	ldr	r3, [r3, #4]
       ||
 800385e:	429a      	cmp	r2, r3
 8003860:	d047      	beq.n	80038f2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003862:	2301      	movs	r3, #1
 8003864:	73fb      	strb	r3, [r7, #15]
 8003866:	e044      	b.n	80038f2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	2b03      	cmp	r3, #3
 800386e:	d018      	beq.n	80038a2 <RCCEx_PLLSAI1_Config+0x86>
 8003870:	2b03      	cmp	r3, #3
 8003872:	d825      	bhi.n	80038c0 <RCCEx_PLLSAI1_Config+0xa4>
 8003874:	2b01      	cmp	r3, #1
 8003876:	d002      	beq.n	800387e <RCCEx_PLLSAI1_Config+0x62>
 8003878:	2b02      	cmp	r3, #2
 800387a:	d009      	beq.n	8003890 <RCCEx_PLLSAI1_Config+0x74>
 800387c:	e020      	b.n	80038c0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800387e:	4b5f      	ldr	r3, [pc, #380]	; (80039fc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f003 0302 	and.w	r3, r3, #2
 8003886:	2b00      	cmp	r3, #0
 8003888:	d11d      	bne.n	80038c6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800388a:	2301      	movs	r3, #1
 800388c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800388e:	e01a      	b.n	80038c6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003890:	4b5a      	ldr	r3, [pc, #360]	; (80039fc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003898:	2b00      	cmp	r3, #0
 800389a:	d116      	bne.n	80038ca <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800389c:	2301      	movs	r3, #1
 800389e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80038a0:	e013      	b.n	80038ca <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80038a2:	4b56      	ldr	r3, [pc, #344]	; (80039fc <RCCEx_PLLSAI1_Config+0x1e0>)
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d10f      	bne.n	80038ce <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80038ae:	4b53      	ldr	r3, [pc, #332]	; (80039fc <RCCEx_PLLSAI1_Config+0x1e0>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d109      	bne.n	80038ce <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80038ba:	2301      	movs	r3, #1
 80038bc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80038be:	e006      	b.n	80038ce <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80038c0:	2301      	movs	r3, #1
 80038c2:	73fb      	strb	r3, [r7, #15]
      break;
 80038c4:	e004      	b.n	80038d0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80038c6:	bf00      	nop
 80038c8:	e002      	b.n	80038d0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80038ca:	bf00      	nop
 80038cc:	e000      	b.n	80038d0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80038ce:	bf00      	nop
    }

    if(status == HAL_OK)
 80038d0:	7bfb      	ldrb	r3, [r7, #15]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d10d      	bne.n	80038f2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80038d6:	4b49      	ldr	r3, [pc, #292]	; (80039fc <RCCEx_PLLSAI1_Config+0x1e0>)
 80038d8:	68db      	ldr	r3, [r3, #12]
 80038da:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6819      	ldr	r1, [r3, #0]
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	685b      	ldr	r3, [r3, #4]
 80038e6:	3b01      	subs	r3, #1
 80038e8:	011b      	lsls	r3, r3, #4
 80038ea:	430b      	orrs	r3, r1
 80038ec:	4943      	ldr	r1, [pc, #268]	; (80039fc <RCCEx_PLLSAI1_Config+0x1e0>)
 80038ee:	4313      	orrs	r3, r2
 80038f0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80038f2:	7bfb      	ldrb	r3, [r7, #15]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d17c      	bne.n	80039f2 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80038f8:	4b40      	ldr	r3, [pc, #256]	; (80039fc <RCCEx_PLLSAI1_Config+0x1e0>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	4a3f      	ldr	r2, [pc, #252]	; (80039fc <RCCEx_PLLSAI1_Config+0x1e0>)
 80038fe:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003902:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003904:	f7fd fc6c 	bl	80011e0 <HAL_GetTick>
 8003908:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800390a:	e009      	b.n	8003920 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800390c:	f7fd fc68 	bl	80011e0 <HAL_GetTick>
 8003910:	4602      	mov	r2, r0
 8003912:	68bb      	ldr	r3, [r7, #8]
 8003914:	1ad3      	subs	r3, r2, r3
 8003916:	2b02      	cmp	r3, #2
 8003918:	d902      	bls.n	8003920 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800391a:	2303      	movs	r3, #3
 800391c:	73fb      	strb	r3, [r7, #15]
        break;
 800391e:	e005      	b.n	800392c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003920:	4b36      	ldr	r3, [pc, #216]	; (80039fc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003928:	2b00      	cmp	r3, #0
 800392a:	d1ef      	bne.n	800390c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800392c:	7bfb      	ldrb	r3, [r7, #15]
 800392e:	2b00      	cmp	r3, #0
 8003930:	d15f      	bne.n	80039f2 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	2b00      	cmp	r3, #0
 8003936:	d110      	bne.n	800395a <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003938:	4b30      	ldr	r3, [pc, #192]	; (80039fc <RCCEx_PLLSAI1_Config+0x1e0>)
 800393a:	691b      	ldr	r3, [r3, #16]
 800393c:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8003940:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003944:	687a      	ldr	r2, [r7, #4]
 8003946:	6892      	ldr	r2, [r2, #8]
 8003948:	0211      	lsls	r1, r2, #8
 800394a:	687a      	ldr	r2, [r7, #4]
 800394c:	68d2      	ldr	r2, [r2, #12]
 800394e:	06d2      	lsls	r2, r2, #27
 8003950:	430a      	orrs	r2, r1
 8003952:	492a      	ldr	r1, [pc, #168]	; (80039fc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003954:	4313      	orrs	r3, r2
 8003956:	610b      	str	r3, [r1, #16]
 8003958:	e027      	b.n	80039aa <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	2b01      	cmp	r3, #1
 800395e:	d112      	bne.n	8003986 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003960:	4b26      	ldr	r3, [pc, #152]	; (80039fc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003962:	691b      	ldr	r3, [r3, #16]
 8003964:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003968:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800396c:	687a      	ldr	r2, [r7, #4]
 800396e:	6892      	ldr	r2, [r2, #8]
 8003970:	0211      	lsls	r1, r2, #8
 8003972:	687a      	ldr	r2, [r7, #4]
 8003974:	6912      	ldr	r2, [r2, #16]
 8003976:	0852      	lsrs	r2, r2, #1
 8003978:	3a01      	subs	r2, #1
 800397a:	0552      	lsls	r2, r2, #21
 800397c:	430a      	orrs	r2, r1
 800397e:	491f      	ldr	r1, [pc, #124]	; (80039fc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003980:	4313      	orrs	r3, r2
 8003982:	610b      	str	r3, [r1, #16]
 8003984:	e011      	b.n	80039aa <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003986:	4b1d      	ldr	r3, [pc, #116]	; (80039fc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003988:	691b      	ldr	r3, [r3, #16]
 800398a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800398e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003992:	687a      	ldr	r2, [r7, #4]
 8003994:	6892      	ldr	r2, [r2, #8]
 8003996:	0211      	lsls	r1, r2, #8
 8003998:	687a      	ldr	r2, [r7, #4]
 800399a:	6952      	ldr	r2, [r2, #20]
 800399c:	0852      	lsrs	r2, r2, #1
 800399e:	3a01      	subs	r2, #1
 80039a0:	0652      	lsls	r2, r2, #25
 80039a2:	430a      	orrs	r2, r1
 80039a4:	4915      	ldr	r1, [pc, #84]	; (80039fc <RCCEx_PLLSAI1_Config+0x1e0>)
 80039a6:	4313      	orrs	r3, r2
 80039a8:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80039aa:	4b14      	ldr	r3, [pc, #80]	; (80039fc <RCCEx_PLLSAI1_Config+0x1e0>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	4a13      	ldr	r2, [pc, #76]	; (80039fc <RCCEx_PLLSAI1_Config+0x1e0>)
 80039b0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80039b4:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039b6:	f7fd fc13 	bl	80011e0 <HAL_GetTick>
 80039ba:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80039bc:	e009      	b.n	80039d2 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80039be:	f7fd fc0f 	bl	80011e0 <HAL_GetTick>
 80039c2:	4602      	mov	r2, r0
 80039c4:	68bb      	ldr	r3, [r7, #8]
 80039c6:	1ad3      	subs	r3, r2, r3
 80039c8:	2b02      	cmp	r3, #2
 80039ca:	d902      	bls.n	80039d2 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80039cc:	2303      	movs	r3, #3
 80039ce:	73fb      	strb	r3, [r7, #15]
          break;
 80039d0:	e005      	b.n	80039de <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80039d2:	4b0a      	ldr	r3, [pc, #40]	; (80039fc <RCCEx_PLLSAI1_Config+0x1e0>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d0ef      	beq.n	80039be <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80039de:	7bfb      	ldrb	r3, [r7, #15]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d106      	bne.n	80039f2 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80039e4:	4b05      	ldr	r3, [pc, #20]	; (80039fc <RCCEx_PLLSAI1_Config+0x1e0>)
 80039e6:	691a      	ldr	r2, [r3, #16]
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	699b      	ldr	r3, [r3, #24]
 80039ec:	4903      	ldr	r1, [pc, #12]	; (80039fc <RCCEx_PLLSAI1_Config+0x1e0>)
 80039ee:	4313      	orrs	r3, r2
 80039f0:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80039f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80039f4:	4618      	mov	r0, r3
 80039f6:	3710      	adds	r7, #16
 80039f8:	46bd      	mov	sp, r7
 80039fa:	bd80      	pop	{r7, pc}
 80039fc:	40021000 	.word	0x40021000

08003a00 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b082      	sub	sp, #8
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d101      	bne.n	8003a12 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003a0e:	2301      	movs	r3, #1
 8003a10:	e049      	b.n	8003aa6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a18:	b2db      	uxtb	r3, r3
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d106      	bne.n	8003a2c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	2200      	movs	r2, #0
 8003a22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003a26:	6878      	ldr	r0, [r7, #4]
 8003a28:	f7fd f9d6 	bl	8000dd8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2202      	movs	r2, #2
 8003a30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681a      	ldr	r2, [r3, #0]
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	3304      	adds	r3, #4
 8003a3c:	4619      	mov	r1, r3
 8003a3e:	4610      	mov	r0, r2
 8003a40:	f000 fb5a 	bl	80040f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2201      	movs	r2, #1
 8003a48:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2201      	movs	r2, #1
 8003a50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2201      	movs	r2, #1
 8003a58:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2201      	movs	r2, #1
 8003a60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2201      	movs	r2, #1
 8003a68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2201      	movs	r2, #1
 8003a70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2201      	movs	r2, #1
 8003a78:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2201      	movs	r2, #1
 8003a80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2201      	movs	r2, #1
 8003a88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2201      	movs	r2, #1
 8003a90:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2201      	movs	r2, #1
 8003a98:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2201      	movs	r2, #1
 8003aa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003aa4:	2300      	movs	r3, #0
}
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	3708      	adds	r7, #8
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	bd80      	pop	{r7, pc}

08003aae <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003aae:	b580      	push	{r7, lr}
 8003ab0:	b082      	sub	sp, #8
 8003ab2:	af00      	add	r7, sp, #0
 8003ab4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d101      	bne.n	8003ac0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003abc:	2301      	movs	r3, #1
 8003abe:	e049      	b.n	8003b54 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ac6:	b2db      	uxtb	r3, r3
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d106      	bne.n	8003ada <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2200      	movs	r2, #0
 8003ad0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003ad4:	6878      	ldr	r0, [r7, #4]
 8003ad6:	f000 f841 	bl	8003b5c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2202      	movs	r2, #2
 8003ade:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681a      	ldr	r2, [r3, #0]
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	3304      	adds	r3, #4
 8003aea:	4619      	mov	r1, r3
 8003aec:	4610      	mov	r0, r2
 8003aee:	f000 fb03 	bl	80040f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2201      	movs	r2, #1
 8003af6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	2201      	movs	r2, #1
 8003afe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2201      	movs	r2, #1
 8003b06:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	2201      	movs	r2, #1
 8003b0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2201      	movs	r2, #1
 8003b16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	2201      	movs	r2, #1
 8003b1e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	2201      	movs	r2, #1
 8003b26:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2201      	movs	r2, #1
 8003b2e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2201      	movs	r2, #1
 8003b36:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2201      	movs	r2, #1
 8003b3e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2201      	movs	r2, #1
 8003b46:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2201      	movs	r2, #1
 8003b4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003b52:	2300      	movs	r3, #0
}
 8003b54:	4618      	mov	r0, r3
 8003b56:	3708      	adds	r7, #8
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	bd80      	pop	{r7, pc}

08003b5c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003b5c:	b480      	push	{r7}
 8003b5e:	b083      	sub	sp, #12
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003b64:	bf00      	nop
 8003b66:	370c      	adds	r7, #12
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6e:	4770      	bx	lr

08003b70 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b084      	sub	sp, #16
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
 8003b78:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d109      	bne.n	8003b94 <HAL_TIM_PWM_Start+0x24>
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003b86:	b2db      	uxtb	r3, r3
 8003b88:	2b01      	cmp	r3, #1
 8003b8a:	bf14      	ite	ne
 8003b8c:	2301      	movne	r3, #1
 8003b8e:	2300      	moveq	r3, #0
 8003b90:	b2db      	uxtb	r3, r3
 8003b92:	e03c      	b.n	8003c0e <HAL_TIM_PWM_Start+0x9e>
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	2b04      	cmp	r3, #4
 8003b98:	d109      	bne.n	8003bae <HAL_TIM_PWM_Start+0x3e>
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003ba0:	b2db      	uxtb	r3, r3
 8003ba2:	2b01      	cmp	r3, #1
 8003ba4:	bf14      	ite	ne
 8003ba6:	2301      	movne	r3, #1
 8003ba8:	2300      	moveq	r3, #0
 8003baa:	b2db      	uxtb	r3, r3
 8003bac:	e02f      	b.n	8003c0e <HAL_TIM_PWM_Start+0x9e>
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	2b08      	cmp	r3, #8
 8003bb2:	d109      	bne.n	8003bc8 <HAL_TIM_PWM_Start+0x58>
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003bba:	b2db      	uxtb	r3, r3
 8003bbc:	2b01      	cmp	r3, #1
 8003bbe:	bf14      	ite	ne
 8003bc0:	2301      	movne	r3, #1
 8003bc2:	2300      	moveq	r3, #0
 8003bc4:	b2db      	uxtb	r3, r3
 8003bc6:	e022      	b.n	8003c0e <HAL_TIM_PWM_Start+0x9e>
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	2b0c      	cmp	r3, #12
 8003bcc:	d109      	bne.n	8003be2 <HAL_TIM_PWM_Start+0x72>
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003bd4:	b2db      	uxtb	r3, r3
 8003bd6:	2b01      	cmp	r3, #1
 8003bd8:	bf14      	ite	ne
 8003bda:	2301      	movne	r3, #1
 8003bdc:	2300      	moveq	r3, #0
 8003bde:	b2db      	uxtb	r3, r3
 8003be0:	e015      	b.n	8003c0e <HAL_TIM_PWM_Start+0x9e>
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	2b10      	cmp	r3, #16
 8003be6:	d109      	bne.n	8003bfc <HAL_TIM_PWM_Start+0x8c>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003bee:	b2db      	uxtb	r3, r3
 8003bf0:	2b01      	cmp	r3, #1
 8003bf2:	bf14      	ite	ne
 8003bf4:	2301      	movne	r3, #1
 8003bf6:	2300      	moveq	r3, #0
 8003bf8:	b2db      	uxtb	r3, r3
 8003bfa:	e008      	b.n	8003c0e <HAL_TIM_PWM_Start+0x9e>
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003c02:	b2db      	uxtb	r3, r3
 8003c04:	2b01      	cmp	r3, #1
 8003c06:	bf14      	ite	ne
 8003c08:	2301      	movne	r3, #1
 8003c0a:	2300      	moveq	r3, #0
 8003c0c:	b2db      	uxtb	r3, r3
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d001      	beq.n	8003c16 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8003c12:	2301      	movs	r3, #1
 8003c14:	e083      	b.n	8003d1e <HAL_TIM_PWM_Start+0x1ae>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d104      	bne.n	8003c26 <HAL_TIM_PWM_Start+0xb6>
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2202      	movs	r2, #2
 8003c20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c24:	e023      	b.n	8003c6e <HAL_TIM_PWM_Start+0xfe>
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	2b04      	cmp	r3, #4
 8003c2a:	d104      	bne.n	8003c36 <HAL_TIM_PWM_Start+0xc6>
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2202      	movs	r2, #2
 8003c30:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c34:	e01b      	b.n	8003c6e <HAL_TIM_PWM_Start+0xfe>
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	2b08      	cmp	r3, #8
 8003c3a:	d104      	bne.n	8003c46 <HAL_TIM_PWM_Start+0xd6>
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2202      	movs	r2, #2
 8003c40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c44:	e013      	b.n	8003c6e <HAL_TIM_PWM_Start+0xfe>
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	2b0c      	cmp	r3, #12
 8003c4a:	d104      	bne.n	8003c56 <HAL_TIM_PWM_Start+0xe6>
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2202      	movs	r2, #2
 8003c50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003c54:	e00b      	b.n	8003c6e <HAL_TIM_PWM_Start+0xfe>
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	2b10      	cmp	r3, #16
 8003c5a:	d104      	bne.n	8003c66 <HAL_TIM_PWM_Start+0xf6>
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2202      	movs	r2, #2
 8003c60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003c64:	e003      	b.n	8003c6e <HAL_TIM_PWM_Start+0xfe>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2202      	movs	r2, #2
 8003c6a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	2201      	movs	r2, #1
 8003c74:	6839      	ldr	r1, [r7, #0]
 8003c76:	4618      	mov	r0, r3
 8003c78:	f000 fdc4 	bl	8004804 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	4a29      	ldr	r2, [pc, #164]	; (8003d28 <HAL_TIM_PWM_Start+0x1b8>)
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d009      	beq.n	8003c9a <HAL_TIM_PWM_Start+0x12a>
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4a28      	ldr	r2, [pc, #160]	; (8003d2c <HAL_TIM_PWM_Start+0x1bc>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d004      	beq.n	8003c9a <HAL_TIM_PWM_Start+0x12a>
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	4a26      	ldr	r2, [pc, #152]	; (8003d30 <HAL_TIM_PWM_Start+0x1c0>)
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d101      	bne.n	8003c9e <HAL_TIM_PWM_Start+0x12e>
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	e000      	b.n	8003ca0 <HAL_TIM_PWM_Start+0x130>
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d007      	beq.n	8003cb4 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003cb2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4a1b      	ldr	r2, [pc, #108]	; (8003d28 <HAL_TIM_PWM_Start+0x1b8>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d00e      	beq.n	8003cdc <HAL_TIM_PWM_Start+0x16c>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cc6:	d009      	beq.n	8003cdc <HAL_TIM_PWM_Start+0x16c>
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4a19      	ldr	r2, [pc, #100]	; (8003d34 <HAL_TIM_PWM_Start+0x1c4>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d004      	beq.n	8003cdc <HAL_TIM_PWM_Start+0x16c>
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	4a15      	ldr	r2, [pc, #84]	; (8003d2c <HAL_TIM_PWM_Start+0x1bc>)
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	d115      	bne.n	8003d08 <HAL_TIM_PWM_Start+0x198>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	689a      	ldr	r2, [r3, #8]
 8003ce2:	4b15      	ldr	r3, [pc, #84]	; (8003d38 <HAL_TIM_PWM_Start+0x1c8>)
 8003ce4:	4013      	ands	r3, r2
 8003ce6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	2b06      	cmp	r3, #6
 8003cec:	d015      	beq.n	8003d1a <HAL_TIM_PWM_Start+0x1aa>
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003cf4:	d011      	beq.n	8003d1a <HAL_TIM_PWM_Start+0x1aa>
    {
      __HAL_TIM_ENABLE(htim);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	681a      	ldr	r2, [r3, #0]
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f042 0201 	orr.w	r2, r2, #1
 8003d04:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d06:	e008      	b.n	8003d1a <HAL_TIM_PWM_Start+0x1aa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	681a      	ldr	r2, [r3, #0]
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f042 0201 	orr.w	r2, r2, #1
 8003d16:	601a      	str	r2, [r3, #0]
 8003d18:	e000      	b.n	8003d1c <HAL_TIM_PWM_Start+0x1ac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d1a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003d1c:	2300      	movs	r3, #0
}
 8003d1e:	4618      	mov	r0, r3
 8003d20:	3710      	adds	r7, #16
 8003d22:	46bd      	mov	sp, r7
 8003d24:	bd80      	pop	{r7, pc}
 8003d26:	bf00      	nop
 8003d28:	40012c00 	.word	0x40012c00
 8003d2c:	40014000 	.word	0x40014000
 8003d30:	40014400 	.word	0x40014400
 8003d34:	40000400 	.word	0x40000400
 8003d38:	00010007 	.word	0x00010007

08003d3c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b086      	sub	sp, #24
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	60f8      	str	r0, [r7, #12]
 8003d44:	60b9      	str	r1, [r7, #8]
 8003d46:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d48:	2300      	movs	r3, #0
 8003d4a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d52:	2b01      	cmp	r3, #1
 8003d54:	d101      	bne.n	8003d5a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003d56:	2302      	movs	r3, #2
 8003d58:	e0ff      	b.n	8003f5a <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	2201      	movs	r2, #1
 8003d5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2b14      	cmp	r3, #20
 8003d66:	f200 80f0 	bhi.w	8003f4a <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003d6a:	a201      	add	r2, pc, #4	; (adr r2, 8003d70 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003d6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d70:	08003dc5 	.word	0x08003dc5
 8003d74:	08003f4b 	.word	0x08003f4b
 8003d78:	08003f4b 	.word	0x08003f4b
 8003d7c:	08003f4b 	.word	0x08003f4b
 8003d80:	08003e05 	.word	0x08003e05
 8003d84:	08003f4b 	.word	0x08003f4b
 8003d88:	08003f4b 	.word	0x08003f4b
 8003d8c:	08003f4b 	.word	0x08003f4b
 8003d90:	08003e47 	.word	0x08003e47
 8003d94:	08003f4b 	.word	0x08003f4b
 8003d98:	08003f4b 	.word	0x08003f4b
 8003d9c:	08003f4b 	.word	0x08003f4b
 8003da0:	08003e87 	.word	0x08003e87
 8003da4:	08003f4b 	.word	0x08003f4b
 8003da8:	08003f4b 	.word	0x08003f4b
 8003dac:	08003f4b 	.word	0x08003f4b
 8003db0:	08003ec9 	.word	0x08003ec9
 8003db4:	08003f4b 	.word	0x08003f4b
 8003db8:	08003f4b 	.word	0x08003f4b
 8003dbc:	08003f4b 	.word	0x08003f4b
 8003dc0:	08003f09 	.word	0x08003f09
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	68b9      	ldr	r1, [r7, #8]
 8003dca:	4618      	mov	r0, r3
 8003dcc:	f000 fa02 	bl	80041d4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	699a      	ldr	r2, [r3, #24]
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f042 0208 	orr.w	r2, r2, #8
 8003dde:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	699a      	ldr	r2, [r3, #24]
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f022 0204 	bic.w	r2, r2, #4
 8003dee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	6999      	ldr	r1, [r3, #24]
 8003df6:	68bb      	ldr	r3, [r7, #8]
 8003df8:	691a      	ldr	r2, [r3, #16]
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	430a      	orrs	r2, r1
 8003e00:	619a      	str	r2, [r3, #24]
      break;
 8003e02:	e0a5      	b.n	8003f50 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	68b9      	ldr	r1, [r7, #8]
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	f000 fa5e 	bl	80042cc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	699a      	ldr	r2, [r3, #24]
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003e1e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	699a      	ldr	r2, [r3, #24]
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e2e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	6999      	ldr	r1, [r3, #24]
 8003e36:	68bb      	ldr	r3, [r7, #8]
 8003e38:	691b      	ldr	r3, [r3, #16]
 8003e3a:	021a      	lsls	r2, r3, #8
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	430a      	orrs	r2, r1
 8003e42:	619a      	str	r2, [r3, #24]
      break;
 8003e44:	e084      	b.n	8003f50 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	68b9      	ldr	r1, [r7, #8]
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	f000 fab7 	bl	80043c0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	69da      	ldr	r2, [r3, #28]
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f042 0208 	orr.w	r2, r2, #8
 8003e60:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	69da      	ldr	r2, [r3, #28]
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f022 0204 	bic.w	r2, r2, #4
 8003e70:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	69d9      	ldr	r1, [r3, #28]
 8003e78:	68bb      	ldr	r3, [r7, #8]
 8003e7a:	691a      	ldr	r2, [r3, #16]
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	430a      	orrs	r2, r1
 8003e82:	61da      	str	r2, [r3, #28]
      break;
 8003e84:	e064      	b.n	8003f50 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	68b9      	ldr	r1, [r7, #8]
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	f000 fb0f 	bl	80044b0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	69da      	ldr	r2, [r3, #28]
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003ea0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	69da      	ldr	r2, [r3, #28]
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003eb0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	69d9      	ldr	r1, [r3, #28]
 8003eb8:	68bb      	ldr	r3, [r7, #8]
 8003eba:	691b      	ldr	r3, [r3, #16]
 8003ebc:	021a      	lsls	r2, r3, #8
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	430a      	orrs	r2, r1
 8003ec4:	61da      	str	r2, [r3, #28]
      break;
 8003ec6:	e043      	b.n	8003f50 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	68b9      	ldr	r1, [r7, #8]
 8003ece:	4618      	mov	r0, r3
 8003ed0:	f000 fb4c 	bl	800456c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f042 0208 	orr.w	r2, r2, #8
 8003ee2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f022 0204 	bic.w	r2, r2, #4
 8003ef2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003efa:	68bb      	ldr	r3, [r7, #8]
 8003efc:	691a      	ldr	r2, [r3, #16]
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	430a      	orrs	r2, r1
 8003f04:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003f06:	e023      	b.n	8003f50 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	68b9      	ldr	r1, [r7, #8]
 8003f0e:	4618      	mov	r0, r3
 8003f10:	f000 fb84 	bl	800461c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003f22:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f32:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003f3a:	68bb      	ldr	r3, [r7, #8]
 8003f3c:	691b      	ldr	r3, [r3, #16]
 8003f3e:	021a      	lsls	r2, r3, #8
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	430a      	orrs	r2, r1
 8003f46:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003f48:	e002      	b.n	8003f50 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	75fb      	strb	r3, [r7, #23]
      break;
 8003f4e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	2200      	movs	r2, #0
 8003f54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003f58:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	3718      	adds	r7, #24
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	bd80      	pop	{r7, pc}
 8003f62:	bf00      	nop

08003f64 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b084      	sub	sp, #16
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
 8003f6c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003f6e:	2300      	movs	r3, #0
 8003f70:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f78:	2b01      	cmp	r3, #1
 8003f7a:	d101      	bne.n	8003f80 <HAL_TIM_ConfigClockSource+0x1c>
 8003f7c:	2302      	movs	r3, #2
 8003f7e:	e0b6      	b.n	80040ee <HAL_TIM_ConfigClockSource+0x18a>
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2201      	movs	r2, #1
 8003f84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2202      	movs	r2, #2
 8003f8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	689b      	ldr	r3, [r3, #8]
 8003f96:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003f98:	68bb      	ldr	r3, [r7, #8]
 8003f9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f9e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003fa2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003fa4:	68bb      	ldr	r3, [r7, #8]
 8003fa6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003faa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	68ba      	ldr	r2, [r7, #8]
 8003fb2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003fbc:	d03e      	beq.n	800403c <HAL_TIM_ConfigClockSource+0xd8>
 8003fbe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003fc2:	f200 8087 	bhi.w	80040d4 <HAL_TIM_ConfigClockSource+0x170>
 8003fc6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fca:	f000 8086 	beq.w	80040da <HAL_TIM_ConfigClockSource+0x176>
 8003fce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fd2:	d87f      	bhi.n	80040d4 <HAL_TIM_ConfigClockSource+0x170>
 8003fd4:	2b70      	cmp	r3, #112	; 0x70
 8003fd6:	d01a      	beq.n	800400e <HAL_TIM_ConfigClockSource+0xaa>
 8003fd8:	2b70      	cmp	r3, #112	; 0x70
 8003fda:	d87b      	bhi.n	80040d4 <HAL_TIM_ConfigClockSource+0x170>
 8003fdc:	2b60      	cmp	r3, #96	; 0x60
 8003fde:	d050      	beq.n	8004082 <HAL_TIM_ConfigClockSource+0x11e>
 8003fe0:	2b60      	cmp	r3, #96	; 0x60
 8003fe2:	d877      	bhi.n	80040d4 <HAL_TIM_ConfigClockSource+0x170>
 8003fe4:	2b50      	cmp	r3, #80	; 0x50
 8003fe6:	d03c      	beq.n	8004062 <HAL_TIM_ConfigClockSource+0xfe>
 8003fe8:	2b50      	cmp	r3, #80	; 0x50
 8003fea:	d873      	bhi.n	80040d4 <HAL_TIM_ConfigClockSource+0x170>
 8003fec:	2b40      	cmp	r3, #64	; 0x40
 8003fee:	d058      	beq.n	80040a2 <HAL_TIM_ConfigClockSource+0x13e>
 8003ff0:	2b40      	cmp	r3, #64	; 0x40
 8003ff2:	d86f      	bhi.n	80040d4 <HAL_TIM_ConfigClockSource+0x170>
 8003ff4:	2b30      	cmp	r3, #48	; 0x30
 8003ff6:	d064      	beq.n	80040c2 <HAL_TIM_ConfigClockSource+0x15e>
 8003ff8:	2b30      	cmp	r3, #48	; 0x30
 8003ffa:	d86b      	bhi.n	80040d4 <HAL_TIM_ConfigClockSource+0x170>
 8003ffc:	2b20      	cmp	r3, #32
 8003ffe:	d060      	beq.n	80040c2 <HAL_TIM_ConfigClockSource+0x15e>
 8004000:	2b20      	cmp	r3, #32
 8004002:	d867      	bhi.n	80040d4 <HAL_TIM_ConfigClockSource+0x170>
 8004004:	2b00      	cmp	r3, #0
 8004006:	d05c      	beq.n	80040c2 <HAL_TIM_ConfigClockSource+0x15e>
 8004008:	2b10      	cmp	r3, #16
 800400a:	d05a      	beq.n	80040c2 <HAL_TIM_ConfigClockSource+0x15e>
 800400c:	e062      	b.n	80040d4 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6818      	ldr	r0, [r3, #0]
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	6899      	ldr	r1, [r3, #8]
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	685a      	ldr	r2, [r3, #4]
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	68db      	ldr	r3, [r3, #12]
 800401e:	f000 fbd1 	bl	80047c4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	689b      	ldr	r3, [r3, #8]
 8004028:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800402a:	68bb      	ldr	r3, [r7, #8]
 800402c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004030:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	68ba      	ldr	r2, [r7, #8]
 8004038:	609a      	str	r2, [r3, #8]
      break;
 800403a:	e04f      	b.n	80040dc <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6818      	ldr	r0, [r3, #0]
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	6899      	ldr	r1, [r3, #8]
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	685a      	ldr	r2, [r3, #4]
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	68db      	ldr	r3, [r3, #12]
 800404c:	f000 fbba 	bl	80047c4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	689a      	ldr	r2, [r3, #8]
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800405e:	609a      	str	r2, [r3, #8]
      break;
 8004060:	e03c      	b.n	80040dc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6818      	ldr	r0, [r3, #0]
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	6859      	ldr	r1, [r3, #4]
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	68db      	ldr	r3, [r3, #12]
 800406e:	461a      	mov	r2, r3
 8004070:	f000 fb2e 	bl	80046d0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	2150      	movs	r1, #80	; 0x50
 800407a:	4618      	mov	r0, r3
 800407c:	f000 fb87 	bl	800478e <TIM_ITRx_SetConfig>
      break;
 8004080:	e02c      	b.n	80040dc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6818      	ldr	r0, [r3, #0]
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	6859      	ldr	r1, [r3, #4]
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	68db      	ldr	r3, [r3, #12]
 800408e:	461a      	mov	r2, r3
 8004090:	f000 fb4d 	bl	800472e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	2160      	movs	r1, #96	; 0x60
 800409a:	4618      	mov	r0, r3
 800409c:	f000 fb77 	bl	800478e <TIM_ITRx_SetConfig>
      break;
 80040a0:	e01c      	b.n	80040dc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6818      	ldr	r0, [r3, #0]
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	6859      	ldr	r1, [r3, #4]
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	68db      	ldr	r3, [r3, #12]
 80040ae:	461a      	mov	r2, r3
 80040b0:	f000 fb0e 	bl	80046d0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	2140      	movs	r1, #64	; 0x40
 80040ba:	4618      	mov	r0, r3
 80040bc:	f000 fb67 	bl	800478e <TIM_ITRx_SetConfig>
      break;
 80040c0:	e00c      	b.n	80040dc <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681a      	ldr	r2, [r3, #0]
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	4619      	mov	r1, r3
 80040cc:	4610      	mov	r0, r2
 80040ce:	f000 fb5e 	bl	800478e <TIM_ITRx_SetConfig>
      break;
 80040d2:	e003      	b.n	80040dc <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80040d4:	2301      	movs	r3, #1
 80040d6:	73fb      	strb	r3, [r7, #15]
      break;
 80040d8:	e000      	b.n	80040dc <HAL_TIM_ConfigClockSource+0x178>
      break;
 80040da:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2201      	movs	r2, #1
 80040e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2200      	movs	r2, #0
 80040e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80040ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80040ee:	4618      	mov	r0, r3
 80040f0:	3710      	adds	r7, #16
 80040f2:	46bd      	mov	sp, r7
 80040f4:	bd80      	pop	{r7, pc}
	...

080040f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80040f8:	b480      	push	{r7}
 80040fa:	b085      	sub	sp, #20
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
 8004100:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	4a2e      	ldr	r2, [pc, #184]	; (80041c4 <TIM_Base_SetConfig+0xcc>)
 800410c:	4293      	cmp	r3, r2
 800410e:	d007      	beq.n	8004120 <TIM_Base_SetConfig+0x28>
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004116:	d003      	beq.n	8004120 <TIM_Base_SetConfig+0x28>
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	4a2b      	ldr	r2, [pc, #172]	; (80041c8 <TIM_Base_SetConfig+0xd0>)
 800411c:	4293      	cmp	r3, r2
 800411e:	d108      	bne.n	8004132 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004126:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	685b      	ldr	r3, [r3, #4]
 800412c:	68fa      	ldr	r2, [r7, #12]
 800412e:	4313      	orrs	r3, r2
 8004130:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	4a23      	ldr	r2, [pc, #140]	; (80041c4 <TIM_Base_SetConfig+0xcc>)
 8004136:	4293      	cmp	r3, r2
 8004138:	d00f      	beq.n	800415a <TIM_Base_SetConfig+0x62>
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004140:	d00b      	beq.n	800415a <TIM_Base_SetConfig+0x62>
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	4a20      	ldr	r2, [pc, #128]	; (80041c8 <TIM_Base_SetConfig+0xd0>)
 8004146:	4293      	cmp	r3, r2
 8004148:	d007      	beq.n	800415a <TIM_Base_SetConfig+0x62>
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	4a1f      	ldr	r2, [pc, #124]	; (80041cc <TIM_Base_SetConfig+0xd4>)
 800414e:	4293      	cmp	r3, r2
 8004150:	d003      	beq.n	800415a <TIM_Base_SetConfig+0x62>
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	4a1e      	ldr	r2, [pc, #120]	; (80041d0 <TIM_Base_SetConfig+0xd8>)
 8004156:	4293      	cmp	r3, r2
 8004158:	d108      	bne.n	800416c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004160:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	68db      	ldr	r3, [r3, #12]
 8004166:	68fa      	ldr	r2, [r7, #12]
 8004168:	4313      	orrs	r3, r2
 800416a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	695b      	ldr	r3, [r3, #20]
 8004176:	4313      	orrs	r3, r2
 8004178:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	68fa      	ldr	r2, [r7, #12]
 800417e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	689a      	ldr	r2, [r3, #8]
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	681a      	ldr	r2, [r3, #0]
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	4a0c      	ldr	r2, [pc, #48]	; (80041c4 <TIM_Base_SetConfig+0xcc>)
 8004194:	4293      	cmp	r3, r2
 8004196:	d007      	beq.n	80041a8 <TIM_Base_SetConfig+0xb0>
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	4a0c      	ldr	r2, [pc, #48]	; (80041cc <TIM_Base_SetConfig+0xd4>)
 800419c:	4293      	cmp	r3, r2
 800419e:	d003      	beq.n	80041a8 <TIM_Base_SetConfig+0xb0>
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	4a0b      	ldr	r2, [pc, #44]	; (80041d0 <TIM_Base_SetConfig+0xd8>)
 80041a4:	4293      	cmp	r3, r2
 80041a6:	d103      	bne.n	80041b0 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	691a      	ldr	r2, [r3, #16]
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2201      	movs	r2, #1
 80041b4:	615a      	str	r2, [r3, #20]
}
 80041b6:	bf00      	nop
 80041b8:	3714      	adds	r7, #20
 80041ba:	46bd      	mov	sp, r7
 80041bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c0:	4770      	bx	lr
 80041c2:	bf00      	nop
 80041c4:	40012c00 	.word	0x40012c00
 80041c8:	40000400 	.word	0x40000400
 80041cc:	40014000 	.word	0x40014000
 80041d0:	40014400 	.word	0x40014400

080041d4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80041d4:	b480      	push	{r7}
 80041d6:	b087      	sub	sp, #28
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
 80041dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6a1b      	ldr	r3, [r3, #32]
 80041e2:	f023 0201 	bic.w	r2, r3, #1
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6a1b      	ldr	r3, [r3, #32]
 80041ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	685b      	ldr	r3, [r3, #4]
 80041f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	699b      	ldr	r3, [r3, #24]
 80041fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004202:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004206:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	f023 0303 	bic.w	r3, r3, #3
 800420e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	68fa      	ldr	r2, [r7, #12]
 8004216:	4313      	orrs	r3, r2
 8004218:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800421a:	697b      	ldr	r3, [r7, #20]
 800421c:	f023 0302 	bic.w	r3, r3, #2
 8004220:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	689b      	ldr	r3, [r3, #8]
 8004226:	697a      	ldr	r2, [r7, #20]
 8004228:	4313      	orrs	r3, r2
 800422a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	4a24      	ldr	r2, [pc, #144]	; (80042c0 <TIM_OC1_SetConfig+0xec>)
 8004230:	4293      	cmp	r3, r2
 8004232:	d007      	beq.n	8004244 <TIM_OC1_SetConfig+0x70>
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	4a23      	ldr	r2, [pc, #140]	; (80042c4 <TIM_OC1_SetConfig+0xf0>)
 8004238:	4293      	cmp	r3, r2
 800423a:	d003      	beq.n	8004244 <TIM_OC1_SetConfig+0x70>
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	4a22      	ldr	r2, [pc, #136]	; (80042c8 <TIM_OC1_SetConfig+0xf4>)
 8004240:	4293      	cmp	r3, r2
 8004242:	d10c      	bne.n	800425e <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004244:	697b      	ldr	r3, [r7, #20]
 8004246:	f023 0308 	bic.w	r3, r3, #8
 800424a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	68db      	ldr	r3, [r3, #12]
 8004250:	697a      	ldr	r2, [r7, #20]
 8004252:	4313      	orrs	r3, r2
 8004254:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004256:	697b      	ldr	r3, [r7, #20]
 8004258:	f023 0304 	bic.w	r3, r3, #4
 800425c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	4a17      	ldr	r2, [pc, #92]	; (80042c0 <TIM_OC1_SetConfig+0xec>)
 8004262:	4293      	cmp	r3, r2
 8004264:	d007      	beq.n	8004276 <TIM_OC1_SetConfig+0xa2>
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	4a16      	ldr	r2, [pc, #88]	; (80042c4 <TIM_OC1_SetConfig+0xf0>)
 800426a:	4293      	cmp	r3, r2
 800426c:	d003      	beq.n	8004276 <TIM_OC1_SetConfig+0xa2>
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	4a15      	ldr	r2, [pc, #84]	; (80042c8 <TIM_OC1_SetConfig+0xf4>)
 8004272:	4293      	cmp	r3, r2
 8004274:	d111      	bne.n	800429a <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004276:	693b      	ldr	r3, [r7, #16]
 8004278:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800427c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800427e:	693b      	ldr	r3, [r7, #16]
 8004280:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004284:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	695b      	ldr	r3, [r3, #20]
 800428a:	693a      	ldr	r2, [r7, #16]
 800428c:	4313      	orrs	r3, r2
 800428e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	699b      	ldr	r3, [r3, #24]
 8004294:	693a      	ldr	r2, [r7, #16]
 8004296:	4313      	orrs	r3, r2
 8004298:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	693a      	ldr	r2, [r7, #16]
 800429e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	68fa      	ldr	r2, [r7, #12]
 80042a4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	685a      	ldr	r2, [r3, #4]
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	697a      	ldr	r2, [r7, #20]
 80042b2:	621a      	str	r2, [r3, #32]
}
 80042b4:	bf00      	nop
 80042b6:	371c      	adds	r7, #28
 80042b8:	46bd      	mov	sp, r7
 80042ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042be:	4770      	bx	lr
 80042c0:	40012c00 	.word	0x40012c00
 80042c4:	40014000 	.word	0x40014000
 80042c8:	40014400 	.word	0x40014400

080042cc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80042cc:	b480      	push	{r7}
 80042ce:	b087      	sub	sp, #28
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
 80042d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6a1b      	ldr	r3, [r3, #32]
 80042da:	f023 0210 	bic.w	r2, r3, #16
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6a1b      	ldr	r3, [r3, #32]
 80042e6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	685b      	ldr	r3, [r3, #4]
 80042ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	699b      	ldr	r3, [r3, #24]
 80042f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80042fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80042fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004306:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	021b      	lsls	r3, r3, #8
 800430e:	68fa      	ldr	r2, [r7, #12]
 8004310:	4313      	orrs	r3, r2
 8004312:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004314:	697b      	ldr	r3, [r7, #20]
 8004316:	f023 0320 	bic.w	r3, r3, #32
 800431a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	689b      	ldr	r3, [r3, #8]
 8004320:	011b      	lsls	r3, r3, #4
 8004322:	697a      	ldr	r2, [r7, #20]
 8004324:	4313      	orrs	r3, r2
 8004326:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	4a22      	ldr	r2, [pc, #136]	; (80043b4 <TIM_OC2_SetConfig+0xe8>)
 800432c:	4293      	cmp	r3, r2
 800432e:	d10d      	bne.n	800434c <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004330:	697b      	ldr	r3, [r7, #20]
 8004332:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004336:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	68db      	ldr	r3, [r3, #12]
 800433c:	011b      	lsls	r3, r3, #4
 800433e:	697a      	ldr	r2, [r7, #20]
 8004340:	4313      	orrs	r3, r2
 8004342:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004344:	697b      	ldr	r3, [r7, #20]
 8004346:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800434a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	4a19      	ldr	r2, [pc, #100]	; (80043b4 <TIM_OC2_SetConfig+0xe8>)
 8004350:	4293      	cmp	r3, r2
 8004352:	d007      	beq.n	8004364 <TIM_OC2_SetConfig+0x98>
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	4a18      	ldr	r2, [pc, #96]	; (80043b8 <TIM_OC2_SetConfig+0xec>)
 8004358:	4293      	cmp	r3, r2
 800435a:	d003      	beq.n	8004364 <TIM_OC2_SetConfig+0x98>
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	4a17      	ldr	r2, [pc, #92]	; (80043bc <TIM_OC2_SetConfig+0xf0>)
 8004360:	4293      	cmp	r3, r2
 8004362:	d113      	bne.n	800438c <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004364:	693b      	ldr	r3, [r7, #16]
 8004366:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800436a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800436c:	693b      	ldr	r3, [r7, #16]
 800436e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004372:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	695b      	ldr	r3, [r3, #20]
 8004378:	009b      	lsls	r3, r3, #2
 800437a:	693a      	ldr	r2, [r7, #16]
 800437c:	4313      	orrs	r3, r2
 800437e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	699b      	ldr	r3, [r3, #24]
 8004384:	009b      	lsls	r3, r3, #2
 8004386:	693a      	ldr	r2, [r7, #16]
 8004388:	4313      	orrs	r3, r2
 800438a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	693a      	ldr	r2, [r7, #16]
 8004390:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	68fa      	ldr	r2, [r7, #12]
 8004396:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	685a      	ldr	r2, [r3, #4]
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	697a      	ldr	r2, [r7, #20]
 80043a4:	621a      	str	r2, [r3, #32]
}
 80043a6:	bf00      	nop
 80043a8:	371c      	adds	r7, #28
 80043aa:	46bd      	mov	sp, r7
 80043ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b0:	4770      	bx	lr
 80043b2:	bf00      	nop
 80043b4:	40012c00 	.word	0x40012c00
 80043b8:	40014000 	.word	0x40014000
 80043bc:	40014400 	.word	0x40014400

080043c0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80043c0:	b480      	push	{r7}
 80043c2:	b087      	sub	sp, #28
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
 80043c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6a1b      	ldr	r3, [r3, #32]
 80043ce:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6a1b      	ldr	r3, [r3, #32]
 80043da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	685b      	ldr	r3, [r3, #4]
 80043e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	69db      	ldr	r3, [r3, #28]
 80043e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	f023 0303 	bic.w	r3, r3, #3
 80043fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	68fa      	ldr	r2, [r7, #12]
 8004402:	4313      	orrs	r3, r2
 8004404:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004406:	697b      	ldr	r3, [r7, #20]
 8004408:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800440c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	689b      	ldr	r3, [r3, #8]
 8004412:	021b      	lsls	r3, r3, #8
 8004414:	697a      	ldr	r2, [r7, #20]
 8004416:	4313      	orrs	r3, r2
 8004418:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	4a21      	ldr	r2, [pc, #132]	; (80044a4 <TIM_OC3_SetConfig+0xe4>)
 800441e:	4293      	cmp	r3, r2
 8004420:	d10d      	bne.n	800443e <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004422:	697b      	ldr	r3, [r7, #20]
 8004424:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004428:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800442a:	683b      	ldr	r3, [r7, #0]
 800442c:	68db      	ldr	r3, [r3, #12]
 800442e:	021b      	lsls	r3, r3, #8
 8004430:	697a      	ldr	r2, [r7, #20]
 8004432:	4313      	orrs	r3, r2
 8004434:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004436:	697b      	ldr	r3, [r7, #20]
 8004438:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800443c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	4a18      	ldr	r2, [pc, #96]	; (80044a4 <TIM_OC3_SetConfig+0xe4>)
 8004442:	4293      	cmp	r3, r2
 8004444:	d007      	beq.n	8004456 <TIM_OC3_SetConfig+0x96>
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	4a17      	ldr	r2, [pc, #92]	; (80044a8 <TIM_OC3_SetConfig+0xe8>)
 800444a:	4293      	cmp	r3, r2
 800444c:	d003      	beq.n	8004456 <TIM_OC3_SetConfig+0x96>
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	4a16      	ldr	r2, [pc, #88]	; (80044ac <TIM_OC3_SetConfig+0xec>)
 8004452:	4293      	cmp	r3, r2
 8004454:	d113      	bne.n	800447e <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004456:	693b      	ldr	r3, [r7, #16]
 8004458:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800445c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800445e:	693b      	ldr	r3, [r7, #16]
 8004460:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004464:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	695b      	ldr	r3, [r3, #20]
 800446a:	011b      	lsls	r3, r3, #4
 800446c:	693a      	ldr	r2, [r7, #16]
 800446e:	4313      	orrs	r3, r2
 8004470:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	699b      	ldr	r3, [r3, #24]
 8004476:	011b      	lsls	r3, r3, #4
 8004478:	693a      	ldr	r2, [r7, #16]
 800447a:	4313      	orrs	r3, r2
 800447c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	693a      	ldr	r2, [r7, #16]
 8004482:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	68fa      	ldr	r2, [r7, #12]
 8004488:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800448a:	683b      	ldr	r3, [r7, #0]
 800448c:	685a      	ldr	r2, [r3, #4]
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	697a      	ldr	r2, [r7, #20]
 8004496:	621a      	str	r2, [r3, #32]
}
 8004498:	bf00      	nop
 800449a:	371c      	adds	r7, #28
 800449c:	46bd      	mov	sp, r7
 800449e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a2:	4770      	bx	lr
 80044a4:	40012c00 	.word	0x40012c00
 80044a8:	40014000 	.word	0x40014000
 80044ac:	40014400 	.word	0x40014400

080044b0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80044b0:	b480      	push	{r7}
 80044b2:	b087      	sub	sp, #28
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
 80044b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6a1b      	ldr	r3, [r3, #32]
 80044be:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6a1b      	ldr	r3, [r3, #32]
 80044ca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	685b      	ldr	r3, [r3, #4]
 80044d0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	69db      	ldr	r3, [r3, #28]
 80044d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80044de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80044e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	021b      	lsls	r3, r3, #8
 80044f2:	68fa      	ldr	r2, [r7, #12]
 80044f4:	4313      	orrs	r3, r2
 80044f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80044f8:	693b      	ldr	r3, [r7, #16]
 80044fa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80044fe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	689b      	ldr	r3, [r3, #8]
 8004504:	031b      	lsls	r3, r3, #12
 8004506:	693a      	ldr	r2, [r7, #16]
 8004508:	4313      	orrs	r3, r2
 800450a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	4a14      	ldr	r2, [pc, #80]	; (8004560 <TIM_OC4_SetConfig+0xb0>)
 8004510:	4293      	cmp	r3, r2
 8004512:	d007      	beq.n	8004524 <TIM_OC4_SetConfig+0x74>
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	4a13      	ldr	r2, [pc, #76]	; (8004564 <TIM_OC4_SetConfig+0xb4>)
 8004518:	4293      	cmp	r3, r2
 800451a:	d003      	beq.n	8004524 <TIM_OC4_SetConfig+0x74>
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	4a12      	ldr	r2, [pc, #72]	; (8004568 <TIM_OC4_SetConfig+0xb8>)
 8004520:	4293      	cmp	r3, r2
 8004522:	d109      	bne.n	8004538 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004524:	697b      	ldr	r3, [r7, #20]
 8004526:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800452a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	695b      	ldr	r3, [r3, #20]
 8004530:	019b      	lsls	r3, r3, #6
 8004532:	697a      	ldr	r2, [r7, #20]
 8004534:	4313      	orrs	r3, r2
 8004536:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	697a      	ldr	r2, [r7, #20]
 800453c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	68fa      	ldr	r2, [r7, #12]
 8004542:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	685a      	ldr	r2, [r3, #4]
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	693a      	ldr	r2, [r7, #16]
 8004550:	621a      	str	r2, [r3, #32]
}
 8004552:	bf00      	nop
 8004554:	371c      	adds	r7, #28
 8004556:	46bd      	mov	sp, r7
 8004558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455c:	4770      	bx	lr
 800455e:	bf00      	nop
 8004560:	40012c00 	.word	0x40012c00
 8004564:	40014000 	.word	0x40014000
 8004568:	40014400 	.word	0x40014400

0800456c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800456c:	b480      	push	{r7}
 800456e:	b087      	sub	sp, #28
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
 8004574:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6a1b      	ldr	r3, [r3, #32]
 800457a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6a1b      	ldr	r3, [r3, #32]
 8004586:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	685b      	ldr	r3, [r3, #4]
 800458c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004592:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800459a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800459e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	68fa      	ldr	r2, [r7, #12]
 80045a6:	4313      	orrs	r3, r2
 80045a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80045aa:	693b      	ldr	r3, [r7, #16]
 80045ac:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80045b0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	689b      	ldr	r3, [r3, #8]
 80045b6:	041b      	lsls	r3, r3, #16
 80045b8:	693a      	ldr	r2, [r7, #16]
 80045ba:	4313      	orrs	r3, r2
 80045bc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	4a13      	ldr	r2, [pc, #76]	; (8004610 <TIM_OC5_SetConfig+0xa4>)
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d007      	beq.n	80045d6 <TIM_OC5_SetConfig+0x6a>
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	4a12      	ldr	r2, [pc, #72]	; (8004614 <TIM_OC5_SetConfig+0xa8>)
 80045ca:	4293      	cmp	r3, r2
 80045cc:	d003      	beq.n	80045d6 <TIM_OC5_SetConfig+0x6a>
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	4a11      	ldr	r2, [pc, #68]	; (8004618 <TIM_OC5_SetConfig+0xac>)
 80045d2:	4293      	cmp	r3, r2
 80045d4:	d109      	bne.n	80045ea <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80045d6:	697b      	ldr	r3, [r7, #20]
 80045d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80045dc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	695b      	ldr	r3, [r3, #20]
 80045e2:	021b      	lsls	r3, r3, #8
 80045e4:	697a      	ldr	r2, [r7, #20]
 80045e6:	4313      	orrs	r3, r2
 80045e8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	697a      	ldr	r2, [r7, #20]
 80045ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	68fa      	ldr	r2, [r7, #12]
 80045f4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	685a      	ldr	r2, [r3, #4]
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	693a      	ldr	r2, [r7, #16]
 8004602:	621a      	str	r2, [r3, #32]
}
 8004604:	bf00      	nop
 8004606:	371c      	adds	r7, #28
 8004608:	46bd      	mov	sp, r7
 800460a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460e:	4770      	bx	lr
 8004610:	40012c00 	.word	0x40012c00
 8004614:	40014000 	.word	0x40014000
 8004618:	40014400 	.word	0x40014400

0800461c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800461c:	b480      	push	{r7}
 800461e:	b087      	sub	sp, #28
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
 8004624:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6a1b      	ldr	r3, [r3, #32]
 800462a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6a1b      	ldr	r3, [r3, #32]
 8004636:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	685b      	ldr	r3, [r3, #4]
 800463c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004642:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800464a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800464e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	021b      	lsls	r3, r3, #8
 8004656:	68fa      	ldr	r2, [r7, #12]
 8004658:	4313      	orrs	r3, r2
 800465a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800465c:	693b      	ldr	r3, [r7, #16]
 800465e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004662:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	689b      	ldr	r3, [r3, #8]
 8004668:	051b      	lsls	r3, r3, #20
 800466a:	693a      	ldr	r2, [r7, #16]
 800466c:	4313      	orrs	r3, r2
 800466e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	4a14      	ldr	r2, [pc, #80]	; (80046c4 <TIM_OC6_SetConfig+0xa8>)
 8004674:	4293      	cmp	r3, r2
 8004676:	d007      	beq.n	8004688 <TIM_OC6_SetConfig+0x6c>
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	4a13      	ldr	r2, [pc, #76]	; (80046c8 <TIM_OC6_SetConfig+0xac>)
 800467c:	4293      	cmp	r3, r2
 800467e:	d003      	beq.n	8004688 <TIM_OC6_SetConfig+0x6c>
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	4a12      	ldr	r2, [pc, #72]	; (80046cc <TIM_OC6_SetConfig+0xb0>)
 8004684:	4293      	cmp	r3, r2
 8004686:	d109      	bne.n	800469c <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004688:	697b      	ldr	r3, [r7, #20]
 800468a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800468e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	695b      	ldr	r3, [r3, #20]
 8004694:	029b      	lsls	r3, r3, #10
 8004696:	697a      	ldr	r2, [r7, #20]
 8004698:	4313      	orrs	r3, r2
 800469a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	697a      	ldr	r2, [r7, #20]
 80046a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	68fa      	ldr	r2, [r7, #12]
 80046a6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	685a      	ldr	r2, [r3, #4]
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	693a      	ldr	r2, [r7, #16]
 80046b4:	621a      	str	r2, [r3, #32]
}
 80046b6:	bf00      	nop
 80046b8:	371c      	adds	r7, #28
 80046ba:	46bd      	mov	sp, r7
 80046bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c0:	4770      	bx	lr
 80046c2:	bf00      	nop
 80046c4:	40012c00 	.word	0x40012c00
 80046c8:	40014000 	.word	0x40014000
 80046cc:	40014400 	.word	0x40014400

080046d0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80046d0:	b480      	push	{r7}
 80046d2:	b087      	sub	sp, #28
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	60f8      	str	r0, [r7, #12]
 80046d8:	60b9      	str	r1, [r7, #8]
 80046da:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	6a1b      	ldr	r3, [r3, #32]
 80046e0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	6a1b      	ldr	r3, [r3, #32]
 80046e6:	f023 0201 	bic.w	r2, r3, #1
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	699b      	ldr	r3, [r3, #24]
 80046f2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80046f4:	693b      	ldr	r3, [r7, #16]
 80046f6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80046fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	011b      	lsls	r3, r3, #4
 8004700:	693a      	ldr	r2, [r7, #16]
 8004702:	4313      	orrs	r3, r2
 8004704:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004706:	697b      	ldr	r3, [r7, #20]
 8004708:	f023 030a 	bic.w	r3, r3, #10
 800470c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800470e:	697a      	ldr	r2, [r7, #20]
 8004710:	68bb      	ldr	r3, [r7, #8]
 8004712:	4313      	orrs	r3, r2
 8004714:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	693a      	ldr	r2, [r7, #16]
 800471a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	697a      	ldr	r2, [r7, #20]
 8004720:	621a      	str	r2, [r3, #32]
}
 8004722:	bf00      	nop
 8004724:	371c      	adds	r7, #28
 8004726:	46bd      	mov	sp, r7
 8004728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472c:	4770      	bx	lr

0800472e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800472e:	b480      	push	{r7}
 8004730:	b087      	sub	sp, #28
 8004732:	af00      	add	r7, sp, #0
 8004734:	60f8      	str	r0, [r7, #12]
 8004736:	60b9      	str	r1, [r7, #8]
 8004738:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	6a1b      	ldr	r3, [r3, #32]
 800473e:	f023 0210 	bic.w	r2, r3, #16
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	699b      	ldr	r3, [r3, #24]
 800474a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	6a1b      	ldr	r3, [r3, #32]
 8004750:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004752:	697b      	ldr	r3, [r7, #20]
 8004754:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004758:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	031b      	lsls	r3, r3, #12
 800475e:	697a      	ldr	r2, [r7, #20]
 8004760:	4313      	orrs	r3, r2
 8004762:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004764:	693b      	ldr	r3, [r7, #16]
 8004766:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800476a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800476c:	68bb      	ldr	r3, [r7, #8]
 800476e:	011b      	lsls	r3, r3, #4
 8004770:	693a      	ldr	r2, [r7, #16]
 8004772:	4313      	orrs	r3, r2
 8004774:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	697a      	ldr	r2, [r7, #20]
 800477a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	693a      	ldr	r2, [r7, #16]
 8004780:	621a      	str	r2, [r3, #32]
}
 8004782:	bf00      	nop
 8004784:	371c      	adds	r7, #28
 8004786:	46bd      	mov	sp, r7
 8004788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478c:	4770      	bx	lr

0800478e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800478e:	b480      	push	{r7}
 8004790:	b085      	sub	sp, #20
 8004792:	af00      	add	r7, sp, #0
 8004794:	6078      	str	r0, [r7, #4]
 8004796:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	689b      	ldr	r3, [r3, #8]
 800479c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047a4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80047a6:	683a      	ldr	r2, [r7, #0]
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	4313      	orrs	r3, r2
 80047ac:	f043 0307 	orr.w	r3, r3, #7
 80047b0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	68fa      	ldr	r2, [r7, #12]
 80047b6:	609a      	str	r2, [r3, #8]
}
 80047b8:	bf00      	nop
 80047ba:	3714      	adds	r7, #20
 80047bc:	46bd      	mov	sp, r7
 80047be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c2:	4770      	bx	lr

080047c4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80047c4:	b480      	push	{r7}
 80047c6:	b087      	sub	sp, #28
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	60f8      	str	r0, [r7, #12]
 80047cc:	60b9      	str	r1, [r7, #8]
 80047ce:	607a      	str	r2, [r7, #4]
 80047d0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	689b      	ldr	r3, [r3, #8]
 80047d6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80047d8:	697b      	ldr	r3, [r7, #20]
 80047da:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80047de:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	021a      	lsls	r2, r3, #8
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	431a      	orrs	r2, r3
 80047e8:	68bb      	ldr	r3, [r7, #8]
 80047ea:	4313      	orrs	r3, r2
 80047ec:	697a      	ldr	r2, [r7, #20]
 80047ee:	4313      	orrs	r3, r2
 80047f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	697a      	ldr	r2, [r7, #20]
 80047f6:	609a      	str	r2, [r3, #8]
}
 80047f8:	bf00      	nop
 80047fa:	371c      	adds	r7, #28
 80047fc:	46bd      	mov	sp, r7
 80047fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004802:	4770      	bx	lr

08004804 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004804:	b480      	push	{r7}
 8004806:	b087      	sub	sp, #28
 8004808:	af00      	add	r7, sp, #0
 800480a:	60f8      	str	r0, [r7, #12]
 800480c:	60b9      	str	r1, [r7, #8]
 800480e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004810:	68bb      	ldr	r3, [r7, #8]
 8004812:	f003 031f 	and.w	r3, r3, #31
 8004816:	2201      	movs	r2, #1
 8004818:	fa02 f303 	lsl.w	r3, r2, r3
 800481c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	6a1a      	ldr	r2, [r3, #32]
 8004822:	697b      	ldr	r3, [r7, #20]
 8004824:	43db      	mvns	r3, r3
 8004826:	401a      	ands	r2, r3
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	6a1a      	ldr	r2, [r3, #32]
 8004830:	68bb      	ldr	r3, [r7, #8]
 8004832:	f003 031f 	and.w	r3, r3, #31
 8004836:	6879      	ldr	r1, [r7, #4]
 8004838:	fa01 f303 	lsl.w	r3, r1, r3
 800483c:	431a      	orrs	r2, r3
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	621a      	str	r2, [r3, #32]
}
 8004842:	bf00      	nop
 8004844:	371c      	adds	r7, #28
 8004846:	46bd      	mov	sp, r7
 8004848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484c:	4770      	bx	lr
	...

08004850 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004850:	b480      	push	{r7}
 8004852:	b085      	sub	sp, #20
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
 8004858:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004860:	2b01      	cmp	r3, #1
 8004862:	d101      	bne.n	8004868 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004864:	2302      	movs	r3, #2
 8004866:	e054      	b.n	8004912 <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2201      	movs	r2, #1
 800486c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2202      	movs	r2, #2
 8004874:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	685b      	ldr	r3, [r3, #4]
 800487e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	689b      	ldr	r3, [r3, #8]
 8004886:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	4a24      	ldr	r2, [pc, #144]	; (8004920 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800488e:	4293      	cmp	r3, r2
 8004890:	d108      	bne.n	80048a4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004898:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	685b      	ldr	r3, [r3, #4]
 800489e:	68fa      	ldr	r2, [r7, #12]
 80048a0:	4313      	orrs	r3, r2
 80048a2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048aa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	68fa      	ldr	r2, [r7, #12]
 80048b2:	4313      	orrs	r3, r2
 80048b4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	68fa      	ldr	r2, [r7, #12]
 80048bc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	4a17      	ldr	r2, [pc, #92]	; (8004920 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80048c4:	4293      	cmp	r3, r2
 80048c6:	d00e      	beq.n	80048e6 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048d0:	d009      	beq.n	80048e6 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	4a13      	ldr	r2, [pc, #76]	; (8004924 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80048d8:	4293      	cmp	r3, r2
 80048da:	d004      	beq.n	80048e6 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	4a11      	ldr	r2, [pc, #68]	; (8004928 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d10c      	bne.n	8004900 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80048e6:	68bb      	ldr	r3, [r7, #8]
 80048e8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80048ec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	689b      	ldr	r3, [r3, #8]
 80048f2:	68ba      	ldr	r2, [r7, #8]
 80048f4:	4313      	orrs	r3, r2
 80048f6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	68ba      	ldr	r2, [r7, #8]
 80048fe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2201      	movs	r2, #1
 8004904:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2200      	movs	r2, #0
 800490c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004910:	2300      	movs	r3, #0
}
 8004912:	4618      	mov	r0, r3
 8004914:	3714      	adds	r7, #20
 8004916:	46bd      	mov	sp, r7
 8004918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491c:	4770      	bx	lr
 800491e:	bf00      	nop
 8004920:	40012c00 	.word	0x40012c00
 8004924:	40000400 	.word	0x40000400
 8004928:	40014000 	.word	0x40014000

0800492c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800492c:	b480      	push	{r7}
 800492e:	b085      	sub	sp, #20
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
 8004934:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004936:	2300      	movs	r3, #0
 8004938:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004940:	2b01      	cmp	r3, #1
 8004942:	d101      	bne.n	8004948 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004944:	2302      	movs	r3, #2
 8004946:	e060      	b.n	8004a0a <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2201      	movs	r2, #1
 800494c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	68db      	ldr	r3, [r3, #12]
 800495a:	4313      	orrs	r3, r2
 800495c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	689b      	ldr	r3, [r3, #8]
 8004968:	4313      	orrs	r3, r2
 800496a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	685b      	ldr	r3, [r3, #4]
 8004976:	4313      	orrs	r3, r2
 8004978:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	4313      	orrs	r3, r2
 8004986:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	691b      	ldr	r3, [r3, #16]
 8004992:	4313      	orrs	r3, r2
 8004994:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	695b      	ldr	r3, [r3, #20]
 80049a0:	4313      	orrs	r3, r2
 80049a2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049ae:	4313      	orrs	r3, r2
 80049b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	699b      	ldr	r3, [r3, #24]
 80049bc:	041b      	lsls	r3, r3, #16
 80049be:	4313      	orrs	r3, r2
 80049c0:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	4a14      	ldr	r2, [pc, #80]	; (8004a18 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 80049c8:	4293      	cmp	r3, r2
 80049ca:	d115      	bne.n	80049f8 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80049d2:	683b      	ldr	r3, [r7, #0]
 80049d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049d6:	051b      	lsls	r3, r3, #20
 80049d8:	4313      	orrs	r3, r2
 80049da:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80049e2:	683b      	ldr	r3, [r7, #0]
 80049e4:	69db      	ldr	r3, [r3, #28]
 80049e6:	4313      	orrs	r3, r2
 80049e8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	6a1b      	ldr	r3, [r3, #32]
 80049f4:	4313      	orrs	r3, r2
 80049f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	68fa      	ldr	r2, [r7, #12]
 80049fe:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2200      	movs	r2, #0
 8004a04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004a08:	2300      	movs	r3, #0
}
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	3714      	adds	r7, #20
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a14:	4770      	bx	lr
 8004a16:	bf00      	nop
 8004a18:	40012c00 	.word	0x40012c00

08004a1c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	b082      	sub	sp, #8
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d101      	bne.n	8004a2e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004a2a:	2301      	movs	r3, #1
 8004a2c:	e040      	b.n	8004ab0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d106      	bne.n	8004a44 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	2200      	movs	r2, #0
 8004a3a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004a3e:	6878      	ldr	r0, [r7, #4]
 8004a40:	f7fc fa82 	bl	8000f48 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2224      	movs	r2, #36	; 0x24
 8004a48:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	681a      	ldr	r2, [r3, #0]
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f022 0201 	bic.w	r2, r2, #1
 8004a58:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004a5a:	6878      	ldr	r0, [r7, #4]
 8004a5c:	f000 fbe8 	bl	8005230 <UART_SetConfig>
 8004a60:	4603      	mov	r3, r0
 8004a62:	2b01      	cmp	r3, #1
 8004a64:	d101      	bne.n	8004a6a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004a66:	2301      	movs	r3, #1
 8004a68:	e022      	b.n	8004ab0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d002      	beq.n	8004a78 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004a72:	6878      	ldr	r0, [r7, #4]
 8004a74:	f000 fe62 	bl	800573c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	685a      	ldr	r2, [r3, #4]
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004a86:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	689a      	ldr	r2, [r3, #8]
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004a96:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	681a      	ldr	r2, [r3, #0]
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f042 0201 	orr.w	r2, r2, #1
 8004aa6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004aa8:	6878      	ldr	r0, [r7, #4]
 8004aaa:	f000 fee9 	bl	8005880 <UART_CheckIdleState>
 8004aae:	4603      	mov	r3, r0
}
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	3708      	adds	r7, #8
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	bd80      	pop	{r7, pc}

08004ab8 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8004ab8:	b480      	push	{r7}
 8004aba:	b08b      	sub	sp, #44	; 0x2c
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	60f8      	str	r0, [r7, #12]
 8004ac0:	60b9      	str	r1, [r7, #8]
 8004ac2:	4613      	mov	r3, r2
 8004ac4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004aca:	2b20      	cmp	r3, #32
 8004acc:	d156      	bne.n	8004b7c <HAL_UART_Transmit_IT+0xc4>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ace:	68bb      	ldr	r3, [r7, #8]
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d002      	beq.n	8004ada <HAL_UART_Transmit_IT+0x22>
 8004ad4:	88fb      	ldrh	r3, [r7, #6]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d101      	bne.n	8004ade <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8004ada:	2301      	movs	r3, #1
 8004adc:	e04f      	b.n	8004b7e <HAL_UART_Transmit_IT+0xc6>
    }

    __HAL_LOCK(huart);
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004ae4:	2b01      	cmp	r3, #1
 8004ae6:	d101      	bne.n	8004aec <HAL_UART_Transmit_IT+0x34>
 8004ae8:	2302      	movs	r3, #2
 8004aea:	e048      	b.n	8004b7e <HAL_UART_Transmit_IT+0xc6>
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	2201      	movs	r2, #1
 8004af0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	68ba      	ldr	r2, [r7, #8]
 8004af8:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	88fa      	ldrh	r2, [r7, #6]
 8004afe:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	88fa      	ldrh	r2, [r7, #6]
 8004b06:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	2200      	movs	r2, #0
 8004b14:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	2221      	movs	r2, #33	; 0x21
 8004b1c:	679a      	str	r2, [r3, #120]	; 0x78
      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	689b      	ldr	r3, [r3, #8]
 8004b22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b26:	d107      	bne.n	8004b38 <HAL_UART_Transmit_IT+0x80>
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	691b      	ldr	r3, [r3, #16]
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d103      	bne.n	8004b38 <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	4a16      	ldr	r2, [pc, #88]	; (8004b8c <HAL_UART_Transmit_IT+0xd4>)
 8004b34:	669a      	str	r2, [r3, #104]	; 0x68
 8004b36:	e002      	b.n	8004b3e <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	4a15      	ldr	r2, [pc, #84]	; (8004b90 <HAL_UART_Transmit_IT+0xd8>)
 8004b3c:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	2200      	movs	r2, #0
 8004b42:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b4c:	697b      	ldr	r3, [r7, #20]
 8004b4e:	e853 3f00 	ldrex	r3, [r3]
 8004b52:	613b      	str	r3, [r7, #16]
   return(result);
 8004b54:	693b      	ldr	r3, [r7, #16]
 8004b56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b5a:	627b      	str	r3, [r7, #36]	; 0x24
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	461a      	mov	r2, r3
 8004b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b64:	623b      	str	r3, [r7, #32]
 8004b66:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b68:	69f9      	ldr	r1, [r7, #28]
 8004b6a:	6a3a      	ldr	r2, [r7, #32]
 8004b6c:	e841 2300 	strex	r3, r2, [r1]
 8004b70:	61bb      	str	r3, [r7, #24]
   return(result);
 8004b72:	69bb      	ldr	r3, [r7, #24]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d1e6      	bne.n	8004b46 <HAL_UART_Transmit_IT+0x8e>
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 8004b78:	2300      	movs	r3, #0
 8004b7a:	e000      	b.n	8004b7e <HAL_UART_Transmit_IT+0xc6>
  }
  else
  {
    return HAL_BUSY;
 8004b7c:	2302      	movs	r3, #2
  }
}
 8004b7e:	4618      	mov	r0, r3
 8004b80:	372c      	adds	r7, #44	; 0x2c
 8004b82:	46bd      	mov	sp, r7
 8004b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b88:	4770      	bx	lr
 8004b8a:	bf00      	nop
 8004b8c:	08005ddb 	.word	0x08005ddb
 8004b90:	08005d23 	.word	0x08005d23

08004b94 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004b94:	b580      	push	{r7, lr}
 8004b96:	b08a      	sub	sp, #40	; 0x28
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	60f8      	str	r0, [r7, #12]
 8004b9c:	60b9      	str	r1, [r7, #8]
 8004b9e:	4613      	mov	r3, r2
 8004ba0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004ba6:	2b20      	cmp	r3, #32
 8004ba8:	d142      	bne.n	8004c30 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004baa:	68bb      	ldr	r3, [r7, #8]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d002      	beq.n	8004bb6 <HAL_UART_Receive_IT+0x22>
 8004bb0:	88fb      	ldrh	r3, [r7, #6]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d101      	bne.n	8004bba <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8004bb6:	2301      	movs	r3, #1
 8004bb8:	e03b      	b.n	8004c32 <HAL_UART_Receive_IT+0x9e>
    }

    __HAL_LOCK(huart);
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004bc0:	2b01      	cmp	r3, #1
 8004bc2:	d101      	bne.n	8004bc8 <HAL_UART_Receive_IT+0x34>
 8004bc4:	2302      	movs	r3, #2
 8004bc6:	e034      	b.n	8004c32 <HAL_UART_Receive_IT+0x9e>
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	2201      	movs	r2, #1
 8004bcc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	4a18      	ldr	r2, [pc, #96]	; (8004c3c <HAL_UART_Receive_IT+0xa8>)
 8004bdc:	4293      	cmp	r3, r2
 8004bde:	d01f      	beq.n	8004c20 <HAL_UART_Receive_IT+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	685b      	ldr	r3, [r3, #4]
 8004be6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d018      	beq.n	8004c20 <HAL_UART_Receive_IT+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bf4:	697b      	ldr	r3, [r7, #20]
 8004bf6:	e853 3f00 	ldrex	r3, [r3]
 8004bfa:	613b      	str	r3, [r7, #16]
   return(result);
 8004bfc:	693b      	ldr	r3, [r7, #16]
 8004bfe:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004c02:	627b      	str	r3, [r7, #36]	; 0x24
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	461a      	mov	r2, r3
 8004c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c0c:	623b      	str	r3, [r7, #32]
 8004c0e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c10:	69f9      	ldr	r1, [r7, #28]
 8004c12:	6a3a      	ldr	r2, [r7, #32]
 8004c14:	e841 2300 	strex	r3, r2, [r1]
 8004c18:	61bb      	str	r3, [r7, #24]
   return(result);
 8004c1a:	69bb      	ldr	r3, [r7, #24]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d1e6      	bne.n	8004bee <HAL_UART_Receive_IT+0x5a>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004c20:	88fb      	ldrh	r3, [r7, #6]
 8004c22:	461a      	mov	r2, r3
 8004c24:	68b9      	ldr	r1, [r7, #8]
 8004c26:	68f8      	ldr	r0, [r7, #12]
 8004c28:	f000 ff38 	bl	8005a9c <UART_Start_Receive_IT>
 8004c2c:	4603      	mov	r3, r0
 8004c2e:	e000      	b.n	8004c32 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8004c30:	2302      	movs	r3, #2
  }
}
 8004c32:	4618      	mov	r0, r3
 8004c34:	3728      	adds	r7, #40	; 0x28
 8004c36:	46bd      	mov	sp, r7
 8004c38:	bd80      	pop	{r7, pc}
 8004c3a:	bf00      	nop
 8004c3c:	40008000 	.word	0x40008000

08004c40 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004c40:	b580      	push	{r7, lr}
 8004c42:	b0ba      	sub	sp, #232	; 0xe8
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	69db      	ldr	r3, [r3, #28]
 8004c4e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	689b      	ldr	r3, [r3, #8]
 8004c62:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004c66:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8004c6a:	f640 030f 	movw	r3, #2063	; 0x80f
 8004c6e:	4013      	ands	r3, r2
 8004c70:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8004c74:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d115      	bne.n	8004ca8 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004c7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c80:	f003 0320 	and.w	r3, r3, #32
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d00f      	beq.n	8004ca8 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004c88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c8c:	f003 0320 	and.w	r3, r3, #32
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d009      	beq.n	8004ca8 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	f000 82a6 	beq.w	80051ea <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004ca2:	6878      	ldr	r0, [r7, #4]
 8004ca4:	4798      	blx	r3
      }
      return;
 8004ca6:	e2a0      	b.n	80051ea <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8004ca8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	f000 8117 	beq.w	8004ee0 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004cb2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004cb6:	f003 0301 	and.w	r3, r3, #1
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d106      	bne.n	8004ccc <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004cbe:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8004cc2:	4b85      	ldr	r3, [pc, #532]	; (8004ed8 <HAL_UART_IRQHandler+0x298>)
 8004cc4:	4013      	ands	r3, r2
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	f000 810a 	beq.w	8004ee0 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004ccc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004cd0:	f003 0301 	and.w	r3, r3, #1
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d011      	beq.n	8004cfc <HAL_UART_IRQHandler+0xbc>
 8004cd8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004cdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d00b      	beq.n	8004cfc <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	2201      	movs	r2, #1
 8004cea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004cf2:	f043 0201 	orr.w	r2, r3, #1
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004cfc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d00:	f003 0302 	and.w	r3, r3, #2
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d011      	beq.n	8004d2c <HAL_UART_IRQHandler+0xec>
 8004d08:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004d0c:	f003 0301 	and.w	r3, r3, #1
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d00b      	beq.n	8004d2c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	2202      	movs	r2, #2
 8004d1a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004d22:	f043 0204 	orr.w	r2, r3, #4
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004d2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d30:	f003 0304 	and.w	r3, r3, #4
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d011      	beq.n	8004d5c <HAL_UART_IRQHandler+0x11c>
 8004d38:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004d3c:	f003 0301 	and.w	r3, r3, #1
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d00b      	beq.n	8004d5c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	2204      	movs	r2, #4
 8004d4a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004d52:	f043 0202 	orr.w	r2, r3, #2
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004d5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d60:	f003 0308 	and.w	r3, r3, #8
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d017      	beq.n	8004d98 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004d68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d6c:	f003 0320 	and.w	r3, r3, #32
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d105      	bne.n	8004d80 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004d74:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004d78:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d00b      	beq.n	8004d98 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	2208      	movs	r2, #8
 8004d86:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004d8e:	f043 0208 	orr.w	r2, r3, #8
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004d98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d9c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d012      	beq.n	8004dca <HAL_UART_IRQHandler+0x18a>
 8004da4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004da8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d00c      	beq.n	8004dca <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004db8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004dc0:	f043 0220 	orr.w	r2, r3, #32
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	f000 820c 	beq.w	80051ee <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004dd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004dda:	f003 0320 	and.w	r3, r3, #32
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d00d      	beq.n	8004dfe <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004de2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004de6:	f003 0320 	and.w	r3, r3, #32
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d007      	beq.n	8004dfe <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d003      	beq.n	8004dfe <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004dfa:	6878      	ldr	r0, [r7, #4]
 8004dfc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004e04:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	689b      	ldr	r3, [r3, #8]
 8004e0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e12:	2b40      	cmp	r3, #64	; 0x40
 8004e14:	d005      	beq.n	8004e22 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004e16:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004e1a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d04f      	beq.n	8004ec2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004e22:	6878      	ldr	r0, [r7, #4]
 8004e24:	f000 ff04 	bl	8005c30 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	689b      	ldr	r3, [r3, #8]
 8004e2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e32:	2b40      	cmp	r3, #64	; 0x40
 8004e34:	d141      	bne.n	8004eba <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	3308      	adds	r3, #8
 8004e3c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e40:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004e44:	e853 3f00 	ldrex	r3, [r3]
 8004e48:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004e4c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004e50:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e54:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	3308      	adds	r3, #8
 8004e5e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004e62:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004e66:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e6a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004e6e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004e72:	e841 2300 	strex	r3, r2, [r1]
 8004e76:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004e7a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d1d9      	bne.n	8004e36 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d013      	beq.n	8004eb2 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e8e:	4a13      	ldr	r2, [pc, #76]	; (8004edc <HAL_UART_IRQHandler+0x29c>)
 8004e90:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e96:	4618      	mov	r0, r3
 8004e98:	f7fd f9e5 	bl	8002266 <HAL_DMA_Abort_IT>
 8004e9c:	4603      	mov	r3, r0
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d017      	beq.n	8004ed2 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ea6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ea8:	687a      	ldr	r2, [r7, #4]
 8004eaa:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8004eac:	4610      	mov	r0, r2
 8004eae:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004eb0:	e00f      	b.n	8004ed2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004eb2:	6878      	ldr	r0, [r7, #4]
 8004eb4:	f000 f9a6 	bl	8005204 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004eb8:	e00b      	b.n	8004ed2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004eba:	6878      	ldr	r0, [r7, #4]
 8004ebc:	f000 f9a2 	bl	8005204 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ec0:	e007      	b.n	8004ed2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004ec2:	6878      	ldr	r0, [r7, #4]
 8004ec4:	f000 f99e 	bl	8005204 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2200      	movs	r2, #0
 8004ecc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8004ed0:	e18d      	b.n	80051ee <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ed2:	bf00      	nop
    return;
 8004ed4:	e18b      	b.n	80051ee <HAL_UART_IRQHandler+0x5ae>
 8004ed6:	bf00      	nop
 8004ed8:	04000120 	.word	0x04000120
 8004edc:	08005cf7 	.word	0x08005cf7

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ee4:	2b01      	cmp	r3, #1
 8004ee6:	f040 8146 	bne.w	8005176 <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004eea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004eee:	f003 0310 	and.w	r3, r3, #16
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	f000 813f 	beq.w	8005176 <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004ef8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004efc:	f003 0310 	and.w	r3, r3, #16
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	f000 8138 	beq.w	8005176 <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	2210      	movs	r2, #16
 8004f0c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	689b      	ldr	r3, [r3, #8]
 8004f14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f18:	2b40      	cmp	r3, #64	; 0x40
 8004f1a:	f040 80b4 	bne.w	8005086 <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	685b      	ldr	r3, [r3, #4]
 8004f26:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004f2a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	f000 815f 	beq.w	80051f2 <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004f3a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004f3e:	429a      	cmp	r2, r3
 8004f40:	f080 8157 	bcs.w	80051f2 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004f4a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f003 0320 	and.w	r3, r3, #32
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	f040 8085 	bne.w	800506a <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f68:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004f6c:	e853 3f00 	ldrex	r3, [r3]
 8004f70:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004f74:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004f78:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004f7c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	461a      	mov	r2, r3
 8004f86:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004f8a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004f8e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f92:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004f96:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004f9a:	e841 2300 	strex	r3, r2, [r1]
 8004f9e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004fa2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d1da      	bne.n	8004f60 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	3308      	adds	r3, #8
 8004fb0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fb2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004fb4:	e853 3f00 	ldrex	r3, [r3]
 8004fb8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004fba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004fbc:	f023 0301 	bic.w	r3, r3, #1
 8004fc0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	3308      	adds	r3, #8
 8004fca:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004fce:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004fd2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fd4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004fd6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004fda:	e841 2300 	strex	r3, r2, [r1]
 8004fde:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004fe0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d1e1      	bne.n	8004faa <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	3308      	adds	r3, #8
 8004fec:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004ff0:	e853 3f00 	ldrex	r3, [r3]
 8004ff4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004ff6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004ff8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ffc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	3308      	adds	r3, #8
 8005006:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800500a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800500c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800500e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005010:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005012:	e841 2300 	strex	r3, r2, [r1]
 8005016:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005018:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800501a:	2b00      	cmp	r3, #0
 800501c:	d1e3      	bne.n	8004fe6 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	2220      	movs	r2, #32
 8005022:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2200      	movs	r2, #0
 8005028:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005030:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005032:	e853 3f00 	ldrex	r3, [r3]
 8005036:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005038:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800503a:	f023 0310 	bic.w	r3, r3, #16
 800503e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	461a      	mov	r2, r3
 8005048:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800504c:	65bb      	str	r3, [r7, #88]	; 0x58
 800504e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005050:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005052:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005054:	e841 2300 	strex	r3, r2, [r1]
 8005058:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800505a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800505c:	2b00      	cmp	r3, #0
 800505e:	d1e4      	bne.n	800502a <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005064:	4618      	mov	r0, r3
 8005066:	f7fd f8c0 	bl	80021ea <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005076:	b29b      	uxth	r3, r3
 8005078:	1ad3      	subs	r3, r2, r3
 800507a:	b29b      	uxth	r3, r3
 800507c:	4619      	mov	r1, r3
 800507e:	6878      	ldr	r0, [r7, #4]
 8005080:	f000 f8ca 	bl	8005218 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005084:	e0b5      	b.n	80051f2 <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005092:	b29b      	uxth	r3, r3
 8005094:	1ad3      	subs	r3, r2, r3
 8005096:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80050a0:	b29b      	uxth	r3, r3
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	f000 80a7 	beq.w	80051f6 <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 80050a8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	f000 80a2 	beq.w	80051f6 <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050ba:	e853 3f00 	ldrex	r3, [r3]
 80050be:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80050c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050c2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80050c6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	461a      	mov	r2, r3
 80050d0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80050d4:	647b      	str	r3, [r7, #68]	; 0x44
 80050d6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050d8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80050da:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80050dc:	e841 2300 	strex	r3, r2, [r1]
 80050e0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80050e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d1e4      	bne.n	80050b2 <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	3308      	adds	r3, #8
 80050ee:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050f2:	e853 3f00 	ldrex	r3, [r3]
 80050f6:	623b      	str	r3, [r7, #32]
   return(result);
 80050f8:	6a3b      	ldr	r3, [r7, #32]
 80050fa:	f023 0301 	bic.w	r3, r3, #1
 80050fe:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	3308      	adds	r3, #8
 8005108:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800510c:	633a      	str	r2, [r7, #48]	; 0x30
 800510e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005110:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005112:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005114:	e841 2300 	strex	r3, r2, [r1]
 8005118:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800511a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800511c:	2b00      	cmp	r3, #0
 800511e:	d1e3      	bne.n	80050e8 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2220      	movs	r2, #32
 8005124:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	2200      	movs	r2, #0
 800512a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2200      	movs	r2, #0
 8005130:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005138:	693b      	ldr	r3, [r7, #16]
 800513a:	e853 3f00 	ldrex	r3, [r3]
 800513e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	f023 0310 	bic.w	r3, r3, #16
 8005146:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	461a      	mov	r2, r3
 8005150:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005154:	61fb      	str	r3, [r7, #28]
 8005156:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005158:	69b9      	ldr	r1, [r7, #24]
 800515a:	69fa      	ldr	r2, [r7, #28]
 800515c:	e841 2300 	strex	r3, r2, [r1]
 8005160:	617b      	str	r3, [r7, #20]
   return(result);
 8005162:	697b      	ldr	r3, [r7, #20]
 8005164:	2b00      	cmp	r3, #0
 8005166:	d1e4      	bne.n	8005132 <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005168:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800516c:	4619      	mov	r1, r3
 800516e:	6878      	ldr	r0, [r7, #4]
 8005170:	f000 f852 	bl	8005218 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005174:	e03f      	b.n	80051f6 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005176:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800517a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800517e:	2b00      	cmp	r3, #0
 8005180:	d00e      	beq.n	80051a0 <HAL_UART_IRQHandler+0x560>
 8005182:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005186:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800518a:	2b00      	cmp	r3, #0
 800518c:	d008      	beq.n	80051a0 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005196:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005198:	6878      	ldr	r0, [r7, #4]
 800519a:	f001 f808 	bl	80061ae <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800519e:	e02d      	b.n	80051fc <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 80051a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80051a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d00e      	beq.n	80051ca <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80051ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80051b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d008      	beq.n	80051ca <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d01c      	beq.n	80051fa <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80051c4:	6878      	ldr	r0, [r7, #4]
 80051c6:	4798      	blx	r3
    }
    return;
 80051c8:	e017      	b.n	80051fa <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80051ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80051ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d012      	beq.n	80051fc <HAL_UART_IRQHandler+0x5bc>
 80051d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80051da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d00c      	beq.n	80051fc <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 80051e2:	6878      	ldr	r0, [r7, #4]
 80051e4:	f000 fe59 	bl	8005e9a <UART_EndTransmit_IT>
    return;
 80051e8:	e008      	b.n	80051fc <HAL_UART_IRQHandler+0x5bc>
      return;
 80051ea:	bf00      	nop
 80051ec:	e006      	b.n	80051fc <HAL_UART_IRQHandler+0x5bc>
    return;
 80051ee:	bf00      	nop
 80051f0:	e004      	b.n	80051fc <HAL_UART_IRQHandler+0x5bc>
      return;
 80051f2:	bf00      	nop
 80051f4:	e002      	b.n	80051fc <HAL_UART_IRQHandler+0x5bc>
      return;
 80051f6:	bf00      	nop
 80051f8:	e000      	b.n	80051fc <HAL_UART_IRQHandler+0x5bc>
    return;
 80051fa:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80051fc:	37e8      	adds	r7, #232	; 0xe8
 80051fe:	46bd      	mov	sp, r7
 8005200:	bd80      	pop	{r7, pc}
 8005202:	bf00      	nop

08005204 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005204:	b480      	push	{r7}
 8005206:	b083      	sub	sp, #12
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800520c:	bf00      	nop
 800520e:	370c      	adds	r7, #12
 8005210:	46bd      	mov	sp, r7
 8005212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005216:	4770      	bx	lr

08005218 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005218:	b480      	push	{r7}
 800521a:	b083      	sub	sp, #12
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]
 8005220:	460b      	mov	r3, r1
 8005222:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005224:	bf00      	nop
 8005226:	370c      	adds	r7, #12
 8005228:	46bd      	mov	sp, r7
 800522a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522e:	4770      	bx	lr

08005230 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005230:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005234:	b08a      	sub	sp, #40	; 0x28
 8005236:	af00      	add	r7, sp, #0
 8005238:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800523a:	2300      	movs	r3, #0
 800523c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	689a      	ldr	r2, [r3, #8]
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	691b      	ldr	r3, [r3, #16]
 8005248:	431a      	orrs	r2, r3
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	695b      	ldr	r3, [r3, #20]
 800524e:	431a      	orrs	r2, r3
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	69db      	ldr	r3, [r3, #28]
 8005254:	4313      	orrs	r3, r2
 8005256:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	681a      	ldr	r2, [r3, #0]
 800525e:	4ba5      	ldr	r3, [pc, #660]	; (80054f4 <UART_SetConfig+0x2c4>)
 8005260:	4013      	ands	r3, r2
 8005262:	68fa      	ldr	r2, [r7, #12]
 8005264:	6812      	ldr	r2, [r2, #0]
 8005266:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005268:	430b      	orrs	r3, r1
 800526a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	685b      	ldr	r3, [r3, #4]
 8005272:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	68da      	ldr	r2, [r3, #12]
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	430a      	orrs	r2, r1
 8005280:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	699b      	ldr	r3, [r3, #24]
 8005286:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	4a9a      	ldr	r2, [pc, #616]	; (80054f8 <UART_SetConfig+0x2c8>)
 800528e:	4293      	cmp	r3, r2
 8005290:	d004      	beq.n	800529c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	6a1b      	ldr	r3, [r3, #32]
 8005296:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005298:	4313      	orrs	r3, r2
 800529a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	689b      	ldr	r3, [r3, #8]
 80052a2:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052ac:	430a      	orrs	r2, r1
 80052ae:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	4a91      	ldr	r2, [pc, #580]	; (80054fc <UART_SetConfig+0x2cc>)
 80052b6:	4293      	cmp	r3, r2
 80052b8:	d126      	bne.n	8005308 <UART_SetConfig+0xd8>
 80052ba:	4b91      	ldr	r3, [pc, #580]	; (8005500 <UART_SetConfig+0x2d0>)
 80052bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052c0:	f003 0303 	and.w	r3, r3, #3
 80052c4:	2b03      	cmp	r3, #3
 80052c6:	d81b      	bhi.n	8005300 <UART_SetConfig+0xd0>
 80052c8:	a201      	add	r2, pc, #4	; (adr r2, 80052d0 <UART_SetConfig+0xa0>)
 80052ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052ce:	bf00      	nop
 80052d0:	080052e1 	.word	0x080052e1
 80052d4:	080052f1 	.word	0x080052f1
 80052d8:	080052e9 	.word	0x080052e9
 80052dc:	080052f9 	.word	0x080052f9
 80052e0:	2301      	movs	r3, #1
 80052e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80052e6:	e0d6      	b.n	8005496 <UART_SetConfig+0x266>
 80052e8:	2302      	movs	r3, #2
 80052ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80052ee:	e0d2      	b.n	8005496 <UART_SetConfig+0x266>
 80052f0:	2304      	movs	r3, #4
 80052f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80052f6:	e0ce      	b.n	8005496 <UART_SetConfig+0x266>
 80052f8:	2308      	movs	r3, #8
 80052fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80052fe:	e0ca      	b.n	8005496 <UART_SetConfig+0x266>
 8005300:	2310      	movs	r3, #16
 8005302:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005306:	e0c6      	b.n	8005496 <UART_SetConfig+0x266>
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	4a7d      	ldr	r2, [pc, #500]	; (8005504 <UART_SetConfig+0x2d4>)
 800530e:	4293      	cmp	r3, r2
 8005310:	d138      	bne.n	8005384 <UART_SetConfig+0x154>
 8005312:	4b7b      	ldr	r3, [pc, #492]	; (8005500 <UART_SetConfig+0x2d0>)
 8005314:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005318:	f003 030c 	and.w	r3, r3, #12
 800531c:	2b0c      	cmp	r3, #12
 800531e:	d82d      	bhi.n	800537c <UART_SetConfig+0x14c>
 8005320:	a201      	add	r2, pc, #4	; (adr r2, 8005328 <UART_SetConfig+0xf8>)
 8005322:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005326:	bf00      	nop
 8005328:	0800535d 	.word	0x0800535d
 800532c:	0800537d 	.word	0x0800537d
 8005330:	0800537d 	.word	0x0800537d
 8005334:	0800537d 	.word	0x0800537d
 8005338:	0800536d 	.word	0x0800536d
 800533c:	0800537d 	.word	0x0800537d
 8005340:	0800537d 	.word	0x0800537d
 8005344:	0800537d 	.word	0x0800537d
 8005348:	08005365 	.word	0x08005365
 800534c:	0800537d 	.word	0x0800537d
 8005350:	0800537d 	.word	0x0800537d
 8005354:	0800537d 	.word	0x0800537d
 8005358:	08005375 	.word	0x08005375
 800535c:	2300      	movs	r3, #0
 800535e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005362:	e098      	b.n	8005496 <UART_SetConfig+0x266>
 8005364:	2302      	movs	r3, #2
 8005366:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800536a:	e094      	b.n	8005496 <UART_SetConfig+0x266>
 800536c:	2304      	movs	r3, #4
 800536e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005372:	e090      	b.n	8005496 <UART_SetConfig+0x266>
 8005374:	2308      	movs	r3, #8
 8005376:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800537a:	e08c      	b.n	8005496 <UART_SetConfig+0x266>
 800537c:	2310      	movs	r3, #16
 800537e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005382:	e088      	b.n	8005496 <UART_SetConfig+0x266>
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	4a5f      	ldr	r2, [pc, #380]	; (8005508 <UART_SetConfig+0x2d8>)
 800538a:	4293      	cmp	r3, r2
 800538c:	d125      	bne.n	80053da <UART_SetConfig+0x1aa>
 800538e:	4b5c      	ldr	r3, [pc, #368]	; (8005500 <UART_SetConfig+0x2d0>)
 8005390:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005394:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005398:	2b30      	cmp	r3, #48	; 0x30
 800539a:	d016      	beq.n	80053ca <UART_SetConfig+0x19a>
 800539c:	2b30      	cmp	r3, #48	; 0x30
 800539e:	d818      	bhi.n	80053d2 <UART_SetConfig+0x1a2>
 80053a0:	2b20      	cmp	r3, #32
 80053a2:	d00a      	beq.n	80053ba <UART_SetConfig+0x18a>
 80053a4:	2b20      	cmp	r3, #32
 80053a6:	d814      	bhi.n	80053d2 <UART_SetConfig+0x1a2>
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d002      	beq.n	80053b2 <UART_SetConfig+0x182>
 80053ac:	2b10      	cmp	r3, #16
 80053ae:	d008      	beq.n	80053c2 <UART_SetConfig+0x192>
 80053b0:	e00f      	b.n	80053d2 <UART_SetConfig+0x1a2>
 80053b2:	2300      	movs	r3, #0
 80053b4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80053b8:	e06d      	b.n	8005496 <UART_SetConfig+0x266>
 80053ba:	2302      	movs	r3, #2
 80053bc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80053c0:	e069      	b.n	8005496 <UART_SetConfig+0x266>
 80053c2:	2304      	movs	r3, #4
 80053c4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80053c8:	e065      	b.n	8005496 <UART_SetConfig+0x266>
 80053ca:	2308      	movs	r3, #8
 80053cc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80053d0:	e061      	b.n	8005496 <UART_SetConfig+0x266>
 80053d2:	2310      	movs	r3, #16
 80053d4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80053d8:	e05d      	b.n	8005496 <UART_SetConfig+0x266>
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	4a4b      	ldr	r2, [pc, #300]	; (800550c <UART_SetConfig+0x2dc>)
 80053e0:	4293      	cmp	r3, r2
 80053e2:	d125      	bne.n	8005430 <UART_SetConfig+0x200>
 80053e4:	4b46      	ldr	r3, [pc, #280]	; (8005500 <UART_SetConfig+0x2d0>)
 80053e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053ea:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80053ee:	2bc0      	cmp	r3, #192	; 0xc0
 80053f0:	d016      	beq.n	8005420 <UART_SetConfig+0x1f0>
 80053f2:	2bc0      	cmp	r3, #192	; 0xc0
 80053f4:	d818      	bhi.n	8005428 <UART_SetConfig+0x1f8>
 80053f6:	2b80      	cmp	r3, #128	; 0x80
 80053f8:	d00a      	beq.n	8005410 <UART_SetConfig+0x1e0>
 80053fa:	2b80      	cmp	r3, #128	; 0x80
 80053fc:	d814      	bhi.n	8005428 <UART_SetConfig+0x1f8>
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d002      	beq.n	8005408 <UART_SetConfig+0x1d8>
 8005402:	2b40      	cmp	r3, #64	; 0x40
 8005404:	d008      	beq.n	8005418 <UART_SetConfig+0x1e8>
 8005406:	e00f      	b.n	8005428 <UART_SetConfig+0x1f8>
 8005408:	2300      	movs	r3, #0
 800540a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800540e:	e042      	b.n	8005496 <UART_SetConfig+0x266>
 8005410:	2302      	movs	r3, #2
 8005412:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005416:	e03e      	b.n	8005496 <UART_SetConfig+0x266>
 8005418:	2304      	movs	r3, #4
 800541a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800541e:	e03a      	b.n	8005496 <UART_SetConfig+0x266>
 8005420:	2308      	movs	r3, #8
 8005422:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005426:	e036      	b.n	8005496 <UART_SetConfig+0x266>
 8005428:	2310      	movs	r3, #16
 800542a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800542e:	e032      	b.n	8005496 <UART_SetConfig+0x266>
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	4a30      	ldr	r2, [pc, #192]	; (80054f8 <UART_SetConfig+0x2c8>)
 8005436:	4293      	cmp	r3, r2
 8005438:	d12a      	bne.n	8005490 <UART_SetConfig+0x260>
 800543a:	4b31      	ldr	r3, [pc, #196]	; (8005500 <UART_SetConfig+0x2d0>)
 800543c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005440:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005444:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005448:	d01a      	beq.n	8005480 <UART_SetConfig+0x250>
 800544a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800544e:	d81b      	bhi.n	8005488 <UART_SetConfig+0x258>
 8005450:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005454:	d00c      	beq.n	8005470 <UART_SetConfig+0x240>
 8005456:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800545a:	d815      	bhi.n	8005488 <UART_SetConfig+0x258>
 800545c:	2b00      	cmp	r3, #0
 800545e:	d003      	beq.n	8005468 <UART_SetConfig+0x238>
 8005460:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005464:	d008      	beq.n	8005478 <UART_SetConfig+0x248>
 8005466:	e00f      	b.n	8005488 <UART_SetConfig+0x258>
 8005468:	2300      	movs	r3, #0
 800546a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800546e:	e012      	b.n	8005496 <UART_SetConfig+0x266>
 8005470:	2302      	movs	r3, #2
 8005472:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005476:	e00e      	b.n	8005496 <UART_SetConfig+0x266>
 8005478:	2304      	movs	r3, #4
 800547a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800547e:	e00a      	b.n	8005496 <UART_SetConfig+0x266>
 8005480:	2308      	movs	r3, #8
 8005482:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005486:	e006      	b.n	8005496 <UART_SetConfig+0x266>
 8005488:	2310      	movs	r3, #16
 800548a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800548e:	e002      	b.n	8005496 <UART_SetConfig+0x266>
 8005490:	2310      	movs	r3, #16
 8005492:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	4a17      	ldr	r2, [pc, #92]	; (80054f8 <UART_SetConfig+0x2c8>)
 800549c:	4293      	cmp	r3, r2
 800549e:	f040 808b 	bne.w	80055b8 <UART_SetConfig+0x388>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80054a2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80054a6:	2b08      	cmp	r3, #8
 80054a8:	d834      	bhi.n	8005514 <UART_SetConfig+0x2e4>
 80054aa:	a201      	add	r2, pc, #4	; (adr r2, 80054b0 <UART_SetConfig+0x280>)
 80054ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054b0:	080054d5 	.word	0x080054d5
 80054b4:	08005515 	.word	0x08005515
 80054b8:	080054dd 	.word	0x080054dd
 80054bc:	08005515 	.word	0x08005515
 80054c0:	080054e3 	.word	0x080054e3
 80054c4:	08005515 	.word	0x08005515
 80054c8:	08005515 	.word	0x08005515
 80054cc:	08005515 	.word	0x08005515
 80054d0:	080054eb 	.word	0x080054eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80054d4:	f7fd feaa 	bl	800322c <HAL_RCC_GetPCLK1Freq>
 80054d8:	61f8      	str	r0, [r7, #28]
        break;
 80054da:	e021      	b.n	8005520 <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80054dc:	4b0c      	ldr	r3, [pc, #48]	; (8005510 <UART_SetConfig+0x2e0>)
 80054de:	61fb      	str	r3, [r7, #28]
        break;
 80054e0:	e01e      	b.n	8005520 <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80054e2:	f7fd fe0b 	bl	80030fc <HAL_RCC_GetSysClockFreq>
 80054e6:	61f8      	str	r0, [r7, #28]
        break;
 80054e8:	e01a      	b.n	8005520 <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80054ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80054ee:	61fb      	str	r3, [r7, #28]
        break;
 80054f0:	e016      	b.n	8005520 <UART_SetConfig+0x2f0>
 80054f2:	bf00      	nop
 80054f4:	efff69f3 	.word	0xefff69f3
 80054f8:	40008000 	.word	0x40008000
 80054fc:	40013800 	.word	0x40013800
 8005500:	40021000 	.word	0x40021000
 8005504:	40004400 	.word	0x40004400
 8005508:	40004800 	.word	0x40004800
 800550c:	40004c00 	.word	0x40004c00
 8005510:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8005514:	2300      	movs	r3, #0
 8005516:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005518:	2301      	movs	r3, #1
 800551a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800551e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005520:	69fb      	ldr	r3, [r7, #28]
 8005522:	2b00      	cmp	r3, #0
 8005524:	f000 80fa 	beq.w	800571c <UART_SetConfig+0x4ec>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	685a      	ldr	r2, [r3, #4]
 800552c:	4613      	mov	r3, r2
 800552e:	005b      	lsls	r3, r3, #1
 8005530:	4413      	add	r3, r2
 8005532:	69fa      	ldr	r2, [r7, #28]
 8005534:	429a      	cmp	r2, r3
 8005536:	d305      	bcc.n	8005544 <UART_SetConfig+0x314>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	685b      	ldr	r3, [r3, #4]
 800553c:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800553e:	69fa      	ldr	r2, [r7, #28]
 8005540:	429a      	cmp	r2, r3
 8005542:	d903      	bls.n	800554c <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 8005544:	2301      	movs	r3, #1
 8005546:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800554a:	e0e7      	b.n	800571c <UART_SetConfig+0x4ec>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800554c:	69fb      	ldr	r3, [r7, #28]
 800554e:	2200      	movs	r2, #0
 8005550:	461c      	mov	r4, r3
 8005552:	4615      	mov	r5, r2
 8005554:	f04f 0200 	mov.w	r2, #0
 8005558:	f04f 0300 	mov.w	r3, #0
 800555c:	022b      	lsls	r3, r5, #8
 800555e:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005562:	0222      	lsls	r2, r4, #8
 8005564:	68f9      	ldr	r1, [r7, #12]
 8005566:	6849      	ldr	r1, [r1, #4]
 8005568:	0849      	lsrs	r1, r1, #1
 800556a:	2000      	movs	r0, #0
 800556c:	4688      	mov	r8, r1
 800556e:	4681      	mov	r9, r0
 8005570:	eb12 0a08 	adds.w	sl, r2, r8
 8005574:	eb43 0b09 	adc.w	fp, r3, r9
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	685b      	ldr	r3, [r3, #4]
 800557c:	2200      	movs	r2, #0
 800557e:	603b      	str	r3, [r7, #0]
 8005580:	607a      	str	r2, [r7, #4]
 8005582:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005586:	4650      	mov	r0, sl
 8005588:	4659      	mov	r1, fp
 800558a:	f7fa fe23 	bl	80001d4 <__aeabi_uldivmod>
 800558e:	4602      	mov	r2, r0
 8005590:	460b      	mov	r3, r1
 8005592:	4613      	mov	r3, r2
 8005594:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005596:	69bb      	ldr	r3, [r7, #24]
 8005598:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800559c:	d308      	bcc.n	80055b0 <UART_SetConfig+0x380>
 800559e:	69bb      	ldr	r3, [r7, #24]
 80055a0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80055a4:	d204      	bcs.n	80055b0 <UART_SetConfig+0x380>
        {
          huart->Instance->BRR = usartdiv;
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	69ba      	ldr	r2, [r7, #24]
 80055ac:	60da      	str	r2, [r3, #12]
 80055ae:	e0b5      	b.n	800571c <UART_SetConfig+0x4ec>
        }
        else
        {
          ret = HAL_ERROR;
 80055b0:	2301      	movs	r3, #1
 80055b2:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80055b6:	e0b1      	b.n	800571c <UART_SetConfig+0x4ec>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	69db      	ldr	r3, [r3, #28]
 80055bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80055c0:	d15d      	bne.n	800567e <UART_SetConfig+0x44e>
  {
    switch (clocksource)
 80055c2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80055c6:	2b08      	cmp	r3, #8
 80055c8:	d827      	bhi.n	800561a <UART_SetConfig+0x3ea>
 80055ca:	a201      	add	r2, pc, #4	; (adr r2, 80055d0 <UART_SetConfig+0x3a0>)
 80055cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055d0:	080055f5 	.word	0x080055f5
 80055d4:	080055fd 	.word	0x080055fd
 80055d8:	08005605 	.word	0x08005605
 80055dc:	0800561b 	.word	0x0800561b
 80055e0:	0800560b 	.word	0x0800560b
 80055e4:	0800561b 	.word	0x0800561b
 80055e8:	0800561b 	.word	0x0800561b
 80055ec:	0800561b 	.word	0x0800561b
 80055f0:	08005613 	.word	0x08005613
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80055f4:	f7fd fe1a 	bl	800322c <HAL_RCC_GetPCLK1Freq>
 80055f8:	61f8      	str	r0, [r7, #28]
        break;
 80055fa:	e014      	b.n	8005626 <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80055fc:	f7fd fe2c 	bl	8003258 <HAL_RCC_GetPCLK2Freq>
 8005600:	61f8      	str	r0, [r7, #28]
        break;
 8005602:	e010      	b.n	8005626 <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005604:	4b4c      	ldr	r3, [pc, #304]	; (8005738 <UART_SetConfig+0x508>)
 8005606:	61fb      	str	r3, [r7, #28]
        break;
 8005608:	e00d      	b.n	8005626 <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800560a:	f7fd fd77 	bl	80030fc <HAL_RCC_GetSysClockFreq>
 800560e:	61f8      	str	r0, [r7, #28]
        break;
 8005610:	e009      	b.n	8005626 <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005612:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005616:	61fb      	str	r3, [r7, #28]
        break;
 8005618:	e005      	b.n	8005626 <UART_SetConfig+0x3f6>
      default:
        pclk = 0U;
 800561a:	2300      	movs	r3, #0
 800561c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800561e:	2301      	movs	r3, #1
 8005620:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005624:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005626:	69fb      	ldr	r3, [r7, #28]
 8005628:	2b00      	cmp	r3, #0
 800562a:	d077      	beq.n	800571c <UART_SetConfig+0x4ec>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800562c:	69fb      	ldr	r3, [r7, #28]
 800562e:	005a      	lsls	r2, r3, #1
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	685b      	ldr	r3, [r3, #4]
 8005634:	085b      	lsrs	r3, r3, #1
 8005636:	441a      	add	r2, r3
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	685b      	ldr	r3, [r3, #4]
 800563c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005640:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005642:	69bb      	ldr	r3, [r7, #24]
 8005644:	2b0f      	cmp	r3, #15
 8005646:	d916      	bls.n	8005676 <UART_SetConfig+0x446>
 8005648:	69bb      	ldr	r3, [r7, #24]
 800564a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800564e:	d212      	bcs.n	8005676 <UART_SetConfig+0x446>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005650:	69bb      	ldr	r3, [r7, #24]
 8005652:	b29b      	uxth	r3, r3
 8005654:	f023 030f 	bic.w	r3, r3, #15
 8005658:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800565a:	69bb      	ldr	r3, [r7, #24]
 800565c:	085b      	lsrs	r3, r3, #1
 800565e:	b29b      	uxth	r3, r3
 8005660:	f003 0307 	and.w	r3, r3, #7
 8005664:	b29a      	uxth	r2, r3
 8005666:	8afb      	ldrh	r3, [r7, #22]
 8005668:	4313      	orrs	r3, r2
 800566a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	8afa      	ldrh	r2, [r7, #22]
 8005672:	60da      	str	r2, [r3, #12]
 8005674:	e052      	b.n	800571c <UART_SetConfig+0x4ec>
      }
      else
      {
        ret = HAL_ERROR;
 8005676:	2301      	movs	r3, #1
 8005678:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800567c:	e04e      	b.n	800571c <UART_SetConfig+0x4ec>
      }
    }
  }
  else
  {
    switch (clocksource)
 800567e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005682:	2b08      	cmp	r3, #8
 8005684:	d827      	bhi.n	80056d6 <UART_SetConfig+0x4a6>
 8005686:	a201      	add	r2, pc, #4	; (adr r2, 800568c <UART_SetConfig+0x45c>)
 8005688:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800568c:	080056b1 	.word	0x080056b1
 8005690:	080056b9 	.word	0x080056b9
 8005694:	080056c1 	.word	0x080056c1
 8005698:	080056d7 	.word	0x080056d7
 800569c:	080056c7 	.word	0x080056c7
 80056a0:	080056d7 	.word	0x080056d7
 80056a4:	080056d7 	.word	0x080056d7
 80056a8:	080056d7 	.word	0x080056d7
 80056ac:	080056cf 	.word	0x080056cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80056b0:	f7fd fdbc 	bl	800322c <HAL_RCC_GetPCLK1Freq>
 80056b4:	61f8      	str	r0, [r7, #28]
        break;
 80056b6:	e014      	b.n	80056e2 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80056b8:	f7fd fdce 	bl	8003258 <HAL_RCC_GetPCLK2Freq>
 80056bc:	61f8      	str	r0, [r7, #28]
        break;
 80056be:	e010      	b.n	80056e2 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80056c0:	4b1d      	ldr	r3, [pc, #116]	; (8005738 <UART_SetConfig+0x508>)
 80056c2:	61fb      	str	r3, [r7, #28]
        break;
 80056c4:	e00d      	b.n	80056e2 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80056c6:	f7fd fd19 	bl	80030fc <HAL_RCC_GetSysClockFreq>
 80056ca:	61f8      	str	r0, [r7, #28]
        break;
 80056cc:	e009      	b.n	80056e2 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80056ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80056d2:	61fb      	str	r3, [r7, #28]
        break;
 80056d4:	e005      	b.n	80056e2 <UART_SetConfig+0x4b2>
      default:
        pclk = 0U;
 80056d6:	2300      	movs	r3, #0
 80056d8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80056da:	2301      	movs	r3, #1
 80056dc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80056e0:	bf00      	nop
    }

    if (pclk != 0U)
 80056e2:	69fb      	ldr	r3, [r7, #28]
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d019      	beq.n	800571c <UART_SetConfig+0x4ec>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	685b      	ldr	r3, [r3, #4]
 80056ec:	085a      	lsrs	r2, r3, #1
 80056ee:	69fb      	ldr	r3, [r7, #28]
 80056f0:	441a      	add	r2, r3
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	685b      	ldr	r3, [r3, #4]
 80056f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80056fa:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80056fc:	69bb      	ldr	r3, [r7, #24]
 80056fe:	2b0f      	cmp	r3, #15
 8005700:	d909      	bls.n	8005716 <UART_SetConfig+0x4e6>
 8005702:	69bb      	ldr	r3, [r7, #24]
 8005704:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005708:	d205      	bcs.n	8005716 <UART_SetConfig+0x4e6>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800570a:	69bb      	ldr	r3, [r7, #24]
 800570c:	b29a      	uxth	r2, r3
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	60da      	str	r2, [r3, #12]
 8005714:	e002      	b.n	800571c <UART_SetConfig+0x4ec>
      }
      else
      {
        ret = HAL_ERROR;
 8005716:	2301      	movs	r3, #1
 8005718:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	2200      	movs	r2, #0
 8005720:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	2200      	movs	r2, #0
 8005726:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005728:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 800572c:	4618      	mov	r0, r3
 800572e:	3728      	adds	r7, #40	; 0x28
 8005730:	46bd      	mov	sp, r7
 8005732:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005736:	bf00      	nop
 8005738:	00f42400 	.word	0x00f42400

0800573c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800573c:	b480      	push	{r7}
 800573e:	b083      	sub	sp, #12
 8005740:	af00      	add	r7, sp, #0
 8005742:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005748:	f003 0301 	and.w	r3, r3, #1
 800574c:	2b00      	cmp	r3, #0
 800574e:	d00a      	beq.n	8005766 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	685b      	ldr	r3, [r3, #4]
 8005756:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	430a      	orrs	r2, r1
 8005764:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800576a:	f003 0302 	and.w	r3, r3, #2
 800576e:	2b00      	cmp	r3, #0
 8005770:	d00a      	beq.n	8005788 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	685b      	ldr	r3, [r3, #4]
 8005778:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	430a      	orrs	r2, r1
 8005786:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800578c:	f003 0304 	and.w	r3, r3, #4
 8005790:	2b00      	cmp	r3, #0
 8005792:	d00a      	beq.n	80057aa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	685b      	ldr	r3, [r3, #4]
 800579a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	430a      	orrs	r2, r1
 80057a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057ae:	f003 0308 	and.w	r3, r3, #8
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d00a      	beq.n	80057cc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	685b      	ldr	r3, [r3, #4]
 80057bc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	430a      	orrs	r2, r1
 80057ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057d0:	f003 0310 	and.w	r3, r3, #16
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d00a      	beq.n	80057ee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	689b      	ldr	r3, [r3, #8]
 80057de:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	430a      	orrs	r2, r1
 80057ec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057f2:	f003 0320 	and.w	r3, r3, #32
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d00a      	beq.n	8005810 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	689b      	ldr	r3, [r3, #8]
 8005800:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	430a      	orrs	r2, r1
 800580e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005814:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005818:	2b00      	cmp	r3, #0
 800581a:	d01a      	beq.n	8005852 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	685b      	ldr	r3, [r3, #4]
 8005822:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	430a      	orrs	r2, r1
 8005830:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005836:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800583a:	d10a      	bne.n	8005852 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	685b      	ldr	r3, [r3, #4]
 8005842:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	430a      	orrs	r2, r1
 8005850:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005856:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800585a:	2b00      	cmp	r3, #0
 800585c:	d00a      	beq.n	8005874 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	685b      	ldr	r3, [r3, #4]
 8005864:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	430a      	orrs	r2, r1
 8005872:	605a      	str	r2, [r3, #4]
  }
}
 8005874:	bf00      	nop
 8005876:	370c      	adds	r7, #12
 8005878:	46bd      	mov	sp, r7
 800587a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587e:	4770      	bx	lr

08005880 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005880:	b580      	push	{r7, lr}
 8005882:	b086      	sub	sp, #24
 8005884:	af02      	add	r7, sp, #8
 8005886:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2200      	movs	r2, #0
 800588c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005890:	f7fb fca6 	bl	80011e0 <HAL_GetTick>
 8005894:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	f003 0308 	and.w	r3, r3, #8
 80058a0:	2b08      	cmp	r3, #8
 80058a2:	d10e      	bne.n	80058c2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80058a4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80058a8:	9300      	str	r3, [sp, #0]
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	2200      	movs	r2, #0
 80058ae:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80058b2:	6878      	ldr	r0, [r7, #4]
 80058b4:	f000 f82d 	bl	8005912 <UART_WaitOnFlagUntilTimeout>
 80058b8:	4603      	mov	r3, r0
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d001      	beq.n	80058c2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80058be:	2303      	movs	r3, #3
 80058c0:	e023      	b.n	800590a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f003 0304 	and.w	r3, r3, #4
 80058cc:	2b04      	cmp	r3, #4
 80058ce:	d10e      	bne.n	80058ee <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80058d0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80058d4:	9300      	str	r3, [sp, #0]
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	2200      	movs	r2, #0
 80058da:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80058de:	6878      	ldr	r0, [r7, #4]
 80058e0:	f000 f817 	bl	8005912 <UART_WaitOnFlagUntilTimeout>
 80058e4:	4603      	mov	r3, r0
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d001      	beq.n	80058ee <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80058ea:	2303      	movs	r3, #3
 80058ec:	e00d      	b.n	800590a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	2220      	movs	r2, #32
 80058f2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2220      	movs	r2, #32
 80058f8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	2200      	movs	r2, #0
 80058fe:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2200      	movs	r2, #0
 8005904:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005908:	2300      	movs	r3, #0
}
 800590a:	4618      	mov	r0, r3
 800590c:	3710      	adds	r7, #16
 800590e:	46bd      	mov	sp, r7
 8005910:	bd80      	pop	{r7, pc}

08005912 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005912:	b580      	push	{r7, lr}
 8005914:	b09c      	sub	sp, #112	; 0x70
 8005916:	af00      	add	r7, sp, #0
 8005918:	60f8      	str	r0, [r7, #12]
 800591a:	60b9      	str	r1, [r7, #8]
 800591c:	603b      	str	r3, [r7, #0]
 800591e:	4613      	mov	r3, r2
 8005920:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005922:	e0a5      	b.n	8005a70 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005924:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005926:	f1b3 3fff 	cmp.w	r3, #4294967295
 800592a:	f000 80a1 	beq.w	8005a70 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800592e:	f7fb fc57 	bl	80011e0 <HAL_GetTick>
 8005932:	4602      	mov	r2, r0
 8005934:	683b      	ldr	r3, [r7, #0]
 8005936:	1ad3      	subs	r3, r2, r3
 8005938:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800593a:	429a      	cmp	r2, r3
 800593c:	d302      	bcc.n	8005944 <UART_WaitOnFlagUntilTimeout+0x32>
 800593e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005940:	2b00      	cmp	r3, #0
 8005942:	d13e      	bne.n	80059c2 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800594a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800594c:	e853 3f00 	ldrex	r3, [r3]
 8005950:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005952:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005954:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005958:	667b      	str	r3, [r7, #100]	; 0x64
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	461a      	mov	r2, r3
 8005960:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005962:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005964:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005966:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005968:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800596a:	e841 2300 	strex	r3, r2, [r1]
 800596e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005970:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005972:	2b00      	cmp	r3, #0
 8005974:	d1e6      	bne.n	8005944 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	3308      	adds	r3, #8
 800597c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800597e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005980:	e853 3f00 	ldrex	r3, [r3]
 8005984:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005986:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005988:	f023 0301 	bic.w	r3, r3, #1
 800598c:	663b      	str	r3, [r7, #96]	; 0x60
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	3308      	adds	r3, #8
 8005994:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005996:	64ba      	str	r2, [r7, #72]	; 0x48
 8005998:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800599a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800599c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800599e:	e841 2300 	strex	r3, r2, [r1]
 80059a2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80059a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d1e5      	bne.n	8005976 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	2220      	movs	r2, #32
 80059ae:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	2220      	movs	r2, #32
 80059b4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	2200      	movs	r2, #0
 80059ba:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80059be:	2303      	movs	r3, #3
 80059c0:	e067      	b.n	8005a92 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f003 0304 	and.w	r3, r3, #4
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d04f      	beq.n	8005a70 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	69db      	ldr	r3, [r3, #28]
 80059d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80059da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80059de:	d147      	bne.n	8005a70 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80059e8:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059f2:	e853 3f00 	ldrex	r3, [r3]
 80059f6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80059f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059fa:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80059fe:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	461a      	mov	r2, r3
 8005a06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a08:	637b      	str	r3, [r7, #52]	; 0x34
 8005a0a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a0c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005a0e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005a10:	e841 2300 	strex	r3, r2, [r1]
 8005a14:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005a16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d1e6      	bne.n	80059ea <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	3308      	adds	r3, #8
 8005a22:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a24:	697b      	ldr	r3, [r7, #20]
 8005a26:	e853 3f00 	ldrex	r3, [r3]
 8005a2a:	613b      	str	r3, [r7, #16]
   return(result);
 8005a2c:	693b      	ldr	r3, [r7, #16]
 8005a2e:	f023 0301 	bic.w	r3, r3, #1
 8005a32:	66bb      	str	r3, [r7, #104]	; 0x68
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	3308      	adds	r3, #8
 8005a3a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005a3c:	623a      	str	r2, [r7, #32]
 8005a3e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a40:	69f9      	ldr	r1, [r7, #28]
 8005a42:	6a3a      	ldr	r2, [r7, #32]
 8005a44:	e841 2300 	strex	r3, r2, [r1]
 8005a48:	61bb      	str	r3, [r7, #24]
   return(result);
 8005a4a:	69bb      	ldr	r3, [r7, #24]
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d1e5      	bne.n	8005a1c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	2220      	movs	r2, #32
 8005a54:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	2220      	movs	r2, #32
 8005a5a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	2220      	movs	r2, #32
 8005a60:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	2200      	movs	r2, #0
 8005a68:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005a6c:	2303      	movs	r3, #3
 8005a6e:	e010      	b.n	8005a92 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	69da      	ldr	r2, [r3, #28]
 8005a76:	68bb      	ldr	r3, [r7, #8]
 8005a78:	4013      	ands	r3, r2
 8005a7a:	68ba      	ldr	r2, [r7, #8]
 8005a7c:	429a      	cmp	r2, r3
 8005a7e:	bf0c      	ite	eq
 8005a80:	2301      	moveq	r3, #1
 8005a82:	2300      	movne	r3, #0
 8005a84:	b2db      	uxtb	r3, r3
 8005a86:	461a      	mov	r2, r3
 8005a88:	79fb      	ldrb	r3, [r7, #7]
 8005a8a:	429a      	cmp	r2, r3
 8005a8c:	f43f af4a 	beq.w	8005924 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005a90:	2300      	movs	r3, #0
}
 8005a92:	4618      	mov	r0, r3
 8005a94:	3770      	adds	r7, #112	; 0x70
 8005a96:	46bd      	mov	sp, r7
 8005a98:	bd80      	pop	{r7, pc}
	...

08005a9c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005a9c:	b480      	push	{r7}
 8005a9e:	b097      	sub	sp, #92	; 0x5c
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	60f8      	str	r0, [r7, #12]
 8005aa4:	60b9      	str	r1, [r7, #8]
 8005aa6:	4613      	mov	r3, r2
 8005aa8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	68ba      	ldr	r2, [r7, #8]
 8005aae:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	88fa      	ldrh	r2, [r7, #6]
 8005ab4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	88fa      	ldrh	r2, [r7, #6]
 8005abc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	689b      	ldr	r3, [r3, #8]
 8005aca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ace:	d10e      	bne.n	8005aee <UART_Start_Receive_IT+0x52>
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	691b      	ldr	r3, [r3, #16]
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d105      	bne.n	8005ae4 <UART_Start_Receive_IT+0x48>
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	f240 12ff 	movw	r2, #511	; 0x1ff
 8005ade:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005ae2:	e02d      	b.n	8005b40 <UART_Start_Receive_IT+0xa4>
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	22ff      	movs	r2, #255	; 0xff
 8005ae8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005aec:	e028      	b.n	8005b40 <UART_Start_Receive_IT+0xa4>
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	689b      	ldr	r3, [r3, #8]
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d10d      	bne.n	8005b12 <UART_Start_Receive_IT+0x76>
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	691b      	ldr	r3, [r3, #16]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d104      	bne.n	8005b08 <UART_Start_Receive_IT+0x6c>
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	22ff      	movs	r2, #255	; 0xff
 8005b02:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005b06:	e01b      	b.n	8005b40 <UART_Start_Receive_IT+0xa4>
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	227f      	movs	r2, #127	; 0x7f
 8005b0c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005b10:	e016      	b.n	8005b40 <UART_Start_Receive_IT+0xa4>
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	689b      	ldr	r3, [r3, #8]
 8005b16:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005b1a:	d10d      	bne.n	8005b38 <UART_Start_Receive_IT+0x9c>
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	691b      	ldr	r3, [r3, #16]
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d104      	bne.n	8005b2e <UART_Start_Receive_IT+0x92>
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	227f      	movs	r2, #127	; 0x7f
 8005b28:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005b2c:	e008      	b.n	8005b40 <UART_Start_Receive_IT+0xa4>
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	223f      	movs	r2, #63	; 0x3f
 8005b32:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005b36:	e003      	b.n	8005b40 <UART_Start_Receive_IT+0xa4>
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	2200      	movs	r2, #0
 8005b44:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	2222      	movs	r2, #34	; 0x22
 8005b4c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	3308      	adds	r3, #8
 8005b54:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b58:	e853 3f00 	ldrex	r3, [r3]
 8005b5c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005b5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b60:	f043 0301 	orr.w	r3, r3, #1
 8005b64:	657b      	str	r3, [r7, #84]	; 0x54
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	3308      	adds	r3, #8
 8005b6c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005b6e:	64ba      	str	r2, [r7, #72]	; 0x48
 8005b70:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b72:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005b74:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005b76:	e841 2300 	strex	r3, r2, [r1]
 8005b7a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005b7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d1e5      	bne.n	8005b4e <UART_Start_Receive_IT+0xb2>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	689b      	ldr	r3, [r3, #8]
 8005b86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b8a:	d107      	bne.n	8005b9c <UART_Start_Receive_IT+0x100>
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	691b      	ldr	r3, [r3, #16]
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d103      	bne.n	8005b9c <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	4a24      	ldr	r2, [pc, #144]	; (8005c28 <UART_Start_Receive_IT+0x18c>)
 8005b98:	665a      	str	r2, [r3, #100]	; 0x64
 8005b9a:	e002      	b.n	8005ba2 <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	4a23      	ldr	r2, [pc, #140]	; (8005c2c <UART_Start_Receive_IT+0x190>)
 8005ba0:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	691b      	ldr	r3, [r3, #16]
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d019      	beq.n	8005be6 <UART_Start_Receive_IT+0x14a>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bba:	e853 3f00 	ldrex	r3, [r3]
 8005bbe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bc2:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8005bc6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	461a      	mov	r2, r3
 8005bce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005bd0:	637b      	str	r3, [r7, #52]	; 0x34
 8005bd2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bd4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005bd6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005bd8:	e841 2300 	strex	r3, r2, [r1]
 8005bdc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005bde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d1e6      	bne.n	8005bb2 <UART_Start_Receive_IT+0x116>
 8005be4:	e018      	b.n	8005c18 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bec:	697b      	ldr	r3, [r7, #20]
 8005bee:	e853 3f00 	ldrex	r3, [r3]
 8005bf2:	613b      	str	r3, [r7, #16]
   return(result);
 8005bf4:	693b      	ldr	r3, [r7, #16]
 8005bf6:	f043 0320 	orr.w	r3, r3, #32
 8005bfa:	653b      	str	r3, [r7, #80]	; 0x50
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	461a      	mov	r2, r3
 8005c02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c04:	623b      	str	r3, [r7, #32]
 8005c06:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c08:	69f9      	ldr	r1, [r7, #28]
 8005c0a:	6a3a      	ldr	r2, [r7, #32]
 8005c0c:	e841 2300 	strex	r3, r2, [r1]
 8005c10:	61bb      	str	r3, [r7, #24]
   return(result);
 8005c12:	69bb      	ldr	r3, [r7, #24]
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d1e6      	bne.n	8005be6 <UART_Start_Receive_IT+0x14a>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8005c18:	2300      	movs	r3, #0
}
 8005c1a:	4618      	mov	r0, r3
 8005c1c:	375c      	adds	r7, #92	; 0x5c
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c24:	4770      	bx	lr
 8005c26:	bf00      	nop
 8005c28:	0800604f 	.word	0x0800604f
 8005c2c:	08005eef 	.word	0x08005eef

08005c30 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005c30:	b480      	push	{r7}
 8005c32:	b095      	sub	sp, #84	; 0x54
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c40:	e853 3f00 	ldrex	r3, [r3]
 8005c44:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005c46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c48:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005c4c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	461a      	mov	r2, r3
 8005c54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c56:	643b      	str	r3, [r7, #64]	; 0x40
 8005c58:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c5a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005c5c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005c5e:	e841 2300 	strex	r3, r2, [r1]
 8005c62:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005c64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d1e6      	bne.n	8005c38 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	3308      	adds	r3, #8
 8005c70:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c72:	6a3b      	ldr	r3, [r7, #32]
 8005c74:	e853 3f00 	ldrex	r3, [r3]
 8005c78:	61fb      	str	r3, [r7, #28]
   return(result);
 8005c7a:	69fb      	ldr	r3, [r7, #28]
 8005c7c:	f023 0301 	bic.w	r3, r3, #1
 8005c80:	64bb      	str	r3, [r7, #72]	; 0x48
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	3308      	adds	r3, #8
 8005c88:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005c8a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005c8c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c8e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005c90:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005c92:	e841 2300 	strex	r3, r2, [r1]
 8005c96:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d1e5      	bne.n	8005c6a <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ca2:	2b01      	cmp	r3, #1
 8005ca4:	d118      	bne.n	8005cd8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	e853 3f00 	ldrex	r3, [r3]
 8005cb2:	60bb      	str	r3, [r7, #8]
   return(result);
 8005cb4:	68bb      	ldr	r3, [r7, #8]
 8005cb6:	f023 0310 	bic.w	r3, r3, #16
 8005cba:	647b      	str	r3, [r7, #68]	; 0x44
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	461a      	mov	r2, r3
 8005cc2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005cc4:	61bb      	str	r3, [r7, #24]
 8005cc6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cc8:	6979      	ldr	r1, [r7, #20]
 8005cca:	69ba      	ldr	r2, [r7, #24]
 8005ccc:	e841 2300 	strex	r3, r2, [r1]
 8005cd0:	613b      	str	r3, [r7, #16]
   return(result);
 8005cd2:	693b      	ldr	r3, [r7, #16]
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d1e6      	bne.n	8005ca6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	2220      	movs	r2, #32
 8005cdc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2200      	movs	r2, #0
 8005ce8:	665a      	str	r2, [r3, #100]	; 0x64
}
 8005cea:	bf00      	nop
 8005cec:	3754      	adds	r7, #84	; 0x54
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf4:	4770      	bx	lr

08005cf6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005cf6:	b580      	push	{r7, lr}
 8005cf8:	b084      	sub	sp, #16
 8005cfa:	af00      	add	r7, sp, #0
 8005cfc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d02:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	2200      	movs	r2, #0
 8005d08:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	2200      	movs	r2, #0
 8005d10:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005d14:	68f8      	ldr	r0, [r7, #12]
 8005d16:	f7ff fa75 	bl	8005204 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005d1a:	bf00      	nop
 8005d1c:	3710      	adds	r7, #16
 8005d1e:	46bd      	mov	sp, r7
 8005d20:	bd80      	pop	{r7, pc}

08005d22 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005d22:	b480      	push	{r7}
 8005d24:	b08f      	sub	sp, #60	; 0x3c
 8005d26:	af00      	add	r7, sp, #0
 8005d28:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005d2e:	2b21      	cmp	r3, #33	; 0x21
 8005d30:	d14d      	bne.n	8005dce <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005d38:	b29b      	uxth	r3, r3
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d132      	bne.n	8005da4 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d44:	6a3b      	ldr	r3, [r7, #32]
 8005d46:	e853 3f00 	ldrex	r3, [r3]
 8005d4a:	61fb      	str	r3, [r7, #28]
   return(result);
 8005d4c:	69fb      	ldr	r3, [r7, #28]
 8005d4e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005d52:	637b      	str	r3, [r7, #52]	; 0x34
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	461a      	mov	r2, r3
 8005d5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d5c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005d5e:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d60:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005d62:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005d64:	e841 2300 	strex	r3, r2, [r1]
 8005d68:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d1e6      	bne.n	8005d3e <UART_TxISR_8BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	e853 3f00 	ldrex	r3, [r3]
 8005d7c:	60bb      	str	r3, [r7, #8]
   return(result);
 8005d7e:	68bb      	ldr	r3, [r7, #8]
 8005d80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005d84:	633b      	str	r3, [r7, #48]	; 0x30
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	461a      	mov	r2, r3
 8005d8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d8e:	61bb      	str	r3, [r7, #24]
 8005d90:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d92:	6979      	ldr	r1, [r7, #20]
 8005d94:	69ba      	ldr	r2, [r7, #24]
 8005d96:	e841 2300 	strex	r3, r2, [r1]
 8005d9a:	613b      	str	r3, [r7, #16]
   return(result);
 8005d9c:	693b      	ldr	r3, [r7, #16]
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d1e6      	bne.n	8005d70 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8005da2:	e014      	b.n	8005dce <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005da8:	781a      	ldrb	r2, [r3, #0]
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	b292      	uxth	r2, r2
 8005db0:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005db6:	1c5a      	adds	r2, r3, #1
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005dc2:	b29b      	uxth	r3, r3
 8005dc4:	3b01      	subs	r3, #1
 8005dc6:	b29a      	uxth	r2, r3
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8005dce:	bf00      	nop
 8005dd0:	373c      	adds	r7, #60	; 0x3c
 8005dd2:	46bd      	mov	sp, r7
 8005dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd8:	4770      	bx	lr

08005dda <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005dda:	b480      	push	{r7}
 8005ddc:	b091      	sub	sp, #68	; 0x44
 8005dde:	af00      	add	r7, sp, #0
 8005de0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005de6:	2b21      	cmp	r3, #33	; 0x21
 8005de8:	d151      	bne.n	8005e8e <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005df0:	b29b      	uxth	r3, r3
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d132      	bne.n	8005e5c <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dfe:	e853 3f00 	ldrex	r3, [r3]
 8005e02:	623b      	str	r3, [r7, #32]
   return(result);
 8005e04:	6a3b      	ldr	r3, [r7, #32]
 8005e06:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005e0a:	63bb      	str	r3, [r7, #56]	; 0x38
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	461a      	mov	r2, r3
 8005e12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e14:	633b      	str	r3, [r7, #48]	; 0x30
 8005e16:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e18:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005e1a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005e1c:	e841 2300 	strex	r3, r2, [r1]
 8005e20:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005e22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d1e6      	bne.n	8005df6 <UART_TxISR_16BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e2e:	693b      	ldr	r3, [r7, #16]
 8005e30:	e853 3f00 	ldrex	r3, [r3]
 8005e34:	60fb      	str	r3, [r7, #12]
   return(result);
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005e3c:	637b      	str	r3, [r7, #52]	; 0x34
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	461a      	mov	r2, r3
 8005e44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e46:	61fb      	str	r3, [r7, #28]
 8005e48:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e4a:	69b9      	ldr	r1, [r7, #24]
 8005e4c:	69fa      	ldr	r2, [r7, #28]
 8005e4e:	e841 2300 	strex	r3, r2, [r1]
 8005e52:	617b      	str	r3, [r7, #20]
   return(result);
 8005e54:	697b      	ldr	r3, [r7, #20]
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d1e6      	bne.n	8005e28 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8005e5a:	e018      	b.n	8005e8e <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e60:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8005e62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e64:	881a      	ldrh	r2, [r3, #0]
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005e6e:	b292      	uxth	r2, r2
 8005e70:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e76:	1c9a      	adds	r2, r3, #2
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005e82:	b29b      	uxth	r3, r3
 8005e84:	3b01      	subs	r3, #1
 8005e86:	b29a      	uxth	r2, r3
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8005e8e:	bf00      	nop
 8005e90:	3744      	adds	r7, #68	; 0x44
 8005e92:	46bd      	mov	sp, r7
 8005e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e98:	4770      	bx	lr

08005e9a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005e9a:	b580      	push	{r7, lr}
 8005e9c:	b088      	sub	sp, #32
 8005e9e:	af00      	add	r7, sp, #0
 8005ea0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	e853 3f00 	ldrex	r3, [r3]
 8005eae:	60bb      	str	r3, [r7, #8]
   return(result);
 8005eb0:	68bb      	ldr	r3, [r7, #8]
 8005eb2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005eb6:	61fb      	str	r3, [r7, #28]
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	461a      	mov	r2, r3
 8005ebe:	69fb      	ldr	r3, [r7, #28]
 8005ec0:	61bb      	str	r3, [r7, #24]
 8005ec2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ec4:	6979      	ldr	r1, [r7, #20]
 8005ec6:	69ba      	ldr	r2, [r7, #24]
 8005ec8:	e841 2300 	strex	r3, r2, [r1]
 8005ecc:	613b      	str	r3, [r7, #16]
   return(result);
 8005ece:	693b      	ldr	r3, [r7, #16]
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d1e6      	bne.n	8005ea2 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2220      	movs	r2, #32
 8005ed8:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	2200      	movs	r2, #0
 8005ede:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005ee0:	6878      	ldr	r0, [r7, #4]
 8005ee2:	f7fa fe47 	bl	8000b74 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005ee6:	bf00      	nop
 8005ee8:	3720      	adds	r7, #32
 8005eea:	46bd      	mov	sp, r7
 8005eec:	bd80      	pop	{r7, pc}

08005eee <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005eee:	b580      	push	{r7, lr}
 8005ef0:	b096      	sub	sp, #88	; 0x58
 8005ef2:	af00      	add	r7, sp, #0
 8005ef4:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005efc:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005f04:	2b22      	cmp	r3, #34	; 0x22
 8005f06:	f040 8094 	bne.w	8006032 <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005f10:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005f14:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8005f18:	b2d9      	uxtb	r1, r3
 8005f1a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005f1e:	b2da      	uxtb	r2, r3
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f24:	400a      	ands	r2, r1
 8005f26:	b2d2      	uxtb	r2, r2
 8005f28:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f2e:	1c5a      	adds	r2, r3, #1
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005f3a:	b29b      	uxth	r3, r3
 8005f3c:	3b01      	subs	r3, #1
 8005f3e:	b29a      	uxth	r2, r3
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005f4c:	b29b      	uxth	r3, r3
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d179      	bne.n	8006046 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f5a:	e853 3f00 	ldrex	r3, [r3]
 8005f5e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005f60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f62:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005f66:	653b      	str	r3, [r7, #80]	; 0x50
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	461a      	mov	r2, r3
 8005f6e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f70:	647b      	str	r3, [r7, #68]	; 0x44
 8005f72:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f74:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005f76:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005f78:	e841 2300 	strex	r3, r2, [r1]
 8005f7c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005f7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d1e6      	bne.n	8005f52 <UART_RxISR_8BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	3308      	adds	r3, #8
 8005f8a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f8e:	e853 3f00 	ldrex	r3, [r3]
 8005f92:	623b      	str	r3, [r7, #32]
   return(result);
 8005f94:	6a3b      	ldr	r3, [r7, #32]
 8005f96:	f023 0301 	bic.w	r3, r3, #1
 8005f9a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	3308      	adds	r3, #8
 8005fa2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005fa4:	633a      	str	r2, [r7, #48]	; 0x30
 8005fa6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fa8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005faa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005fac:	e841 2300 	strex	r3, r2, [r1]
 8005fb0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005fb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d1e5      	bne.n	8005f84 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2220      	movs	r2, #32
 8005fbc:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	2200      	movs	r2, #0
 8005fc2:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005fc8:	2b01      	cmp	r3, #1
 8005fca:	d12e      	bne.n	800602a <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	2200      	movs	r2, #0
 8005fd0:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fd8:	693b      	ldr	r3, [r7, #16]
 8005fda:	e853 3f00 	ldrex	r3, [r3]
 8005fde:	60fb      	str	r3, [r7, #12]
   return(result);
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	f023 0310 	bic.w	r3, r3, #16
 8005fe6:	64bb      	str	r3, [r7, #72]	; 0x48
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	461a      	mov	r2, r3
 8005fee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ff0:	61fb      	str	r3, [r7, #28]
 8005ff2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ff4:	69b9      	ldr	r1, [r7, #24]
 8005ff6:	69fa      	ldr	r2, [r7, #28]
 8005ff8:	e841 2300 	strex	r3, r2, [r1]
 8005ffc:	617b      	str	r3, [r7, #20]
   return(result);
 8005ffe:	697b      	ldr	r3, [r7, #20]
 8006000:	2b00      	cmp	r3, #0
 8006002:	d1e6      	bne.n	8005fd2 <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	69db      	ldr	r3, [r3, #28]
 800600a:	f003 0310 	and.w	r3, r3, #16
 800600e:	2b10      	cmp	r3, #16
 8006010:	d103      	bne.n	800601a <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	2210      	movs	r2, #16
 8006018:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006020:	4619      	mov	r1, r3
 8006022:	6878      	ldr	r0, [r7, #4]
 8006024:	f7ff f8f8 	bl	8005218 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006028:	e00d      	b.n	8006046 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800602a:	6878      	ldr	r0, [r7, #4]
 800602c:	f7fa fd58 	bl	8000ae0 <HAL_UART_RxCpltCallback>
}
 8006030:	e009      	b.n	8006046 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	8b1b      	ldrh	r3, [r3, #24]
 8006038:	b29a      	uxth	r2, r3
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	f042 0208 	orr.w	r2, r2, #8
 8006042:	b292      	uxth	r2, r2
 8006044:	831a      	strh	r2, [r3, #24]
}
 8006046:	bf00      	nop
 8006048:	3758      	adds	r7, #88	; 0x58
 800604a:	46bd      	mov	sp, r7
 800604c:	bd80      	pop	{r7, pc}

0800604e <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800604e:	b580      	push	{r7, lr}
 8006050:	b096      	sub	sp, #88	; 0x58
 8006052:	af00      	add	r7, sp, #0
 8006054:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800605c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006064:	2b22      	cmp	r3, #34	; 0x22
 8006066:	f040 8094 	bne.w	8006192 <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006070:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006078:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800607a:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800607e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006082:	4013      	ands	r3, r2
 8006084:	b29a      	uxth	r2, r3
 8006086:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006088:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800608e:	1c9a      	adds	r2, r3, #2
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800609a:	b29b      	uxth	r3, r3
 800609c:	3b01      	subs	r3, #1
 800609e:	b29a      	uxth	r2, r3
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80060ac:	b29b      	uxth	r3, r3
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d179      	bne.n	80061a6 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060ba:	e853 3f00 	ldrex	r3, [r3]
 80060be:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80060c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060c2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80060c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	461a      	mov	r2, r3
 80060ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80060d0:	643b      	str	r3, [r7, #64]	; 0x40
 80060d2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060d4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80060d6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80060d8:	e841 2300 	strex	r3, r2, [r1]
 80060dc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80060de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d1e6      	bne.n	80060b2 <UART_RxISR_16BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	3308      	adds	r3, #8
 80060ea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060ec:	6a3b      	ldr	r3, [r7, #32]
 80060ee:	e853 3f00 	ldrex	r3, [r3]
 80060f2:	61fb      	str	r3, [r7, #28]
   return(result);
 80060f4:	69fb      	ldr	r3, [r7, #28]
 80060f6:	f023 0301 	bic.w	r3, r3, #1
 80060fa:	64bb      	str	r3, [r7, #72]	; 0x48
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	3308      	adds	r3, #8
 8006102:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006104:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006106:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006108:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800610a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800610c:	e841 2300 	strex	r3, r2, [r1]
 8006110:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006114:	2b00      	cmp	r3, #0
 8006116:	d1e5      	bne.n	80060e4 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2220      	movs	r2, #32
 800611c:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	2200      	movs	r2, #0
 8006122:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006128:	2b01      	cmp	r3, #1
 800612a:	d12e      	bne.n	800618a <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	2200      	movs	r2, #0
 8006130:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	e853 3f00 	ldrex	r3, [r3]
 800613e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006140:	68bb      	ldr	r3, [r7, #8]
 8006142:	f023 0310 	bic.w	r3, r3, #16
 8006146:	647b      	str	r3, [r7, #68]	; 0x44
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	461a      	mov	r2, r3
 800614e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006150:	61bb      	str	r3, [r7, #24]
 8006152:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006154:	6979      	ldr	r1, [r7, #20]
 8006156:	69ba      	ldr	r2, [r7, #24]
 8006158:	e841 2300 	strex	r3, r2, [r1]
 800615c:	613b      	str	r3, [r7, #16]
   return(result);
 800615e:	693b      	ldr	r3, [r7, #16]
 8006160:	2b00      	cmp	r3, #0
 8006162:	d1e6      	bne.n	8006132 <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	69db      	ldr	r3, [r3, #28]
 800616a:	f003 0310 	and.w	r3, r3, #16
 800616e:	2b10      	cmp	r3, #16
 8006170:	d103      	bne.n	800617a <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	2210      	movs	r2, #16
 8006178:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006180:	4619      	mov	r1, r3
 8006182:	6878      	ldr	r0, [r7, #4]
 8006184:	f7ff f848 	bl	8005218 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006188:	e00d      	b.n	80061a6 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800618a:	6878      	ldr	r0, [r7, #4]
 800618c:	f7fa fca8 	bl	8000ae0 <HAL_UART_RxCpltCallback>
}
 8006190:	e009      	b.n	80061a6 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	8b1b      	ldrh	r3, [r3, #24]
 8006198:	b29a      	uxth	r2, r3
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	f042 0208 	orr.w	r2, r2, #8
 80061a2:	b292      	uxth	r2, r2
 80061a4:	831a      	strh	r2, [r3, #24]
}
 80061a6:	bf00      	nop
 80061a8:	3758      	adds	r7, #88	; 0x58
 80061aa:	46bd      	mov	sp, r7
 80061ac:	bd80      	pop	{r7, pc}

080061ae <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80061ae:	b480      	push	{r7}
 80061b0:	b083      	sub	sp, #12
 80061b2:	af00      	add	r7, sp, #0
 80061b4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80061b6:	bf00      	nop
 80061b8:	370c      	adds	r7, #12
 80061ba:	46bd      	mov	sp, r7
 80061bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c0:	4770      	bx	lr
	...

080061c4 <__libc_init_array>:
 80061c4:	b570      	push	{r4, r5, r6, lr}
 80061c6:	4d0d      	ldr	r5, [pc, #52]	; (80061fc <__libc_init_array+0x38>)
 80061c8:	4c0d      	ldr	r4, [pc, #52]	; (8006200 <__libc_init_array+0x3c>)
 80061ca:	1b64      	subs	r4, r4, r5
 80061cc:	10a4      	asrs	r4, r4, #2
 80061ce:	2600      	movs	r6, #0
 80061d0:	42a6      	cmp	r6, r4
 80061d2:	d109      	bne.n	80061e8 <__libc_init_array+0x24>
 80061d4:	4d0b      	ldr	r5, [pc, #44]	; (8006204 <__libc_init_array+0x40>)
 80061d6:	4c0c      	ldr	r4, [pc, #48]	; (8006208 <__libc_init_array+0x44>)
 80061d8:	f000 f820 	bl	800621c <_init>
 80061dc:	1b64      	subs	r4, r4, r5
 80061de:	10a4      	asrs	r4, r4, #2
 80061e0:	2600      	movs	r6, #0
 80061e2:	42a6      	cmp	r6, r4
 80061e4:	d105      	bne.n	80061f2 <__libc_init_array+0x2e>
 80061e6:	bd70      	pop	{r4, r5, r6, pc}
 80061e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80061ec:	4798      	blx	r3
 80061ee:	3601      	adds	r6, #1
 80061f0:	e7ee      	b.n	80061d0 <__libc_init_array+0xc>
 80061f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80061f6:	4798      	blx	r3
 80061f8:	3601      	adds	r6, #1
 80061fa:	e7f2      	b.n	80061e2 <__libc_init_array+0x1e>
 80061fc:	080062a4 	.word	0x080062a4
 8006200:	080062a4 	.word	0x080062a4
 8006204:	080062a4 	.word	0x080062a4
 8006208:	080062a8 	.word	0x080062a8

0800620c <memset>:
 800620c:	4402      	add	r2, r0
 800620e:	4603      	mov	r3, r0
 8006210:	4293      	cmp	r3, r2
 8006212:	d100      	bne.n	8006216 <memset+0xa>
 8006214:	4770      	bx	lr
 8006216:	f803 1b01 	strb.w	r1, [r3], #1
 800621a:	e7f9      	b.n	8006210 <memset+0x4>

0800621c <_init>:
 800621c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800621e:	bf00      	nop
 8006220:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006222:	bc08      	pop	{r3}
 8006224:	469e      	mov	lr, r3
 8006226:	4770      	bx	lr

08006228 <_fini>:
 8006228:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800622a:	bf00      	nop
 800622c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800622e:	bc08      	pop	{r3}
 8006230:	469e      	mov	lr, r3
 8006232:	4770      	bx	lr
