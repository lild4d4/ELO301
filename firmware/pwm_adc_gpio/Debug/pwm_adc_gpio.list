
pwm_adc_gpio.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007550  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  080076e4  080076e4  000176e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800774c  0800774c  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  0800774c  0800774c  0001774c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007754  08007754  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007754  08007754  00017754  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007758  08007758  00017758  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  0800775c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002c0  20000010  0800776c  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002d0  0800776c  000202d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001844e  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000330d  00000000  00000000  0003848e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012d8  00000000  00000000  0003b7a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001160  00000000  00000000  0003ca78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025f97  00000000  00000000  0003dbd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000181e1  00000000  00000000  00063b6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e9ca4  00000000  00000000  0007bd50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001659f4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004eb4  00000000  00000000  00165a44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000010 	.word	0x20000010
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080076cc 	.word	0x080076cc

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000014 	.word	0x20000014
 80001d0:	080076cc 	.word	0x080076cc

080001d4 <__aeabi_drsub>:
 80001d4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001d8:	e002      	b.n	80001e0 <__adddf3>
 80001da:	bf00      	nop

080001dc <__aeabi_dsub>:
 80001dc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e0 <__adddf3>:
 80001e0:	b530      	push	{r4, r5, lr}
 80001e2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001e6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ea:	ea94 0f05 	teq	r4, r5
 80001ee:	bf08      	it	eq
 80001f0:	ea90 0f02 	teqeq	r0, r2
 80001f4:	bf1f      	itttt	ne
 80001f6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fa:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001fe:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000202:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000206:	f000 80e2 	beq.w	80003ce <__adddf3+0x1ee>
 800020a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800020e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000212:	bfb8      	it	lt
 8000214:	426d      	neglt	r5, r5
 8000216:	dd0c      	ble.n	8000232 <__adddf3+0x52>
 8000218:	442c      	add	r4, r5
 800021a:	ea80 0202 	eor.w	r2, r0, r2
 800021e:	ea81 0303 	eor.w	r3, r1, r3
 8000222:	ea82 0000 	eor.w	r0, r2, r0
 8000226:	ea83 0101 	eor.w	r1, r3, r1
 800022a:	ea80 0202 	eor.w	r2, r0, r2
 800022e:	ea81 0303 	eor.w	r3, r1, r3
 8000232:	2d36      	cmp	r5, #54	; 0x36
 8000234:	bf88      	it	hi
 8000236:	bd30      	pophi	{r4, r5, pc}
 8000238:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800023c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000240:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000244:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000248:	d002      	beq.n	8000250 <__adddf3+0x70>
 800024a:	4240      	negs	r0, r0
 800024c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000250:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000254:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000258:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800025c:	d002      	beq.n	8000264 <__adddf3+0x84>
 800025e:	4252      	negs	r2, r2
 8000260:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000264:	ea94 0f05 	teq	r4, r5
 8000268:	f000 80a7 	beq.w	80003ba <__adddf3+0x1da>
 800026c:	f1a4 0401 	sub.w	r4, r4, #1
 8000270:	f1d5 0e20 	rsbs	lr, r5, #32
 8000274:	db0d      	blt.n	8000292 <__adddf3+0xb2>
 8000276:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027a:	fa22 f205 	lsr.w	r2, r2, r5
 800027e:	1880      	adds	r0, r0, r2
 8000280:	f141 0100 	adc.w	r1, r1, #0
 8000284:	fa03 f20e 	lsl.w	r2, r3, lr
 8000288:	1880      	adds	r0, r0, r2
 800028a:	fa43 f305 	asr.w	r3, r3, r5
 800028e:	4159      	adcs	r1, r3
 8000290:	e00e      	b.n	80002b0 <__adddf3+0xd0>
 8000292:	f1a5 0520 	sub.w	r5, r5, #32
 8000296:	f10e 0e20 	add.w	lr, lr, #32
 800029a:	2a01      	cmp	r2, #1
 800029c:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a0:	bf28      	it	cs
 80002a2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002a6:	fa43 f305 	asr.w	r3, r3, r5
 80002aa:	18c0      	adds	r0, r0, r3
 80002ac:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b4:	d507      	bpl.n	80002c6 <__adddf3+0xe6>
 80002b6:	f04f 0e00 	mov.w	lr, #0
 80002ba:	f1dc 0c00 	rsbs	ip, ip, #0
 80002be:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c2:	eb6e 0101 	sbc.w	r1, lr, r1
 80002c6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ca:	d31b      	bcc.n	8000304 <__adddf3+0x124>
 80002cc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d0:	d30c      	bcc.n	80002ec <__adddf3+0x10c>
 80002d2:	0849      	lsrs	r1, r1, #1
 80002d4:	ea5f 0030 	movs.w	r0, r0, rrx
 80002d8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002dc:	f104 0401 	add.w	r4, r4, #1
 80002e0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002e8:	f080 809a 	bcs.w	8000420 <__adddf3+0x240>
 80002ec:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f0:	bf08      	it	eq
 80002f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002f6:	f150 0000 	adcs.w	r0, r0, #0
 80002fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002fe:	ea41 0105 	orr.w	r1, r1, r5
 8000302:	bd30      	pop	{r4, r5, pc}
 8000304:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000308:	4140      	adcs	r0, r0
 800030a:	eb41 0101 	adc.w	r1, r1, r1
 800030e:	3c01      	subs	r4, #1
 8000310:	bf28      	it	cs
 8000312:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000316:	d2e9      	bcs.n	80002ec <__adddf3+0x10c>
 8000318:	f091 0f00 	teq	r1, #0
 800031c:	bf04      	itt	eq
 800031e:	4601      	moveq	r1, r0
 8000320:	2000      	moveq	r0, #0
 8000322:	fab1 f381 	clz	r3, r1
 8000326:	bf08      	it	eq
 8000328:	3320      	addeq	r3, #32
 800032a:	f1a3 030b 	sub.w	r3, r3, #11
 800032e:	f1b3 0220 	subs.w	r2, r3, #32
 8000332:	da0c      	bge.n	800034e <__adddf3+0x16e>
 8000334:	320c      	adds	r2, #12
 8000336:	dd08      	ble.n	800034a <__adddf3+0x16a>
 8000338:	f102 0c14 	add.w	ip, r2, #20
 800033c:	f1c2 020c 	rsb	r2, r2, #12
 8000340:	fa01 f00c 	lsl.w	r0, r1, ip
 8000344:	fa21 f102 	lsr.w	r1, r1, r2
 8000348:	e00c      	b.n	8000364 <__adddf3+0x184>
 800034a:	f102 0214 	add.w	r2, r2, #20
 800034e:	bfd8      	it	le
 8000350:	f1c2 0c20 	rsble	ip, r2, #32
 8000354:	fa01 f102 	lsl.w	r1, r1, r2
 8000358:	fa20 fc0c 	lsr.w	ip, r0, ip
 800035c:	bfdc      	itt	le
 800035e:	ea41 010c 	orrle.w	r1, r1, ip
 8000362:	4090      	lslle	r0, r2
 8000364:	1ae4      	subs	r4, r4, r3
 8000366:	bfa2      	ittt	ge
 8000368:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800036c:	4329      	orrge	r1, r5
 800036e:	bd30      	popge	{r4, r5, pc}
 8000370:	ea6f 0404 	mvn.w	r4, r4
 8000374:	3c1f      	subs	r4, #31
 8000376:	da1c      	bge.n	80003b2 <__adddf3+0x1d2>
 8000378:	340c      	adds	r4, #12
 800037a:	dc0e      	bgt.n	800039a <__adddf3+0x1ba>
 800037c:	f104 0414 	add.w	r4, r4, #20
 8000380:	f1c4 0220 	rsb	r2, r4, #32
 8000384:	fa20 f004 	lsr.w	r0, r0, r4
 8000388:	fa01 f302 	lsl.w	r3, r1, r2
 800038c:	ea40 0003 	orr.w	r0, r0, r3
 8000390:	fa21 f304 	lsr.w	r3, r1, r4
 8000394:	ea45 0103 	orr.w	r1, r5, r3
 8000398:	bd30      	pop	{r4, r5, pc}
 800039a:	f1c4 040c 	rsb	r4, r4, #12
 800039e:	f1c4 0220 	rsb	r2, r4, #32
 80003a2:	fa20 f002 	lsr.w	r0, r0, r2
 80003a6:	fa01 f304 	lsl.w	r3, r1, r4
 80003aa:	ea40 0003 	orr.w	r0, r0, r3
 80003ae:	4629      	mov	r1, r5
 80003b0:	bd30      	pop	{r4, r5, pc}
 80003b2:	fa21 f004 	lsr.w	r0, r1, r4
 80003b6:	4629      	mov	r1, r5
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	f094 0f00 	teq	r4, #0
 80003be:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c2:	bf06      	itte	eq
 80003c4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003c8:	3401      	addeq	r4, #1
 80003ca:	3d01      	subne	r5, #1
 80003cc:	e74e      	b.n	800026c <__adddf3+0x8c>
 80003ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d2:	bf18      	it	ne
 80003d4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d8:	d029      	beq.n	800042e <__adddf3+0x24e>
 80003da:	ea94 0f05 	teq	r4, r5
 80003de:	bf08      	it	eq
 80003e0:	ea90 0f02 	teqeq	r0, r2
 80003e4:	d005      	beq.n	80003f2 <__adddf3+0x212>
 80003e6:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ea:	bf04      	itt	eq
 80003ec:	4619      	moveq	r1, r3
 80003ee:	4610      	moveq	r0, r2
 80003f0:	bd30      	pop	{r4, r5, pc}
 80003f2:	ea91 0f03 	teq	r1, r3
 80003f6:	bf1e      	ittt	ne
 80003f8:	2100      	movne	r1, #0
 80003fa:	2000      	movne	r0, #0
 80003fc:	bd30      	popne	{r4, r5, pc}
 80003fe:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000402:	d105      	bne.n	8000410 <__adddf3+0x230>
 8000404:	0040      	lsls	r0, r0, #1
 8000406:	4149      	adcs	r1, r1
 8000408:	bf28      	it	cs
 800040a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000414:	bf3c      	itt	cc
 8000416:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041a:	bd30      	popcc	{r4, r5, pc}
 800041c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000420:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000424:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000428:	f04f 0000 	mov.w	r0, #0
 800042c:	bd30      	pop	{r4, r5, pc}
 800042e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000432:	bf1a      	itte	ne
 8000434:	4619      	movne	r1, r3
 8000436:	4610      	movne	r0, r2
 8000438:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800043c:	bf1c      	itt	ne
 800043e:	460b      	movne	r3, r1
 8000440:	4602      	movne	r2, r0
 8000442:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000446:	bf06      	itte	eq
 8000448:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800044c:	ea91 0f03 	teqeq	r1, r3
 8000450:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	bf00      	nop

08000458 <__aeabi_ui2d>:
 8000458:	f090 0f00 	teq	r0, #0
 800045c:	bf04      	itt	eq
 800045e:	2100      	moveq	r1, #0
 8000460:	4770      	bxeq	lr
 8000462:	b530      	push	{r4, r5, lr}
 8000464:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000468:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800046c:	f04f 0500 	mov.w	r5, #0
 8000470:	f04f 0100 	mov.w	r1, #0
 8000474:	e750      	b.n	8000318 <__adddf3+0x138>
 8000476:	bf00      	nop

08000478 <__aeabi_i2d>:
 8000478:	f090 0f00 	teq	r0, #0
 800047c:	bf04      	itt	eq
 800047e:	2100      	moveq	r1, #0
 8000480:	4770      	bxeq	lr
 8000482:	b530      	push	{r4, r5, lr}
 8000484:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000488:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000490:	bf48      	it	mi
 8000492:	4240      	negmi	r0, r0
 8000494:	f04f 0100 	mov.w	r1, #0
 8000498:	e73e      	b.n	8000318 <__adddf3+0x138>
 800049a:	bf00      	nop

0800049c <__aeabi_f2d>:
 800049c:	0042      	lsls	r2, r0, #1
 800049e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a2:	ea4f 0131 	mov.w	r1, r1, rrx
 80004a6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004aa:	bf1f      	itttt	ne
 80004ac:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004b8:	4770      	bxne	lr
 80004ba:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004be:	bf08      	it	eq
 80004c0:	4770      	bxeq	lr
 80004c2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004c6:	bf04      	itt	eq
 80004c8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004cc:	4770      	bxeq	lr
 80004ce:	b530      	push	{r4, r5, lr}
 80004d0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004dc:	e71c      	b.n	8000318 <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_ul2d>:
 80004e0:	ea50 0201 	orrs.w	r2, r0, r1
 80004e4:	bf08      	it	eq
 80004e6:	4770      	bxeq	lr
 80004e8:	b530      	push	{r4, r5, lr}
 80004ea:	f04f 0500 	mov.w	r5, #0
 80004ee:	e00a      	b.n	8000506 <__aeabi_l2d+0x16>

080004f0 <__aeabi_l2d>:
 80004f0:	ea50 0201 	orrs.w	r2, r0, r1
 80004f4:	bf08      	it	eq
 80004f6:	4770      	bxeq	lr
 80004f8:	b530      	push	{r4, r5, lr}
 80004fa:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004fe:	d502      	bpl.n	8000506 <__aeabi_l2d+0x16>
 8000500:	4240      	negs	r0, r0
 8000502:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000506:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800050e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000512:	f43f aed8 	beq.w	80002c6 <__adddf3+0xe6>
 8000516:	f04f 0203 	mov.w	r2, #3
 800051a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051e:	bf18      	it	ne
 8000520:	3203      	addne	r2, #3
 8000522:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000526:	bf18      	it	ne
 8000528:	3203      	addne	r2, #3
 800052a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800052e:	f1c2 0320 	rsb	r3, r2, #32
 8000532:	fa00 fc03 	lsl.w	ip, r0, r3
 8000536:	fa20 f002 	lsr.w	r0, r0, r2
 800053a:	fa01 fe03 	lsl.w	lr, r1, r3
 800053e:	ea40 000e 	orr.w	r0, r0, lr
 8000542:	fa21 f102 	lsr.w	r1, r1, r2
 8000546:	4414      	add	r4, r2
 8000548:	e6bd      	b.n	80002c6 <__adddf3+0xe6>
 800054a:	bf00      	nop

0800054c <__aeabi_dmul>:
 800054c:	b570      	push	{r4, r5, r6, lr}
 800054e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000552:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000556:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055a:	bf1d      	ittte	ne
 800055c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000560:	ea94 0f0c 	teqne	r4, ip
 8000564:	ea95 0f0c 	teqne	r5, ip
 8000568:	f000 f8de 	bleq	8000728 <__aeabi_dmul+0x1dc>
 800056c:	442c      	add	r4, r5
 800056e:	ea81 0603 	eor.w	r6, r1, r3
 8000572:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000576:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800057e:	bf18      	it	ne
 8000580:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000584:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000588:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800058c:	d038      	beq.n	8000600 <__aeabi_dmul+0xb4>
 800058e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000592:	f04f 0500 	mov.w	r5, #0
 8000596:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800059e:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a2:	f04f 0600 	mov.w	r6, #0
 80005a6:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005aa:	f09c 0f00 	teq	ip, #0
 80005ae:	bf18      	it	ne
 80005b0:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005b8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005bc:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c0:	d204      	bcs.n	80005cc <__aeabi_dmul+0x80>
 80005c2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005c6:	416d      	adcs	r5, r5
 80005c8:	eb46 0606 	adc.w	r6, r6, r6
 80005cc:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005d8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005dc:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e4:	bf88      	it	hi
 80005e6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ea:	d81e      	bhi.n	800062a <__aeabi_dmul+0xde>
 80005ec:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f0:	bf08      	it	eq
 80005f2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005f6:	f150 0000 	adcs.w	r0, r0, #0
 80005fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fe:	bd70      	pop	{r4, r5, r6, pc}
 8000600:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000604:	ea46 0101 	orr.w	r1, r6, r1
 8000608:	ea40 0002 	orr.w	r0, r0, r2
 800060c:	ea81 0103 	eor.w	r1, r1, r3
 8000610:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000614:	bfc2      	ittt	gt
 8000616:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800061e:	bd70      	popgt	{r4, r5, r6, pc}
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f04f 0e00 	mov.w	lr, #0
 8000628:	3c01      	subs	r4, #1
 800062a:	f300 80ab 	bgt.w	8000784 <__aeabi_dmul+0x238>
 800062e:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000632:	bfde      	ittt	le
 8000634:	2000      	movle	r0, #0
 8000636:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063a:	bd70      	pople	{r4, r5, r6, pc}
 800063c:	f1c4 0400 	rsb	r4, r4, #0
 8000640:	3c20      	subs	r4, #32
 8000642:	da35      	bge.n	80006b0 <__aeabi_dmul+0x164>
 8000644:	340c      	adds	r4, #12
 8000646:	dc1b      	bgt.n	8000680 <__aeabi_dmul+0x134>
 8000648:	f104 0414 	add.w	r4, r4, #20
 800064c:	f1c4 0520 	rsb	r5, r4, #32
 8000650:	fa00 f305 	lsl.w	r3, r0, r5
 8000654:	fa20 f004 	lsr.w	r0, r0, r4
 8000658:	fa01 f205 	lsl.w	r2, r1, r5
 800065c:	ea40 0002 	orr.w	r0, r0, r2
 8000660:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000664:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000668:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800066c:	fa21 f604 	lsr.w	r6, r1, r4
 8000670:	eb42 0106 	adc.w	r1, r2, r6
 8000674:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000678:	bf08      	it	eq
 800067a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800067e:	bd70      	pop	{r4, r5, r6, pc}
 8000680:	f1c4 040c 	rsb	r4, r4, #12
 8000684:	f1c4 0520 	rsb	r5, r4, #32
 8000688:	fa00 f304 	lsl.w	r3, r0, r4
 800068c:	fa20 f005 	lsr.w	r0, r0, r5
 8000690:	fa01 f204 	lsl.w	r2, r1, r4
 8000694:	ea40 0002 	orr.w	r0, r0, r2
 8000698:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800069c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a0:	f141 0100 	adc.w	r1, r1, #0
 80006a4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a8:	bf08      	it	eq
 80006aa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ae:	bd70      	pop	{r4, r5, r6, pc}
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f205 	lsl.w	r2, r0, r5
 80006b8:	ea4e 0e02 	orr.w	lr, lr, r2
 80006bc:	fa20 f304 	lsr.w	r3, r0, r4
 80006c0:	fa01 f205 	lsl.w	r2, r1, r5
 80006c4:	ea43 0302 	orr.w	r3, r3, r2
 80006c8:	fa21 f004 	lsr.w	r0, r1, r4
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d0:	fa21 f204 	lsr.w	r2, r1, r4
 80006d4:	ea20 0002 	bic.w	r0, r0, r2
 80006d8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006dc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e0:	bf08      	it	eq
 80006e2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e6:	bd70      	pop	{r4, r5, r6, pc}
 80006e8:	f094 0f00 	teq	r4, #0
 80006ec:	d10f      	bne.n	800070e <__aeabi_dmul+0x1c2>
 80006ee:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f2:	0040      	lsls	r0, r0, #1
 80006f4:	eb41 0101 	adc.w	r1, r1, r1
 80006f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006fc:	bf08      	it	eq
 80006fe:	3c01      	subeq	r4, #1
 8000700:	d0f7      	beq.n	80006f2 <__aeabi_dmul+0x1a6>
 8000702:	ea41 0106 	orr.w	r1, r1, r6
 8000706:	f095 0f00 	teq	r5, #0
 800070a:	bf18      	it	ne
 800070c:	4770      	bxne	lr
 800070e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000712:	0052      	lsls	r2, r2, #1
 8000714:	eb43 0303 	adc.w	r3, r3, r3
 8000718:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800071c:	bf08      	it	eq
 800071e:	3d01      	subeq	r5, #1
 8000720:	d0f7      	beq.n	8000712 <__aeabi_dmul+0x1c6>
 8000722:	ea43 0306 	orr.w	r3, r3, r6
 8000726:	4770      	bx	lr
 8000728:	ea94 0f0c 	teq	r4, ip
 800072c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000730:	bf18      	it	ne
 8000732:	ea95 0f0c 	teqne	r5, ip
 8000736:	d00c      	beq.n	8000752 <__aeabi_dmul+0x206>
 8000738:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800073c:	bf18      	it	ne
 800073e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000742:	d1d1      	bne.n	80006e8 <__aeabi_dmul+0x19c>
 8000744:	ea81 0103 	eor.w	r1, r1, r3
 8000748:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800074c:	f04f 0000 	mov.w	r0, #0
 8000750:	bd70      	pop	{r4, r5, r6, pc}
 8000752:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000756:	bf06      	itte	eq
 8000758:	4610      	moveq	r0, r2
 800075a:	4619      	moveq	r1, r3
 800075c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000760:	d019      	beq.n	8000796 <__aeabi_dmul+0x24a>
 8000762:	ea94 0f0c 	teq	r4, ip
 8000766:	d102      	bne.n	800076e <__aeabi_dmul+0x222>
 8000768:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800076c:	d113      	bne.n	8000796 <__aeabi_dmul+0x24a>
 800076e:	ea95 0f0c 	teq	r5, ip
 8000772:	d105      	bne.n	8000780 <__aeabi_dmul+0x234>
 8000774:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000778:	bf1c      	itt	ne
 800077a:	4610      	movne	r0, r2
 800077c:	4619      	movne	r1, r3
 800077e:	d10a      	bne.n	8000796 <__aeabi_dmul+0x24a>
 8000780:	ea81 0103 	eor.w	r1, r1, r3
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800079e:	bd70      	pop	{r4, r5, r6, pc}

080007a0 <__aeabi_ddiv>:
 80007a0:	b570      	push	{r4, r5, r6, lr}
 80007a2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007a6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007aa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ae:	bf1d      	ittte	ne
 80007b0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b4:	ea94 0f0c 	teqne	r4, ip
 80007b8:	ea95 0f0c 	teqne	r5, ip
 80007bc:	f000 f8a7 	bleq	800090e <__aeabi_ddiv+0x16e>
 80007c0:	eba4 0405 	sub.w	r4, r4, r5
 80007c4:	ea81 0e03 	eor.w	lr, r1, r3
 80007c8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007cc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d0:	f000 8088 	beq.w	80008e4 <__aeabi_ddiv+0x144>
 80007d4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007d8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007dc:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007e8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007ec:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f0:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007f8:	429d      	cmp	r5, r3
 80007fa:	bf08      	it	eq
 80007fc:	4296      	cmpeq	r6, r2
 80007fe:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000802:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000806:	d202      	bcs.n	800080e <__aeabi_ddiv+0x6e>
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	1ab6      	subs	r6, r6, r2
 8000810:	eb65 0503 	sbc.w	r5, r5, r3
 8000814:	085b      	lsrs	r3, r3, #1
 8000816:	ea4f 0232 	mov.w	r2, r2, rrx
 800081a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800081e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000822:	ebb6 0e02 	subs.w	lr, r6, r2
 8000826:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082a:	bf22      	ittt	cs
 800082c:	1ab6      	subcs	r6, r6, r2
 800082e:	4675      	movcs	r5, lr
 8000830:	ea40 000c 	orrcs.w	r0, r0, ip
 8000834:	085b      	lsrs	r3, r3, #1
 8000836:	ea4f 0232 	mov.w	r2, r2, rrx
 800083a:	ebb6 0e02 	subs.w	lr, r6, r2
 800083e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000842:	bf22      	ittt	cs
 8000844:	1ab6      	subcs	r6, r6, r2
 8000846:	4675      	movcs	r5, lr
 8000848:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	ebb6 0e02 	subs.w	lr, r6, r2
 8000856:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085a:	bf22      	ittt	cs
 800085c:	1ab6      	subcs	r6, r6, r2
 800085e:	4675      	movcs	r5, lr
 8000860:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	ebb6 0e02 	subs.w	lr, r6, r2
 800086e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000872:	bf22      	ittt	cs
 8000874:	1ab6      	subcs	r6, r6, r2
 8000876:	4675      	movcs	r5, lr
 8000878:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800087c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000880:	d018      	beq.n	80008b4 <__aeabi_ddiv+0x114>
 8000882:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000886:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800088e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000892:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000896:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800089e:	d1c0      	bne.n	8000822 <__aeabi_ddiv+0x82>
 80008a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a4:	d10b      	bne.n	80008be <__aeabi_ddiv+0x11e>
 80008a6:	ea41 0100 	orr.w	r1, r1, r0
 80008aa:	f04f 0000 	mov.w	r0, #0
 80008ae:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b2:	e7b6      	b.n	8000822 <__aeabi_ddiv+0x82>
 80008b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b8:	bf04      	itt	eq
 80008ba:	4301      	orreq	r1, r0
 80008bc:	2000      	moveq	r0, #0
 80008be:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c2:	bf88      	it	hi
 80008c4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008c8:	f63f aeaf 	bhi.w	800062a <__aeabi_dmul+0xde>
 80008cc:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d0:	bf04      	itt	eq
 80008d2:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008d6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008da:	f150 0000 	adcs.w	r0, r0, #0
 80008de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e2:	bd70      	pop	{r4, r5, r6, pc}
 80008e4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008e8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008ec:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f0:	bfc2      	ittt	gt
 80008f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fa:	bd70      	popgt	{r4, r5, r6, pc}
 80008fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000900:	f04f 0e00 	mov.w	lr, #0
 8000904:	3c01      	subs	r4, #1
 8000906:	e690      	b.n	800062a <__aeabi_dmul+0xde>
 8000908:	ea45 0e06 	orr.w	lr, r5, r6
 800090c:	e68d      	b.n	800062a <__aeabi_dmul+0xde>
 800090e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000912:	ea94 0f0c 	teq	r4, ip
 8000916:	bf08      	it	eq
 8000918:	ea95 0f0c 	teqeq	r5, ip
 800091c:	f43f af3b 	beq.w	8000796 <__aeabi_dmul+0x24a>
 8000920:	ea94 0f0c 	teq	r4, ip
 8000924:	d10a      	bne.n	800093c <__aeabi_ddiv+0x19c>
 8000926:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092a:	f47f af34 	bne.w	8000796 <__aeabi_dmul+0x24a>
 800092e:	ea95 0f0c 	teq	r5, ip
 8000932:	f47f af25 	bne.w	8000780 <__aeabi_dmul+0x234>
 8000936:	4610      	mov	r0, r2
 8000938:	4619      	mov	r1, r3
 800093a:	e72c      	b.n	8000796 <__aeabi_dmul+0x24a>
 800093c:	ea95 0f0c 	teq	r5, ip
 8000940:	d106      	bne.n	8000950 <__aeabi_ddiv+0x1b0>
 8000942:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000946:	f43f aefd 	beq.w	8000744 <__aeabi_dmul+0x1f8>
 800094a:	4610      	mov	r0, r2
 800094c:	4619      	mov	r1, r3
 800094e:	e722      	b.n	8000796 <__aeabi_dmul+0x24a>
 8000950:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000954:	bf18      	it	ne
 8000956:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095a:	f47f aec5 	bne.w	80006e8 <__aeabi_dmul+0x19c>
 800095e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000962:	f47f af0d 	bne.w	8000780 <__aeabi_dmul+0x234>
 8000966:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096a:	f47f aeeb 	bne.w	8000744 <__aeabi_dmul+0x1f8>
 800096e:	e712      	b.n	8000796 <__aeabi_dmul+0x24a>

08000970 <__aeabi_d2uiz>:
 8000970:	004a      	lsls	r2, r1, #1
 8000972:	d211      	bcs.n	8000998 <__aeabi_d2uiz+0x28>
 8000974:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000978:	d211      	bcs.n	800099e <__aeabi_d2uiz+0x2e>
 800097a:	d50d      	bpl.n	8000998 <__aeabi_d2uiz+0x28>
 800097c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000980:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000984:	d40e      	bmi.n	80009a4 <__aeabi_d2uiz+0x34>
 8000986:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800098a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800098e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000992:	fa23 f002 	lsr.w	r0, r3, r2
 8000996:	4770      	bx	lr
 8000998:	f04f 0000 	mov.w	r0, #0
 800099c:	4770      	bx	lr
 800099e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009a2:	d102      	bne.n	80009aa <__aeabi_d2uiz+0x3a>
 80009a4:	f04f 30ff 	mov.w	r0, #4294967295
 80009a8:	4770      	bx	lr
 80009aa:	f04f 0000 	mov.w	r0, #0
 80009ae:	4770      	bx	lr

080009b0 <__aeabi_uldivmod>:
 80009b0:	b953      	cbnz	r3, 80009c8 <__aeabi_uldivmod+0x18>
 80009b2:	b94a      	cbnz	r2, 80009c8 <__aeabi_uldivmod+0x18>
 80009b4:	2900      	cmp	r1, #0
 80009b6:	bf08      	it	eq
 80009b8:	2800      	cmpeq	r0, #0
 80009ba:	bf1c      	itt	ne
 80009bc:	f04f 31ff 	movne.w	r1, #4294967295
 80009c0:	f04f 30ff 	movne.w	r0, #4294967295
 80009c4:	f000 b974 	b.w	8000cb0 <__aeabi_idiv0>
 80009c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80009cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009d0:	f000 f806 	bl	80009e0 <__udivmoddi4>
 80009d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009dc:	b004      	add	sp, #16
 80009de:	4770      	bx	lr

080009e0 <__udivmoddi4>:
 80009e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009e4:	9d08      	ldr	r5, [sp, #32]
 80009e6:	4604      	mov	r4, r0
 80009e8:	468e      	mov	lr, r1
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d14d      	bne.n	8000a8a <__udivmoddi4+0xaa>
 80009ee:	428a      	cmp	r2, r1
 80009f0:	4694      	mov	ip, r2
 80009f2:	d969      	bls.n	8000ac8 <__udivmoddi4+0xe8>
 80009f4:	fab2 f282 	clz	r2, r2
 80009f8:	b152      	cbz	r2, 8000a10 <__udivmoddi4+0x30>
 80009fa:	fa01 f302 	lsl.w	r3, r1, r2
 80009fe:	f1c2 0120 	rsb	r1, r2, #32
 8000a02:	fa20 f101 	lsr.w	r1, r0, r1
 8000a06:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a0a:	ea41 0e03 	orr.w	lr, r1, r3
 8000a0e:	4094      	lsls	r4, r2
 8000a10:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a14:	0c21      	lsrs	r1, r4, #16
 8000a16:	fbbe f6f8 	udiv	r6, lr, r8
 8000a1a:	fa1f f78c 	uxth.w	r7, ip
 8000a1e:	fb08 e316 	mls	r3, r8, r6, lr
 8000a22:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000a26:	fb06 f107 	mul.w	r1, r6, r7
 8000a2a:	4299      	cmp	r1, r3
 8000a2c:	d90a      	bls.n	8000a44 <__udivmoddi4+0x64>
 8000a2e:	eb1c 0303 	adds.w	r3, ip, r3
 8000a32:	f106 30ff 	add.w	r0, r6, #4294967295
 8000a36:	f080 811f 	bcs.w	8000c78 <__udivmoddi4+0x298>
 8000a3a:	4299      	cmp	r1, r3
 8000a3c:	f240 811c 	bls.w	8000c78 <__udivmoddi4+0x298>
 8000a40:	3e02      	subs	r6, #2
 8000a42:	4463      	add	r3, ip
 8000a44:	1a5b      	subs	r3, r3, r1
 8000a46:	b2a4      	uxth	r4, r4
 8000a48:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a4c:	fb08 3310 	mls	r3, r8, r0, r3
 8000a50:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a54:	fb00 f707 	mul.w	r7, r0, r7
 8000a58:	42a7      	cmp	r7, r4
 8000a5a:	d90a      	bls.n	8000a72 <__udivmoddi4+0x92>
 8000a5c:	eb1c 0404 	adds.w	r4, ip, r4
 8000a60:	f100 33ff 	add.w	r3, r0, #4294967295
 8000a64:	f080 810a 	bcs.w	8000c7c <__udivmoddi4+0x29c>
 8000a68:	42a7      	cmp	r7, r4
 8000a6a:	f240 8107 	bls.w	8000c7c <__udivmoddi4+0x29c>
 8000a6e:	4464      	add	r4, ip
 8000a70:	3802      	subs	r0, #2
 8000a72:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000a76:	1be4      	subs	r4, r4, r7
 8000a78:	2600      	movs	r6, #0
 8000a7a:	b11d      	cbz	r5, 8000a84 <__udivmoddi4+0xa4>
 8000a7c:	40d4      	lsrs	r4, r2
 8000a7e:	2300      	movs	r3, #0
 8000a80:	e9c5 4300 	strd	r4, r3, [r5]
 8000a84:	4631      	mov	r1, r6
 8000a86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a8a:	428b      	cmp	r3, r1
 8000a8c:	d909      	bls.n	8000aa2 <__udivmoddi4+0xc2>
 8000a8e:	2d00      	cmp	r5, #0
 8000a90:	f000 80ef 	beq.w	8000c72 <__udivmoddi4+0x292>
 8000a94:	2600      	movs	r6, #0
 8000a96:	e9c5 0100 	strd	r0, r1, [r5]
 8000a9a:	4630      	mov	r0, r6
 8000a9c:	4631      	mov	r1, r6
 8000a9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000aa2:	fab3 f683 	clz	r6, r3
 8000aa6:	2e00      	cmp	r6, #0
 8000aa8:	d14a      	bne.n	8000b40 <__udivmoddi4+0x160>
 8000aaa:	428b      	cmp	r3, r1
 8000aac:	d302      	bcc.n	8000ab4 <__udivmoddi4+0xd4>
 8000aae:	4282      	cmp	r2, r0
 8000ab0:	f200 80f9 	bhi.w	8000ca6 <__udivmoddi4+0x2c6>
 8000ab4:	1a84      	subs	r4, r0, r2
 8000ab6:	eb61 0303 	sbc.w	r3, r1, r3
 8000aba:	2001      	movs	r0, #1
 8000abc:	469e      	mov	lr, r3
 8000abe:	2d00      	cmp	r5, #0
 8000ac0:	d0e0      	beq.n	8000a84 <__udivmoddi4+0xa4>
 8000ac2:	e9c5 4e00 	strd	r4, lr, [r5]
 8000ac6:	e7dd      	b.n	8000a84 <__udivmoddi4+0xa4>
 8000ac8:	b902      	cbnz	r2, 8000acc <__udivmoddi4+0xec>
 8000aca:	deff      	udf	#255	; 0xff
 8000acc:	fab2 f282 	clz	r2, r2
 8000ad0:	2a00      	cmp	r2, #0
 8000ad2:	f040 8092 	bne.w	8000bfa <__udivmoddi4+0x21a>
 8000ad6:	eba1 010c 	sub.w	r1, r1, ip
 8000ada:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ade:	fa1f fe8c 	uxth.w	lr, ip
 8000ae2:	2601      	movs	r6, #1
 8000ae4:	0c20      	lsrs	r0, r4, #16
 8000ae6:	fbb1 f3f7 	udiv	r3, r1, r7
 8000aea:	fb07 1113 	mls	r1, r7, r3, r1
 8000aee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000af2:	fb0e f003 	mul.w	r0, lr, r3
 8000af6:	4288      	cmp	r0, r1
 8000af8:	d908      	bls.n	8000b0c <__udivmoddi4+0x12c>
 8000afa:	eb1c 0101 	adds.w	r1, ip, r1
 8000afe:	f103 38ff 	add.w	r8, r3, #4294967295
 8000b02:	d202      	bcs.n	8000b0a <__udivmoddi4+0x12a>
 8000b04:	4288      	cmp	r0, r1
 8000b06:	f200 80cb 	bhi.w	8000ca0 <__udivmoddi4+0x2c0>
 8000b0a:	4643      	mov	r3, r8
 8000b0c:	1a09      	subs	r1, r1, r0
 8000b0e:	b2a4      	uxth	r4, r4
 8000b10:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b14:	fb07 1110 	mls	r1, r7, r0, r1
 8000b18:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000b1c:	fb0e fe00 	mul.w	lr, lr, r0
 8000b20:	45a6      	cmp	lr, r4
 8000b22:	d908      	bls.n	8000b36 <__udivmoddi4+0x156>
 8000b24:	eb1c 0404 	adds.w	r4, ip, r4
 8000b28:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b2c:	d202      	bcs.n	8000b34 <__udivmoddi4+0x154>
 8000b2e:	45a6      	cmp	lr, r4
 8000b30:	f200 80bb 	bhi.w	8000caa <__udivmoddi4+0x2ca>
 8000b34:	4608      	mov	r0, r1
 8000b36:	eba4 040e 	sub.w	r4, r4, lr
 8000b3a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000b3e:	e79c      	b.n	8000a7a <__udivmoddi4+0x9a>
 8000b40:	f1c6 0720 	rsb	r7, r6, #32
 8000b44:	40b3      	lsls	r3, r6
 8000b46:	fa22 fc07 	lsr.w	ip, r2, r7
 8000b4a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000b4e:	fa20 f407 	lsr.w	r4, r0, r7
 8000b52:	fa01 f306 	lsl.w	r3, r1, r6
 8000b56:	431c      	orrs	r4, r3
 8000b58:	40f9      	lsrs	r1, r7
 8000b5a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000b5e:	fa00 f306 	lsl.w	r3, r0, r6
 8000b62:	fbb1 f8f9 	udiv	r8, r1, r9
 8000b66:	0c20      	lsrs	r0, r4, #16
 8000b68:	fa1f fe8c 	uxth.w	lr, ip
 8000b6c:	fb09 1118 	mls	r1, r9, r8, r1
 8000b70:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b74:	fb08 f00e 	mul.w	r0, r8, lr
 8000b78:	4288      	cmp	r0, r1
 8000b7a:	fa02 f206 	lsl.w	r2, r2, r6
 8000b7e:	d90b      	bls.n	8000b98 <__udivmoddi4+0x1b8>
 8000b80:	eb1c 0101 	adds.w	r1, ip, r1
 8000b84:	f108 3aff 	add.w	sl, r8, #4294967295
 8000b88:	f080 8088 	bcs.w	8000c9c <__udivmoddi4+0x2bc>
 8000b8c:	4288      	cmp	r0, r1
 8000b8e:	f240 8085 	bls.w	8000c9c <__udivmoddi4+0x2bc>
 8000b92:	f1a8 0802 	sub.w	r8, r8, #2
 8000b96:	4461      	add	r1, ip
 8000b98:	1a09      	subs	r1, r1, r0
 8000b9a:	b2a4      	uxth	r4, r4
 8000b9c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ba0:	fb09 1110 	mls	r1, r9, r0, r1
 8000ba4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000ba8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000bac:	458e      	cmp	lr, r1
 8000bae:	d908      	bls.n	8000bc2 <__udivmoddi4+0x1e2>
 8000bb0:	eb1c 0101 	adds.w	r1, ip, r1
 8000bb4:	f100 34ff 	add.w	r4, r0, #4294967295
 8000bb8:	d26c      	bcs.n	8000c94 <__udivmoddi4+0x2b4>
 8000bba:	458e      	cmp	lr, r1
 8000bbc:	d96a      	bls.n	8000c94 <__udivmoddi4+0x2b4>
 8000bbe:	3802      	subs	r0, #2
 8000bc0:	4461      	add	r1, ip
 8000bc2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000bc6:	fba0 9402 	umull	r9, r4, r0, r2
 8000bca:	eba1 010e 	sub.w	r1, r1, lr
 8000bce:	42a1      	cmp	r1, r4
 8000bd0:	46c8      	mov	r8, r9
 8000bd2:	46a6      	mov	lr, r4
 8000bd4:	d356      	bcc.n	8000c84 <__udivmoddi4+0x2a4>
 8000bd6:	d053      	beq.n	8000c80 <__udivmoddi4+0x2a0>
 8000bd8:	b15d      	cbz	r5, 8000bf2 <__udivmoddi4+0x212>
 8000bda:	ebb3 0208 	subs.w	r2, r3, r8
 8000bde:	eb61 010e 	sbc.w	r1, r1, lr
 8000be2:	fa01 f707 	lsl.w	r7, r1, r7
 8000be6:	fa22 f306 	lsr.w	r3, r2, r6
 8000bea:	40f1      	lsrs	r1, r6
 8000bec:	431f      	orrs	r7, r3
 8000bee:	e9c5 7100 	strd	r7, r1, [r5]
 8000bf2:	2600      	movs	r6, #0
 8000bf4:	4631      	mov	r1, r6
 8000bf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bfa:	f1c2 0320 	rsb	r3, r2, #32
 8000bfe:	40d8      	lsrs	r0, r3
 8000c00:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c04:	fa21 f303 	lsr.w	r3, r1, r3
 8000c08:	4091      	lsls	r1, r2
 8000c0a:	4301      	orrs	r1, r0
 8000c0c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c10:	fa1f fe8c 	uxth.w	lr, ip
 8000c14:	fbb3 f0f7 	udiv	r0, r3, r7
 8000c18:	fb07 3610 	mls	r6, r7, r0, r3
 8000c1c:	0c0b      	lsrs	r3, r1, #16
 8000c1e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000c22:	fb00 f60e 	mul.w	r6, r0, lr
 8000c26:	429e      	cmp	r6, r3
 8000c28:	fa04 f402 	lsl.w	r4, r4, r2
 8000c2c:	d908      	bls.n	8000c40 <__udivmoddi4+0x260>
 8000c2e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c32:	f100 38ff 	add.w	r8, r0, #4294967295
 8000c36:	d22f      	bcs.n	8000c98 <__udivmoddi4+0x2b8>
 8000c38:	429e      	cmp	r6, r3
 8000c3a:	d92d      	bls.n	8000c98 <__udivmoddi4+0x2b8>
 8000c3c:	3802      	subs	r0, #2
 8000c3e:	4463      	add	r3, ip
 8000c40:	1b9b      	subs	r3, r3, r6
 8000c42:	b289      	uxth	r1, r1
 8000c44:	fbb3 f6f7 	udiv	r6, r3, r7
 8000c48:	fb07 3316 	mls	r3, r7, r6, r3
 8000c4c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c50:	fb06 f30e 	mul.w	r3, r6, lr
 8000c54:	428b      	cmp	r3, r1
 8000c56:	d908      	bls.n	8000c6a <__udivmoddi4+0x28a>
 8000c58:	eb1c 0101 	adds.w	r1, ip, r1
 8000c5c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000c60:	d216      	bcs.n	8000c90 <__udivmoddi4+0x2b0>
 8000c62:	428b      	cmp	r3, r1
 8000c64:	d914      	bls.n	8000c90 <__udivmoddi4+0x2b0>
 8000c66:	3e02      	subs	r6, #2
 8000c68:	4461      	add	r1, ip
 8000c6a:	1ac9      	subs	r1, r1, r3
 8000c6c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000c70:	e738      	b.n	8000ae4 <__udivmoddi4+0x104>
 8000c72:	462e      	mov	r6, r5
 8000c74:	4628      	mov	r0, r5
 8000c76:	e705      	b.n	8000a84 <__udivmoddi4+0xa4>
 8000c78:	4606      	mov	r6, r0
 8000c7a:	e6e3      	b.n	8000a44 <__udivmoddi4+0x64>
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	e6f8      	b.n	8000a72 <__udivmoddi4+0x92>
 8000c80:	454b      	cmp	r3, r9
 8000c82:	d2a9      	bcs.n	8000bd8 <__udivmoddi4+0x1f8>
 8000c84:	ebb9 0802 	subs.w	r8, r9, r2
 8000c88:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000c8c:	3801      	subs	r0, #1
 8000c8e:	e7a3      	b.n	8000bd8 <__udivmoddi4+0x1f8>
 8000c90:	4646      	mov	r6, r8
 8000c92:	e7ea      	b.n	8000c6a <__udivmoddi4+0x28a>
 8000c94:	4620      	mov	r0, r4
 8000c96:	e794      	b.n	8000bc2 <__udivmoddi4+0x1e2>
 8000c98:	4640      	mov	r0, r8
 8000c9a:	e7d1      	b.n	8000c40 <__udivmoddi4+0x260>
 8000c9c:	46d0      	mov	r8, sl
 8000c9e:	e77b      	b.n	8000b98 <__udivmoddi4+0x1b8>
 8000ca0:	3b02      	subs	r3, #2
 8000ca2:	4461      	add	r1, ip
 8000ca4:	e732      	b.n	8000b0c <__udivmoddi4+0x12c>
 8000ca6:	4630      	mov	r0, r6
 8000ca8:	e709      	b.n	8000abe <__udivmoddi4+0xde>
 8000caa:	4464      	add	r4, ip
 8000cac:	3802      	subs	r0, #2
 8000cae:	e742      	b.n	8000b36 <__udivmoddi4+0x156>

08000cb0 <__aeabi_idiv0>:
 8000cb0:	4770      	bx	lr
 8000cb2:	bf00      	nop

08000cb4 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b086      	sub	sp, #24
 8000cb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000cba:	463b      	mov	r3, r7
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	601a      	str	r2, [r3, #0]
 8000cc0:	605a      	str	r2, [r3, #4]
 8000cc2:	609a      	str	r2, [r3, #8]
 8000cc4:	60da      	str	r2, [r3, #12]
 8000cc6:	611a      	str	r2, [r3, #16]
 8000cc8:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000cca:	4b29      	ldr	r3, [pc, #164]	; (8000d70 <MX_ADC1_Init+0xbc>)
 8000ccc:	4a29      	ldr	r2, [pc, #164]	; (8000d74 <MX_ADC1_Init+0xc0>)
 8000cce:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000cd0:	4b27      	ldr	r3, [pc, #156]	; (8000d70 <MX_ADC1_Init+0xbc>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000cd6:	4b26      	ldr	r3, [pc, #152]	; (8000d70 <MX_ADC1_Init+0xbc>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000cdc:	4b24      	ldr	r3, [pc, #144]	; (8000d70 <MX_ADC1_Init+0xbc>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000ce2:	4b23      	ldr	r3, [pc, #140]	; (8000d70 <MX_ADC1_Init+0xbc>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ce8:	4b21      	ldr	r3, [pc, #132]	; (8000d70 <MX_ADC1_Init+0xbc>)
 8000cea:	2204      	movs	r2, #4
 8000cec:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000cee:	4b20      	ldr	r3, [pc, #128]	; (8000d70 <MX_ADC1_Init+0xbc>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000cf4:	4b1e      	ldr	r3, [pc, #120]	; (8000d70 <MX_ADC1_Init+0xbc>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000cfa:	4b1d      	ldr	r3, [pc, #116]	; (8000d70 <MX_ADC1_Init+0xbc>)
 8000cfc:	2201      	movs	r2, #1
 8000cfe:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000d00:	4b1b      	ldr	r3, [pc, #108]	; (8000d70 <MX_ADC1_Init+0xbc>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d08:	4b19      	ldr	r3, [pc, #100]	; (8000d70 <MX_ADC1_Init+0xbc>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000d0e:	4b18      	ldr	r3, [pc, #96]	; (8000d70 <MX_ADC1_Init+0xbc>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000d14:	4b16      	ldr	r3, [pc, #88]	; (8000d70 <MX_ADC1_Init+0xbc>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000d1c:	4b14      	ldr	r3, [pc, #80]	; (8000d70 <MX_ADC1_Init+0xbc>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000d22:	4b13      	ldr	r3, [pc, #76]	; (8000d70 <MX_ADC1_Init+0xbc>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000d2a:	4811      	ldr	r0, [pc, #68]	; (8000d70 <MX_ADC1_Init+0xbc>)
 8000d2c:	f001 fa6e 	bl	800220c <HAL_ADC_Init>
 8000d30:	4603      	mov	r3, r0
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d001      	beq.n	8000d3a <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 8000d36:	f000 fc51 	bl	80015dc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000d3a:	4b0f      	ldr	r3, [pc, #60]	; (8000d78 <MX_ADC1_Init+0xc4>)
 8000d3c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000d3e:	2306      	movs	r3, #6
 8000d40:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000d42:	2300      	movs	r3, #0
 8000d44:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000d46:	237f      	movs	r3, #127	; 0x7f
 8000d48:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000d4a:	2304      	movs	r3, #4
 8000d4c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d52:	463b      	mov	r3, r7
 8000d54:	4619      	mov	r1, r3
 8000d56:	4806      	ldr	r0, [pc, #24]	; (8000d70 <MX_ADC1_Init+0xbc>)
 8000d58:	f001 fca4 	bl	80026a4 <HAL_ADC_ConfigChannel>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d001      	beq.n	8000d66 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000d62:	f000 fc3b 	bl	80015dc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000d66:	bf00      	nop
 8000d68:	3718      	adds	r7, #24
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	2000002c 	.word	0x2000002c
 8000d74:	50040000 	.word	0x50040000
 8000d78:	04300002 	.word	0x04300002

08000d7c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b0a4      	sub	sp, #144	; 0x90
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d84:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000d88:	2200      	movs	r2, #0
 8000d8a:	601a      	str	r2, [r3, #0]
 8000d8c:	605a      	str	r2, [r3, #4]
 8000d8e:	609a      	str	r2, [r3, #8]
 8000d90:	60da      	str	r2, [r3, #12]
 8000d92:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d94:	f107 0314 	add.w	r3, r7, #20
 8000d98:	2268      	movs	r2, #104	; 0x68
 8000d9a:	2100      	movs	r1, #0
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	f006 fc8d 	bl	80076bc <memset>
  if(adcHandle->Instance==ADC1)
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	4a26      	ldr	r2, [pc, #152]	; (8000e40 <HAL_ADC_MspInit+0xc4>)
 8000da8:	4293      	cmp	r3, r2
 8000daa:	d144      	bne.n	8000e36 <HAL_ADC_MspInit+0xba>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000dac:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000db0:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000db2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000db6:	673b      	str	r3, [r7, #112]	; 0x70
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8000db8:	2302      	movs	r3, #2
 8000dba:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000dbc:	2301      	movs	r3, #1
 8000dbe:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8000dc0:	2308      	movs	r3, #8
 8000dc2:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000dc4:	2307      	movs	r3, #7
 8000dc6:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000dc8:	2302      	movs	r3, #2
 8000dca:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000dcc:	2302      	movs	r3, #2
 8000dce:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000dd0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000dd4:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000dd6:	f107 0314 	add.w	r3, r7, #20
 8000dda:	4618      	mov	r0, r3
 8000ddc:	f003 faba 	bl	8004354 <HAL_RCCEx_PeriphCLKConfig>
 8000de0:	4603      	mov	r3, r0
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d001      	beq.n	8000dea <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 8000de6:	f000 fbf9 	bl	80015dc <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000dea:	4b16      	ldr	r3, [pc, #88]	; (8000e44 <HAL_ADC_MspInit+0xc8>)
 8000dec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dee:	4a15      	ldr	r2, [pc, #84]	; (8000e44 <HAL_ADC_MspInit+0xc8>)
 8000df0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000df4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000df6:	4b13      	ldr	r3, [pc, #76]	; (8000e44 <HAL_ADC_MspInit+0xc8>)
 8000df8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dfa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000dfe:	613b      	str	r3, [r7, #16]
 8000e00:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e02:	4b10      	ldr	r3, [pc, #64]	; (8000e44 <HAL_ADC_MspInit+0xc8>)
 8000e04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e06:	4a0f      	ldr	r2, [pc, #60]	; (8000e44 <HAL_ADC_MspInit+0xc8>)
 8000e08:	f043 0304 	orr.w	r3, r3, #4
 8000e0c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e0e:	4b0d      	ldr	r3, [pc, #52]	; (8000e44 <HAL_ADC_MspInit+0xc8>)
 8000e10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e12:	f003 0304 	and.w	r3, r3, #4
 8000e16:	60fb      	str	r3, [r7, #12]
 8000e18:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000e1a:	2301      	movs	r3, #1
 8000e1c:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000e1e:	230b      	movs	r3, #11
 8000e20:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e24:	2300      	movs	r3, #0
 8000e26:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e2a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000e2e:	4619      	mov	r1, r3
 8000e30:	4805      	ldr	r0, [pc, #20]	; (8000e48 <HAL_ADC_MspInit+0xcc>)
 8000e32:	f002 fa49 	bl	80032c8 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000e36:	bf00      	nop
 8000e38:	3790      	adds	r7, #144	; 0x90
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	50040000 	.word	0x50040000
 8000e44:	40021000 	.word	0x40021000
 8000e48:	48000800 	.word	0x48000800

08000e4c <decode_pc_command>:
extern uint8_t uart_red;
extern transmisor_receptor_red t_r_red;
uint8_t counter;

int decode_pc_command(device *dev, uint8_t command_1, uint8_t command_2)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b082      	sub	sp, #8
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
 8000e54:	460b      	mov	r3, r1
 8000e56:	70fb      	strb	r3, [r7, #3]
 8000e58:	4613      	mov	r3, r2
 8000e5a:	70bb      	strb	r3, [r7, #2]

	if(dev->modo==SLAVE)
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	781b      	ldrb	r3, [r3, #0]
 8000e60:	2b01      	cmp	r3, #1
 8000e62:	d102      	bne.n	8000e6a <decode_pc_command+0x1e>
	{
		return -1;
 8000e64:	f04f 33ff 	mov.w	r3, #4294967295
 8000e68:	e009      	b.n	8000e7e <decode_pc_command+0x32>
	}
	else
	{


		send(&t_r_red, &command_1, &command_2);
 8000e6a:	1cba      	adds	r2, r7, #2
 8000e6c:	1cfb      	adds	r3, r7, #3
 8000e6e:	4619      	mov	r1, r3
 8000e70:	4805      	ldr	r0, [pc, #20]	; (8000e88 <decode_pc_command+0x3c>)
 8000e72:	f000 fe20 	bl	8001ab6 <send>
		//HAL_UART_Transmit(&huart1, &command_1, 1, 1000);
		//HAL_UART_Transmit(&huart1, &command_2, 1, 1000);

		//HAL_UART_Receive(&huart1, &uart_red, 1, 5000);
 		HAL_TIM_Base_Start_IT(&htim2);
 8000e76:	4805      	ldr	r0, [pc, #20]	; (8000e8c <decode_pc_command+0x40>)
 8000e78:	f003 fe22 	bl	8004ac0 <HAL_TIM_Base_Start_IT>

		return 0;
 8000e7c:	2300      	movs	r3, #0
	}
}
 8000e7e:	4618      	mov	r0, r3
 8000e80:	3708      	adds	r7, #8
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	200000a0 	.word	0x200000a0
 8000e8c:	20000178 	.word	0x20000178

08000e90 <decode_red_command>:

int decode_red_command(device *dev, uint8_t red_command_1, uint8_t red_command_2)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b09e      	sub	sp, #120	; 0x78
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
 8000e98:	460b      	mov	r3, r1
 8000e9a:	70fb      	strb	r3, [r7, #3]
 8000e9c:	4613      	mov	r3, r2
 8000e9e:	70bb      	strb	r3, [r7, #2]
	if(dev->modo==MASTER)
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	781b      	ldrb	r3, [r3, #0]
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d10e      	bne.n	8000ec6 <decode_red_command+0x36>
	{
		HAL_UART_Transmit(&huart1, &red_command_1, 1, 1000);
 8000ea8:	1cf9      	adds	r1, r7, #3
 8000eaa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000eae:	2201      	movs	r2, #1
 8000eb0:	482a      	ldr	r0, [pc, #168]	; (8000f5c <decode_red_command+0xcc>)
 8000eb2:	f005 f8d7 	bl	8006064 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart1, &red_command_2, 1, 1000);
 8000eb6:	1cb9      	adds	r1, r7, #2
 8000eb8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ebc:	2201      	movs	r2, #1
 8000ebe:	4827      	ldr	r0, [pc, #156]	; (8000f5c <decode_red_command+0xcc>)
 8000ec0:	f005 f8d0 	bl	8006064 <HAL_UART_Transmit>
 8000ec4:	e045      	b.n	8000f52 <decode_red_command+0xc2>
	}
	else
	{
		// chequear si es el ID correcto
		if( (0b00001111 & red_command_1) == dev->id )
 8000ec6:	78fb      	ldrb	r3, [r7, #3]
 8000ec8:	f003 020f 	and.w	r2, r3, #15
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	685b      	ldr	r3, [r3, #4]
 8000ed0:	429a      	cmp	r2, r3
 8000ed2:	d13c      	bne.n	8000f4e <decode_red_command+0xbe>
		{
			if(red_command_1>>7 == 0 )
 8000ed4:	78fb      	ldrb	r3, [r7, #3]
 8000ed6:	b25b      	sxtb	r3, r3
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	db16      	blt.n	8000f0a <decode_red_command+0x7a>
			{
				potenciometro pot;
				potenciometro_init(&pot, &hadc1);
 8000edc:	f107 0308 	add.w	r3, r7, #8
 8000ee0:	491f      	ldr	r1, [pc, #124]	; (8000f60 <decode_red_command+0xd0>)
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	f000 fb7f 	bl	80015e6 <potenciometro_init>
				uint8_t adc_val = potenciometro_get_value(&pot);
 8000ee8:	f107 0308 	add.w	r3, r7, #8
 8000eec:	4618      	mov	r0, r3
 8000eee:	f000 fb8f 	bl	8001610 <potenciometro_get_value>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

				HAL_UART_Transmit(&huart1, &adc_val, 1, 1000);
 8000ef8:	f107 0177 	add.w	r1, r7, #119	; 0x77
 8000efc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f00:	2201      	movs	r2, #1
 8000f02:	4816      	ldr	r0, [pc, #88]	; (8000f5c <decode_red_command+0xcc>)
 8000f04:	f005 f8ae 	bl	8006064 <HAL_UART_Transmit>
 8000f08:	e023      	b.n	8000f52 <decode_red_command+0xc2>

			}
			else
			{
				uint16_t dc_pwm = (float)red_command_2/127 * 1960;
 8000f0a:	78bb      	ldrb	r3, [r7, #2]
 8000f0c:	ee07 3a90 	vmov	s15, r3
 8000f10:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000f14:	eddf 6a13 	vldr	s13, [pc, #76]	; 8000f64 <decode_red_command+0xd4>
 8000f18:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f1c:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8000f68 <decode_red_command+0xd8>
 8000f20:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f24:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000f28:	ee17 3a90 	vmov	r3, s15
 8000f2c:	b29b      	uxth	r3, r3
 8000f2e:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, dc_pwm);
 8000f32:	f8b7 2074 	ldrh.w	r2, [r7, #116]	; 0x74
 8000f36:	4b0d      	ldr	r3, [pc, #52]	; (8000f6c <decode_red_command+0xdc>)
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	635a      	str	r2, [r3, #52]	; 0x34
				HAL_UART_Transmit(&huart1, &dc_pwm, 1, 1000);
 8000f3c:	f107 0174 	add.w	r1, r7, #116	; 0x74
 8000f40:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f44:	2201      	movs	r2, #1
 8000f46:	4805      	ldr	r0, [pc, #20]	; (8000f5c <decode_red_command+0xcc>)
 8000f48:	f005 f88c 	bl	8006064 <HAL_UART_Transmit>
 8000f4c:	e001      	b.n	8000f52 <decode_red_command+0xc2>

			}
		}
		else
		{
			return 0;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	e7ff      	b.n	8000f52 <decode_red_command+0xc2>
		}
	}
}
 8000f52:	4618      	mov	r0, r3
 8000f54:	3778      	adds	r7, #120	; 0x78
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	200001c4 	.word	0x200001c4
 8000f60:	2000002c 	.word	0x2000002c
 8000f64:	42fe0000 	.word	0x42fe0000
 8000f68:	44f50000 	.word	0x44f50000
 8000f6c:	2000012c 	.word	0x2000012c

08000f70 <device_if_init>:

#include <stdlib.h>
#include "device.h"

void device_if_init( device *device_gc, int set_id)
{
 8000f70:	b480      	push	{r7}
 8000f72:	b083      	sub	sp, #12
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
 8000f78:	6039      	str	r1, [r7, #0]
	if(set_id==0)
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d103      	bne.n	8000f88 <device_if_init+0x18>
	{
		device_gc->modo = MASTER;
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	2200      	movs	r2, #0
 8000f84:	701a      	strb	r2, [r3, #0]
 8000f86:	e002      	b.n	8000f8e <device_if_init+0x1e>
	}
	else
	{
		device_gc->modo = SLAVE;
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	2201      	movs	r2, #1
 8000f8c:	701a      	strb	r2, [r3, #0]
	}
	device_gc->id = set_id;
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	683a      	ldr	r2, [r7, #0]
 8000f92:	605a      	str	r2, [r3, #4]
}
 8000f94:	bf00      	nop
 8000f96:	370c      	adds	r7, #12
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9e:	4770      	bx	lr

08000fa0 <dip_switch_ports_init>:
#include "dip_switch.h"
#include "gpio_if.h"


void dip_switch_ports_init(dip_switch *dip, t_gpio_if *gpio_1, t_gpio_if *gpio_2, t_gpio_if *gpio_3, t_gpio_if *gpio_4)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	b085      	sub	sp, #20
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	60f8      	str	r0, [r7, #12]
 8000fa8:	60b9      	str	r1, [r7, #8]
 8000faa:	607a      	str	r2, [r7, #4]
 8000fac:	603b      	str	r3, [r7, #0]
	dip->sw_1 = gpio_1;
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	68ba      	ldr	r2, [r7, #8]
 8000fb2:	601a      	str	r2, [r3, #0]
	dip->sw_2 = gpio_2;
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	687a      	ldr	r2, [r7, #4]
 8000fb8:	605a      	str	r2, [r3, #4]
	dip->sw_3 = gpio_3;
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	683a      	ldr	r2, [r7, #0]
 8000fbe:	609a      	str	r2, [r3, #8]
	dip->sw_4 = gpio_4;
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	69ba      	ldr	r2, [r7, #24]
 8000fc4:	60da      	str	r2, [r3, #12]
}
 8000fc6:	bf00      	nop
 8000fc8:	3714      	adds	r7, #20
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd0:	4770      	bx	lr

08000fd2 <get_dip_value>:

int get_dip_value(dip_switch *dip)
{
 8000fd2:	b580      	push	{r7, lr}
 8000fd4:	b084      	sub	sp, #16
 8000fd6:	af00      	add	r7, sp, #0
 8000fd8:	6078      	str	r0, [r7, #4]
	int val=0;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	60fb      	str	r3, [r7, #12]
	if(gpio_if_get(dip->sw_1)==GPIO_IF_SET)
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f000 f911 	bl	800120a <gpio_if_get>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	2b01      	cmp	r3, #1
 8000fec:	d102      	bne.n	8000ff4 <get_dip_value+0x22>
	{
		val = val + 1;
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	3301      	adds	r3, #1
 8000ff2:	60fb      	str	r3, [r7, #12]
	}
	if(gpio_if_get(dip->sw_2)==GPIO_IF_SET)
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	685b      	ldr	r3, [r3, #4]
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	f000 f906 	bl	800120a <gpio_if_get>
 8000ffe:	4603      	mov	r3, r0
 8001000:	2b01      	cmp	r3, #1
 8001002:	d102      	bne.n	800100a <get_dip_value+0x38>
	{
		val = val + 2;
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	3302      	adds	r3, #2
 8001008:	60fb      	str	r3, [r7, #12]
	}
	if(gpio_if_get(dip->sw_3)==GPIO_IF_SET)
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	689b      	ldr	r3, [r3, #8]
 800100e:	4618      	mov	r0, r3
 8001010:	f000 f8fb 	bl	800120a <gpio_if_get>
 8001014:	4603      	mov	r3, r0
 8001016:	2b01      	cmp	r3, #1
 8001018:	d102      	bne.n	8001020 <get_dip_value+0x4e>
	{
		val = val + 4;
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	3304      	adds	r3, #4
 800101e:	60fb      	str	r3, [r7, #12]
	}
	if(gpio_if_get(dip->sw_4)==GPIO_IF_SET)
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	68db      	ldr	r3, [r3, #12]
 8001024:	4618      	mov	r0, r3
 8001026:	f000 f8f0 	bl	800120a <gpio_if_get>
 800102a:	4603      	mov	r3, r0
 800102c:	2b01      	cmp	r3, #1
 800102e:	d102      	bne.n	8001036 <get_dip_value+0x64>
	{
		val = val + 8;
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	3308      	adds	r3, #8
 8001034:	60fb      	str	r3, [r7, #12]
	}
	return val;
 8001036:	68fb      	ldr	r3, [r7, #12]
}
 8001038:	4618      	mov	r0, r3
 800103a:	3710      	adds	r7, #16
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}

08001040 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b08a      	sub	sp, #40	; 0x28
 8001044:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001046:	f107 0314 	add.w	r3, r7, #20
 800104a:	2200      	movs	r2, #0
 800104c:	601a      	str	r2, [r3, #0]
 800104e:	605a      	str	r2, [r3, #4]
 8001050:	609a      	str	r2, [r3, #8]
 8001052:	60da      	str	r2, [r3, #12]
 8001054:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001056:	4b2d      	ldr	r3, [pc, #180]	; (800110c <MX_GPIO_Init+0xcc>)
 8001058:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800105a:	4a2c      	ldr	r2, [pc, #176]	; (800110c <MX_GPIO_Init+0xcc>)
 800105c:	f043 0304 	orr.w	r3, r3, #4
 8001060:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001062:	4b2a      	ldr	r3, [pc, #168]	; (800110c <MX_GPIO_Init+0xcc>)
 8001064:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001066:	f003 0304 	and.w	r3, r3, #4
 800106a:	613b      	str	r3, [r7, #16]
 800106c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800106e:	4b27      	ldr	r3, [pc, #156]	; (800110c <MX_GPIO_Init+0xcc>)
 8001070:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001072:	4a26      	ldr	r2, [pc, #152]	; (800110c <MX_GPIO_Init+0xcc>)
 8001074:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001078:	64d3      	str	r3, [r2, #76]	; 0x4c
 800107a:	4b24      	ldr	r3, [pc, #144]	; (800110c <MX_GPIO_Init+0xcc>)
 800107c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800107e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001082:	60fb      	str	r3, [r7, #12]
 8001084:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001086:	4b21      	ldr	r3, [pc, #132]	; (800110c <MX_GPIO_Init+0xcc>)
 8001088:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800108a:	4a20      	ldr	r2, [pc, #128]	; (800110c <MX_GPIO_Init+0xcc>)
 800108c:	f043 0301 	orr.w	r3, r3, #1
 8001090:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001092:	4b1e      	ldr	r3, [pc, #120]	; (800110c <MX_GPIO_Init+0xcc>)
 8001094:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001096:	f003 0301 	and.w	r3, r3, #1
 800109a:	60bb      	str	r3, [r7, #8]
 800109c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800109e:	4b1b      	ldr	r3, [pc, #108]	; (800110c <MX_GPIO_Init+0xcc>)
 80010a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010a2:	4a1a      	ldr	r2, [pc, #104]	; (800110c <MX_GPIO_Init+0xcc>)
 80010a4:	f043 0302 	orr.w	r3, r3, #2
 80010a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010aa:	4b18      	ldr	r3, [pc, #96]	; (800110c <MX_GPIO_Init+0xcc>)
 80010ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010ae:	f003 0302 	and.w	r3, r3, #2
 80010b2:	607b      	str	r3, [r7, #4]
 80010b4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80010b6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80010bc:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80010c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c2:	2300      	movs	r3, #0
 80010c4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80010c6:	f107 0314 	add.w	r3, r7, #20
 80010ca:	4619      	mov	r1, r3
 80010cc:	4810      	ldr	r0, [pc, #64]	; (8001110 <MX_GPIO_Init+0xd0>)
 80010ce:	f002 f8fb 	bl	80032c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = SW4_Pin|SW3_Pin|SW2_Pin;
 80010d2:	23e0      	movs	r3, #224	; 0xe0
 80010d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010d6:	2300      	movs	r3, #0
 80010d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010da:	2300      	movs	r3, #0
 80010dc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010de:	f107 0314 	add.w	r3, r7, #20
 80010e2:	4619      	mov	r1, r3
 80010e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010e8:	f002 f8ee 	bl	80032c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SW1_Pin;
 80010ec:	2340      	movs	r3, #64	; 0x40
 80010ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010f0:	2300      	movs	r3, #0
 80010f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f4:	2300      	movs	r3, #0
 80010f6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SW1_GPIO_Port, &GPIO_InitStruct);
 80010f8:	f107 0314 	add.w	r3, r7, #20
 80010fc:	4619      	mov	r1, r3
 80010fe:	4805      	ldr	r0, [pc, #20]	; (8001114 <MX_GPIO_Init+0xd4>)
 8001100:	f002 f8e2 	bl	80032c8 <HAL_GPIO_Init>

}
 8001104:	bf00      	nop
 8001106:	3728      	adds	r7, #40	; 0x28
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}
 800110c:	40021000 	.word	0x40021000
 8001110:	48000800 	.word	0x48000800
 8001114:	48000400 	.word	0x48000400

08001118 <gpio_if_init>:
/*- PUBLIC_API ---------------------------------------------------------------*/
/*
 * API: gpio_if_init
 */
void gpio_if_init( t_gpio_if *gpio_if, t_gpio_active active, t_gpio_pin *pin, t_gpio_state initial_state )
{
 8001118:	b480      	push	{r7}
 800111a:	b085      	sub	sp, #20
 800111c:	af00      	add	r7, sp, #0
 800111e:	60f8      	str	r0, [r7, #12]
 8001120:	607a      	str	r2, [r7, #4]
 8001122:	461a      	mov	r2, r3
 8001124:	460b      	mov	r3, r1
 8001126:	72fb      	strb	r3, [r7, #11]
 8001128:	4613      	mov	r3, r2
 800112a:	72bb      	strb	r3, [r7, #10]
  gpio_if->active = active;
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	7afa      	ldrb	r2, [r7, #11]
 8001130:	701a      	strb	r2, [r3, #0]
  gpio_if->pin = pin;
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	687a      	ldr	r2, [r7, #4]
 8001136:	605a      	str	r2, [r3, #4]
  gpio_if->initial_state = initial_state;
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	7aba      	ldrb	r2, [r7, #10]
 800113c:	721a      	strb	r2, [r3, #8]
}
 800113e:	bf00      	nop
 8001140:	3714      	adds	r7, #20
 8001142:	46bd      	mov	sp, r7
 8001144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001148:	4770      	bx	lr

0800114a <gpio_if_open>:

/*
 * API: gpio_if_open
 */
t_gpio_if_status gpio_if_open(t_gpio_if *gpio_if)
{
 800114a:	b580      	push	{r7, lr}
 800114c:	b082      	sub	sp, #8
 800114e:	af00      	add	r7, sp, #0
 8001150:	6078      	str	r0, [r7, #4]
  /* Sanity check */
  if (gpio_if->pin == NULL)
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	685b      	ldr	r3, [r3, #4]
 8001156:	2b00      	cmp	r3, #0
 8001158:	d101      	bne.n	800115e <gpio_if_open+0x14>
  {
    return GPIO_IF_OPEN_FAILURE;
 800115a:	2301      	movs	r3, #1
 800115c:	e00f      	b.n	800117e <gpio_if_open+0x34>
  }

  /* Init variables */

  /* Start peripherals */
  if (gpio_if->initial_state == GPIO_IF_SET)
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	7a1b      	ldrb	r3, [r3, #8]
 8001162:	2b01      	cmp	r3, #1
 8001164:	d103      	bne.n	800116e <gpio_if_open+0x24>
  {
    gpio_if_set(gpio_if);
 8001166:	6878      	ldr	r0, [r7, #4]
 8001168:	f000 f80d 	bl	8001186 <gpio_if_set>
 800116c:	e006      	b.n	800117c <gpio_if_open+0x32>
  }
  else if (gpio_if->initial_state == GPIO_IF_CLEAR)
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	7a1b      	ldrb	r3, [r3, #8]
 8001172:	2b00      	cmp	r3, #0
 8001174:	d102      	bne.n	800117c <gpio_if_open+0x32>
  {
    gpio_if_clear(gpio_if);
 8001176:	6878      	ldr	r0, [r7, #4]
 8001178:	f000 f826 	bl	80011c8 <gpio_if_clear>
  else
  {
    /* Nothing to do */
  }

  return GPIO_IF_SUCCESS;
 800117c:	2300      	movs	r3, #0
}
 800117e:	4618      	mov	r0, r3
 8001180:	3708      	adds	r7, #8
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}

08001186 <gpio_if_set>:

/*
 * API: gpio_if_set
 */
void gpio_if_set(t_gpio_if *gpio_if)
{
 8001186:	b580      	push	{r7, lr}
 8001188:	b082      	sub	sp, #8
 800118a:	af00      	add	r7, sp, #0
 800118c:	6078      	str	r0, [r7, #4]
  if (gpio_if->active == ACTIVE_HIGH)
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	781b      	ldrb	r3, [r3, #0]
 8001192:	2b01      	cmp	r3, #1
 8001194:	d10a      	bne.n	80011ac <gpio_if_set+0x26>
  {
    HAL_GPIO_WritePin(gpio_if->pin->port, gpio_if->pin->pin, GPIO_PIN_SET);
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	685b      	ldr	r3, [r3, #4]
 800119a:	6818      	ldr	r0, [r3, #0]
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	685b      	ldr	r3, [r3, #4]
 80011a0:	889b      	ldrh	r3, [r3, #4]
 80011a2:	2201      	movs	r2, #1
 80011a4:	4619      	mov	r1, r3
 80011a6:	f002 fa21 	bl	80035ec <HAL_GPIO_WritePin>
  }
  else
  {
    HAL_GPIO_WritePin(gpio_if->pin->port, gpio_if->pin->pin, GPIO_PIN_RESET);
  }
}
 80011aa:	e009      	b.n	80011c0 <gpio_if_set+0x3a>
    HAL_GPIO_WritePin(gpio_if->pin->port, gpio_if->pin->pin, GPIO_PIN_RESET);
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	685b      	ldr	r3, [r3, #4]
 80011b0:	6818      	ldr	r0, [r3, #0]
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	685b      	ldr	r3, [r3, #4]
 80011b6:	889b      	ldrh	r3, [r3, #4]
 80011b8:	2200      	movs	r2, #0
 80011ba:	4619      	mov	r1, r3
 80011bc:	f002 fa16 	bl	80035ec <HAL_GPIO_WritePin>
}
 80011c0:	bf00      	nop
 80011c2:	3708      	adds	r7, #8
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd80      	pop	{r7, pc}

080011c8 <gpio_if_clear>:

/*
 * API: gpio_if_clear
 */
void gpio_if_clear(t_gpio_if *gpio_if)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b082      	sub	sp, #8
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
  if (gpio_if->active == ACTIVE_HIGH)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	781b      	ldrb	r3, [r3, #0]
 80011d4:	2b01      	cmp	r3, #1
 80011d6:	d10a      	bne.n	80011ee <gpio_if_clear+0x26>
  {
    HAL_GPIO_WritePin(gpio_if->pin->port, gpio_if->pin->pin, GPIO_PIN_RESET);
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	685b      	ldr	r3, [r3, #4]
 80011dc:	6818      	ldr	r0, [r3, #0]
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	685b      	ldr	r3, [r3, #4]
 80011e2:	889b      	ldrh	r3, [r3, #4]
 80011e4:	2200      	movs	r2, #0
 80011e6:	4619      	mov	r1, r3
 80011e8:	f002 fa00 	bl	80035ec <HAL_GPIO_WritePin>
  }
  else
  {
    HAL_GPIO_WritePin(gpio_if->pin->port, gpio_if->pin->pin, GPIO_PIN_SET);
  }
}
 80011ec:	e009      	b.n	8001202 <gpio_if_clear+0x3a>
    HAL_GPIO_WritePin(gpio_if->pin->port, gpio_if->pin->pin, GPIO_PIN_SET);
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	685b      	ldr	r3, [r3, #4]
 80011f2:	6818      	ldr	r0, [r3, #0]
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	685b      	ldr	r3, [r3, #4]
 80011f8:	889b      	ldrh	r3, [r3, #4]
 80011fa:	2201      	movs	r2, #1
 80011fc:	4619      	mov	r1, r3
 80011fe:	f002 f9f5 	bl	80035ec <HAL_GPIO_WritePin>
}
 8001202:	bf00      	nop
 8001204:	3708      	adds	r7, #8
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}

0800120a <gpio_if_get>:

/*
 * API: gpio_if_get
 */
t_gpio_state gpio_if_get(t_gpio_if *gpio_if)
{
 800120a:	b580      	push	{r7, lr}
 800120c:	b082      	sub	sp, #8
 800120e:	af00      	add	r7, sp, #0
 8001210:	6078      	str	r0, [r7, #4]
  if (gpio_if->active == ACTIVE_HIGH)
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	781b      	ldrb	r3, [r3, #0]
 8001216:	2b01      	cmp	r3, #1
 8001218:	d110      	bne.n	800123c <gpio_if_get+0x32>
  {
    if (HAL_GPIO_ReadPin(gpio_if->pin->port, gpio_if->pin->pin) == GPIO_PIN_SET)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	685b      	ldr	r3, [r3, #4]
 800121e:	681a      	ldr	r2, [r3, #0]
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	889b      	ldrh	r3, [r3, #4]
 8001226:	4619      	mov	r1, r3
 8001228:	4610      	mov	r0, r2
 800122a:	f002 f9c7 	bl	80035bc <HAL_GPIO_ReadPin>
 800122e:	4603      	mov	r3, r0
 8001230:	2b01      	cmp	r3, #1
 8001232:	d101      	bne.n	8001238 <gpio_if_get+0x2e>
    {
      return GPIO_IF_SET;
 8001234:	2301      	movs	r3, #1
 8001236:	e011      	b.n	800125c <gpio_if_get+0x52>
    }
    else
    {
      return GPIO_IF_CLEAR;
 8001238:	2300      	movs	r3, #0
 800123a:	e00f      	b.n	800125c <gpio_if_get+0x52>
    }
  }
  else
  {
    if (HAL_GPIO_ReadPin(gpio_if->pin->port, gpio_if->pin->pin) == GPIO_PIN_SET)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	685b      	ldr	r3, [r3, #4]
 8001240:	681a      	ldr	r2, [r3, #0]
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	685b      	ldr	r3, [r3, #4]
 8001246:	889b      	ldrh	r3, [r3, #4]
 8001248:	4619      	mov	r1, r3
 800124a:	4610      	mov	r0, r2
 800124c:	f002 f9b6 	bl	80035bc <HAL_GPIO_ReadPin>
 8001250:	4603      	mov	r3, r0
 8001252:	2b01      	cmp	r3, #1
 8001254:	d101      	bne.n	800125a <gpio_if_get+0x50>
    {
      return GPIO_IF_CLEAR;
 8001256:	2300      	movs	r3, #0
 8001258:	e000      	b.n	800125c <gpio_if_get+0x52>
    }
    else
    {
      return GPIO_IF_SET;
 800125a:	2301      	movs	r3, #1
    }
  }
}
 800125c:	4618      	mov	r0, r3
 800125e:	3708      	adds	r7, #8
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}

08001264 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001264:	b590      	push	{r4, r7, lr}
 8001266:	b09d      	sub	sp, #116	; 0x74
 8001268:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */

	/*pines de switches*/
	t_gpio_pin user_switch1_pin = {SW1_GPIO_Port, SW1_Pin};
 800126a:	4a50      	ldr	r2, [pc, #320]	; (80013ac <main+0x148>)
 800126c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001270:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001274:	e883 0003 	stmia.w	r3, {r0, r1}
	t_gpio_if switch_1;
	t_gpio_pin user_switch2_pin = {SW2_GPIO_Port, SW2_Pin};
 8001278:	4a4d      	ldr	r2, [pc, #308]	; (80013b0 <main+0x14c>)
 800127a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800127e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001282:	e883 0003 	stmia.w	r3, {r0, r1}
	t_gpio_if switch_2;
	t_gpio_pin user_switch3_pin = {SW3_GPIO_Port, SW3_Pin};
 8001286:	4a4b      	ldr	r2, [pc, #300]	; (80013b4 <main+0x150>)
 8001288:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800128c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001290:	e883 0003 	stmia.w	r3, {r0, r1}
	t_gpio_if switch_3;
	t_gpio_pin user_switch4_pin = {SW4_GPIO_Port, SW4_Pin};
 8001294:	4a48      	ldr	r2, [pc, #288]	; (80013b8 <main+0x154>)
 8001296:	f107 0320 	add.w	r3, r7, #32
 800129a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800129e:	e883 0003 	stmia.w	r3, {r0, r1}
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012a2:	f000 fd5d 	bl	8001d60 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012a6:	f000 f899 	bl	80013dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012aa:	f7ff fec9 	bl	8001040 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80012ae:	f000 fc4b 	bl	8001b48 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80012b2:	f7ff fcff 	bl	8000cb4 <MX_ADC1_Init>
  MX_TIM1_Init();
 80012b6:	f000 fa5b 	bl	8001770 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 80012ba:	f000 fc15 	bl	8001ae8 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 80012be:	f000 fb05 	bl	80018cc <MX_TIM2_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */



  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);			// inicializacion pwm
 80012c2:	2100      	movs	r1, #0
 80012c4:	483d      	ldr	r0, [pc, #244]	; (80013bc <main+0x158>)
 80012c6:	f003 fd49 	bl	8004d5c <HAL_TIM_PWM_Start>

  HAL_UART_Receive_IT(&huart2, &uart_pc, 1);		// inicializacion interrupciones UART2
 80012ca:	2201      	movs	r2, #1
 80012cc:	493c      	ldr	r1, [pc, #240]	; (80013c0 <main+0x15c>)
 80012ce:	483d      	ldr	r0, [pc, #244]	; (80013c4 <main+0x160>)
 80012d0:	f004 ff5c 	bl	800618c <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart1, &uart_red, 1);		// inicializacion interrupciones UART1
 80012d4:	2201      	movs	r2, #1
 80012d6:	493c      	ldr	r1, [pc, #240]	; (80013c8 <main+0x164>)
 80012d8:	483c      	ldr	r0, [pc, #240]	; (80013cc <main+0x168>)
 80012da:	f004 ff57 	bl	800618c <HAL_UART_Receive_IT>

  gpio_if_init(&switch_1, ACTIVE_HIGH, &user_switch1_pin, GPIO_IF_INPUT);
 80012de:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80012e2:	f107 0050 	add.w	r0, r7, #80	; 0x50
 80012e6:	2302      	movs	r3, #2
 80012e8:	2101      	movs	r1, #1
 80012ea:	f7ff ff15 	bl	8001118 <gpio_if_init>
  if (gpio_if_open(&switch_1) != GPIO_IF_SUCCESS)
 80012ee:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80012f2:	4618      	mov	r0, r3
 80012f4:	f7ff ff29 	bl	800114a <gpio_if_open>
 80012f8:	4603      	mov	r3, r0
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d001      	beq.n	8001302 <main+0x9e>
    {
      Error_Handler();
 80012fe:	f000 f96d 	bl	80015dc <Error_Handler>
    }
  gpio_if_init(&switch_2, ACTIVE_HIGH, &user_switch2_pin, GPIO_IF_INPUT);
 8001302:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8001306:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 800130a:	2302      	movs	r3, #2
 800130c:	2101      	movs	r1, #1
 800130e:	f7ff ff03 	bl	8001118 <gpio_if_init>
  if (gpio_if_open(&switch_2) != GPIO_IF_SUCCESS)
 8001312:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001316:	4618      	mov	r0, r3
 8001318:	f7ff ff17 	bl	800114a <gpio_if_open>
 800131c:	4603      	mov	r3, r0
 800131e:	2b00      	cmp	r3, #0
 8001320:	d001      	beq.n	8001326 <main+0xc2>
    {
      Error_Handler();
 8001322:	f000 f95b 	bl	80015dc <Error_Handler>
    }
  gpio_if_init(&switch_3, ACTIVE_HIGH, &user_switch3_pin, GPIO_IF_INPUT);
 8001326:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800132a:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800132e:	2302      	movs	r3, #2
 8001330:	2101      	movs	r1, #1
 8001332:	f7ff fef1 	bl	8001118 <gpio_if_init>
  if (gpio_if_open(&switch_3) != GPIO_IF_SUCCESS)
 8001336:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800133a:	4618      	mov	r0, r3
 800133c:	f7ff ff05 	bl	800114a <gpio_if_open>
 8001340:	4603      	mov	r3, r0
 8001342:	2b00      	cmp	r3, #0
 8001344:	d001      	beq.n	800134a <main+0xe6>
    {
      Error_Handler();
 8001346:	f000 f949 	bl	80015dc <Error_Handler>
    }
  gpio_if_init(&switch_4, ACTIVE_HIGH, &user_switch4_pin, GPIO_IF_INPUT);
 800134a:	f107 0220 	add.w	r2, r7, #32
 800134e:	f107 0014 	add.w	r0, r7, #20
 8001352:	2302      	movs	r3, #2
 8001354:	2101      	movs	r1, #1
 8001356:	f7ff fedf 	bl	8001118 <gpio_if_init>
  if (gpio_if_open(&switch_4) != GPIO_IF_SUCCESS)
 800135a:	f107 0314 	add.w	r3, r7, #20
 800135e:	4618      	mov	r0, r3
 8001360:	f7ff fef3 	bl	800114a <gpio_if_open>
 8001364:	4603      	mov	r3, r0
 8001366:	2b00      	cmp	r3, #0
 8001368:	d001      	beq.n	800136e <main+0x10a>
    {
      Error_Handler();
 800136a:	f000 f937 	bl	80015dc <Error_Handler>
    }

  HAL_ADC_Init(&hadc1);
 800136e:	4818      	ldr	r0, [pc, #96]	; (80013d0 <main+0x16c>)
 8001370:	f000 ff4c 	bl	800220c <HAL_ADC_Init>

  dip_switch_ports_init(&this_dip, &switch_1, &switch_2, &switch_3, &switch_4);
 8001374:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8001378:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800137c:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8001380:	1d38      	adds	r0, r7, #4
 8001382:	f107 0314 	add.w	r3, r7, #20
 8001386:	9300      	str	r3, [sp, #0]
 8001388:	4623      	mov	r3, r4
 800138a:	f7ff fe09 	bl	8000fa0 <dip_switch_ports_init>
  int dip_value = get_dip_value(&this_dip);
 800138e:	1d3b      	adds	r3, r7, #4
 8001390:	4618      	mov	r0, r3
 8001392:	f7ff fe1e 	bl	8000fd2 <get_dip_value>
 8001396:	6678      	str	r0, [r7, #100]	; 0x64
  device_if_init(&this_device, dip_value);
 8001398:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800139a:	480e      	ldr	r0, [pc, #56]	; (80013d4 <main+0x170>)
 800139c:	f7ff fde8 	bl	8000f70 <device_if_init>

  trans_recep_init(&t_r_red, &huart1);
 80013a0:	490a      	ldr	r1, [pc, #40]	; (80013cc <main+0x168>)
 80013a2:	480d      	ldr	r0, [pc, #52]	; (80013d8 <main+0x174>)
 80013a4:	f000 fb76 	bl	8001a94 <trans_recep_init>

  while (1)
 80013a8:	e7fe      	b.n	80013a8 <main+0x144>
 80013aa:	bf00      	nop
 80013ac:	080076e4 	.word	0x080076e4
 80013b0:	080076ec 	.word	0x080076ec
 80013b4:	080076f4 	.word	0x080076f4
 80013b8:	080076fc 	.word	0x080076fc
 80013bc:	2000012c 	.word	0x2000012c
 80013c0:	20000094 	.word	0x20000094
 80013c4:	20000248 	.word	0x20000248
 80013c8:	20000125 	.word	0x20000125
 80013cc:	200001c4 	.word	0x200001c4
 80013d0:	2000002c 	.word	0x2000002c
 80013d4:	20000098 	.word	0x20000098
 80013d8:	200000a0 	.word	0x200000a0

080013dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b096      	sub	sp, #88	; 0x58
 80013e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013e2:	f107 0314 	add.w	r3, r7, #20
 80013e6:	2244      	movs	r2, #68	; 0x44
 80013e8:	2100      	movs	r1, #0
 80013ea:	4618      	mov	r0, r3
 80013ec:	f006 f966 	bl	80076bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013f0:	463b      	mov	r3, r7
 80013f2:	2200      	movs	r2, #0
 80013f4:	601a      	str	r2, [r3, #0]
 80013f6:	605a      	str	r2, [r3, #4]
 80013f8:	609a      	str	r2, [r3, #8]
 80013fa:	60da      	str	r2, [r3, #12]
 80013fc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80013fe:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001402:	f002 f919 	bl	8003638 <HAL_PWREx_ControlVoltageScaling>
 8001406:	4603      	mov	r3, r0
 8001408:	2b00      	cmp	r3, #0
 800140a:	d001      	beq.n	8001410 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800140c:	f000 f8e6 	bl	80015dc <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001410:	2302      	movs	r3, #2
 8001412:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001414:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001418:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800141a:	2340      	movs	r3, #64	; 0x40
 800141c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800141e:	2302      	movs	r3, #2
 8001420:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001422:	2302      	movs	r3, #2
 8001424:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001426:	2301      	movs	r3, #1
 8001428:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800142a:	230a      	movs	r3, #10
 800142c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800142e:	2307      	movs	r3, #7
 8001430:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001432:	2302      	movs	r3, #2
 8001434:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001436:	2302      	movs	r3, #2
 8001438:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800143a:	f107 0314 	add.w	r3, r7, #20
 800143e:	4618      	mov	r0, r3
 8001440:	f002 f950 	bl	80036e4 <HAL_RCC_OscConfig>
 8001444:	4603      	mov	r3, r0
 8001446:	2b00      	cmp	r3, #0
 8001448:	d001      	beq.n	800144e <SystemClock_Config+0x72>
  {
    Error_Handler();
 800144a:	f000 f8c7 	bl	80015dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800144e:	230f      	movs	r3, #15
 8001450:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001452:	2303      	movs	r3, #3
 8001454:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001456:	2300      	movs	r3, #0
 8001458:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800145a:	2300      	movs	r3, #0
 800145c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800145e:	2300      	movs	r3, #0
 8001460:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001462:	463b      	mov	r3, r7
 8001464:	2104      	movs	r1, #4
 8001466:	4618      	mov	r0, r3
 8001468:	f002 fd50 	bl	8003f0c <HAL_RCC_ClockConfig>
 800146c:	4603      	mov	r3, r0
 800146e:	2b00      	cmp	r3, #0
 8001470:	d001      	beq.n	8001476 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001472:	f000 f8b3 	bl	80015dc <Error_Handler>
  }
}
 8001476:	bf00      	nop
 8001478:	3758      	adds	r7, #88	; 0x58
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}
	...

08001480 <HAL_UART_RxCpltCallback>:
// rutina de interrupcion por UART
uint8_t dato_1;
uint8_t dato_2;

void HAL_UART_RxCpltCallback (UART_HandleTypeDef *huart)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b084      	sub	sp, #16
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
	static uint8_t cont = 1;
	device_mode = this_device.modo;
 8001488:	4b38      	ldr	r3, [pc, #224]	; (800156c <HAL_UART_RxCpltCallback+0xec>)
 800148a:	781a      	ldrb	r2, [r3, #0]
 800148c:	4b38      	ldr	r3, [pc, #224]	; (8001570 <HAL_UART_RxCpltCallback+0xf0>)
 800148e:	701a      	strb	r2, [r3, #0]


	// Modo MASTER
	if(huart->Instance == USART2)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	4a37      	ldr	r2, [pc, #220]	; (8001574 <HAL_UART_RxCpltCallback+0xf4>)
 8001496:	4293      	cmp	r3, r2
 8001498:	d123      	bne.n	80014e2 <HAL_UART_RxCpltCallback+0x62>
	{
		if (cont == 1)
 800149a:	4b37      	ldr	r3, [pc, #220]	; (8001578 <HAL_UART_RxCpltCallback+0xf8>)
 800149c:	781b      	ldrb	r3, [r3, #0]
 800149e:	2b01      	cmp	r3, #1
 80014a0:	d107      	bne.n	80014b2 <HAL_UART_RxCpltCallback+0x32>
		{
			dato_1 = uart_pc;
 80014a2:	4b36      	ldr	r3, [pc, #216]	; (800157c <HAL_UART_RxCpltCallback+0xfc>)
 80014a4:	781a      	ldrb	r2, [r3, #0]
 80014a6:	4b36      	ldr	r3, [pc, #216]	; (8001580 <HAL_UART_RxCpltCallback+0x100>)
 80014a8:	701a      	strb	r2, [r3, #0]
			cont = 2;
 80014aa:	4b33      	ldr	r3, [pc, #204]	; (8001578 <HAL_UART_RxCpltCallback+0xf8>)
 80014ac:	2202      	movs	r2, #2
 80014ae:	701a      	strb	r2, [r3, #0]
 80014b0:	e017      	b.n	80014e2 <HAL_UART_RxCpltCallback+0x62>
		}
		else if (cont == 2)
 80014b2:	4b31      	ldr	r3, [pc, #196]	; (8001578 <HAL_UART_RxCpltCallback+0xf8>)
 80014b4:	781b      	ldrb	r3, [r3, #0]
 80014b6:	2b02      	cmp	r3, #2
 80014b8:	d113      	bne.n	80014e2 <HAL_UART_RxCpltCallback+0x62>
		{
			dato_2 = uart_pc;
 80014ba:	4b30      	ldr	r3, [pc, #192]	; (800157c <HAL_UART_RxCpltCallback+0xfc>)
 80014bc:	781a      	ldrb	r2, [r3, #0]
 80014be:	4b31      	ldr	r3, [pc, #196]	; (8001584 <HAL_UART_RxCpltCallback+0x104>)
 80014c0:	701a      	strb	r2, [r3, #0]
			cont = 1;
 80014c2:	4b2d      	ldr	r3, [pc, #180]	; (8001578 <HAL_UART_RxCpltCallback+0xf8>)
 80014c4:	2201      	movs	r2, #1
 80014c6:	701a      	strb	r2, [r3, #0]
			if (device_mode == MASTER)
 80014c8:	4b29      	ldr	r3, [pc, #164]	; (8001570 <HAL_UART_RxCpltCallback+0xf0>)
 80014ca:	781b      	ldrb	r3, [r3, #0]
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d108      	bne.n	80014e2 <HAL_UART_RxCpltCallback+0x62>
			{
				int command = decode_pc_command(&this_device, dato_1, dato_2);
 80014d0:	4b2b      	ldr	r3, [pc, #172]	; (8001580 <HAL_UART_RxCpltCallback+0x100>)
 80014d2:	781b      	ldrb	r3, [r3, #0]
 80014d4:	4a2b      	ldr	r2, [pc, #172]	; (8001584 <HAL_UART_RxCpltCallback+0x104>)
 80014d6:	7812      	ldrb	r2, [r2, #0]
 80014d8:	4619      	mov	r1, r3
 80014da:	4824      	ldr	r0, [pc, #144]	; (800156c <HAL_UART_RxCpltCallback+0xec>)
 80014dc:	f7ff fcb6 	bl	8000e4c <decode_pc_command>
 80014e0:	60f8      	str	r0, [r7, #12]
			}
		}
	}

	// Modo SLAVE
	if(huart->Instance == USART1)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	4a28      	ldr	r2, [pc, #160]	; (8001588 <HAL_UART_RxCpltCallback+0x108>)
 80014e8:	4293      	cmp	r3, r2
 80014ea:	d131      	bne.n	8001550 <HAL_UART_RxCpltCallback+0xd0>
	{
		if (device_mode == MASTER)
 80014ec:	4b20      	ldr	r3, [pc, #128]	; (8001570 <HAL_UART_RxCpltCallback+0xf0>)
 80014ee:	781b      	ldrb	r3, [r3, #0]
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d109      	bne.n	8001508 <HAL_UART_RxCpltCallback+0x88>
		{
			HAL_UART_Transmit(&huart2, &uart_red, 1, 100);
 80014f4:	2364      	movs	r3, #100	; 0x64
 80014f6:	2201      	movs	r2, #1
 80014f8:	4924      	ldr	r1, [pc, #144]	; (800158c <HAL_UART_RxCpltCallback+0x10c>)
 80014fa:	4825      	ldr	r0, [pc, #148]	; (8001590 <HAL_UART_RxCpltCallback+0x110>)
 80014fc:	f004 fdb2 	bl	8006064 <HAL_UART_Transmit>
			HAL_TIM_Base_Stop_IT(&htim2);
 8001500:	4824      	ldr	r0, [pc, #144]	; (8001594 <HAL_UART_RxCpltCallback+0x114>)
 8001502:	f003 fb39 	bl	8004b78 <HAL_TIM_Base_Stop_IT>
 8001506:	e023      	b.n	8001550 <HAL_UART_RxCpltCallback+0xd0>
		}
		else
		{
			if (cont == 1)
 8001508:	4b1b      	ldr	r3, [pc, #108]	; (8001578 <HAL_UART_RxCpltCallback+0xf8>)
 800150a:	781b      	ldrb	r3, [r3, #0]
 800150c:	2b01      	cmp	r3, #1
 800150e:	d107      	bne.n	8001520 <HAL_UART_RxCpltCallback+0xa0>
			{
				dato_1 = uart_red;
 8001510:	4b1e      	ldr	r3, [pc, #120]	; (800158c <HAL_UART_RxCpltCallback+0x10c>)
 8001512:	781a      	ldrb	r2, [r3, #0]
 8001514:	4b1a      	ldr	r3, [pc, #104]	; (8001580 <HAL_UART_RxCpltCallback+0x100>)
 8001516:	701a      	strb	r2, [r3, #0]
				cont = 2;
 8001518:	4b17      	ldr	r3, [pc, #92]	; (8001578 <HAL_UART_RxCpltCallback+0xf8>)
 800151a:	2202      	movs	r2, #2
 800151c:	701a      	strb	r2, [r3, #0]
 800151e:	e017      	b.n	8001550 <HAL_UART_RxCpltCallback+0xd0>
			}
			else if (cont == 2)
 8001520:	4b15      	ldr	r3, [pc, #84]	; (8001578 <HAL_UART_RxCpltCallback+0xf8>)
 8001522:	781b      	ldrb	r3, [r3, #0]
 8001524:	2b02      	cmp	r3, #2
 8001526:	d113      	bne.n	8001550 <HAL_UART_RxCpltCallback+0xd0>
			{
				dato_2 = uart_red;
 8001528:	4b18      	ldr	r3, [pc, #96]	; (800158c <HAL_UART_RxCpltCallback+0x10c>)
 800152a:	781a      	ldrb	r2, [r3, #0]
 800152c:	4b15      	ldr	r3, [pc, #84]	; (8001584 <HAL_UART_RxCpltCallback+0x104>)
 800152e:	701a      	strb	r2, [r3, #0]
				cont = 1;
 8001530:	4b11      	ldr	r3, [pc, #68]	; (8001578 <HAL_UART_RxCpltCallback+0xf8>)
 8001532:	2201      	movs	r2, #1
 8001534:	701a      	strb	r2, [r3, #0]
				if (device_mode == SLAVE)
 8001536:	4b0e      	ldr	r3, [pc, #56]	; (8001570 <HAL_UART_RxCpltCallback+0xf0>)
 8001538:	781b      	ldrb	r3, [r3, #0]
 800153a:	2b01      	cmp	r3, #1
 800153c:	d108      	bne.n	8001550 <HAL_UART_RxCpltCallback+0xd0>
				{
					int command = decode_red_command(&this_device, dato_1, dato_2);
 800153e:	4b10      	ldr	r3, [pc, #64]	; (8001580 <HAL_UART_RxCpltCallback+0x100>)
 8001540:	781b      	ldrb	r3, [r3, #0]
 8001542:	4a10      	ldr	r2, [pc, #64]	; (8001584 <HAL_UART_RxCpltCallback+0x104>)
 8001544:	7812      	ldrb	r2, [r2, #0]
 8001546:	4619      	mov	r1, r3
 8001548:	4808      	ldr	r0, [pc, #32]	; (800156c <HAL_UART_RxCpltCallback+0xec>)
 800154a:	f7ff fca1 	bl	8000e90 <decode_red_command>
 800154e:	60b8      	str	r0, [r7, #8]
				}
			}
		}
	}

	HAL_UART_Receive_IT(&huart2, &uart_pc, 1);
 8001550:	2201      	movs	r2, #1
 8001552:	490a      	ldr	r1, [pc, #40]	; (800157c <HAL_UART_RxCpltCallback+0xfc>)
 8001554:	480e      	ldr	r0, [pc, #56]	; (8001590 <HAL_UART_RxCpltCallback+0x110>)
 8001556:	f004 fe19 	bl	800618c <HAL_UART_Receive_IT>
	HAL_UART_Receive_IT(&huart1, &uart_red, 1);
 800155a:	2201      	movs	r2, #1
 800155c:	490b      	ldr	r1, [pc, #44]	; (800158c <HAL_UART_RxCpltCallback+0x10c>)
 800155e:	480e      	ldr	r0, [pc, #56]	; (8001598 <HAL_UART_RxCpltCallback+0x118>)
 8001560:	f004 fe14 	bl	800618c <HAL_UART_Receive_IT>
}
 8001564:	bf00      	nop
 8001566:	3710      	adds	r7, #16
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}
 800156c:	20000098 	.word	0x20000098
 8001570:	20000124 	.word	0x20000124
 8001574:	40004400 	.word	0x40004400
 8001578:	20000000 	.word	0x20000000
 800157c:	20000094 	.word	0x20000094
 8001580:	20000127 	.word	0x20000127
 8001584:	20000128 	.word	0x20000128
 8001588:	40013800 	.word	0x40013800
 800158c:	20000125 	.word	0x20000125
 8001590:	20000248 	.word	0x20000248
 8001594:	20000178 	.word	0x20000178
 8001598:	200001c4 	.word	0x200001c4

0800159c <HAL_TIM_PeriodElapsedCallback>:
}*/



void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b082      	sub	sp, #8
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
	if (cont_tim == 1) {
 80015a4:	4b0a      	ldr	r3, [pc, #40]	; (80015d0 <HAL_TIM_PeriodElapsedCallback+0x34>)
 80015a6:	781b      	ldrb	r3, [r3, #0]
 80015a8:	2b01      	cmp	r3, #1
 80015aa:	d109      	bne.n	80015c0 <HAL_TIM_PeriodElapsedCallback+0x24>
		HAL_UART_Transmit(&huart2, '1', 1, 100);
 80015ac:	2364      	movs	r3, #100	; 0x64
 80015ae:	2201      	movs	r2, #1
 80015b0:	2131      	movs	r1, #49	; 0x31
 80015b2:	4808      	ldr	r0, [pc, #32]	; (80015d4 <HAL_TIM_PeriodElapsedCallback+0x38>)
 80015b4:	f004 fd56 	bl	8006064 <HAL_UART_Transmit>
		HAL_TIM_Base_Stop_IT(&htim2);
 80015b8:	4807      	ldr	r0, [pc, #28]	; (80015d8 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80015ba:	f003 fadd 	bl	8004b78 <HAL_TIM_Base_Stop_IT>
	}
	else
	{
		cont_tim = 1;
	}
}
 80015be:	e002      	b.n	80015c6 <HAL_TIM_PeriodElapsedCallback+0x2a>
		cont_tim = 1;
 80015c0:	4b03      	ldr	r3, [pc, #12]	; (80015d0 <HAL_TIM_PeriodElapsedCallback+0x34>)
 80015c2:	2201      	movs	r2, #1
 80015c4:	701a      	strb	r2, [r3, #0]
}
 80015c6:	bf00      	nop
 80015c8:	3708      	adds	r7, #8
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	20000126 	.word	0x20000126
 80015d4:	20000248 	.word	0x20000248
 80015d8:	20000178 	.word	0x20000178

080015dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015dc:	b480      	push	{r7}
 80015de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015e0:	b672      	cpsid	i
}
 80015e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015e4:	e7fe      	b.n	80015e4 <Error_Handler+0x8>

080015e6 <potenciometro_init>:
 */

#include "potenciometro.h"

void potenciometro_init(potenciometro *pot, ADC_HandleTypeDef *hadc1)
{
 80015e6:	b580      	push	{r7, lr}
 80015e8:	b082      	sub	sp, #8
 80015ea:	af00      	add	r7, sp, #0
 80015ec:	6078      	str	r0, [r7, #4]
 80015ee:	6039      	str	r1, [r7, #0]
	pot->adc_port = *hadc1;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	683a      	ldr	r2, [r7, #0]
 80015f4:	3304      	adds	r3, #4
 80015f6:	4611      	mov	r1, r2
 80015f8:	2268      	movs	r2, #104	; 0x68
 80015fa:	4618      	mov	r0, r3
 80015fc:	f006 f850 	bl	80076a0 <memcpy>
	HAL_ADC_Start(hadc1);
 8001600:	6838      	ldr	r0, [r7, #0]
 8001602:	f000 ff4f 	bl	80024a4 <HAL_ADC_Start>
}
 8001606:	bf00      	nop
 8001608:	3708      	adds	r7, #8
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}
	...

08001610 <potenciometro_get_value>:

uint8_t potenciometro_get_value(potenciometro *pot)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b084      	sub	sp, #16
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
	HAL_ADC_PollForConversion(&(pot->adc_port), 100);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	3304      	adds	r3, #4
 800161c:	2164      	movs	r1, #100	; 0x64
 800161e:	4618      	mov	r0, r3
 8001620:	f000 ffa3 	bl	800256a <HAL_ADC_PollForConversion>
	uint8_t adc_val = ( (double) HAL_ADC_GetValue(&(pot->adc_port)) ) /4096 * 100;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	3304      	adds	r3, #4
 8001628:	4618      	mov	r0, r3
 800162a:	f001 f82d 	bl	8002688 <HAL_ADC_GetValue>
 800162e:	4603      	mov	r3, r0
 8001630:	4618      	mov	r0, r3
 8001632:	f7fe ff11 	bl	8000458 <__aeabi_ui2d>
 8001636:	f04f 0200 	mov.w	r2, #0
 800163a:	4b0c      	ldr	r3, [pc, #48]	; (800166c <potenciometro_get_value+0x5c>)
 800163c:	f7ff f8b0 	bl	80007a0 <__aeabi_ddiv>
 8001640:	4602      	mov	r2, r0
 8001642:	460b      	mov	r3, r1
 8001644:	4610      	mov	r0, r2
 8001646:	4619      	mov	r1, r3
 8001648:	f04f 0200 	mov.w	r2, #0
 800164c:	4b08      	ldr	r3, [pc, #32]	; (8001670 <potenciometro_get_value+0x60>)
 800164e:	f7fe ff7d 	bl	800054c <__aeabi_dmul>
 8001652:	4602      	mov	r2, r0
 8001654:	460b      	mov	r3, r1
 8001656:	4610      	mov	r0, r2
 8001658:	4619      	mov	r1, r3
 800165a:	f7ff f989 	bl	8000970 <__aeabi_d2uiz>
 800165e:	4603      	mov	r3, r0
 8001660:	73fb      	strb	r3, [r7, #15]
	return adc_val;
 8001662:	7bfb      	ldrb	r3, [r7, #15]
}
 8001664:	4618      	mov	r0, r3
 8001666:	3710      	adds	r7, #16
 8001668:	46bd      	mov	sp, r7
 800166a:	bd80      	pop	{r7, pc}
 800166c:	40b00000 	.word	0x40b00000
 8001670:	40590000 	.word	0x40590000

08001674 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001674:	b480      	push	{r7}
 8001676:	b083      	sub	sp, #12
 8001678:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800167a:	4b0f      	ldr	r3, [pc, #60]	; (80016b8 <HAL_MspInit+0x44>)
 800167c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800167e:	4a0e      	ldr	r2, [pc, #56]	; (80016b8 <HAL_MspInit+0x44>)
 8001680:	f043 0301 	orr.w	r3, r3, #1
 8001684:	6613      	str	r3, [r2, #96]	; 0x60
 8001686:	4b0c      	ldr	r3, [pc, #48]	; (80016b8 <HAL_MspInit+0x44>)
 8001688:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800168a:	f003 0301 	and.w	r3, r3, #1
 800168e:	607b      	str	r3, [r7, #4]
 8001690:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001692:	4b09      	ldr	r3, [pc, #36]	; (80016b8 <HAL_MspInit+0x44>)
 8001694:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001696:	4a08      	ldr	r2, [pc, #32]	; (80016b8 <HAL_MspInit+0x44>)
 8001698:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800169c:	6593      	str	r3, [r2, #88]	; 0x58
 800169e:	4b06      	ldr	r3, [pc, #24]	; (80016b8 <HAL_MspInit+0x44>)
 80016a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016a6:	603b      	str	r3, [r7, #0]
 80016a8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016aa:	bf00      	nop
 80016ac:	370c      	adds	r7, #12
 80016ae:	46bd      	mov	sp, r7
 80016b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b4:	4770      	bx	lr
 80016b6:	bf00      	nop
 80016b8:	40021000 	.word	0x40021000

080016bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016bc:	b480      	push	{r7}
 80016be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80016c0:	e7fe      	b.n	80016c0 <NMI_Handler+0x4>

080016c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016c2:	b480      	push	{r7}
 80016c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016c6:	e7fe      	b.n	80016c6 <HardFault_Handler+0x4>

080016c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016c8:	b480      	push	{r7}
 80016ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016cc:	e7fe      	b.n	80016cc <MemManage_Handler+0x4>

080016ce <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016ce:	b480      	push	{r7}
 80016d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016d2:	e7fe      	b.n	80016d2 <BusFault_Handler+0x4>

080016d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016d4:	b480      	push	{r7}
 80016d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016d8:	e7fe      	b.n	80016d8 <UsageFault_Handler+0x4>

080016da <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016da:	b480      	push	{r7}
 80016dc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016de:	bf00      	nop
 80016e0:	46bd      	mov	sp, r7
 80016e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e6:	4770      	bx	lr

080016e8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016e8:	b480      	push	{r7}
 80016ea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016ec:	bf00      	nop
 80016ee:	46bd      	mov	sp, r7
 80016f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f4:	4770      	bx	lr

080016f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016f6:	b480      	push	{r7}
 80016f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016fa:	bf00      	nop
 80016fc:	46bd      	mov	sp, r7
 80016fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001702:	4770      	bx	lr

08001704 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001708:	f000 fb86 	bl	8001e18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800170c:	bf00      	nop
 800170e:	bd80      	pop	{r7, pc}

08001710 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001714:	4802      	ldr	r0, [pc, #8]	; (8001720 <TIM2_IRQHandler+0x10>)
 8001716:	f003 fc07 	bl	8004f28 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800171a:	bf00      	nop
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	20000178 	.word	0x20000178

08001724 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001728:	4802      	ldr	r0, [pc, #8]	; (8001734 <USART1_IRQHandler+0x10>)
 800172a:	f004 fd85 	bl	8006238 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800172e:	bf00      	nop
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	200001c4 	.word	0x200001c4

08001738 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800173c:	4802      	ldr	r0, [pc, #8]	; (8001748 <USART2_IRQHandler+0x10>)
 800173e:	f004 fd7b 	bl	8006238 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001742:	bf00      	nop
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	20000248 	.word	0x20000248

0800174c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800174c:	b480      	push	{r7}
 800174e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001750:	4b06      	ldr	r3, [pc, #24]	; (800176c <SystemInit+0x20>)
 8001752:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001756:	4a05      	ldr	r2, [pc, #20]	; (800176c <SystemInit+0x20>)
 8001758:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800175c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001760:	bf00      	nop
 8001762:	46bd      	mov	sp, r7
 8001764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001768:	4770      	bx	lr
 800176a:	bf00      	nop
 800176c:	e000ed00 	.word	0xe000ed00

08001770 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b09a      	sub	sp, #104	; 0x68
 8001774:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001776:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800177a:	2200      	movs	r2, #0
 800177c:	601a      	str	r2, [r3, #0]
 800177e:	605a      	str	r2, [r3, #4]
 8001780:	609a      	str	r2, [r3, #8]
 8001782:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001784:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001788:	2200      	movs	r2, #0
 800178a:	601a      	str	r2, [r3, #0]
 800178c:	605a      	str	r2, [r3, #4]
 800178e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001790:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001794:	2200      	movs	r2, #0
 8001796:	601a      	str	r2, [r3, #0]
 8001798:	605a      	str	r2, [r3, #4]
 800179a:	609a      	str	r2, [r3, #8]
 800179c:	60da      	str	r2, [r3, #12]
 800179e:	611a      	str	r2, [r3, #16]
 80017a0:	615a      	str	r2, [r3, #20]
 80017a2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80017a4:	1d3b      	adds	r3, r7, #4
 80017a6:	222c      	movs	r2, #44	; 0x2c
 80017a8:	2100      	movs	r1, #0
 80017aa:	4618      	mov	r0, r3
 80017ac:	f005 ff86 	bl	80076bc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80017b0:	4b44      	ldr	r3, [pc, #272]	; (80018c4 <MX_TIM1_Init+0x154>)
 80017b2:	4a45      	ldr	r2, [pc, #276]	; (80018c8 <MX_TIM1_Init+0x158>)
 80017b4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 655;
 80017b6:	4b43      	ldr	r3, [pc, #268]	; (80018c4 <MX_TIM1_Init+0x154>)
 80017b8:	f240 228f 	movw	r2, #655	; 0x28f
 80017bc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017be:	4b41      	ldr	r3, [pc, #260]	; (80018c4 <MX_TIM1_Init+0x154>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1960;
 80017c4:	4b3f      	ldr	r3, [pc, #252]	; (80018c4 <MX_TIM1_Init+0x154>)
 80017c6:	f44f 62f5 	mov.w	r2, #1960	; 0x7a8
 80017ca:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017cc:	4b3d      	ldr	r3, [pc, #244]	; (80018c4 <MX_TIM1_Init+0x154>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80017d2:	4b3c      	ldr	r3, [pc, #240]	; (80018c4 <MX_TIM1_Init+0x154>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017d8:	4b3a      	ldr	r3, [pc, #232]	; (80018c4 <MX_TIM1_Init+0x154>)
 80017da:	2200      	movs	r2, #0
 80017dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80017de:	4839      	ldr	r0, [pc, #228]	; (80018c4 <MX_TIM1_Init+0x154>)
 80017e0:	f003 f916 	bl	8004a10 <HAL_TIM_Base_Init>
 80017e4:	4603      	mov	r3, r0
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d001      	beq.n	80017ee <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 80017ea:	f7ff fef7 	bl	80015dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017f2:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80017f4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80017f8:	4619      	mov	r1, r3
 80017fa:	4832      	ldr	r0, [pc, #200]	; (80018c4 <MX_TIM1_Init+0x154>)
 80017fc:	f003 fe42 	bl	8005484 <HAL_TIM_ConfigClockSource>
 8001800:	4603      	mov	r3, r0
 8001802:	2b00      	cmp	r3, #0
 8001804:	d001      	beq.n	800180a <MX_TIM1_Init+0x9a>
  {
    Error_Handler();
 8001806:	f7ff fee9 	bl	80015dc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800180a:	482e      	ldr	r0, [pc, #184]	; (80018c4 <MX_TIM1_Init+0x154>)
 800180c:	f003 fa44 	bl	8004c98 <HAL_TIM_PWM_Init>
 8001810:	4603      	mov	r3, r0
 8001812:	2b00      	cmp	r3, #0
 8001814:	d001      	beq.n	800181a <MX_TIM1_Init+0xaa>
  {
    Error_Handler();
 8001816:	f7ff fee1 	bl	80015dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800181a:	2300      	movs	r3, #0
 800181c:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800181e:	2300      	movs	r3, #0
 8001820:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001822:	2300      	movs	r3, #0
 8001824:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001826:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800182a:	4619      	mov	r1, r3
 800182c:	4825      	ldr	r0, [pc, #148]	; (80018c4 <MX_TIM1_Init+0x154>)
 800182e:	f004 fac7 	bl	8005dc0 <HAL_TIMEx_MasterConfigSynchronization>
 8001832:	4603      	mov	r3, r0
 8001834:	2b00      	cmp	r3, #0
 8001836:	d001      	beq.n	800183c <MX_TIM1_Init+0xcc>
  {
    Error_Handler();
 8001838:	f7ff fed0 	bl	80015dc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800183c:	2360      	movs	r3, #96	; 0x60
 800183e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8001840:	2300      	movs	r3, #0
 8001842:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001844:	2300      	movs	r3, #0
 8001846:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001848:	2300      	movs	r3, #0
 800184a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800184c:	2300      	movs	r3, #0
 800184e:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001850:	2300      	movs	r3, #0
 8001852:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001854:	2300      	movs	r3, #0
 8001856:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001858:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800185c:	2200      	movs	r2, #0
 800185e:	4619      	mov	r1, r3
 8001860:	4818      	ldr	r0, [pc, #96]	; (80018c4 <MX_TIM1_Init+0x154>)
 8001862:	f003 fcfb 	bl	800525c <HAL_TIM_PWM_ConfigChannel>
 8001866:	4603      	mov	r3, r0
 8001868:	2b00      	cmp	r3, #0
 800186a:	d001      	beq.n	8001870 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 800186c:	f7ff feb6 	bl	80015dc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001870:	2300      	movs	r3, #0
 8001872:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001874:	2300      	movs	r3, #0
 8001876:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001878:	2300      	movs	r3, #0
 800187a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800187c:	2300      	movs	r3, #0
 800187e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001880:	2300      	movs	r3, #0
 8001882:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001884:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001888:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800188a:	2300      	movs	r3, #0
 800188c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800188e:	2300      	movs	r3, #0
 8001890:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001892:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001896:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001898:	2300      	movs	r3, #0
 800189a:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800189c:	2300      	movs	r3, #0
 800189e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80018a0:	1d3b      	adds	r3, r7, #4
 80018a2:	4619      	mov	r1, r3
 80018a4:	4807      	ldr	r0, [pc, #28]	; (80018c4 <MX_TIM1_Init+0x154>)
 80018a6:	f004 faf9 	bl	8005e9c <HAL_TIMEx_ConfigBreakDeadTime>
 80018aa:	4603      	mov	r3, r0
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d001      	beq.n	80018b4 <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 80018b0:	f7ff fe94 	bl	80015dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80018b4:	4803      	ldr	r0, [pc, #12]	; (80018c4 <MX_TIM1_Init+0x154>)
 80018b6:	f000 f8b5 	bl	8001a24 <HAL_TIM_MspPostInit>

}
 80018ba:	bf00      	nop
 80018bc:	3768      	adds	r7, #104	; 0x68
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}
 80018c2:	bf00      	nop
 80018c4:	2000012c 	.word	0x2000012c
 80018c8:	40012c00 	.word	0x40012c00

080018cc <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b08e      	sub	sp, #56	; 0x38
 80018d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018d2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80018d6:	2200      	movs	r2, #0
 80018d8:	601a      	str	r2, [r3, #0]
 80018da:	605a      	str	r2, [r3, #4]
 80018dc:	609a      	str	r2, [r3, #8]
 80018de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018e0:	f107 031c 	add.w	r3, r7, #28
 80018e4:	2200      	movs	r2, #0
 80018e6:	601a      	str	r2, [r3, #0]
 80018e8:	605a      	str	r2, [r3, #4]
 80018ea:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80018ec:	463b      	mov	r3, r7
 80018ee:	2200      	movs	r2, #0
 80018f0:	601a      	str	r2, [r3, #0]
 80018f2:	605a      	str	r2, [r3, #4]
 80018f4:	609a      	str	r2, [r3, #8]
 80018f6:	60da      	str	r2, [r3, #12]
 80018f8:	611a      	str	r2, [r3, #16]
 80018fa:	615a      	str	r2, [r3, #20]
 80018fc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80018fe:	4b2c      	ldr	r3, [pc, #176]	; (80019b0 <MX_TIM2_Init+0xe4>)
 8001900:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001904:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 39999;
 8001906:	4b2a      	ldr	r3, [pc, #168]	; (80019b0 <MX_TIM2_Init+0xe4>)
 8001908:	f649 423f 	movw	r2, #39999	; 0x9c3f
 800190c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800190e:	4b28      	ldr	r3, [pc, #160]	; (80019b0 <MX_TIM2_Init+0xe4>)
 8001910:	2200      	movs	r2, #0
 8001912:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 20000-1;
 8001914:	4b26      	ldr	r3, [pc, #152]	; (80019b0 <MX_TIM2_Init+0xe4>)
 8001916:	f644 621f 	movw	r2, #19999	; 0x4e1f
 800191a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800191c:	4b24      	ldr	r3, [pc, #144]	; (80019b0 <MX_TIM2_Init+0xe4>)
 800191e:	2200      	movs	r2, #0
 8001920:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001922:	4b23      	ldr	r3, [pc, #140]	; (80019b0 <MX_TIM2_Init+0xe4>)
 8001924:	2200      	movs	r2, #0
 8001926:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001928:	4821      	ldr	r0, [pc, #132]	; (80019b0 <MX_TIM2_Init+0xe4>)
 800192a:	f003 f871 	bl	8004a10 <HAL_TIM_Base_Init>
 800192e:	4603      	mov	r3, r0
 8001930:	2b00      	cmp	r3, #0
 8001932:	d001      	beq.n	8001938 <MX_TIM2_Init+0x6c>
  {
    Error_Handler();
 8001934:	f7ff fe52 	bl	80015dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001938:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800193c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800193e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001942:	4619      	mov	r1, r3
 8001944:	481a      	ldr	r0, [pc, #104]	; (80019b0 <MX_TIM2_Init+0xe4>)
 8001946:	f003 fd9d 	bl	8005484 <HAL_TIM_ConfigClockSource>
 800194a:	4603      	mov	r3, r0
 800194c:	2b00      	cmp	r3, #0
 800194e:	d001      	beq.n	8001954 <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 8001950:	f7ff fe44 	bl	80015dc <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 8001954:	4816      	ldr	r0, [pc, #88]	; (80019b0 <MX_TIM2_Init+0xe4>)
 8001956:	f003 f93e 	bl	8004bd6 <HAL_TIM_OC_Init>
 800195a:	4603      	mov	r3, r0
 800195c:	2b00      	cmp	r3, #0
 800195e:	d001      	beq.n	8001964 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8001960:	f7ff fe3c 	bl	80015dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001964:	2300      	movs	r3, #0
 8001966:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001968:	2300      	movs	r3, #0
 800196a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800196c:	f107 031c 	add.w	r3, r7, #28
 8001970:	4619      	mov	r1, r3
 8001972:	480f      	ldr	r0, [pc, #60]	; (80019b0 <MX_TIM2_Init+0xe4>)
 8001974:	f004 fa24 	bl	8005dc0 <HAL_TIMEx_MasterConfigSynchronization>
 8001978:	4603      	mov	r3, r0
 800197a:	2b00      	cmp	r3, #0
 800197c:	d001      	beq.n	8001982 <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 800197e:	f7ff fe2d 	bl	80015dc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001982:	2300      	movs	r3, #0
 8001984:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001986:	2300      	movs	r3, #0
 8001988:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800198a:	2300      	movs	r3, #0
 800198c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800198e:	2300      	movs	r3, #0
 8001990:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001992:	463b      	mov	r3, r7
 8001994:	2200      	movs	r2, #0
 8001996:	4619      	mov	r1, r3
 8001998:	4805      	ldr	r0, [pc, #20]	; (80019b0 <MX_TIM2_Init+0xe4>)
 800199a:	f003 fbe5 	bl	8005168 <HAL_TIM_OC_ConfigChannel>
 800199e:	4603      	mov	r3, r0
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d001      	beq.n	80019a8 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 80019a4:	f7ff fe1a 	bl	80015dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80019a8:	bf00      	nop
 80019aa:	3738      	adds	r7, #56	; 0x38
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bd80      	pop	{r7, pc}
 80019b0:	20000178 	.word	0x20000178

080019b4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b084      	sub	sp, #16
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4a16      	ldr	r2, [pc, #88]	; (8001a1c <HAL_TIM_Base_MspInit+0x68>)
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d10c      	bne.n	80019e0 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80019c6:	4b16      	ldr	r3, [pc, #88]	; (8001a20 <HAL_TIM_Base_MspInit+0x6c>)
 80019c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019ca:	4a15      	ldr	r2, [pc, #84]	; (8001a20 <HAL_TIM_Base_MspInit+0x6c>)
 80019cc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80019d0:	6613      	str	r3, [r2, #96]	; 0x60
 80019d2:	4b13      	ldr	r3, [pc, #76]	; (8001a20 <HAL_TIM_Base_MspInit+0x6c>)
 80019d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80019da:	60fb      	str	r3, [r7, #12]
 80019dc:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80019de:	e018      	b.n	8001a12 <HAL_TIM_Base_MspInit+0x5e>
  else if(tim_baseHandle->Instance==TIM2)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80019e8:	d113      	bne.n	8001a12 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80019ea:	4b0d      	ldr	r3, [pc, #52]	; (8001a20 <HAL_TIM_Base_MspInit+0x6c>)
 80019ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019ee:	4a0c      	ldr	r2, [pc, #48]	; (8001a20 <HAL_TIM_Base_MspInit+0x6c>)
 80019f0:	f043 0301 	orr.w	r3, r3, #1
 80019f4:	6593      	str	r3, [r2, #88]	; 0x58
 80019f6:	4b0a      	ldr	r3, [pc, #40]	; (8001a20 <HAL_TIM_Base_MspInit+0x6c>)
 80019f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019fa:	f003 0301 	and.w	r3, r3, #1
 80019fe:	60bb      	str	r3, [r7, #8]
 8001a00:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001a02:	2200      	movs	r2, #0
 8001a04:	2100      	movs	r1, #0
 8001a06:	201c      	movs	r0, #28
 8001a08:	f001 fba9 	bl	800315e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001a0c:	201c      	movs	r0, #28
 8001a0e:	f001 fbc2 	bl	8003196 <HAL_NVIC_EnableIRQ>
}
 8001a12:	bf00      	nop
 8001a14:	3710      	adds	r7, #16
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	bf00      	nop
 8001a1c:	40012c00 	.word	0x40012c00
 8001a20:	40021000 	.word	0x40021000

08001a24 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b088      	sub	sp, #32
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a2c:	f107 030c 	add.w	r3, r7, #12
 8001a30:	2200      	movs	r2, #0
 8001a32:	601a      	str	r2, [r3, #0]
 8001a34:	605a      	str	r2, [r3, #4]
 8001a36:	609a      	str	r2, [r3, #8]
 8001a38:	60da      	str	r2, [r3, #12]
 8001a3a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4a12      	ldr	r2, [pc, #72]	; (8001a8c <HAL_TIM_MspPostInit+0x68>)
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d11d      	bne.n	8001a82 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a46:	4b12      	ldr	r3, [pc, #72]	; (8001a90 <HAL_TIM_MspPostInit+0x6c>)
 8001a48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a4a:	4a11      	ldr	r2, [pc, #68]	; (8001a90 <HAL_TIM_MspPostInit+0x6c>)
 8001a4c:	f043 0301 	orr.w	r3, r3, #1
 8001a50:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a52:	4b0f      	ldr	r3, [pc, #60]	; (8001a90 <HAL_TIM_MspPostInit+0x6c>)
 8001a54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a56:	f003 0301 	and.w	r3, r3, #1
 8001a5a:	60bb      	str	r3, [r7, #8]
 8001a5c:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001a5e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a62:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a64:	2302      	movs	r3, #2
 8001a66:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001a70:	2301      	movs	r3, #1
 8001a72:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a74:	f107 030c 	add.w	r3, r7, #12
 8001a78:	4619      	mov	r1, r3
 8001a7a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a7e:	f001 fc23 	bl	80032c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001a82:	bf00      	nop
 8001a84:	3720      	adds	r7, #32
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}
 8001a8a:	bf00      	nop
 8001a8c:	40012c00 	.word	0x40012c00
 8001a90:	40021000 	.word	0x40021000

08001a94 <trans_recep_init>:

#include "transmisor_receptor_red.h"


void trans_recep_init( transmisor_receptor_red *t_r_red, UART_HandleTypeDef *uart)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b082      	sub	sp, #8
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
 8001a9c:	6039      	str	r1, [r7, #0]
	t_r_red->puerto_uart = *uart;
 8001a9e:	687a      	ldr	r2, [r7, #4]
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	4610      	mov	r0, r2
 8001aa4:	4619      	mov	r1, r3
 8001aa6:	2384      	movs	r3, #132	; 0x84
 8001aa8:	461a      	mov	r2, r3
 8001aaa:	f005 fdf9 	bl	80076a0 <memcpy>
}
 8001aae:	bf00      	nop
 8001ab0:	3708      	adds	r7, #8
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}

08001ab6 <send>:

void send(transmisor_receptor_red *t_r_red, uint8_t *command_1, uint8_t *command_2)
{
 8001ab6:	b580      	push	{r7, lr}
 8001ab8:	b084      	sub	sp, #16
 8001aba:	af00      	add	r7, sp, #0
 8001abc:	60f8      	str	r0, [r7, #12]
 8001abe:	60b9      	str	r1, [r7, #8]
 8001ac0:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&(t_r_red->puerto_uart), command_1, 1, 1000);
 8001ac2:	68f8      	ldr	r0, [r7, #12]
 8001ac4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ac8:	2201      	movs	r2, #1
 8001aca:	68b9      	ldr	r1, [r7, #8]
 8001acc:	f004 faca 	bl	8006064 <HAL_UART_Transmit>
	HAL_UART_Transmit(&(t_r_red->puerto_uart), command_2, 1, 1000);
 8001ad0:	68f8      	ldr	r0, [r7, #12]
 8001ad2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ad6:	2201      	movs	r2, #1
 8001ad8:	6879      	ldr	r1, [r7, #4]
 8001ada:	f004 fac3 	bl	8006064 <HAL_UART_Transmit>
}
 8001ade:	bf00      	nop
 8001ae0:	3710      	adds	r7, #16
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}
	...

08001ae8 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001aec:	4b14      	ldr	r3, [pc, #80]	; (8001b40 <MX_USART1_UART_Init+0x58>)
 8001aee:	4a15      	ldr	r2, [pc, #84]	; (8001b44 <MX_USART1_UART_Init+0x5c>)
 8001af0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001af2:	4b13      	ldr	r3, [pc, #76]	; (8001b40 <MX_USART1_UART_Init+0x58>)
 8001af4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001af8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001afa:	4b11      	ldr	r3, [pc, #68]	; (8001b40 <MX_USART1_UART_Init+0x58>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001b00:	4b0f      	ldr	r3, [pc, #60]	; (8001b40 <MX_USART1_UART_Init+0x58>)
 8001b02:	2200      	movs	r2, #0
 8001b04:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001b06:	4b0e      	ldr	r3, [pc, #56]	; (8001b40 <MX_USART1_UART_Init+0x58>)
 8001b08:	2200      	movs	r2, #0
 8001b0a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001b0c:	4b0c      	ldr	r3, [pc, #48]	; (8001b40 <MX_USART1_UART_Init+0x58>)
 8001b0e:	220c      	movs	r2, #12
 8001b10:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b12:	4b0b      	ldr	r3, [pc, #44]	; (8001b40 <MX_USART1_UART_Init+0x58>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b18:	4b09      	ldr	r3, [pc, #36]	; (8001b40 <MX_USART1_UART_Init+0x58>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001b1e:	4b08      	ldr	r3, [pc, #32]	; (8001b40 <MX_USART1_UART_Init+0x58>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001b24:	4b06      	ldr	r3, [pc, #24]	; (8001b40 <MX_USART1_UART_Init+0x58>)
 8001b26:	2200      	movs	r2, #0
 8001b28:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001b2a:	4805      	ldr	r0, [pc, #20]	; (8001b40 <MX_USART1_UART_Init+0x58>)
 8001b2c:	f004 fa4c 	bl	8005fc8 <HAL_UART_Init>
 8001b30:	4603      	mov	r3, r0
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d001      	beq.n	8001b3a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001b36:	f7ff fd51 	bl	80015dc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001b3a:	bf00      	nop
 8001b3c:	bd80      	pop	{r7, pc}
 8001b3e:	bf00      	nop
 8001b40:	200001c4 	.word	0x200001c4
 8001b44:	40013800 	.word	0x40013800

08001b48 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001b4c:	4b14      	ldr	r3, [pc, #80]	; (8001ba0 <MX_USART2_UART_Init+0x58>)
 8001b4e:	4a15      	ldr	r2, [pc, #84]	; (8001ba4 <MX_USART2_UART_Init+0x5c>)
 8001b50:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001b52:	4b13      	ldr	r3, [pc, #76]	; (8001ba0 <MX_USART2_UART_Init+0x58>)
 8001b54:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001b58:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001b5a:	4b11      	ldr	r3, [pc, #68]	; (8001ba0 <MX_USART2_UART_Init+0x58>)
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001b60:	4b0f      	ldr	r3, [pc, #60]	; (8001ba0 <MX_USART2_UART_Init+0x58>)
 8001b62:	2200      	movs	r2, #0
 8001b64:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001b66:	4b0e      	ldr	r3, [pc, #56]	; (8001ba0 <MX_USART2_UART_Init+0x58>)
 8001b68:	2200      	movs	r2, #0
 8001b6a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001b6c:	4b0c      	ldr	r3, [pc, #48]	; (8001ba0 <MX_USART2_UART_Init+0x58>)
 8001b6e:	220c      	movs	r2, #12
 8001b70:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b72:	4b0b      	ldr	r3, [pc, #44]	; (8001ba0 <MX_USART2_UART_Init+0x58>)
 8001b74:	2200      	movs	r2, #0
 8001b76:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b78:	4b09      	ldr	r3, [pc, #36]	; (8001ba0 <MX_USART2_UART_Init+0x58>)
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001b7e:	4b08      	ldr	r3, [pc, #32]	; (8001ba0 <MX_USART2_UART_Init+0x58>)
 8001b80:	2200      	movs	r2, #0
 8001b82:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001b84:	4b06      	ldr	r3, [pc, #24]	; (8001ba0 <MX_USART2_UART_Init+0x58>)
 8001b86:	2200      	movs	r2, #0
 8001b88:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001b8a:	4805      	ldr	r0, [pc, #20]	; (8001ba0 <MX_USART2_UART_Init+0x58>)
 8001b8c:	f004 fa1c 	bl	8005fc8 <HAL_UART_Init>
 8001b90:	4603      	mov	r3, r0
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d001      	beq.n	8001b9a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001b96:	f7ff fd21 	bl	80015dc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001b9a:	bf00      	nop
 8001b9c:	bd80      	pop	{r7, pc}
 8001b9e:	bf00      	nop
 8001ba0:	20000248 	.word	0x20000248
 8001ba4:	40004400 	.word	0x40004400

08001ba8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b0a6      	sub	sp, #152	; 0x98
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bb0:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	601a      	str	r2, [r3, #0]
 8001bb8:	605a      	str	r2, [r3, #4]
 8001bba:	609a      	str	r2, [r3, #8]
 8001bbc:	60da      	str	r2, [r3, #12]
 8001bbe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001bc0:	f107 031c 	add.w	r3, r7, #28
 8001bc4:	2268      	movs	r2, #104	; 0x68
 8001bc6:	2100      	movs	r1, #0
 8001bc8:	4618      	mov	r0, r3
 8001bca:	f005 fd77 	bl	80076bc <memset>
  if(uartHandle->Instance==USART1)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4a4b      	ldr	r2, [pc, #300]	; (8001d00 <HAL_UART_MspInit+0x158>)
 8001bd4:	4293      	cmp	r3, r2
 8001bd6:	d145      	bne.n	8001c64 <HAL_UART_MspInit+0xbc>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001bd8:	2301      	movs	r3, #1
 8001bda:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001be0:	f107 031c 	add.w	r3, r7, #28
 8001be4:	4618      	mov	r0, r3
 8001be6:	f002 fbb5 	bl	8004354 <HAL_RCCEx_PeriphCLKConfig>
 8001bea:	4603      	mov	r3, r0
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d001      	beq.n	8001bf4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001bf0:	f7ff fcf4 	bl	80015dc <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001bf4:	4b43      	ldr	r3, [pc, #268]	; (8001d04 <HAL_UART_MspInit+0x15c>)
 8001bf6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bf8:	4a42      	ldr	r2, [pc, #264]	; (8001d04 <HAL_UART_MspInit+0x15c>)
 8001bfa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bfe:	6613      	str	r3, [r2, #96]	; 0x60
 8001c00:	4b40      	ldr	r3, [pc, #256]	; (8001d04 <HAL_UART_MspInit+0x15c>)
 8001c02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c04:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c08:	61bb      	str	r3, [r7, #24]
 8001c0a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c0c:	4b3d      	ldr	r3, [pc, #244]	; (8001d04 <HAL_UART_MspInit+0x15c>)
 8001c0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c10:	4a3c      	ldr	r2, [pc, #240]	; (8001d04 <HAL_UART_MspInit+0x15c>)
 8001c12:	f043 0301 	orr.w	r3, r3, #1
 8001c16:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c18:	4b3a      	ldr	r3, [pc, #232]	; (8001d04 <HAL_UART_MspInit+0x15c>)
 8001c1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c1c:	f003 0301 	and.w	r3, r3, #1
 8001c20:	617b      	str	r3, [r7, #20]
 8001c22:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001c24:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001c28:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c2c:	2302      	movs	r3, #2
 8001c2e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c32:	2300      	movs	r3, #0
 8001c34:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c38:	2303      	movs	r3, #3
 8001c3a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001c3e:	2307      	movs	r3, #7
 8001c40:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c44:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001c48:	4619      	mov	r1, r3
 8001c4a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c4e:	f001 fb3b 	bl	80032c8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001c52:	2200      	movs	r2, #0
 8001c54:	2100      	movs	r1, #0
 8001c56:	2025      	movs	r0, #37	; 0x25
 8001c58:	f001 fa81 	bl	800315e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001c5c:	2025      	movs	r0, #37	; 0x25
 8001c5e:	f001 fa9a 	bl	8003196 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001c62:	e048      	b.n	8001cf6 <HAL_UART_MspInit+0x14e>
  else if(uartHandle->Instance==USART2)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4a27      	ldr	r2, [pc, #156]	; (8001d08 <HAL_UART_MspInit+0x160>)
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d143      	bne.n	8001cf6 <HAL_UART_MspInit+0x14e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001c6e:	2302      	movs	r3, #2
 8001c70:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001c72:	2300      	movs	r3, #0
 8001c74:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c76:	f107 031c 	add.w	r3, r7, #28
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	f002 fb6a 	bl	8004354 <HAL_RCCEx_PeriphCLKConfig>
 8001c80:	4603      	mov	r3, r0
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d001      	beq.n	8001c8a <HAL_UART_MspInit+0xe2>
      Error_Handler();
 8001c86:	f7ff fca9 	bl	80015dc <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001c8a:	4b1e      	ldr	r3, [pc, #120]	; (8001d04 <HAL_UART_MspInit+0x15c>)
 8001c8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c8e:	4a1d      	ldr	r2, [pc, #116]	; (8001d04 <HAL_UART_MspInit+0x15c>)
 8001c90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c94:	6593      	str	r3, [r2, #88]	; 0x58
 8001c96:	4b1b      	ldr	r3, [pc, #108]	; (8001d04 <HAL_UART_MspInit+0x15c>)
 8001c98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c9e:	613b      	str	r3, [r7, #16]
 8001ca0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ca2:	4b18      	ldr	r3, [pc, #96]	; (8001d04 <HAL_UART_MspInit+0x15c>)
 8001ca4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ca6:	4a17      	ldr	r2, [pc, #92]	; (8001d04 <HAL_UART_MspInit+0x15c>)
 8001ca8:	f043 0301 	orr.w	r3, r3, #1
 8001cac:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001cae:	4b15      	ldr	r3, [pc, #84]	; (8001d04 <HAL_UART_MspInit+0x15c>)
 8001cb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cb2:	f003 0301 	and.w	r3, r3, #1
 8001cb6:	60fb      	str	r3, [r7, #12]
 8001cb8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001cba:	230c      	movs	r3, #12
 8001cbc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cc0:	2302      	movs	r3, #2
 8001cc2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ccc:	2303      	movs	r3, #3
 8001cce:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001cd2:	2307      	movs	r3, #7
 8001cd4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cd8:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001cdc:	4619      	mov	r1, r3
 8001cde:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ce2:	f001 faf1 	bl	80032c8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	2100      	movs	r1, #0
 8001cea:	2026      	movs	r0, #38	; 0x26
 8001cec:	f001 fa37 	bl	800315e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001cf0:	2026      	movs	r0, #38	; 0x26
 8001cf2:	f001 fa50 	bl	8003196 <HAL_NVIC_EnableIRQ>
}
 8001cf6:	bf00      	nop
 8001cf8:	3798      	adds	r7, #152	; 0x98
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}
 8001cfe:	bf00      	nop
 8001d00:	40013800 	.word	0x40013800
 8001d04:	40021000 	.word	0x40021000
 8001d08:	40004400 	.word	0x40004400

08001d0c <Reset_Handler>:
 8001d0c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d44 <LoopForever+0x2>
 8001d10:	f7ff fd1c 	bl	800174c <SystemInit>
 8001d14:	480c      	ldr	r0, [pc, #48]	; (8001d48 <LoopForever+0x6>)
 8001d16:	490d      	ldr	r1, [pc, #52]	; (8001d4c <LoopForever+0xa>)
 8001d18:	4a0d      	ldr	r2, [pc, #52]	; (8001d50 <LoopForever+0xe>)
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	e002      	b.n	8001d24 <LoopCopyDataInit>

08001d1e <CopyDataInit>:
 8001d1e:	58d4      	ldr	r4, [r2, r3]
 8001d20:	50c4      	str	r4, [r0, r3]
 8001d22:	3304      	adds	r3, #4

08001d24 <LoopCopyDataInit>:
 8001d24:	18c4      	adds	r4, r0, r3
 8001d26:	428c      	cmp	r4, r1
 8001d28:	d3f9      	bcc.n	8001d1e <CopyDataInit>
 8001d2a:	4a0a      	ldr	r2, [pc, #40]	; (8001d54 <LoopForever+0x12>)
 8001d2c:	4c0a      	ldr	r4, [pc, #40]	; (8001d58 <LoopForever+0x16>)
 8001d2e:	2300      	movs	r3, #0
 8001d30:	e001      	b.n	8001d36 <LoopFillZerobss>

08001d32 <FillZerobss>:
 8001d32:	6013      	str	r3, [r2, #0]
 8001d34:	3204      	adds	r2, #4

08001d36 <LoopFillZerobss>:
 8001d36:	42a2      	cmp	r2, r4
 8001d38:	d3fb      	bcc.n	8001d32 <FillZerobss>
 8001d3a:	f005 fc8d 	bl	8007658 <__libc_init_array>
 8001d3e:	f7ff fa91 	bl	8001264 <main>

08001d42 <LoopForever>:
 8001d42:	e7fe      	b.n	8001d42 <LoopForever>
 8001d44:	20028000 	.word	0x20028000
 8001d48:	20000000 	.word	0x20000000
 8001d4c:	20000010 	.word	0x20000010
 8001d50:	0800775c 	.word	0x0800775c
 8001d54:	20000010 	.word	0x20000010
 8001d58:	200002d0 	.word	0x200002d0

08001d5c <ADC1_IRQHandler>:
 8001d5c:	e7fe      	b.n	8001d5c <ADC1_IRQHandler>
	...

08001d60 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b082      	sub	sp, #8
 8001d64:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001d66:	2300      	movs	r3, #0
 8001d68:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d6a:	4b0c      	ldr	r3, [pc, #48]	; (8001d9c <HAL_Init+0x3c>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	4a0b      	ldr	r2, [pc, #44]	; (8001d9c <HAL_Init+0x3c>)
 8001d70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d74:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d76:	2003      	movs	r0, #3
 8001d78:	f001 f9e6 	bl	8003148 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001d7c:	2000      	movs	r0, #0
 8001d7e:	f000 f80f 	bl	8001da0 <HAL_InitTick>
 8001d82:	4603      	mov	r3, r0
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d002      	beq.n	8001d8e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001d88:	2301      	movs	r3, #1
 8001d8a:	71fb      	strb	r3, [r7, #7]
 8001d8c:	e001      	b.n	8001d92 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001d8e:	f7ff fc71 	bl	8001674 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001d92:	79fb      	ldrb	r3, [r7, #7]
}
 8001d94:	4618      	mov	r0, r3
 8001d96:	3708      	adds	r7, #8
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bd80      	pop	{r7, pc}
 8001d9c:	40022000 	.word	0x40022000

08001da0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b084      	sub	sp, #16
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001da8:	2300      	movs	r3, #0
 8001daa:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001dac:	4b17      	ldr	r3, [pc, #92]	; (8001e0c <HAL_InitTick+0x6c>)
 8001dae:	781b      	ldrb	r3, [r3, #0]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d023      	beq.n	8001dfc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001db4:	4b16      	ldr	r3, [pc, #88]	; (8001e10 <HAL_InitTick+0x70>)
 8001db6:	681a      	ldr	r2, [r3, #0]
 8001db8:	4b14      	ldr	r3, [pc, #80]	; (8001e0c <HAL_InitTick+0x6c>)
 8001dba:	781b      	ldrb	r3, [r3, #0]
 8001dbc:	4619      	mov	r1, r3
 8001dbe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001dc2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001dc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dca:	4618      	mov	r0, r3
 8001dcc:	f001 f9f1 	bl	80031b2 <HAL_SYSTICK_Config>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d10f      	bne.n	8001df6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	2b0f      	cmp	r3, #15
 8001dda:	d809      	bhi.n	8001df0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ddc:	2200      	movs	r2, #0
 8001dde:	6879      	ldr	r1, [r7, #4]
 8001de0:	f04f 30ff 	mov.w	r0, #4294967295
 8001de4:	f001 f9bb 	bl	800315e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001de8:	4a0a      	ldr	r2, [pc, #40]	; (8001e14 <HAL_InitTick+0x74>)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6013      	str	r3, [r2, #0]
 8001dee:	e007      	b.n	8001e00 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001df0:	2301      	movs	r3, #1
 8001df2:	73fb      	strb	r3, [r7, #15]
 8001df4:	e004      	b.n	8001e00 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001df6:	2301      	movs	r3, #1
 8001df8:	73fb      	strb	r3, [r7, #15]
 8001dfa:	e001      	b.n	8001e00 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001e00:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e02:	4618      	mov	r0, r3
 8001e04:	3710      	adds	r7, #16
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}
 8001e0a:	bf00      	nop
 8001e0c:	2000000c 	.word	0x2000000c
 8001e10:	20000004 	.word	0x20000004
 8001e14:	20000008 	.word	0x20000008

08001e18 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001e1c:	4b06      	ldr	r3, [pc, #24]	; (8001e38 <HAL_IncTick+0x20>)
 8001e1e:	781b      	ldrb	r3, [r3, #0]
 8001e20:	461a      	mov	r2, r3
 8001e22:	4b06      	ldr	r3, [pc, #24]	; (8001e3c <HAL_IncTick+0x24>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4413      	add	r3, r2
 8001e28:	4a04      	ldr	r2, [pc, #16]	; (8001e3c <HAL_IncTick+0x24>)
 8001e2a:	6013      	str	r3, [r2, #0]
}
 8001e2c:	bf00      	nop
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e34:	4770      	bx	lr
 8001e36:	bf00      	nop
 8001e38:	2000000c 	.word	0x2000000c
 8001e3c:	200002cc 	.word	0x200002cc

08001e40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e40:	b480      	push	{r7}
 8001e42:	af00      	add	r7, sp, #0
  return uwTick;
 8001e44:	4b03      	ldr	r3, [pc, #12]	; (8001e54 <HAL_GetTick+0x14>)
 8001e46:	681b      	ldr	r3, [r3, #0]
}
 8001e48:	4618      	mov	r0, r3
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e50:	4770      	bx	lr
 8001e52:	bf00      	nop
 8001e54:	200002cc 	.word	0x200002cc

08001e58 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	b083      	sub	sp, #12
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
 8001e60:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	689b      	ldr	r3, [r3, #8]
 8001e66:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	431a      	orrs	r2, r3
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	609a      	str	r2, [r3, #8]
}
 8001e72:	bf00      	nop
 8001e74:	370c      	adds	r7, #12
 8001e76:	46bd      	mov	sp, r7
 8001e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7c:	4770      	bx	lr

08001e7e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001e7e:	b480      	push	{r7}
 8001e80:	b083      	sub	sp, #12
 8001e82:	af00      	add	r7, sp, #0
 8001e84:	6078      	str	r0, [r7, #4]
 8001e86:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	689b      	ldr	r3, [r3, #8]
 8001e8c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	431a      	orrs	r2, r3
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	609a      	str	r2, [r3, #8]
}
 8001e98:	bf00      	nop
 8001e9a:	370c      	adds	r7, #12
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea2:	4770      	bx	lr

08001ea4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	b083      	sub	sp, #12
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	689b      	ldr	r3, [r3, #8]
 8001eb0:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	370c      	adds	r7, #12
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebe:	4770      	bx	lr

08001ec0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	b087      	sub	sp, #28
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	60f8      	str	r0, [r7, #12]
 8001ec8:	60b9      	str	r1, [r7, #8]
 8001eca:	607a      	str	r2, [r7, #4]
 8001ecc:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	3360      	adds	r3, #96	; 0x60
 8001ed2:	461a      	mov	r2, r3
 8001ed4:	68bb      	ldr	r3, [r7, #8]
 8001ed6:	009b      	lsls	r3, r3, #2
 8001ed8:	4413      	add	r3, r2
 8001eda:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001edc:	697b      	ldr	r3, [r7, #20]
 8001ede:	681a      	ldr	r2, [r3, #0]
 8001ee0:	4b08      	ldr	r3, [pc, #32]	; (8001f04 <LL_ADC_SetOffset+0x44>)
 8001ee2:	4013      	ands	r3, r2
 8001ee4:	687a      	ldr	r2, [r7, #4]
 8001ee6:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001eea:	683a      	ldr	r2, [r7, #0]
 8001eec:	430a      	orrs	r2, r1
 8001eee:	4313      	orrs	r3, r2
 8001ef0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001ef4:	697b      	ldr	r3, [r7, #20]
 8001ef6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001ef8:	bf00      	nop
 8001efa:	371c      	adds	r7, #28
 8001efc:	46bd      	mov	sp, r7
 8001efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f02:	4770      	bx	lr
 8001f04:	03fff000 	.word	0x03fff000

08001f08 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	b085      	sub	sp, #20
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
 8001f10:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	3360      	adds	r3, #96	; 0x60
 8001f16:	461a      	mov	r2, r3
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	009b      	lsls	r3, r3, #2
 8001f1c:	4413      	add	r3, r2
 8001f1e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001f28:	4618      	mov	r0, r3
 8001f2a:	3714      	adds	r7, #20
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f32:	4770      	bx	lr

08001f34 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001f34:	b480      	push	{r7}
 8001f36:	b087      	sub	sp, #28
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	60f8      	str	r0, [r7, #12]
 8001f3c:	60b9      	str	r1, [r7, #8]
 8001f3e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	3360      	adds	r3, #96	; 0x60
 8001f44:	461a      	mov	r2, r3
 8001f46:	68bb      	ldr	r3, [r7, #8]
 8001f48:	009b      	lsls	r3, r3, #2
 8001f4a:	4413      	add	r3, r2
 8001f4c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001f4e:	697b      	ldr	r3, [r7, #20]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	431a      	orrs	r2, r3
 8001f5a:	697b      	ldr	r3, [r7, #20]
 8001f5c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001f5e:	bf00      	nop
 8001f60:	371c      	adds	r7, #28
 8001f62:	46bd      	mov	sp, r7
 8001f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f68:	4770      	bx	lr

08001f6a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001f6a:	b480      	push	{r7}
 8001f6c:	b083      	sub	sp, #12
 8001f6e:	af00      	add	r7, sp, #0
 8001f70:	6078      	str	r0, [r7, #4]
 8001f72:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	695b      	ldr	r3, [r3, #20]
 8001f78:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	431a      	orrs	r2, r3
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	615a      	str	r2, [r3, #20]
}
 8001f84:	bf00      	nop
 8001f86:	370c      	adds	r7, #12
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8e:	4770      	bx	lr

08001f90 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001f90:	b480      	push	{r7}
 8001f92:	b083      	sub	sp, #12
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	68db      	ldr	r3, [r3, #12]
 8001f9c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d101      	bne.n	8001fa8 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	e000      	b.n	8001faa <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001fa8:	2300      	movs	r3, #0
}
 8001faa:	4618      	mov	r0, r3
 8001fac:	370c      	adds	r7, #12
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb4:	4770      	bx	lr

08001fb6 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001fb6:	b480      	push	{r7}
 8001fb8:	b087      	sub	sp, #28
 8001fba:	af00      	add	r7, sp, #0
 8001fbc:	60f8      	str	r0, [r7, #12]
 8001fbe:	60b9      	str	r1, [r7, #8]
 8001fc0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	3330      	adds	r3, #48	; 0x30
 8001fc6:	461a      	mov	r2, r3
 8001fc8:	68bb      	ldr	r3, [r7, #8]
 8001fca:	0a1b      	lsrs	r3, r3, #8
 8001fcc:	009b      	lsls	r3, r3, #2
 8001fce:	f003 030c 	and.w	r3, r3, #12
 8001fd2:	4413      	add	r3, r2
 8001fd4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001fd6:	697b      	ldr	r3, [r7, #20]
 8001fd8:	681a      	ldr	r2, [r3, #0]
 8001fda:	68bb      	ldr	r3, [r7, #8]
 8001fdc:	f003 031f 	and.w	r3, r3, #31
 8001fe0:	211f      	movs	r1, #31
 8001fe2:	fa01 f303 	lsl.w	r3, r1, r3
 8001fe6:	43db      	mvns	r3, r3
 8001fe8:	401a      	ands	r2, r3
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	0e9b      	lsrs	r3, r3, #26
 8001fee:	f003 011f 	and.w	r1, r3, #31
 8001ff2:	68bb      	ldr	r3, [r7, #8]
 8001ff4:	f003 031f 	and.w	r3, r3, #31
 8001ff8:	fa01 f303 	lsl.w	r3, r1, r3
 8001ffc:	431a      	orrs	r2, r3
 8001ffe:	697b      	ldr	r3, [r7, #20]
 8002000:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002002:	bf00      	nop
 8002004:	371c      	adds	r7, #28
 8002006:	46bd      	mov	sp, r7
 8002008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200c:	4770      	bx	lr

0800200e <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800200e:	b480      	push	{r7}
 8002010:	b087      	sub	sp, #28
 8002012:	af00      	add	r7, sp, #0
 8002014:	60f8      	str	r0, [r7, #12]
 8002016:	60b9      	str	r1, [r7, #8]
 8002018:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	3314      	adds	r3, #20
 800201e:	461a      	mov	r2, r3
 8002020:	68bb      	ldr	r3, [r7, #8]
 8002022:	0e5b      	lsrs	r3, r3, #25
 8002024:	009b      	lsls	r3, r3, #2
 8002026:	f003 0304 	and.w	r3, r3, #4
 800202a:	4413      	add	r3, r2
 800202c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800202e:	697b      	ldr	r3, [r7, #20]
 8002030:	681a      	ldr	r2, [r3, #0]
 8002032:	68bb      	ldr	r3, [r7, #8]
 8002034:	0d1b      	lsrs	r3, r3, #20
 8002036:	f003 031f 	and.w	r3, r3, #31
 800203a:	2107      	movs	r1, #7
 800203c:	fa01 f303 	lsl.w	r3, r1, r3
 8002040:	43db      	mvns	r3, r3
 8002042:	401a      	ands	r2, r3
 8002044:	68bb      	ldr	r3, [r7, #8]
 8002046:	0d1b      	lsrs	r3, r3, #20
 8002048:	f003 031f 	and.w	r3, r3, #31
 800204c:	6879      	ldr	r1, [r7, #4]
 800204e:	fa01 f303 	lsl.w	r3, r1, r3
 8002052:	431a      	orrs	r2, r3
 8002054:	697b      	ldr	r3, [r7, #20]
 8002056:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002058:	bf00      	nop
 800205a:	371c      	adds	r7, #28
 800205c:	46bd      	mov	sp, r7
 800205e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002062:	4770      	bx	lr

08002064 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002064:	b480      	push	{r7}
 8002066:	b085      	sub	sp, #20
 8002068:	af00      	add	r7, sp, #0
 800206a:	60f8      	str	r0, [r7, #12]
 800206c:	60b9      	str	r1, [r7, #8]
 800206e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002076:	68bb      	ldr	r3, [r7, #8]
 8002078:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800207c:	43db      	mvns	r3, r3
 800207e:	401a      	ands	r2, r3
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	f003 0318 	and.w	r3, r3, #24
 8002086:	4908      	ldr	r1, [pc, #32]	; (80020a8 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002088:	40d9      	lsrs	r1, r3
 800208a:	68bb      	ldr	r3, [r7, #8]
 800208c:	400b      	ands	r3, r1
 800208e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002092:	431a      	orrs	r2, r3
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800209a:	bf00      	nop
 800209c:	3714      	adds	r7, #20
 800209e:	46bd      	mov	sp, r7
 80020a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a4:	4770      	bx	lr
 80020a6:	bf00      	nop
 80020a8:	0007ffff 	.word	0x0007ffff

080020ac <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80020ac:	b480      	push	{r7}
 80020ae:	b083      	sub	sp, #12
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	689b      	ldr	r3, [r3, #8]
 80020b8:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80020bc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80020c0:	687a      	ldr	r2, [r7, #4]
 80020c2:	6093      	str	r3, [r2, #8]
}
 80020c4:	bf00      	nop
 80020c6:	370c      	adds	r7, #12
 80020c8:	46bd      	mov	sp, r7
 80020ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ce:	4770      	bx	lr

080020d0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80020d0:	b480      	push	{r7}
 80020d2:	b083      	sub	sp, #12
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	689b      	ldr	r3, [r3, #8]
 80020dc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80020e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80020e4:	d101      	bne.n	80020ea <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80020e6:	2301      	movs	r3, #1
 80020e8:	e000      	b.n	80020ec <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80020ea:	2300      	movs	r3, #0
}
 80020ec:	4618      	mov	r0, r3
 80020ee:	370c      	adds	r7, #12
 80020f0:	46bd      	mov	sp, r7
 80020f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f6:	4770      	bx	lr

080020f8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80020f8:	b480      	push	{r7}
 80020fa:	b083      	sub	sp, #12
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	689b      	ldr	r3, [r3, #8]
 8002104:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002108:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800210c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002114:	bf00      	nop
 8002116:	370c      	adds	r7, #12
 8002118:	46bd      	mov	sp, r7
 800211a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211e:	4770      	bx	lr

08002120 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002120:	b480      	push	{r7}
 8002122:	b083      	sub	sp, #12
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	689b      	ldr	r3, [r3, #8]
 800212c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002130:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002134:	d101      	bne.n	800213a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002136:	2301      	movs	r3, #1
 8002138:	e000      	b.n	800213c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800213a:	2300      	movs	r3, #0
}
 800213c:	4618      	mov	r0, r3
 800213e:	370c      	adds	r7, #12
 8002140:	46bd      	mov	sp, r7
 8002142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002146:	4770      	bx	lr

08002148 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002148:	b480      	push	{r7}
 800214a:	b083      	sub	sp, #12
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	689b      	ldr	r3, [r3, #8]
 8002154:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002158:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800215c:	f043 0201 	orr.w	r2, r3, #1
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002164:	bf00      	nop
 8002166:	370c      	adds	r7, #12
 8002168:	46bd      	mov	sp, r7
 800216a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216e:	4770      	bx	lr

08002170 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002170:	b480      	push	{r7}
 8002172:	b083      	sub	sp, #12
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	689b      	ldr	r3, [r3, #8]
 800217c:	f003 0301 	and.w	r3, r3, #1
 8002180:	2b01      	cmp	r3, #1
 8002182:	d101      	bne.n	8002188 <LL_ADC_IsEnabled+0x18>
 8002184:	2301      	movs	r3, #1
 8002186:	e000      	b.n	800218a <LL_ADC_IsEnabled+0x1a>
 8002188:	2300      	movs	r3, #0
}
 800218a:	4618      	mov	r0, r3
 800218c:	370c      	adds	r7, #12
 800218e:	46bd      	mov	sp, r7
 8002190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002194:	4770      	bx	lr

08002196 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002196:	b480      	push	{r7}
 8002198:	b083      	sub	sp, #12
 800219a:	af00      	add	r7, sp, #0
 800219c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	689b      	ldr	r3, [r3, #8]
 80021a2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80021a6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80021aa:	f043 0204 	orr.w	r2, r3, #4
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80021b2:	bf00      	nop
 80021b4:	370c      	adds	r7, #12
 80021b6:	46bd      	mov	sp, r7
 80021b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021bc:	4770      	bx	lr

080021be <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80021be:	b480      	push	{r7}
 80021c0:	b083      	sub	sp, #12
 80021c2:	af00      	add	r7, sp, #0
 80021c4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	689b      	ldr	r3, [r3, #8]
 80021ca:	f003 0304 	and.w	r3, r3, #4
 80021ce:	2b04      	cmp	r3, #4
 80021d0:	d101      	bne.n	80021d6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80021d2:	2301      	movs	r3, #1
 80021d4:	e000      	b.n	80021d8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80021d6:	2300      	movs	r3, #0
}
 80021d8:	4618      	mov	r0, r3
 80021da:	370c      	adds	r7, #12
 80021dc:	46bd      	mov	sp, r7
 80021de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e2:	4770      	bx	lr

080021e4 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80021e4:	b480      	push	{r7}
 80021e6:	b083      	sub	sp, #12
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	689b      	ldr	r3, [r3, #8]
 80021f0:	f003 0308 	and.w	r3, r3, #8
 80021f4:	2b08      	cmp	r3, #8
 80021f6:	d101      	bne.n	80021fc <LL_ADC_INJ_IsConversionOngoing+0x18>
 80021f8:	2301      	movs	r3, #1
 80021fa:	e000      	b.n	80021fe <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80021fc:	2300      	movs	r3, #0
}
 80021fe:	4618      	mov	r0, r3
 8002200:	370c      	adds	r7, #12
 8002202:	46bd      	mov	sp, r7
 8002204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002208:	4770      	bx	lr
	...

0800220c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b088      	sub	sp, #32
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002214:	2300      	movs	r3, #0
 8002216:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002218:	2300      	movs	r3, #0
 800221a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d101      	bne.n	8002226 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002222:	2301      	movs	r3, #1
 8002224:	e12f      	b.n	8002486 <HAL_ADC_Init+0x27a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	691b      	ldr	r3, [r3, #16]
 800222a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002230:	2b00      	cmp	r3, #0
 8002232:	d109      	bne.n	8002248 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002234:	6878      	ldr	r0, [r7, #4]
 8002236:	f7fe fda1 	bl	8000d7c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2200      	movs	r2, #0
 800223e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2200      	movs	r2, #0
 8002244:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4618      	mov	r0, r3
 800224e:	f7ff ff3f 	bl	80020d0 <LL_ADC_IsDeepPowerDownEnabled>
 8002252:	4603      	mov	r3, r0
 8002254:	2b00      	cmp	r3, #0
 8002256:	d004      	beq.n	8002262 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4618      	mov	r0, r3
 800225e:	f7ff ff25 	bl	80020ac <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4618      	mov	r0, r3
 8002268:	f7ff ff5a 	bl	8002120 <LL_ADC_IsInternalRegulatorEnabled>
 800226c:	4603      	mov	r3, r0
 800226e:	2b00      	cmp	r3, #0
 8002270:	d115      	bne.n	800229e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	4618      	mov	r0, r3
 8002278:	f7ff ff3e 	bl	80020f8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800227c:	4b84      	ldr	r3, [pc, #528]	; (8002490 <HAL_ADC_Init+0x284>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	099b      	lsrs	r3, r3, #6
 8002282:	4a84      	ldr	r2, [pc, #528]	; (8002494 <HAL_ADC_Init+0x288>)
 8002284:	fba2 2303 	umull	r2, r3, r2, r3
 8002288:	099b      	lsrs	r3, r3, #6
 800228a:	3301      	adds	r3, #1
 800228c:	005b      	lsls	r3, r3, #1
 800228e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002290:	e002      	b.n	8002298 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002292:	68bb      	ldr	r3, [r7, #8]
 8002294:	3b01      	subs	r3, #1
 8002296:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002298:	68bb      	ldr	r3, [r7, #8]
 800229a:	2b00      	cmp	r3, #0
 800229c:	d1f9      	bne.n	8002292 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4618      	mov	r0, r3
 80022a4:	f7ff ff3c 	bl	8002120 <LL_ADC_IsInternalRegulatorEnabled>
 80022a8:	4603      	mov	r3, r0
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d10d      	bne.n	80022ca <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022b2:	f043 0210 	orr.w	r2, r3, #16
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022be:	f043 0201 	orr.w	r2, r3, #1
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80022c6:	2301      	movs	r3, #1
 80022c8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	4618      	mov	r0, r3
 80022d0:	f7ff ff75 	bl	80021be <LL_ADC_REG_IsConversionOngoing>
 80022d4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022da:	f003 0310 	and.w	r3, r3, #16
 80022de:	2b00      	cmp	r3, #0
 80022e0:	f040 80c8 	bne.w	8002474 <HAL_ADC_Init+0x268>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80022e4:	697b      	ldr	r3, [r7, #20]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	f040 80c4 	bne.w	8002474 <HAL_ADC_Init+0x268>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022f0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80022f4:	f043 0202 	orr.w	r2, r3, #2
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4618      	mov	r0, r3
 8002302:	f7ff ff35 	bl	8002170 <LL_ADC_IsEnabled>
 8002306:	4603      	mov	r3, r0
 8002308:	2b00      	cmp	r3, #0
 800230a:	d10b      	bne.n	8002324 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800230c:	4862      	ldr	r0, [pc, #392]	; (8002498 <HAL_ADC_Init+0x28c>)
 800230e:	f7ff ff2f 	bl	8002170 <LL_ADC_IsEnabled>
 8002312:	4603      	mov	r3, r0
 8002314:	2b00      	cmp	r3, #0
 8002316:	d105      	bne.n	8002324 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	4619      	mov	r1, r3
 800231e:	485f      	ldr	r0, [pc, #380]	; (800249c <HAL_ADC_Init+0x290>)
 8002320:	f7ff fd9a 	bl	8001e58 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	7e5b      	ldrb	r3, [r3, #25]
 8002328:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800232e:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002334:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800233a:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002342:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002344:	4313      	orrs	r3, r2
 8002346:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800234e:	2b01      	cmp	r3, #1
 8002350:	d106      	bne.n	8002360 <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002356:	3b01      	subs	r3, #1
 8002358:	045b      	lsls	r3, r3, #17
 800235a:	69ba      	ldr	r2, [r7, #24]
 800235c:	4313      	orrs	r3, r2
 800235e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002364:	2b00      	cmp	r3, #0
 8002366:	d009      	beq.n	800237c <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800236c:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002374:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002376:	69ba      	ldr	r2, [r7, #24]
 8002378:	4313      	orrs	r3, r2
 800237a:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	68da      	ldr	r2, [r3, #12]
 8002382:	4b47      	ldr	r3, [pc, #284]	; (80024a0 <HAL_ADC_Init+0x294>)
 8002384:	4013      	ands	r3, r2
 8002386:	687a      	ldr	r2, [r7, #4]
 8002388:	6812      	ldr	r2, [r2, #0]
 800238a:	69b9      	ldr	r1, [r7, #24]
 800238c:	430b      	orrs	r3, r1
 800238e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4618      	mov	r0, r3
 8002396:	f7ff ff12 	bl	80021be <LL_ADC_REG_IsConversionOngoing>
 800239a:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4618      	mov	r0, r3
 80023a2:	f7ff ff1f 	bl	80021e4 <LL_ADC_INJ_IsConversionOngoing>
 80023a6:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80023a8:	693b      	ldr	r3, [r7, #16]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d140      	bne.n	8002430 <HAL_ADC_Init+0x224>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d13d      	bne.n	8002430 <HAL_ADC_Init+0x224>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	7e1b      	ldrb	r3, [r3, #24]
 80023bc:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80023be:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80023c6:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80023c8:	4313      	orrs	r3, r2
 80023ca:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	68db      	ldr	r3, [r3, #12]
 80023d2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80023d6:	f023 0306 	bic.w	r3, r3, #6
 80023da:	687a      	ldr	r2, [r7, #4]
 80023dc:	6812      	ldr	r2, [r2, #0]
 80023de:	69b9      	ldr	r1, [r7, #24]
 80023e0:	430b      	orrs	r3, r1
 80023e2:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80023ea:	2b01      	cmp	r3, #1
 80023ec:	d118      	bne.n	8002420 <HAL_ADC_Init+0x214>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	691b      	ldr	r3, [r3, #16]
 80023f4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80023f8:	f023 0304 	bic.w	r3, r3, #4
 80023fc:	687a      	ldr	r2, [r7, #4]
 80023fe:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8002400:	687a      	ldr	r2, [r7, #4]
 8002402:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002404:	4311      	orrs	r1, r2
 8002406:	687a      	ldr	r2, [r7, #4]
 8002408:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800240a:	4311      	orrs	r1, r2
 800240c:	687a      	ldr	r2, [r7, #4]
 800240e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002410:	430a      	orrs	r2, r1
 8002412:	431a      	orrs	r2, r3
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f042 0201 	orr.w	r2, r2, #1
 800241c:	611a      	str	r2, [r3, #16]
 800241e:	e007      	b.n	8002430 <HAL_ADC_Init+0x224>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	691a      	ldr	r2, [r3, #16]
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f022 0201 	bic.w	r2, r2, #1
 800242e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	691b      	ldr	r3, [r3, #16]
 8002434:	2b01      	cmp	r3, #1
 8002436:	d10c      	bne.n	8002452 <HAL_ADC_Init+0x246>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800243e:	f023 010f 	bic.w	r1, r3, #15
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	69db      	ldr	r3, [r3, #28]
 8002446:	1e5a      	subs	r2, r3, #1
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	430a      	orrs	r2, r1
 800244e:	631a      	str	r2, [r3, #48]	; 0x30
 8002450:	e007      	b.n	8002462 <HAL_ADC_Init+0x256>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f022 020f 	bic.w	r2, r2, #15
 8002460:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002466:	f023 0303 	bic.w	r3, r3, #3
 800246a:	f043 0201 	orr.w	r2, r3, #1
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	659a      	str	r2, [r3, #88]	; 0x58
 8002472:	e007      	b.n	8002484 <HAL_ADC_Init+0x278>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002478:	f043 0210 	orr.w	r2, r3, #16
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002480:	2301      	movs	r3, #1
 8002482:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002484:	7ffb      	ldrb	r3, [r7, #31]
}
 8002486:	4618      	mov	r0, r3
 8002488:	3720      	adds	r7, #32
 800248a:	46bd      	mov	sp, r7
 800248c:	bd80      	pop	{r7, pc}
 800248e:	bf00      	nop
 8002490:	20000004 	.word	0x20000004
 8002494:	053e2d63 	.word	0x053e2d63
 8002498:	50040000 	.word	0x50040000
 800249c:	50040300 	.word	0x50040300
 80024a0:	fff0c007 	.word	0xfff0c007

080024a4 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b084      	sub	sp, #16
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4618      	mov	r0, r3
 80024b2:	f7ff fe84 	bl	80021be <LL_ADC_REG_IsConversionOngoing>
 80024b6:	4603      	mov	r3, r0
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d14f      	bne.n	800255c <HAL_ADC_Start+0xb8>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80024c2:	2b01      	cmp	r3, #1
 80024c4:	d101      	bne.n	80024ca <HAL_ADC_Start+0x26>
 80024c6:	2302      	movs	r3, #2
 80024c8:	e04b      	b.n	8002562 <HAL_ADC_Start+0xbe>
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	2201      	movs	r2, #1
 80024ce:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80024d2:	6878      	ldr	r0, [r7, #4]
 80024d4:	f000 fce2 	bl	8002e9c <ADC_Enable>
 80024d8:	4603      	mov	r3, r0
 80024da:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80024dc:	7bfb      	ldrb	r3, [r7, #15]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d137      	bne.n	8002552 <HAL_ADC_Start+0xae>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024e6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80024ea:	f023 0301 	bic.w	r3, r3, #1
 80024ee:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	659a      	str	r2, [r3, #88]	; 0x58
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024fa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80024fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002502:	d106      	bne.n	8002512 <HAL_ADC_Start+0x6e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002508:	f023 0206 	bic.w	r2, r3, #6
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	65da      	str	r2, [r3, #92]	; 0x5c
 8002510:	e002      	b.n	8002518 <HAL_ADC_Start+0x74>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	2200      	movs	r2, #0
 8002516:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	221c      	movs	r2, #28
 800251e:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2200      	movs	r2, #0
 8002524:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }

      }
#else
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	68db      	ldr	r3, [r3, #12]
 800252e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002532:	2b00      	cmp	r3, #0
 8002534:	d007      	beq.n	8002546 <HAL_ADC_Start+0xa2>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800253a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800253e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	4618      	mov	r0, r3
 800254c:	f7ff fe23 	bl	8002196 <LL_ADC_REG_StartConversion>
 8002550:	e006      	b.n	8002560 <HAL_ADC_Start+0xbc>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	2200      	movs	r2, #0
 8002556:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 800255a:	e001      	b.n	8002560 <HAL_ADC_Start+0xbc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800255c:	2302      	movs	r3, #2
 800255e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 8002560:	7bfb      	ldrb	r3, [r7, #15]
}
 8002562:	4618      	mov	r0, r3
 8002564:	3710      	adds	r7, #16
 8002566:	46bd      	mov	sp, r7
 8002568:	bd80      	pop	{r7, pc}

0800256a <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800256a:	b580      	push	{r7, lr}
 800256c:	b086      	sub	sp, #24
 800256e:	af00      	add	r7, sp, #0
 8002570:	6078      	str	r0, [r7, #4]
 8002572:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	695b      	ldr	r3, [r3, #20]
 8002578:	2b08      	cmp	r3, #8
 800257a:	d102      	bne.n	8002582 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 800257c:	2308      	movs	r3, #8
 800257e:	617b      	str	r3, [r7, #20]
 8002580:	e010      	b.n	80025a4 <HAL_ADC_PollForConversion+0x3a>
        tmp_Flag_End = (ADC_FLAG_EOC);
      }
    }
#else
    /* Check ADC DMA mode */
    if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	68db      	ldr	r3, [r3, #12]
 8002588:	f003 0301 	and.w	r3, r3, #1
 800258c:	2b00      	cmp	r3, #0
 800258e:	d007      	beq.n	80025a0 <HAL_ADC_PollForConversion+0x36>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002594:	f043 0220 	orr.w	r2, r3, #32
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 800259c:	2301      	movs	r3, #1
 800259e:	e06f      	b.n	8002680 <HAL_ADC_PollForConversion+0x116>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 80025a0:	2304      	movs	r3, #4
 80025a2:	617b      	str	r3, [r7, #20]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80025a4:	f7ff fc4c 	bl	8001e40 <HAL_GetTick>
 80025a8:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80025aa:	e021      	b.n	80025f0 <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025b2:	d01d      	beq.n	80025f0 <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80025b4:	f7ff fc44 	bl	8001e40 <HAL_GetTick>
 80025b8:	4602      	mov	r2, r0
 80025ba:	693b      	ldr	r3, [r7, #16]
 80025bc:	1ad3      	subs	r3, r2, r3
 80025be:	683a      	ldr	r2, [r7, #0]
 80025c0:	429a      	cmp	r2, r3
 80025c2:	d302      	bcc.n	80025ca <HAL_ADC_PollForConversion+0x60>
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d112      	bne.n	80025f0 <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	681a      	ldr	r2, [r3, #0]
 80025d0:	697b      	ldr	r3, [r7, #20]
 80025d2:	4013      	ands	r3, r2
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d10b      	bne.n	80025f0 <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025dc:	f043 0204 	orr.w	r2, r3, #4
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	659a      	str	r2, [r3, #88]	; 0x58

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2200      	movs	r2, #0
 80025e8:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

          return HAL_TIMEOUT;
 80025ec:	2303      	movs	r3, #3
 80025ee:	e047      	b.n	8002680 <HAL_ADC_PollForConversion+0x116>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	681a      	ldr	r2, [r3, #0]
 80025f6:	697b      	ldr	r3, [r7, #20]
 80025f8:	4013      	ands	r3, r2
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d0d6      	beq.n	80025ac <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002602:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	659a      	str	r2, [r3, #88]	; 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4618      	mov	r0, r3
 8002610:	f7ff fcbe 	bl	8001f90 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002614:	4603      	mov	r3, r0
 8002616:	2b00      	cmp	r3, #0
 8002618:	d01c      	beq.n	8002654 <HAL_ADC_PollForConversion+0xea>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	7e5b      	ldrb	r3, [r3, #25]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d118      	bne.n	8002654 <HAL_ADC_PollForConversion+0xea>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f003 0308 	and.w	r3, r3, #8
 800262c:	2b08      	cmp	r3, #8
 800262e:	d111      	bne.n	8002654 <HAL_ADC_PollForConversion+0xea>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002634:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	659a      	str	r2, [r3, #88]	; 0x58

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002640:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002644:	2b00      	cmp	r3, #0
 8002646:	d105      	bne.n	8002654 <HAL_ADC_PollForConversion+0xea>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800264c:	f043 0201 	orr.w	r2, r3, #1
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	659a      	str	r2, [r3, #88]	; 0x58
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
  }
#else
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	68db      	ldr	r3, [r3, #12]
 800265a:	60fb      	str	r3, [r7, #12]
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 800265c:	697b      	ldr	r3, [r7, #20]
 800265e:	2b08      	cmp	r3, #8
 8002660:	d104      	bne.n	800266c <HAL_ADC_PollForConversion+0x102>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	2208      	movs	r2, #8
 8002668:	601a      	str	r2, [r3, #0]
 800266a:	e008      	b.n	800267e <HAL_ADC_PollForConversion+0x114>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002672:	2b00      	cmp	r3, #0
 8002674:	d103      	bne.n	800267e <HAL_ADC_PollForConversion+0x114>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	220c      	movs	r2, #12
 800267c:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 800267e:	2300      	movs	r3, #0
}
 8002680:	4618      	mov	r0, r3
 8002682:	3718      	adds	r7, #24
 8002684:	46bd      	mov	sp, r7
 8002686:	bd80      	pop	{r7, pc}

08002688 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002688:	b480      	push	{r7}
 800268a:	b083      	sub	sp, #12
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002696:	4618      	mov	r0, r3
 8002698:	370c      	adds	r7, #12
 800269a:	46bd      	mov	sp, r7
 800269c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a0:	4770      	bx	lr
	...

080026a4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b0b6      	sub	sp, #216	; 0xd8
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
 80026ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80026ae:	2300      	movs	r3, #0
 80026b0:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80026b4:	2300      	movs	r3, #0
 80026b6:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80026be:	2b01      	cmp	r3, #1
 80026c0:	d101      	bne.n	80026c6 <HAL_ADC_ConfigChannel+0x22>
 80026c2:	2302      	movs	r3, #2
 80026c4:	e3d5      	b.n	8002e72 <HAL_ADC_ConfigChannel+0x7ce>
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2201      	movs	r2, #1
 80026ca:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	4618      	mov	r0, r3
 80026d4:	f7ff fd73 	bl	80021be <LL_ADC_REG_IsConversionOngoing>
 80026d8:	4603      	mov	r3, r0
 80026da:	2b00      	cmp	r3, #0
 80026dc:	f040 83ba 	bne.w	8002e54 <HAL_ADC_ConfigChannel+0x7b0>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	2b05      	cmp	r3, #5
 80026e6:	d824      	bhi.n	8002732 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	3b02      	subs	r3, #2
 80026ee:	2b03      	cmp	r3, #3
 80026f0:	d81b      	bhi.n	800272a <HAL_ADC_ConfigChannel+0x86>
 80026f2:	a201      	add	r2, pc, #4	; (adr r2, 80026f8 <HAL_ADC_ConfigChannel+0x54>)
 80026f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026f8:	08002709 	.word	0x08002709
 80026fc:	08002711 	.word	0x08002711
 8002700:	08002719 	.word	0x08002719
 8002704:	08002721 	.word	0x08002721
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	220c      	movs	r2, #12
 800270c:	605a      	str	r2, [r3, #4]
          break;
 800270e:	e011      	b.n	8002734 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	2212      	movs	r2, #18
 8002714:	605a      	str	r2, [r3, #4]
          break;
 8002716:	e00d      	b.n	8002734 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	2218      	movs	r2, #24
 800271c:	605a      	str	r2, [r3, #4]
          break;
 800271e:	e009      	b.n	8002734 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002726:	605a      	str	r2, [r3, #4]
          break;
 8002728:	e004      	b.n	8002734 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	2206      	movs	r2, #6
 800272e:	605a      	str	r2, [r3, #4]
          break;
 8002730:	e000      	b.n	8002734 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8002732:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6818      	ldr	r0, [r3, #0]
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	6859      	ldr	r1, [r3, #4]
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	461a      	mov	r2, r3
 8002742:	f7ff fc38 	bl	8001fb6 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4618      	mov	r0, r3
 800274c:	f7ff fd37 	bl	80021be <LL_ADC_REG_IsConversionOngoing>
 8002750:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4618      	mov	r0, r3
 800275a:	f7ff fd43 	bl	80021e4 <LL_ADC_INJ_IsConversionOngoing>
 800275e:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002762:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002766:	2b00      	cmp	r3, #0
 8002768:	f040 81c1 	bne.w	8002aee <HAL_ADC_ConfigChannel+0x44a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800276c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002770:	2b00      	cmp	r3, #0
 8002772:	f040 81bc 	bne.w	8002aee <HAL_ADC_ConfigChannel+0x44a>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	689b      	ldr	r3, [r3, #8]
 800277a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800277e:	d10f      	bne.n	80027a0 <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6818      	ldr	r0, [r3, #0]
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	2200      	movs	r2, #0
 800278a:	4619      	mov	r1, r3
 800278c:	f7ff fc3f 	bl	800200e <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8002798:	4618      	mov	r0, r3
 800279a:	f7ff fbe6 	bl	8001f6a <LL_ADC_SetSamplingTimeCommonConfig>
 800279e:	e00e      	b.n	80027be <HAL_ADC_ConfigChannel+0x11a>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6818      	ldr	r0, [r3, #0]
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	6819      	ldr	r1, [r3, #0]
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	689b      	ldr	r3, [r3, #8]
 80027ac:	461a      	mov	r2, r3
 80027ae:	f7ff fc2e 	bl	800200e <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	2100      	movs	r1, #0
 80027b8:	4618      	mov	r0, r3
 80027ba:	f7ff fbd6 	bl	8001f6a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	695a      	ldr	r2, [r3, #20]
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	68db      	ldr	r3, [r3, #12]
 80027c8:	08db      	lsrs	r3, r3, #3
 80027ca:	f003 0303 	and.w	r3, r3, #3
 80027ce:	005b      	lsls	r3, r3, #1
 80027d0:	fa02 f303 	lsl.w	r3, r2, r3
 80027d4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	691b      	ldr	r3, [r3, #16]
 80027dc:	2b04      	cmp	r3, #4
 80027de:	d00a      	beq.n	80027f6 <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6818      	ldr	r0, [r3, #0]
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	6919      	ldr	r1, [r3, #16]
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	681a      	ldr	r2, [r3, #0]
 80027ec:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80027f0:	f7ff fb66 	bl	8001ec0 <LL_ADC_SetOffset>
 80027f4:	e17b      	b.n	8002aee <HAL_ADC_ConfigChannel+0x44a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	2100      	movs	r1, #0
 80027fc:	4618      	mov	r0, r3
 80027fe:	f7ff fb83 	bl	8001f08 <LL_ADC_GetOffsetChannel>
 8002802:	4603      	mov	r3, r0
 8002804:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002808:	2b00      	cmp	r3, #0
 800280a:	d10a      	bne.n	8002822 <HAL_ADC_ConfigChannel+0x17e>
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	2100      	movs	r1, #0
 8002812:	4618      	mov	r0, r3
 8002814:	f7ff fb78 	bl	8001f08 <LL_ADC_GetOffsetChannel>
 8002818:	4603      	mov	r3, r0
 800281a:	0e9b      	lsrs	r3, r3, #26
 800281c:	f003 021f 	and.w	r2, r3, #31
 8002820:	e01e      	b.n	8002860 <HAL_ADC_ConfigChannel+0x1bc>
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	2100      	movs	r1, #0
 8002828:	4618      	mov	r0, r3
 800282a:	f7ff fb6d 	bl	8001f08 <LL_ADC_GetOffsetChannel>
 800282e:	4603      	mov	r3, r0
 8002830:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002834:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002838:	fa93 f3a3 	rbit	r3, r3
 800283c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002840:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002844:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002848:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800284c:	2b00      	cmp	r3, #0
 800284e:	d101      	bne.n	8002854 <HAL_ADC_ConfigChannel+0x1b0>
  {
    return 32U;
 8002850:	2320      	movs	r3, #32
 8002852:	e004      	b.n	800285e <HAL_ADC_ConfigChannel+0x1ba>
  }
  return __builtin_clz(value);
 8002854:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002858:	fab3 f383 	clz	r3, r3
 800285c:	b2db      	uxtb	r3, r3
 800285e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002868:	2b00      	cmp	r3, #0
 800286a:	d105      	bne.n	8002878 <HAL_ADC_ConfigChannel+0x1d4>
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	0e9b      	lsrs	r3, r3, #26
 8002872:	f003 031f 	and.w	r3, r3, #31
 8002876:	e018      	b.n	80028aa <HAL_ADC_ConfigChannel+0x206>
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002880:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002884:	fa93 f3a3 	rbit	r3, r3
 8002888:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 800288c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002890:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8002894:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002898:	2b00      	cmp	r3, #0
 800289a:	d101      	bne.n	80028a0 <HAL_ADC_ConfigChannel+0x1fc>
    return 32U;
 800289c:	2320      	movs	r3, #32
 800289e:	e004      	b.n	80028aa <HAL_ADC_ConfigChannel+0x206>
  return __builtin_clz(value);
 80028a0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80028a4:	fab3 f383 	clz	r3, r3
 80028a8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80028aa:	429a      	cmp	r2, r3
 80028ac:	d106      	bne.n	80028bc <HAL_ADC_ConfigChannel+0x218>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	2200      	movs	r2, #0
 80028b4:	2100      	movs	r1, #0
 80028b6:	4618      	mov	r0, r3
 80028b8:	f7ff fb3c 	bl	8001f34 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	2101      	movs	r1, #1
 80028c2:	4618      	mov	r0, r3
 80028c4:	f7ff fb20 	bl	8001f08 <LL_ADC_GetOffsetChannel>
 80028c8:	4603      	mov	r3, r0
 80028ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d10a      	bne.n	80028e8 <HAL_ADC_ConfigChannel+0x244>
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	2101      	movs	r1, #1
 80028d8:	4618      	mov	r0, r3
 80028da:	f7ff fb15 	bl	8001f08 <LL_ADC_GetOffsetChannel>
 80028de:	4603      	mov	r3, r0
 80028e0:	0e9b      	lsrs	r3, r3, #26
 80028e2:	f003 021f 	and.w	r2, r3, #31
 80028e6:	e01e      	b.n	8002926 <HAL_ADC_ConfigChannel+0x282>
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	2101      	movs	r1, #1
 80028ee:	4618      	mov	r0, r3
 80028f0:	f7ff fb0a 	bl	8001f08 <LL_ADC_GetOffsetChannel>
 80028f4:	4603      	mov	r3, r0
 80028f6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028fa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80028fe:	fa93 f3a3 	rbit	r3, r3
 8002902:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002906:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800290a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 800290e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002912:	2b00      	cmp	r3, #0
 8002914:	d101      	bne.n	800291a <HAL_ADC_ConfigChannel+0x276>
    return 32U;
 8002916:	2320      	movs	r3, #32
 8002918:	e004      	b.n	8002924 <HAL_ADC_ConfigChannel+0x280>
  return __builtin_clz(value);
 800291a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800291e:	fab3 f383 	clz	r3, r3
 8002922:	b2db      	uxtb	r3, r3
 8002924:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800292e:	2b00      	cmp	r3, #0
 8002930:	d105      	bne.n	800293e <HAL_ADC_ConfigChannel+0x29a>
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	0e9b      	lsrs	r3, r3, #26
 8002938:	f003 031f 	and.w	r3, r3, #31
 800293c:	e018      	b.n	8002970 <HAL_ADC_ConfigChannel+0x2cc>
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002946:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800294a:	fa93 f3a3 	rbit	r3, r3
 800294e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002952:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002956:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 800295a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800295e:	2b00      	cmp	r3, #0
 8002960:	d101      	bne.n	8002966 <HAL_ADC_ConfigChannel+0x2c2>
    return 32U;
 8002962:	2320      	movs	r3, #32
 8002964:	e004      	b.n	8002970 <HAL_ADC_ConfigChannel+0x2cc>
  return __builtin_clz(value);
 8002966:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800296a:	fab3 f383 	clz	r3, r3
 800296e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002970:	429a      	cmp	r2, r3
 8002972:	d106      	bne.n	8002982 <HAL_ADC_ConfigChannel+0x2de>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	2200      	movs	r2, #0
 800297a:	2101      	movs	r1, #1
 800297c:	4618      	mov	r0, r3
 800297e:	f7ff fad9 	bl	8001f34 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	2102      	movs	r1, #2
 8002988:	4618      	mov	r0, r3
 800298a:	f7ff fabd 	bl	8001f08 <LL_ADC_GetOffsetChannel>
 800298e:	4603      	mov	r3, r0
 8002990:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002994:	2b00      	cmp	r3, #0
 8002996:	d10a      	bne.n	80029ae <HAL_ADC_ConfigChannel+0x30a>
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	2102      	movs	r1, #2
 800299e:	4618      	mov	r0, r3
 80029a0:	f7ff fab2 	bl	8001f08 <LL_ADC_GetOffsetChannel>
 80029a4:	4603      	mov	r3, r0
 80029a6:	0e9b      	lsrs	r3, r3, #26
 80029a8:	f003 021f 	and.w	r2, r3, #31
 80029ac:	e01e      	b.n	80029ec <HAL_ADC_ConfigChannel+0x348>
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	2102      	movs	r1, #2
 80029b4:	4618      	mov	r0, r3
 80029b6:	f7ff faa7 	bl	8001f08 <LL_ADC_GetOffsetChannel>
 80029ba:	4603      	mov	r3, r0
 80029bc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029c0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80029c4:	fa93 f3a3 	rbit	r3, r3
 80029c8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80029cc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80029d0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80029d4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d101      	bne.n	80029e0 <HAL_ADC_ConfigChannel+0x33c>
    return 32U;
 80029dc:	2320      	movs	r3, #32
 80029de:	e004      	b.n	80029ea <HAL_ADC_ConfigChannel+0x346>
  return __builtin_clz(value);
 80029e0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80029e4:	fab3 f383 	clz	r3, r3
 80029e8:	b2db      	uxtb	r3, r3
 80029ea:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d105      	bne.n	8002a04 <HAL_ADC_ConfigChannel+0x360>
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	0e9b      	lsrs	r3, r3, #26
 80029fe:	f003 031f 	and.w	r3, r3, #31
 8002a02:	e016      	b.n	8002a32 <HAL_ADC_ConfigChannel+0x38e>
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a0c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002a10:	fa93 f3a3 	rbit	r3, r3
 8002a14:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002a16:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002a18:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002a1c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d101      	bne.n	8002a28 <HAL_ADC_ConfigChannel+0x384>
    return 32U;
 8002a24:	2320      	movs	r3, #32
 8002a26:	e004      	b.n	8002a32 <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 8002a28:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002a2c:	fab3 f383 	clz	r3, r3
 8002a30:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002a32:	429a      	cmp	r2, r3
 8002a34:	d106      	bne.n	8002a44 <HAL_ADC_ConfigChannel+0x3a0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	2102      	movs	r1, #2
 8002a3e:	4618      	mov	r0, r3
 8002a40:	f7ff fa78 	bl	8001f34 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	2103      	movs	r1, #3
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	f7ff fa5c 	bl	8001f08 <LL_ADC_GetOffsetChannel>
 8002a50:	4603      	mov	r3, r0
 8002a52:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d10a      	bne.n	8002a70 <HAL_ADC_ConfigChannel+0x3cc>
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	2103      	movs	r1, #3
 8002a60:	4618      	mov	r0, r3
 8002a62:	f7ff fa51 	bl	8001f08 <LL_ADC_GetOffsetChannel>
 8002a66:	4603      	mov	r3, r0
 8002a68:	0e9b      	lsrs	r3, r3, #26
 8002a6a:	f003 021f 	and.w	r2, r3, #31
 8002a6e:	e017      	b.n	8002aa0 <HAL_ADC_ConfigChannel+0x3fc>
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	2103      	movs	r1, #3
 8002a76:	4618      	mov	r0, r3
 8002a78:	f7ff fa46 	bl	8001f08 <LL_ADC_GetOffsetChannel>
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a80:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a82:	fa93 f3a3 	rbit	r3, r3
 8002a86:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002a88:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002a8a:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002a8c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d101      	bne.n	8002a96 <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 8002a92:	2320      	movs	r3, #32
 8002a94:	e003      	b.n	8002a9e <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 8002a96:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002a98:	fab3 f383 	clz	r3, r3
 8002a9c:	b2db      	uxtb	r3, r3
 8002a9e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d105      	bne.n	8002ab8 <HAL_ADC_ConfigChannel+0x414>
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	0e9b      	lsrs	r3, r3, #26
 8002ab2:	f003 031f 	and.w	r3, r3, #31
 8002ab6:	e011      	b.n	8002adc <HAL_ADC_ConfigChannel+0x438>
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002abe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002ac0:	fa93 f3a3 	rbit	r3, r3
 8002ac4:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002ac6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002ac8:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002aca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d101      	bne.n	8002ad4 <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 8002ad0:	2320      	movs	r3, #32
 8002ad2:	e003      	b.n	8002adc <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 8002ad4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ad6:	fab3 f383 	clz	r3, r3
 8002ada:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002adc:	429a      	cmp	r2, r3
 8002ade:	d106      	bne.n	8002aee <HAL_ADC_ConfigChannel+0x44a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	2103      	movs	r1, #3
 8002ae8:	4618      	mov	r0, r3
 8002aea:	f7ff fa23 	bl	8001f34 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4618      	mov	r0, r3
 8002af4:	f7ff fb3c 	bl	8002170 <LL_ADC_IsEnabled>
 8002af8:	4603      	mov	r3, r0
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	f040 8140 	bne.w	8002d80 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6818      	ldr	r0, [r3, #0]
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	6819      	ldr	r1, [r3, #0]
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	68db      	ldr	r3, [r3, #12]
 8002b0c:	461a      	mov	r2, r3
 8002b0e:	f7ff faa9 	bl	8002064 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	68db      	ldr	r3, [r3, #12]
 8002b16:	4a8f      	ldr	r2, [pc, #572]	; (8002d54 <HAL_ADC_ConfigChannel+0x6b0>)
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	f040 8131 	bne.w	8002d80 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d10b      	bne.n	8002b46 <HAL_ADC_ConfigChannel+0x4a2>
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	0e9b      	lsrs	r3, r3, #26
 8002b34:	3301      	adds	r3, #1
 8002b36:	f003 031f 	and.w	r3, r3, #31
 8002b3a:	2b09      	cmp	r3, #9
 8002b3c:	bf94      	ite	ls
 8002b3e:	2301      	movls	r3, #1
 8002b40:	2300      	movhi	r3, #0
 8002b42:	b2db      	uxtb	r3, r3
 8002b44:	e019      	b.n	8002b7a <HAL_ADC_ConfigChannel+0x4d6>
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b4c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b4e:	fa93 f3a3 	rbit	r3, r3
 8002b52:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002b54:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002b56:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002b58:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d101      	bne.n	8002b62 <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 8002b5e:	2320      	movs	r3, #32
 8002b60:	e003      	b.n	8002b6a <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 8002b62:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002b64:	fab3 f383 	clz	r3, r3
 8002b68:	b2db      	uxtb	r3, r3
 8002b6a:	3301      	adds	r3, #1
 8002b6c:	f003 031f 	and.w	r3, r3, #31
 8002b70:	2b09      	cmp	r3, #9
 8002b72:	bf94      	ite	ls
 8002b74:	2301      	movls	r3, #1
 8002b76:	2300      	movhi	r3, #0
 8002b78:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d079      	beq.n	8002c72 <HAL_ADC_ConfigChannel+0x5ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d107      	bne.n	8002b9a <HAL_ADC_ConfigChannel+0x4f6>
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	0e9b      	lsrs	r3, r3, #26
 8002b90:	3301      	adds	r3, #1
 8002b92:	069b      	lsls	r3, r3, #26
 8002b94:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002b98:	e015      	b.n	8002bc6 <HAL_ADC_ConfigChannel+0x522>
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ba0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ba2:	fa93 f3a3 	rbit	r3, r3
 8002ba6:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002ba8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002baa:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002bac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d101      	bne.n	8002bb6 <HAL_ADC_ConfigChannel+0x512>
    return 32U;
 8002bb2:	2320      	movs	r3, #32
 8002bb4:	e003      	b.n	8002bbe <HAL_ADC_ConfigChannel+0x51a>
  return __builtin_clz(value);
 8002bb6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002bb8:	fab3 f383 	clz	r3, r3
 8002bbc:	b2db      	uxtb	r3, r3
 8002bbe:	3301      	adds	r3, #1
 8002bc0:	069b      	lsls	r3, r3, #26
 8002bc2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d109      	bne.n	8002be6 <HAL_ADC_ConfigChannel+0x542>
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	0e9b      	lsrs	r3, r3, #26
 8002bd8:	3301      	adds	r3, #1
 8002bda:	f003 031f 	and.w	r3, r3, #31
 8002bde:	2101      	movs	r1, #1
 8002be0:	fa01 f303 	lsl.w	r3, r1, r3
 8002be4:	e017      	b.n	8002c16 <HAL_ADC_ConfigChannel+0x572>
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002bee:	fa93 f3a3 	rbit	r3, r3
 8002bf2:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002bf4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002bf6:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002bf8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d101      	bne.n	8002c02 <HAL_ADC_ConfigChannel+0x55e>
    return 32U;
 8002bfe:	2320      	movs	r3, #32
 8002c00:	e003      	b.n	8002c0a <HAL_ADC_ConfigChannel+0x566>
  return __builtin_clz(value);
 8002c02:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c04:	fab3 f383 	clz	r3, r3
 8002c08:	b2db      	uxtb	r3, r3
 8002c0a:	3301      	adds	r3, #1
 8002c0c:	f003 031f 	and.w	r3, r3, #31
 8002c10:	2101      	movs	r1, #1
 8002c12:	fa01 f303 	lsl.w	r3, r1, r3
 8002c16:	ea42 0103 	orr.w	r1, r2, r3
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d10a      	bne.n	8002c3c <HAL_ADC_ConfigChannel+0x598>
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	0e9b      	lsrs	r3, r3, #26
 8002c2c:	3301      	adds	r3, #1
 8002c2e:	f003 021f 	and.w	r2, r3, #31
 8002c32:	4613      	mov	r3, r2
 8002c34:	005b      	lsls	r3, r3, #1
 8002c36:	4413      	add	r3, r2
 8002c38:	051b      	lsls	r3, r3, #20
 8002c3a:	e018      	b.n	8002c6e <HAL_ADC_ConfigChannel+0x5ca>
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c44:	fa93 f3a3 	rbit	r3, r3
 8002c48:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002c4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c4c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002c4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d101      	bne.n	8002c58 <HAL_ADC_ConfigChannel+0x5b4>
    return 32U;
 8002c54:	2320      	movs	r3, #32
 8002c56:	e003      	b.n	8002c60 <HAL_ADC_ConfigChannel+0x5bc>
  return __builtin_clz(value);
 8002c58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c5a:	fab3 f383 	clz	r3, r3
 8002c5e:	b2db      	uxtb	r3, r3
 8002c60:	3301      	adds	r3, #1
 8002c62:	f003 021f 	and.w	r2, r3, #31
 8002c66:	4613      	mov	r3, r2
 8002c68:	005b      	lsls	r3, r3, #1
 8002c6a:	4413      	add	r3, r2
 8002c6c:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002c6e:	430b      	orrs	r3, r1
 8002c70:	e081      	b.n	8002d76 <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d107      	bne.n	8002c8e <HAL_ADC_ConfigChannel+0x5ea>
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	0e9b      	lsrs	r3, r3, #26
 8002c84:	3301      	adds	r3, #1
 8002c86:	069b      	lsls	r3, r3, #26
 8002c88:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002c8c:	e015      	b.n	8002cba <HAL_ADC_ConfigChannel+0x616>
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c96:	fa93 f3a3 	rbit	r3, r3
 8002c9a:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002c9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c9e:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002ca0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d101      	bne.n	8002caa <HAL_ADC_ConfigChannel+0x606>
    return 32U;
 8002ca6:	2320      	movs	r3, #32
 8002ca8:	e003      	b.n	8002cb2 <HAL_ADC_ConfigChannel+0x60e>
  return __builtin_clz(value);
 8002caa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cac:	fab3 f383 	clz	r3, r3
 8002cb0:	b2db      	uxtb	r3, r3
 8002cb2:	3301      	adds	r3, #1
 8002cb4:	069b      	lsls	r3, r3, #26
 8002cb6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d109      	bne.n	8002cda <HAL_ADC_ConfigChannel+0x636>
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	0e9b      	lsrs	r3, r3, #26
 8002ccc:	3301      	adds	r3, #1
 8002cce:	f003 031f 	and.w	r3, r3, #31
 8002cd2:	2101      	movs	r1, #1
 8002cd4:	fa01 f303 	lsl.w	r3, r1, r3
 8002cd8:	e017      	b.n	8002d0a <HAL_ADC_ConfigChannel+0x666>
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ce0:	6a3b      	ldr	r3, [r7, #32]
 8002ce2:	fa93 f3a3 	rbit	r3, r3
 8002ce6:	61fb      	str	r3, [r7, #28]
  return result;
 8002ce8:	69fb      	ldr	r3, [r7, #28]
 8002cea:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d101      	bne.n	8002cf6 <HAL_ADC_ConfigChannel+0x652>
    return 32U;
 8002cf2:	2320      	movs	r3, #32
 8002cf4:	e003      	b.n	8002cfe <HAL_ADC_ConfigChannel+0x65a>
  return __builtin_clz(value);
 8002cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cf8:	fab3 f383 	clz	r3, r3
 8002cfc:	b2db      	uxtb	r3, r3
 8002cfe:	3301      	adds	r3, #1
 8002d00:	f003 031f 	and.w	r3, r3, #31
 8002d04:	2101      	movs	r1, #1
 8002d06:	fa01 f303 	lsl.w	r3, r1, r3
 8002d0a:	ea42 0103 	orr.w	r1, r2, r3
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d10d      	bne.n	8002d36 <HAL_ADC_ConfigChannel+0x692>
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	0e9b      	lsrs	r3, r3, #26
 8002d20:	3301      	adds	r3, #1
 8002d22:	f003 021f 	and.w	r2, r3, #31
 8002d26:	4613      	mov	r3, r2
 8002d28:	005b      	lsls	r3, r3, #1
 8002d2a:	4413      	add	r3, r2
 8002d2c:	3b1e      	subs	r3, #30
 8002d2e:	051b      	lsls	r3, r3, #20
 8002d30:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002d34:	e01e      	b.n	8002d74 <HAL_ADC_ConfigChannel+0x6d0>
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d3c:	697b      	ldr	r3, [r7, #20]
 8002d3e:	fa93 f3a3 	rbit	r3, r3
 8002d42:	613b      	str	r3, [r7, #16]
  return result;
 8002d44:	693b      	ldr	r3, [r7, #16]
 8002d46:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002d48:	69bb      	ldr	r3, [r7, #24]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d104      	bne.n	8002d58 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8002d4e:	2320      	movs	r3, #32
 8002d50:	e006      	b.n	8002d60 <HAL_ADC_ConfigChannel+0x6bc>
 8002d52:	bf00      	nop
 8002d54:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002d58:	69bb      	ldr	r3, [r7, #24]
 8002d5a:	fab3 f383 	clz	r3, r3
 8002d5e:	b2db      	uxtb	r3, r3
 8002d60:	3301      	adds	r3, #1
 8002d62:	f003 021f 	and.w	r2, r3, #31
 8002d66:	4613      	mov	r3, r2
 8002d68:	005b      	lsls	r3, r3, #1
 8002d6a:	4413      	add	r3, r2
 8002d6c:	3b1e      	subs	r3, #30
 8002d6e:	051b      	lsls	r3, r3, #20
 8002d70:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002d74:	430b      	orrs	r3, r1
 8002d76:	683a      	ldr	r2, [r7, #0]
 8002d78:	6892      	ldr	r2, [r2, #8]
 8002d7a:	4619      	mov	r1, r3
 8002d7c:	f7ff f947 	bl	800200e <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	681a      	ldr	r2, [r3, #0]
 8002d84:	4b3d      	ldr	r3, [pc, #244]	; (8002e7c <HAL_ADC_ConfigChannel+0x7d8>)
 8002d86:	4013      	ands	r3, r2
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d06c      	beq.n	8002e66 <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002d8c:	483c      	ldr	r0, [pc, #240]	; (8002e80 <HAL_ADC_ConfigChannel+0x7dc>)
 8002d8e:	f7ff f889 	bl	8001ea4 <LL_ADC_GetCommonPathInternalCh>
 8002d92:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4a3a      	ldr	r2, [pc, #232]	; (8002e84 <HAL_ADC_ConfigChannel+0x7e0>)
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d127      	bne.n	8002df0 <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002da0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002da4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d121      	bne.n	8002df0 <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4a35      	ldr	r2, [pc, #212]	; (8002e88 <HAL_ADC_ConfigChannel+0x7e4>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d157      	bne.n	8002e66 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002db6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002dba:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002dbe:	4619      	mov	r1, r3
 8002dc0:	482f      	ldr	r0, [pc, #188]	; (8002e80 <HAL_ADC_ConfigChannel+0x7dc>)
 8002dc2:	f7ff f85c 	bl	8001e7e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002dc6:	4b31      	ldr	r3, [pc, #196]	; (8002e8c <HAL_ADC_ConfigChannel+0x7e8>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	099b      	lsrs	r3, r3, #6
 8002dcc:	4a30      	ldr	r2, [pc, #192]	; (8002e90 <HAL_ADC_ConfigChannel+0x7ec>)
 8002dce:	fba2 2303 	umull	r2, r3, r2, r3
 8002dd2:	099b      	lsrs	r3, r3, #6
 8002dd4:	1c5a      	adds	r2, r3, #1
 8002dd6:	4613      	mov	r3, r2
 8002dd8:	005b      	lsls	r3, r3, #1
 8002dda:	4413      	add	r3, r2
 8002ddc:	009b      	lsls	r3, r3, #2
 8002dde:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002de0:	e002      	b.n	8002de8 <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	3b01      	subs	r3, #1
 8002de6:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d1f9      	bne.n	8002de2 <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002dee:	e03a      	b.n	8002e66 <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a27      	ldr	r2, [pc, #156]	; (8002e94 <HAL_ADC_ConfigChannel+0x7f0>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d113      	bne.n	8002e22 <HAL_ADC_ConfigChannel+0x77e>
 8002dfa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002dfe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d10d      	bne.n	8002e22 <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4a1f      	ldr	r2, [pc, #124]	; (8002e88 <HAL_ADC_ConfigChannel+0x7e4>)
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d12a      	bne.n	8002e66 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002e10:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002e14:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e18:	4619      	mov	r1, r3
 8002e1a:	4819      	ldr	r0, [pc, #100]	; (8002e80 <HAL_ADC_ConfigChannel+0x7dc>)
 8002e1c:	f7ff f82f 	bl	8001e7e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002e20:	e021      	b.n	8002e66 <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4a1c      	ldr	r2, [pc, #112]	; (8002e98 <HAL_ADC_ConfigChannel+0x7f4>)
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d11c      	bne.n	8002e66 <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002e2c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002e30:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d116      	bne.n	8002e66 <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4a12      	ldr	r2, [pc, #72]	; (8002e88 <HAL_ADC_ConfigChannel+0x7e4>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d111      	bne.n	8002e66 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002e42:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002e46:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002e4a:	4619      	mov	r1, r3
 8002e4c:	480c      	ldr	r0, [pc, #48]	; (8002e80 <HAL_ADC_ConfigChannel+0x7dc>)
 8002e4e:	f7ff f816 	bl	8001e7e <LL_ADC_SetCommonPathInternalCh>
 8002e52:	e008      	b.n	8002e66 <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e58:	f043 0220 	orr.w	r2, r3, #32
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002e60:	2301      	movs	r3, #1
 8002e62:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2200      	movs	r2, #0
 8002e6a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8002e6e:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002e72:	4618      	mov	r0, r3
 8002e74:	37d8      	adds	r7, #216	; 0xd8
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bd80      	pop	{r7, pc}
 8002e7a:	bf00      	nop
 8002e7c:	80080000 	.word	0x80080000
 8002e80:	50040300 	.word	0x50040300
 8002e84:	c7520000 	.word	0xc7520000
 8002e88:	50040000 	.word	0x50040000
 8002e8c:	20000004 	.word	0x20000004
 8002e90:	053e2d63 	.word	0x053e2d63
 8002e94:	cb840000 	.word	0xcb840000
 8002e98:	80000001 	.word	0x80000001

08002e9c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b084      	sub	sp, #16
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4618      	mov	r0, r3
 8002eae:	f7ff f95f 	bl	8002170 <LL_ADC_IsEnabled>
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d169      	bne.n	8002f8c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	689a      	ldr	r2, [r3, #8]
 8002ebe:	4b36      	ldr	r3, [pc, #216]	; (8002f98 <ADC_Enable+0xfc>)
 8002ec0:	4013      	ands	r3, r2
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d00d      	beq.n	8002ee2 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002eca:	f043 0210 	orr.w	r2, r3, #16
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ed6:	f043 0201 	orr.w	r2, r3, #1
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8002ede:	2301      	movs	r3, #1
 8002ee0:	e055      	b.n	8002f8e <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	f7ff f92e 	bl	8002148 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002eec:	482b      	ldr	r0, [pc, #172]	; (8002f9c <ADC_Enable+0x100>)
 8002eee:	f7fe ffd9 	bl	8001ea4 <LL_ADC_GetCommonPathInternalCh>
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d013      	beq.n	8002f24 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002efc:	4b28      	ldr	r3, [pc, #160]	; (8002fa0 <ADC_Enable+0x104>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	099b      	lsrs	r3, r3, #6
 8002f02:	4a28      	ldr	r2, [pc, #160]	; (8002fa4 <ADC_Enable+0x108>)
 8002f04:	fba2 2303 	umull	r2, r3, r2, r3
 8002f08:	099b      	lsrs	r3, r3, #6
 8002f0a:	1c5a      	adds	r2, r3, #1
 8002f0c:	4613      	mov	r3, r2
 8002f0e:	005b      	lsls	r3, r3, #1
 8002f10:	4413      	add	r3, r2
 8002f12:	009b      	lsls	r3, r3, #2
 8002f14:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8002f16:	e002      	b.n	8002f1e <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8002f18:	68bb      	ldr	r3, [r7, #8]
 8002f1a:	3b01      	subs	r3, #1
 8002f1c:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8002f1e:	68bb      	ldr	r3, [r7, #8]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d1f9      	bne.n	8002f18 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002f24:	f7fe ff8c 	bl	8001e40 <HAL_GetTick>
 8002f28:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002f2a:	e028      	b.n	8002f7e <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4618      	mov	r0, r3
 8002f32:	f7ff f91d 	bl	8002170 <LL_ADC_IsEnabled>
 8002f36:	4603      	mov	r3, r0
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d104      	bne.n	8002f46 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4618      	mov	r0, r3
 8002f42:	f7ff f901 	bl	8002148 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002f46:	f7fe ff7b 	bl	8001e40 <HAL_GetTick>
 8002f4a:	4602      	mov	r2, r0
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	1ad3      	subs	r3, r2, r3
 8002f50:	2b02      	cmp	r3, #2
 8002f52:	d914      	bls.n	8002f7e <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f003 0301 	and.w	r3, r3, #1
 8002f5e:	2b01      	cmp	r3, #1
 8002f60:	d00d      	beq.n	8002f7e <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f66:	f043 0210 	orr.w	r2, r3, #16
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f72:	f043 0201 	orr.w	r2, r3, #1
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	e007      	b.n	8002f8e <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f003 0301 	and.w	r3, r3, #1
 8002f88:	2b01      	cmp	r3, #1
 8002f8a:	d1cf      	bne.n	8002f2c <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002f8c:	2300      	movs	r3, #0
}
 8002f8e:	4618      	mov	r0, r3
 8002f90:	3710      	adds	r7, #16
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bd80      	pop	{r7, pc}
 8002f96:	bf00      	nop
 8002f98:	8000003f 	.word	0x8000003f
 8002f9c:	50040300 	.word	0x50040300
 8002fa0:	20000004 	.word	0x20000004
 8002fa4:	053e2d63 	.word	0x053e2d63

08002fa8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	b085      	sub	sp, #20
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	f003 0307 	and.w	r3, r3, #7
 8002fb6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002fb8:	4b0c      	ldr	r3, [pc, #48]	; (8002fec <__NVIC_SetPriorityGrouping+0x44>)
 8002fba:	68db      	ldr	r3, [r3, #12]
 8002fbc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002fbe:	68ba      	ldr	r2, [r7, #8]
 8002fc0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002fc4:	4013      	ands	r3, r2
 8002fc6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002fcc:	68bb      	ldr	r3, [r7, #8]
 8002fce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002fd0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002fd4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002fd8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002fda:	4a04      	ldr	r2, [pc, #16]	; (8002fec <__NVIC_SetPriorityGrouping+0x44>)
 8002fdc:	68bb      	ldr	r3, [r7, #8]
 8002fde:	60d3      	str	r3, [r2, #12]
}
 8002fe0:	bf00      	nop
 8002fe2:	3714      	adds	r7, #20
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fea:	4770      	bx	lr
 8002fec:	e000ed00 	.word	0xe000ed00

08002ff0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ff4:	4b04      	ldr	r3, [pc, #16]	; (8003008 <__NVIC_GetPriorityGrouping+0x18>)
 8002ff6:	68db      	ldr	r3, [r3, #12]
 8002ff8:	0a1b      	lsrs	r3, r3, #8
 8002ffa:	f003 0307 	and.w	r3, r3, #7
}
 8002ffe:	4618      	mov	r0, r3
 8003000:	46bd      	mov	sp, r7
 8003002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003006:	4770      	bx	lr
 8003008:	e000ed00 	.word	0xe000ed00

0800300c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800300c:	b480      	push	{r7}
 800300e:	b083      	sub	sp, #12
 8003010:	af00      	add	r7, sp, #0
 8003012:	4603      	mov	r3, r0
 8003014:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003016:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800301a:	2b00      	cmp	r3, #0
 800301c:	db0b      	blt.n	8003036 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800301e:	79fb      	ldrb	r3, [r7, #7]
 8003020:	f003 021f 	and.w	r2, r3, #31
 8003024:	4907      	ldr	r1, [pc, #28]	; (8003044 <__NVIC_EnableIRQ+0x38>)
 8003026:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800302a:	095b      	lsrs	r3, r3, #5
 800302c:	2001      	movs	r0, #1
 800302e:	fa00 f202 	lsl.w	r2, r0, r2
 8003032:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003036:	bf00      	nop
 8003038:	370c      	adds	r7, #12
 800303a:	46bd      	mov	sp, r7
 800303c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003040:	4770      	bx	lr
 8003042:	bf00      	nop
 8003044:	e000e100 	.word	0xe000e100

08003048 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003048:	b480      	push	{r7}
 800304a:	b083      	sub	sp, #12
 800304c:	af00      	add	r7, sp, #0
 800304e:	4603      	mov	r3, r0
 8003050:	6039      	str	r1, [r7, #0]
 8003052:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003054:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003058:	2b00      	cmp	r3, #0
 800305a:	db0a      	blt.n	8003072 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	b2da      	uxtb	r2, r3
 8003060:	490c      	ldr	r1, [pc, #48]	; (8003094 <__NVIC_SetPriority+0x4c>)
 8003062:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003066:	0112      	lsls	r2, r2, #4
 8003068:	b2d2      	uxtb	r2, r2
 800306a:	440b      	add	r3, r1
 800306c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003070:	e00a      	b.n	8003088 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	b2da      	uxtb	r2, r3
 8003076:	4908      	ldr	r1, [pc, #32]	; (8003098 <__NVIC_SetPriority+0x50>)
 8003078:	79fb      	ldrb	r3, [r7, #7]
 800307a:	f003 030f 	and.w	r3, r3, #15
 800307e:	3b04      	subs	r3, #4
 8003080:	0112      	lsls	r2, r2, #4
 8003082:	b2d2      	uxtb	r2, r2
 8003084:	440b      	add	r3, r1
 8003086:	761a      	strb	r2, [r3, #24]
}
 8003088:	bf00      	nop
 800308a:	370c      	adds	r7, #12
 800308c:	46bd      	mov	sp, r7
 800308e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003092:	4770      	bx	lr
 8003094:	e000e100 	.word	0xe000e100
 8003098:	e000ed00 	.word	0xe000ed00

0800309c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800309c:	b480      	push	{r7}
 800309e:	b089      	sub	sp, #36	; 0x24
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	60f8      	str	r0, [r7, #12]
 80030a4:	60b9      	str	r1, [r7, #8]
 80030a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	f003 0307 	and.w	r3, r3, #7
 80030ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80030b0:	69fb      	ldr	r3, [r7, #28]
 80030b2:	f1c3 0307 	rsb	r3, r3, #7
 80030b6:	2b04      	cmp	r3, #4
 80030b8:	bf28      	it	cs
 80030ba:	2304      	movcs	r3, #4
 80030bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80030be:	69fb      	ldr	r3, [r7, #28]
 80030c0:	3304      	adds	r3, #4
 80030c2:	2b06      	cmp	r3, #6
 80030c4:	d902      	bls.n	80030cc <NVIC_EncodePriority+0x30>
 80030c6:	69fb      	ldr	r3, [r7, #28]
 80030c8:	3b03      	subs	r3, #3
 80030ca:	e000      	b.n	80030ce <NVIC_EncodePriority+0x32>
 80030cc:	2300      	movs	r3, #0
 80030ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030d0:	f04f 32ff 	mov.w	r2, #4294967295
 80030d4:	69bb      	ldr	r3, [r7, #24]
 80030d6:	fa02 f303 	lsl.w	r3, r2, r3
 80030da:	43da      	mvns	r2, r3
 80030dc:	68bb      	ldr	r3, [r7, #8]
 80030de:	401a      	ands	r2, r3
 80030e0:	697b      	ldr	r3, [r7, #20]
 80030e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80030e4:	f04f 31ff 	mov.w	r1, #4294967295
 80030e8:	697b      	ldr	r3, [r7, #20]
 80030ea:	fa01 f303 	lsl.w	r3, r1, r3
 80030ee:	43d9      	mvns	r1, r3
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030f4:	4313      	orrs	r3, r2
         );
}
 80030f6:	4618      	mov	r0, r3
 80030f8:	3724      	adds	r7, #36	; 0x24
 80030fa:	46bd      	mov	sp, r7
 80030fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003100:	4770      	bx	lr
	...

08003104 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b082      	sub	sp, #8
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	3b01      	subs	r3, #1
 8003110:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003114:	d301      	bcc.n	800311a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003116:	2301      	movs	r3, #1
 8003118:	e00f      	b.n	800313a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800311a:	4a0a      	ldr	r2, [pc, #40]	; (8003144 <SysTick_Config+0x40>)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	3b01      	subs	r3, #1
 8003120:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003122:	210f      	movs	r1, #15
 8003124:	f04f 30ff 	mov.w	r0, #4294967295
 8003128:	f7ff ff8e 	bl	8003048 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800312c:	4b05      	ldr	r3, [pc, #20]	; (8003144 <SysTick_Config+0x40>)
 800312e:	2200      	movs	r2, #0
 8003130:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003132:	4b04      	ldr	r3, [pc, #16]	; (8003144 <SysTick_Config+0x40>)
 8003134:	2207      	movs	r2, #7
 8003136:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003138:	2300      	movs	r3, #0
}
 800313a:	4618      	mov	r0, r3
 800313c:	3708      	adds	r7, #8
 800313e:	46bd      	mov	sp, r7
 8003140:	bd80      	pop	{r7, pc}
 8003142:	bf00      	nop
 8003144:	e000e010 	.word	0xe000e010

08003148 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b082      	sub	sp, #8
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003150:	6878      	ldr	r0, [r7, #4]
 8003152:	f7ff ff29 	bl	8002fa8 <__NVIC_SetPriorityGrouping>
}
 8003156:	bf00      	nop
 8003158:	3708      	adds	r7, #8
 800315a:	46bd      	mov	sp, r7
 800315c:	bd80      	pop	{r7, pc}

0800315e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800315e:	b580      	push	{r7, lr}
 8003160:	b086      	sub	sp, #24
 8003162:	af00      	add	r7, sp, #0
 8003164:	4603      	mov	r3, r0
 8003166:	60b9      	str	r1, [r7, #8]
 8003168:	607a      	str	r2, [r7, #4]
 800316a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800316c:	2300      	movs	r3, #0
 800316e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003170:	f7ff ff3e 	bl	8002ff0 <__NVIC_GetPriorityGrouping>
 8003174:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003176:	687a      	ldr	r2, [r7, #4]
 8003178:	68b9      	ldr	r1, [r7, #8]
 800317a:	6978      	ldr	r0, [r7, #20]
 800317c:	f7ff ff8e 	bl	800309c <NVIC_EncodePriority>
 8003180:	4602      	mov	r2, r0
 8003182:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003186:	4611      	mov	r1, r2
 8003188:	4618      	mov	r0, r3
 800318a:	f7ff ff5d 	bl	8003048 <__NVIC_SetPriority>
}
 800318e:	bf00      	nop
 8003190:	3718      	adds	r7, #24
 8003192:	46bd      	mov	sp, r7
 8003194:	bd80      	pop	{r7, pc}

08003196 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003196:	b580      	push	{r7, lr}
 8003198:	b082      	sub	sp, #8
 800319a:	af00      	add	r7, sp, #0
 800319c:	4603      	mov	r3, r0
 800319e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80031a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031a4:	4618      	mov	r0, r3
 80031a6:	f7ff ff31 	bl	800300c <__NVIC_EnableIRQ>
}
 80031aa:	bf00      	nop
 80031ac:	3708      	adds	r7, #8
 80031ae:	46bd      	mov	sp, r7
 80031b0:	bd80      	pop	{r7, pc}

080031b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80031b2:	b580      	push	{r7, lr}
 80031b4:	b082      	sub	sp, #8
 80031b6:	af00      	add	r7, sp, #0
 80031b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80031ba:	6878      	ldr	r0, [r7, #4]
 80031bc:	f7ff ffa2 	bl	8003104 <SysTick_Config>
 80031c0:	4603      	mov	r3, r0
}
 80031c2:	4618      	mov	r0, r3
 80031c4:	3708      	adds	r7, #8
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bd80      	pop	{r7, pc}

080031ca <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80031ca:	b480      	push	{r7}
 80031cc:	b085      	sub	sp, #20
 80031ce:	af00      	add	r7, sp, #0
 80031d0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80031d2:	2300      	movs	r3, #0
 80031d4:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80031dc:	b2db      	uxtb	r3, r3
 80031de:	2b02      	cmp	r3, #2
 80031e0:	d008      	beq.n	80031f4 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2204      	movs	r2, #4
 80031e6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2200      	movs	r2, #0
 80031ec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80031f0:	2301      	movs	r3, #1
 80031f2:	e022      	b.n	800323a <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	681a      	ldr	r2, [r3, #0]
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f022 020e 	bic.w	r2, r2, #14
 8003202:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	681a      	ldr	r2, [r3, #0]
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f022 0201 	bic.w	r2, r2, #1
 8003212:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003218:	f003 021c 	and.w	r2, r3, #28
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003220:	2101      	movs	r1, #1
 8003222:	fa01 f202 	lsl.w	r2, r1, r2
 8003226:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2201      	movs	r2, #1
 800322c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2200      	movs	r2, #0
 8003234:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8003238:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800323a:	4618      	mov	r0, r3
 800323c:	3714      	adds	r7, #20
 800323e:	46bd      	mov	sp, r7
 8003240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003244:	4770      	bx	lr

08003246 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003246:	b580      	push	{r7, lr}
 8003248:	b084      	sub	sp, #16
 800324a:	af00      	add	r7, sp, #0
 800324c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800324e:	2300      	movs	r3, #0
 8003250:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003258:	b2db      	uxtb	r3, r3
 800325a:	2b02      	cmp	r3, #2
 800325c:	d005      	beq.n	800326a <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2204      	movs	r2, #4
 8003262:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8003264:	2301      	movs	r3, #1
 8003266:	73fb      	strb	r3, [r7, #15]
 8003268:	e029      	b.n	80032be <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	681a      	ldr	r2, [r3, #0]
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f022 020e 	bic.w	r2, r2, #14
 8003278:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	681a      	ldr	r2, [r3, #0]
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f022 0201 	bic.w	r2, r2, #1
 8003288:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800328e:	f003 021c 	and.w	r2, r3, #28
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003296:	2101      	movs	r1, #1
 8003298:	fa01 f202 	lsl.w	r2, r1, r2
 800329c:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2201      	movs	r2, #1
 80032a2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2200      	movs	r2, #0
 80032aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d003      	beq.n	80032be <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032ba:	6878      	ldr	r0, [r7, #4]
 80032bc:	4798      	blx	r3
    }
  }
  return status;
 80032be:	7bfb      	ldrb	r3, [r7, #15]
}
 80032c0:	4618      	mov	r0, r3
 80032c2:	3710      	adds	r7, #16
 80032c4:	46bd      	mov	sp, r7
 80032c6:	bd80      	pop	{r7, pc}

080032c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80032c8:	b480      	push	{r7}
 80032ca:	b087      	sub	sp, #28
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
 80032d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80032d2:	2300      	movs	r3, #0
 80032d4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80032d6:	e154      	b.n	8003582 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	681a      	ldr	r2, [r3, #0]
 80032dc:	2101      	movs	r1, #1
 80032de:	697b      	ldr	r3, [r7, #20]
 80032e0:	fa01 f303 	lsl.w	r3, r1, r3
 80032e4:	4013      	ands	r3, r2
 80032e6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	f000 8146 	beq.w	800357c <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	685b      	ldr	r3, [r3, #4]
 80032f4:	f003 0303 	and.w	r3, r3, #3
 80032f8:	2b01      	cmp	r3, #1
 80032fa:	d005      	beq.n	8003308 <HAL_GPIO_Init+0x40>
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	f003 0303 	and.w	r3, r3, #3
 8003304:	2b02      	cmp	r3, #2
 8003306:	d130      	bne.n	800336a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	689b      	ldr	r3, [r3, #8]
 800330c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800330e:	697b      	ldr	r3, [r7, #20]
 8003310:	005b      	lsls	r3, r3, #1
 8003312:	2203      	movs	r2, #3
 8003314:	fa02 f303 	lsl.w	r3, r2, r3
 8003318:	43db      	mvns	r3, r3
 800331a:	693a      	ldr	r2, [r7, #16]
 800331c:	4013      	ands	r3, r2
 800331e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	68da      	ldr	r2, [r3, #12]
 8003324:	697b      	ldr	r3, [r7, #20]
 8003326:	005b      	lsls	r3, r3, #1
 8003328:	fa02 f303 	lsl.w	r3, r2, r3
 800332c:	693a      	ldr	r2, [r7, #16]
 800332e:	4313      	orrs	r3, r2
 8003330:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	693a      	ldr	r2, [r7, #16]
 8003336:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800333e:	2201      	movs	r2, #1
 8003340:	697b      	ldr	r3, [r7, #20]
 8003342:	fa02 f303 	lsl.w	r3, r2, r3
 8003346:	43db      	mvns	r3, r3
 8003348:	693a      	ldr	r2, [r7, #16]
 800334a:	4013      	ands	r3, r2
 800334c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	685b      	ldr	r3, [r3, #4]
 8003352:	091b      	lsrs	r3, r3, #4
 8003354:	f003 0201 	and.w	r2, r3, #1
 8003358:	697b      	ldr	r3, [r7, #20]
 800335a:	fa02 f303 	lsl.w	r3, r2, r3
 800335e:	693a      	ldr	r2, [r7, #16]
 8003360:	4313      	orrs	r3, r2
 8003362:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	693a      	ldr	r2, [r7, #16]
 8003368:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	685b      	ldr	r3, [r3, #4]
 800336e:	f003 0303 	and.w	r3, r3, #3
 8003372:	2b03      	cmp	r3, #3
 8003374:	d017      	beq.n	80033a6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	68db      	ldr	r3, [r3, #12]
 800337a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800337c:	697b      	ldr	r3, [r7, #20]
 800337e:	005b      	lsls	r3, r3, #1
 8003380:	2203      	movs	r2, #3
 8003382:	fa02 f303 	lsl.w	r3, r2, r3
 8003386:	43db      	mvns	r3, r3
 8003388:	693a      	ldr	r2, [r7, #16]
 800338a:	4013      	ands	r3, r2
 800338c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	689a      	ldr	r2, [r3, #8]
 8003392:	697b      	ldr	r3, [r7, #20]
 8003394:	005b      	lsls	r3, r3, #1
 8003396:	fa02 f303 	lsl.w	r3, r2, r3
 800339a:	693a      	ldr	r2, [r7, #16]
 800339c:	4313      	orrs	r3, r2
 800339e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	693a      	ldr	r2, [r7, #16]
 80033a4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	f003 0303 	and.w	r3, r3, #3
 80033ae:	2b02      	cmp	r3, #2
 80033b0:	d123      	bne.n	80033fa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80033b2:	697b      	ldr	r3, [r7, #20]
 80033b4:	08da      	lsrs	r2, r3, #3
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	3208      	adds	r2, #8
 80033ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80033be:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80033c0:	697b      	ldr	r3, [r7, #20]
 80033c2:	f003 0307 	and.w	r3, r3, #7
 80033c6:	009b      	lsls	r3, r3, #2
 80033c8:	220f      	movs	r2, #15
 80033ca:	fa02 f303 	lsl.w	r3, r2, r3
 80033ce:	43db      	mvns	r3, r3
 80033d0:	693a      	ldr	r2, [r7, #16]
 80033d2:	4013      	ands	r3, r2
 80033d4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	691a      	ldr	r2, [r3, #16]
 80033da:	697b      	ldr	r3, [r7, #20]
 80033dc:	f003 0307 	and.w	r3, r3, #7
 80033e0:	009b      	lsls	r3, r3, #2
 80033e2:	fa02 f303 	lsl.w	r3, r2, r3
 80033e6:	693a      	ldr	r2, [r7, #16]
 80033e8:	4313      	orrs	r3, r2
 80033ea:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80033ec:	697b      	ldr	r3, [r7, #20]
 80033ee:	08da      	lsrs	r2, r3, #3
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	3208      	adds	r2, #8
 80033f4:	6939      	ldr	r1, [r7, #16]
 80033f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003400:	697b      	ldr	r3, [r7, #20]
 8003402:	005b      	lsls	r3, r3, #1
 8003404:	2203      	movs	r2, #3
 8003406:	fa02 f303 	lsl.w	r3, r2, r3
 800340a:	43db      	mvns	r3, r3
 800340c:	693a      	ldr	r2, [r7, #16]
 800340e:	4013      	ands	r3, r2
 8003410:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	f003 0203 	and.w	r2, r3, #3
 800341a:	697b      	ldr	r3, [r7, #20]
 800341c:	005b      	lsls	r3, r3, #1
 800341e:	fa02 f303 	lsl.w	r3, r2, r3
 8003422:	693a      	ldr	r2, [r7, #16]
 8003424:	4313      	orrs	r3, r2
 8003426:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	693a      	ldr	r2, [r7, #16]
 800342c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	685b      	ldr	r3, [r3, #4]
 8003432:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003436:	2b00      	cmp	r3, #0
 8003438:	f000 80a0 	beq.w	800357c <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800343c:	4b58      	ldr	r3, [pc, #352]	; (80035a0 <HAL_GPIO_Init+0x2d8>)
 800343e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003440:	4a57      	ldr	r2, [pc, #348]	; (80035a0 <HAL_GPIO_Init+0x2d8>)
 8003442:	f043 0301 	orr.w	r3, r3, #1
 8003446:	6613      	str	r3, [r2, #96]	; 0x60
 8003448:	4b55      	ldr	r3, [pc, #340]	; (80035a0 <HAL_GPIO_Init+0x2d8>)
 800344a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800344c:	f003 0301 	and.w	r3, r3, #1
 8003450:	60bb      	str	r3, [r7, #8]
 8003452:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003454:	4a53      	ldr	r2, [pc, #332]	; (80035a4 <HAL_GPIO_Init+0x2dc>)
 8003456:	697b      	ldr	r3, [r7, #20]
 8003458:	089b      	lsrs	r3, r3, #2
 800345a:	3302      	adds	r3, #2
 800345c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003460:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003462:	697b      	ldr	r3, [r7, #20]
 8003464:	f003 0303 	and.w	r3, r3, #3
 8003468:	009b      	lsls	r3, r3, #2
 800346a:	220f      	movs	r2, #15
 800346c:	fa02 f303 	lsl.w	r3, r2, r3
 8003470:	43db      	mvns	r3, r3
 8003472:	693a      	ldr	r2, [r7, #16]
 8003474:	4013      	ands	r3, r2
 8003476:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800347e:	d019      	beq.n	80034b4 <HAL_GPIO_Init+0x1ec>
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	4a49      	ldr	r2, [pc, #292]	; (80035a8 <HAL_GPIO_Init+0x2e0>)
 8003484:	4293      	cmp	r3, r2
 8003486:	d013      	beq.n	80034b0 <HAL_GPIO_Init+0x1e8>
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	4a48      	ldr	r2, [pc, #288]	; (80035ac <HAL_GPIO_Init+0x2e4>)
 800348c:	4293      	cmp	r3, r2
 800348e:	d00d      	beq.n	80034ac <HAL_GPIO_Init+0x1e4>
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	4a47      	ldr	r2, [pc, #284]	; (80035b0 <HAL_GPIO_Init+0x2e8>)
 8003494:	4293      	cmp	r3, r2
 8003496:	d007      	beq.n	80034a8 <HAL_GPIO_Init+0x1e0>
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	4a46      	ldr	r2, [pc, #280]	; (80035b4 <HAL_GPIO_Init+0x2ec>)
 800349c:	4293      	cmp	r3, r2
 800349e:	d101      	bne.n	80034a4 <HAL_GPIO_Init+0x1dc>
 80034a0:	2304      	movs	r3, #4
 80034a2:	e008      	b.n	80034b6 <HAL_GPIO_Init+0x1ee>
 80034a4:	2307      	movs	r3, #7
 80034a6:	e006      	b.n	80034b6 <HAL_GPIO_Init+0x1ee>
 80034a8:	2303      	movs	r3, #3
 80034aa:	e004      	b.n	80034b6 <HAL_GPIO_Init+0x1ee>
 80034ac:	2302      	movs	r3, #2
 80034ae:	e002      	b.n	80034b6 <HAL_GPIO_Init+0x1ee>
 80034b0:	2301      	movs	r3, #1
 80034b2:	e000      	b.n	80034b6 <HAL_GPIO_Init+0x1ee>
 80034b4:	2300      	movs	r3, #0
 80034b6:	697a      	ldr	r2, [r7, #20]
 80034b8:	f002 0203 	and.w	r2, r2, #3
 80034bc:	0092      	lsls	r2, r2, #2
 80034be:	4093      	lsls	r3, r2
 80034c0:	693a      	ldr	r2, [r7, #16]
 80034c2:	4313      	orrs	r3, r2
 80034c4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80034c6:	4937      	ldr	r1, [pc, #220]	; (80035a4 <HAL_GPIO_Init+0x2dc>)
 80034c8:	697b      	ldr	r3, [r7, #20]
 80034ca:	089b      	lsrs	r3, r3, #2
 80034cc:	3302      	adds	r3, #2
 80034ce:	693a      	ldr	r2, [r7, #16]
 80034d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80034d4:	4b38      	ldr	r3, [pc, #224]	; (80035b8 <HAL_GPIO_Init+0x2f0>)
 80034d6:	689b      	ldr	r3, [r3, #8]
 80034d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	43db      	mvns	r3, r3
 80034de:	693a      	ldr	r2, [r7, #16]
 80034e0:	4013      	ands	r3, r2
 80034e2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	685b      	ldr	r3, [r3, #4]
 80034e8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d003      	beq.n	80034f8 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80034f0:	693a      	ldr	r2, [r7, #16]
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	4313      	orrs	r3, r2
 80034f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80034f8:	4a2f      	ldr	r2, [pc, #188]	; (80035b8 <HAL_GPIO_Init+0x2f0>)
 80034fa:	693b      	ldr	r3, [r7, #16]
 80034fc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80034fe:	4b2e      	ldr	r3, [pc, #184]	; (80035b8 <HAL_GPIO_Init+0x2f0>)
 8003500:	68db      	ldr	r3, [r3, #12]
 8003502:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	43db      	mvns	r3, r3
 8003508:	693a      	ldr	r2, [r7, #16]
 800350a:	4013      	ands	r3, r2
 800350c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	685b      	ldr	r3, [r3, #4]
 8003512:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003516:	2b00      	cmp	r3, #0
 8003518:	d003      	beq.n	8003522 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 800351a:	693a      	ldr	r2, [r7, #16]
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	4313      	orrs	r3, r2
 8003520:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003522:	4a25      	ldr	r2, [pc, #148]	; (80035b8 <HAL_GPIO_Init+0x2f0>)
 8003524:	693b      	ldr	r3, [r7, #16]
 8003526:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003528:	4b23      	ldr	r3, [pc, #140]	; (80035b8 <HAL_GPIO_Init+0x2f0>)
 800352a:	685b      	ldr	r3, [r3, #4]
 800352c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	43db      	mvns	r3, r3
 8003532:	693a      	ldr	r2, [r7, #16]
 8003534:	4013      	ands	r3, r2
 8003536:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	685b      	ldr	r3, [r3, #4]
 800353c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003540:	2b00      	cmp	r3, #0
 8003542:	d003      	beq.n	800354c <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8003544:	693a      	ldr	r2, [r7, #16]
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	4313      	orrs	r3, r2
 800354a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800354c:	4a1a      	ldr	r2, [pc, #104]	; (80035b8 <HAL_GPIO_Init+0x2f0>)
 800354e:	693b      	ldr	r3, [r7, #16]
 8003550:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003552:	4b19      	ldr	r3, [pc, #100]	; (80035b8 <HAL_GPIO_Init+0x2f0>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	43db      	mvns	r3, r3
 800355c:	693a      	ldr	r2, [r7, #16]
 800355e:	4013      	ands	r3, r2
 8003560:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	685b      	ldr	r3, [r3, #4]
 8003566:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800356a:	2b00      	cmp	r3, #0
 800356c:	d003      	beq.n	8003576 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800356e:	693a      	ldr	r2, [r7, #16]
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	4313      	orrs	r3, r2
 8003574:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003576:	4a10      	ldr	r2, [pc, #64]	; (80035b8 <HAL_GPIO_Init+0x2f0>)
 8003578:	693b      	ldr	r3, [r7, #16]
 800357a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800357c:	697b      	ldr	r3, [r7, #20]
 800357e:	3301      	adds	r3, #1
 8003580:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	681a      	ldr	r2, [r3, #0]
 8003586:	697b      	ldr	r3, [r7, #20]
 8003588:	fa22 f303 	lsr.w	r3, r2, r3
 800358c:	2b00      	cmp	r3, #0
 800358e:	f47f aea3 	bne.w	80032d8 <HAL_GPIO_Init+0x10>
  }
}
 8003592:	bf00      	nop
 8003594:	bf00      	nop
 8003596:	371c      	adds	r7, #28
 8003598:	46bd      	mov	sp, r7
 800359a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359e:	4770      	bx	lr
 80035a0:	40021000 	.word	0x40021000
 80035a4:	40010000 	.word	0x40010000
 80035a8:	48000400 	.word	0x48000400
 80035ac:	48000800 	.word	0x48000800
 80035b0:	48000c00 	.word	0x48000c00
 80035b4:	48001000 	.word	0x48001000
 80035b8:	40010400 	.word	0x40010400

080035bc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80035bc:	b480      	push	{r7}
 80035be:	b085      	sub	sp, #20
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
 80035c4:	460b      	mov	r3, r1
 80035c6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	691a      	ldr	r2, [r3, #16]
 80035cc:	887b      	ldrh	r3, [r7, #2]
 80035ce:	4013      	ands	r3, r2
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d002      	beq.n	80035da <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80035d4:	2301      	movs	r3, #1
 80035d6:	73fb      	strb	r3, [r7, #15]
 80035d8:	e001      	b.n	80035de <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80035da:	2300      	movs	r3, #0
 80035dc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80035de:	7bfb      	ldrb	r3, [r7, #15]
}
 80035e0:	4618      	mov	r0, r3
 80035e2:	3714      	adds	r7, #20
 80035e4:	46bd      	mov	sp, r7
 80035e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ea:	4770      	bx	lr

080035ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80035ec:	b480      	push	{r7}
 80035ee:	b083      	sub	sp, #12
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
 80035f4:	460b      	mov	r3, r1
 80035f6:	807b      	strh	r3, [r7, #2]
 80035f8:	4613      	mov	r3, r2
 80035fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80035fc:	787b      	ldrb	r3, [r7, #1]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d003      	beq.n	800360a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003602:	887a      	ldrh	r2, [r7, #2]
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003608:	e002      	b.n	8003610 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800360a:	887a      	ldrh	r2, [r7, #2]
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003610:	bf00      	nop
 8003612:	370c      	adds	r7, #12
 8003614:	46bd      	mov	sp, r7
 8003616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361a:	4770      	bx	lr

0800361c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800361c:	b480      	push	{r7}
 800361e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003620:	4b04      	ldr	r3, [pc, #16]	; (8003634 <HAL_PWREx_GetVoltageRange+0x18>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003628:	4618      	mov	r0, r3
 800362a:	46bd      	mov	sp, r7
 800362c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003630:	4770      	bx	lr
 8003632:	bf00      	nop
 8003634:	40007000 	.word	0x40007000

08003638 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003638:	b480      	push	{r7}
 800363a:	b085      	sub	sp, #20
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003646:	d130      	bne.n	80036aa <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003648:	4b23      	ldr	r3, [pc, #140]	; (80036d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003650:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003654:	d038      	beq.n	80036c8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003656:	4b20      	ldr	r3, [pc, #128]	; (80036d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800365e:	4a1e      	ldr	r2, [pc, #120]	; (80036d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003660:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003664:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003666:	4b1d      	ldr	r3, [pc, #116]	; (80036dc <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	2232      	movs	r2, #50	; 0x32
 800366c:	fb02 f303 	mul.w	r3, r2, r3
 8003670:	4a1b      	ldr	r2, [pc, #108]	; (80036e0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003672:	fba2 2303 	umull	r2, r3, r2, r3
 8003676:	0c9b      	lsrs	r3, r3, #18
 8003678:	3301      	adds	r3, #1
 800367a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800367c:	e002      	b.n	8003684 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	3b01      	subs	r3, #1
 8003682:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003684:	4b14      	ldr	r3, [pc, #80]	; (80036d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003686:	695b      	ldr	r3, [r3, #20]
 8003688:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800368c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003690:	d102      	bne.n	8003698 <HAL_PWREx_ControlVoltageScaling+0x60>
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	2b00      	cmp	r3, #0
 8003696:	d1f2      	bne.n	800367e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003698:	4b0f      	ldr	r3, [pc, #60]	; (80036d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800369a:	695b      	ldr	r3, [r3, #20]
 800369c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036a4:	d110      	bne.n	80036c8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80036a6:	2303      	movs	r3, #3
 80036a8:	e00f      	b.n	80036ca <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80036aa:	4b0b      	ldr	r3, [pc, #44]	; (80036d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80036b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036b6:	d007      	beq.n	80036c8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80036b8:	4b07      	ldr	r3, [pc, #28]	; (80036d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80036c0:	4a05      	ldr	r2, [pc, #20]	; (80036d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80036c2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80036c6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80036c8:	2300      	movs	r3, #0
}
 80036ca:	4618      	mov	r0, r3
 80036cc:	3714      	adds	r7, #20
 80036ce:	46bd      	mov	sp, r7
 80036d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d4:	4770      	bx	lr
 80036d6:	bf00      	nop
 80036d8:	40007000 	.word	0x40007000
 80036dc:	20000004 	.word	0x20000004
 80036e0:	431bde83 	.word	0x431bde83

080036e4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b088      	sub	sp, #32
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d102      	bne.n	80036f8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80036f2:	2301      	movs	r3, #1
 80036f4:	f000 bc02 	b.w	8003efc <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80036f8:	4b96      	ldr	r3, [pc, #600]	; (8003954 <HAL_RCC_OscConfig+0x270>)
 80036fa:	689b      	ldr	r3, [r3, #8]
 80036fc:	f003 030c 	and.w	r3, r3, #12
 8003700:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003702:	4b94      	ldr	r3, [pc, #592]	; (8003954 <HAL_RCC_OscConfig+0x270>)
 8003704:	68db      	ldr	r3, [r3, #12]
 8003706:	f003 0303 	and.w	r3, r3, #3
 800370a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f003 0310 	and.w	r3, r3, #16
 8003714:	2b00      	cmp	r3, #0
 8003716:	f000 80e4 	beq.w	80038e2 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800371a:	69bb      	ldr	r3, [r7, #24]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d007      	beq.n	8003730 <HAL_RCC_OscConfig+0x4c>
 8003720:	69bb      	ldr	r3, [r7, #24]
 8003722:	2b0c      	cmp	r3, #12
 8003724:	f040 808b 	bne.w	800383e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003728:	697b      	ldr	r3, [r7, #20]
 800372a:	2b01      	cmp	r3, #1
 800372c:	f040 8087 	bne.w	800383e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003730:	4b88      	ldr	r3, [pc, #544]	; (8003954 <HAL_RCC_OscConfig+0x270>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f003 0302 	and.w	r3, r3, #2
 8003738:	2b00      	cmp	r3, #0
 800373a:	d005      	beq.n	8003748 <HAL_RCC_OscConfig+0x64>
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	699b      	ldr	r3, [r3, #24]
 8003740:	2b00      	cmp	r3, #0
 8003742:	d101      	bne.n	8003748 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003744:	2301      	movs	r3, #1
 8003746:	e3d9      	b.n	8003efc <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6a1a      	ldr	r2, [r3, #32]
 800374c:	4b81      	ldr	r3, [pc, #516]	; (8003954 <HAL_RCC_OscConfig+0x270>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f003 0308 	and.w	r3, r3, #8
 8003754:	2b00      	cmp	r3, #0
 8003756:	d004      	beq.n	8003762 <HAL_RCC_OscConfig+0x7e>
 8003758:	4b7e      	ldr	r3, [pc, #504]	; (8003954 <HAL_RCC_OscConfig+0x270>)
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003760:	e005      	b.n	800376e <HAL_RCC_OscConfig+0x8a>
 8003762:	4b7c      	ldr	r3, [pc, #496]	; (8003954 <HAL_RCC_OscConfig+0x270>)
 8003764:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003768:	091b      	lsrs	r3, r3, #4
 800376a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800376e:	4293      	cmp	r3, r2
 8003770:	d223      	bcs.n	80037ba <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6a1b      	ldr	r3, [r3, #32]
 8003776:	4618      	mov	r0, r3
 8003778:	f000 fd8c 	bl	8004294 <RCC_SetFlashLatencyFromMSIRange>
 800377c:	4603      	mov	r3, r0
 800377e:	2b00      	cmp	r3, #0
 8003780:	d001      	beq.n	8003786 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8003782:	2301      	movs	r3, #1
 8003784:	e3ba      	b.n	8003efc <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003786:	4b73      	ldr	r3, [pc, #460]	; (8003954 <HAL_RCC_OscConfig+0x270>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4a72      	ldr	r2, [pc, #456]	; (8003954 <HAL_RCC_OscConfig+0x270>)
 800378c:	f043 0308 	orr.w	r3, r3, #8
 8003790:	6013      	str	r3, [r2, #0]
 8003792:	4b70      	ldr	r3, [pc, #448]	; (8003954 <HAL_RCC_OscConfig+0x270>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6a1b      	ldr	r3, [r3, #32]
 800379e:	496d      	ldr	r1, [pc, #436]	; (8003954 <HAL_RCC_OscConfig+0x270>)
 80037a0:	4313      	orrs	r3, r2
 80037a2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80037a4:	4b6b      	ldr	r3, [pc, #428]	; (8003954 <HAL_RCC_OscConfig+0x270>)
 80037a6:	685b      	ldr	r3, [r3, #4]
 80037a8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	69db      	ldr	r3, [r3, #28]
 80037b0:	021b      	lsls	r3, r3, #8
 80037b2:	4968      	ldr	r1, [pc, #416]	; (8003954 <HAL_RCC_OscConfig+0x270>)
 80037b4:	4313      	orrs	r3, r2
 80037b6:	604b      	str	r3, [r1, #4]
 80037b8:	e025      	b.n	8003806 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80037ba:	4b66      	ldr	r3, [pc, #408]	; (8003954 <HAL_RCC_OscConfig+0x270>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	4a65      	ldr	r2, [pc, #404]	; (8003954 <HAL_RCC_OscConfig+0x270>)
 80037c0:	f043 0308 	orr.w	r3, r3, #8
 80037c4:	6013      	str	r3, [r2, #0]
 80037c6:	4b63      	ldr	r3, [pc, #396]	; (8003954 <HAL_RCC_OscConfig+0x270>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6a1b      	ldr	r3, [r3, #32]
 80037d2:	4960      	ldr	r1, [pc, #384]	; (8003954 <HAL_RCC_OscConfig+0x270>)
 80037d4:	4313      	orrs	r3, r2
 80037d6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80037d8:	4b5e      	ldr	r3, [pc, #376]	; (8003954 <HAL_RCC_OscConfig+0x270>)
 80037da:	685b      	ldr	r3, [r3, #4]
 80037dc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	69db      	ldr	r3, [r3, #28]
 80037e4:	021b      	lsls	r3, r3, #8
 80037e6:	495b      	ldr	r1, [pc, #364]	; (8003954 <HAL_RCC_OscConfig+0x270>)
 80037e8:	4313      	orrs	r3, r2
 80037ea:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80037ec:	69bb      	ldr	r3, [r7, #24]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d109      	bne.n	8003806 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6a1b      	ldr	r3, [r3, #32]
 80037f6:	4618      	mov	r0, r3
 80037f8:	f000 fd4c 	bl	8004294 <RCC_SetFlashLatencyFromMSIRange>
 80037fc:	4603      	mov	r3, r0
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d001      	beq.n	8003806 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8003802:	2301      	movs	r3, #1
 8003804:	e37a      	b.n	8003efc <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003806:	f000 fc81 	bl	800410c <HAL_RCC_GetSysClockFreq>
 800380a:	4602      	mov	r2, r0
 800380c:	4b51      	ldr	r3, [pc, #324]	; (8003954 <HAL_RCC_OscConfig+0x270>)
 800380e:	689b      	ldr	r3, [r3, #8]
 8003810:	091b      	lsrs	r3, r3, #4
 8003812:	f003 030f 	and.w	r3, r3, #15
 8003816:	4950      	ldr	r1, [pc, #320]	; (8003958 <HAL_RCC_OscConfig+0x274>)
 8003818:	5ccb      	ldrb	r3, [r1, r3]
 800381a:	f003 031f 	and.w	r3, r3, #31
 800381e:	fa22 f303 	lsr.w	r3, r2, r3
 8003822:	4a4e      	ldr	r2, [pc, #312]	; (800395c <HAL_RCC_OscConfig+0x278>)
 8003824:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003826:	4b4e      	ldr	r3, [pc, #312]	; (8003960 <HAL_RCC_OscConfig+0x27c>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	4618      	mov	r0, r3
 800382c:	f7fe fab8 	bl	8001da0 <HAL_InitTick>
 8003830:	4603      	mov	r3, r0
 8003832:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003834:	7bfb      	ldrb	r3, [r7, #15]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d052      	beq.n	80038e0 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800383a:	7bfb      	ldrb	r3, [r7, #15]
 800383c:	e35e      	b.n	8003efc <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	699b      	ldr	r3, [r3, #24]
 8003842:	2b00      	cmp	r3, #0
 8003844:	d032      	beq.n	80038ac <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003846:	4b43      	ldr	r3, [pc, #268]	; (8003954 <HAL_RCC_OscConfig+0x270>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4a42      	ldr	r2, [pc, #264]	; (8003954 <HAL_RCC_OscConfig+0x270>)
 800384c:	f043 0301 	orr.w	r3, r3, #1
 8003850:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003852:	f7fe faf5 	bl	8001e40 <HAL_GetTick>
 8003856:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003858:	e008      	b.n	800386c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800385a:	f7fe faf1 	bl	8001e40 <HAL_GetTick>
 800385e:	4602      	mov	r2, r0
 8003860:	693b      	ldr	r3, [r7, #16]
 8003862:	1ad3      	subs	r3, r2, r3
 8003864:	2b02      	cmp	r3, #2
 8003866:	d901      	bls.n	800386c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8003868:	2303      	movs	r3, #3
 800386a:	e347      	b.n	8003efc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800386c:	4b39      	ldr	r3, [pc, #228]	; (8003954 <HAL_RCC_OscConfig+0x270>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f003 0302 	and.w	r3, r3, #2
 8003874:	2b00      	cmp	r3, #0
 8003876:	d0f0      	beq.n	800385a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003878:	4b36      	ldr	r3, [pc, #216]	; (8003954 <HAL_RCC_OscConfig+0x270>)
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4a35      	ldr	r2, [pc, #212]	; (8003954 <HAL_RCC_OscConfig+0x270>)
 800387e:	f043 0308 	orr.w	r3, r3, #8
 8003882:	6013      	str	r3, [r2, #0]
 8003884:	4b33      	ldr	r3, [pc, #204]	; (8003954 <HAL_RCC_OscConfig+0x270>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6a1b      	ldr	r3, [r3, #32]
 8003890:	4930      	ldr	r1, [pc, #192]	; (8003954 <HAL_RCC_OscConfig+0x270>)
 8003892:	4313      	orrs	r3, r2
 8003894:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003896:	4b2f      	ldr	r3, [pc, #188]	; (8003954 <HAL_RCC_OscConfig+0x270>)
 8003898:	685b      	ldr	r3, [r3, #4]
 800389a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	69db      	ldr	r3, [r3, #28]
 80038a2:	021b      	lsls	r3, r3, #8
 80038a4:	492b      	ldr	r1, [pc, #172]	; (8003954 <HAL_RCC_OscConfig+0x270>)
 80038a6:	4313      	orrs	r3, r2
 80038a8:	604b      	str	r3, [r1, #4]
 80038aa:	e01a      	b.n	80038e2 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80038ac:	4b29      	ldr	r3, [pc, #164]	; (8003954 <HAL_RCC_OscConfig+0x270>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	4a28      	ldr	r2, [pc, #160]	; (8003954 <HAL_RCC_OscConfig+0x270>)
 80038b2:	f023 0301 	bic.w	r3, r3, #1
 80038b6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80038b8:	f7fe fac2 	bl	8001e40 <HAL_GetTick>
 80038bc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80038be:	e008      	b.n	80038d2 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80038c0:	f7fe fabe 	bl	8001e40 <HAL_GetTick>
 80038c4:	4602      	mov	r2, r0
 80038c6:	693b      	ldr	r3, [r7, #16]
 80038c8:	1ad3      	subs	r3, r2, r3
 80038ca:	2b02      	cmp	r3, #2
 80038cc:	d901      	bls.n	80038d2 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80038ce:	2303      	movs	r3, #3
 80038d0:	e314      	b.n	8003efc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80038d2:	4b20      	ldr	r3, [pc, #128]	; (8003954 <HAL_RCC_OscConfig+0x270>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f003 0302 	and.w	r3, r3, #2
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d1f0      	bne.n	80038c0 <HAL_RCC_OscConfig+0x1dc>
 80038de:	e000      	b.n	80038e2 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80038e0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f003 0301 	and.w	r3, r3, #1
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d073      	beq.n	80039d6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80038ee:	69bb      	ldr	r3, [r7, #24]
 80038f0:	2b08      	cmp	r3, #8
 80038f2:	d005      	beq.n	8003900 <HAL_RCC_OscConfig+0x21c>
 80038f4:	69bb      	ldr	r3, [r7, #24]
 80038f6:	2b0c      	cmp	r3, #12
 80038f8:	d10e      	bne.n	8003918 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80038fa:	697b      	ldr	r3, [r7, #20]
 80038fc:	2b03      	cmp	r3, #3
 80038fe:	d10b      	bne.n	8003918 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003900:	4b14      	ldr	r3, [pc, #80]	; (8003954 <HAL_RCC_OscConfig+0x270>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003908:	2b00      	cmp	r3, #0
 800390a:	d063      	beq.n	80039d4 <HAL_RCC_OscConfig+0x2f0>
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	685b      	ldr	r3, [r3, #4]
 8003910:	2b00      	cmp	r3, #0
 8003912:	d15f      	bne.n	80039d4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003914:	2301      	movs	r3, #1
 8003916:	e2f1      	b.n	8003efc <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	685b      	ldr	r3, [r3, #4]
 800391c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003920:	d106      	bne.n	8003930 <HAL_RCC_OscConfig+0x24c>
 8003922:	4b0c      	ldr	r3, [pc, #48]	; (8003954 <HAL_RCC_OscConfig+0x270>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	4a0b      	ldr	r2, [pc, #44]	; (8003954 <HAL_RCC_OscConfig+0x270>)
 8003928:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800392c:	6013      	str	r3, [r2, #0]
 800392e:	e025      	b.n	800397c <HAL_RCC_OscConfig+0x298>
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	685b      	ldr	r3, [r3, #4]
 8003934:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003938:	d114      	bne.n	8003964 <HAL_RCC_OscConfig+0x280>
 800393a:	4b06      	ldr	r3, [pc, #24]	; (8003954 <HAL_RCC_OscConfig+0x270>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	4a05      	ldr	r2, [pc, #20]	; (8003954 <HAL_RCC_OscConfig+0x270>)
 8003940:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003944:	6013      	str	r3, [r2, #0]
 8003946:	4b03      	ldr	r3, [pc, #12]	; (8003954 <HAL_RCC_OscConfig+0x270>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	4a02      	ldr	r2, [pc, #8]	; (8003954 <HAL_RCC_OscConfig+0x270>)
 800394c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003950:	6013      	str	r3, [r2, #0]
 8003952:	e013      	b.n	800397c <HAL_RCC_OscConfig+0x298>
 8003954:	40021000 	.word	0x40021000
 8003958:	08007704 	.word	0x08007704
 800395c:	20000004 	.word	0x20000004
 8003960:	20000008 	.word	0x20000008
 8003964:	4ba0      	ldr	r3, [pc, #640]	; (8003be8 <HAL_RCC_OscConfig+0x504>)
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4a9f      	ldr	r2, [pc, #636]	; (8003be8 <HAL_RCC_OscConfig+0x504>)
 800396a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800396e:	6013      	str	r3, [r2, #0]
 8003970:	4b9d      	ldr	r3, [pc, #628]	; (8003be8 <HAL_RCC_OscConfig+0x504>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4a9c      	ldr	r2, [pc, #624]	; (8003be8 <HAL_RCC_OscConfig+0x504>)
 8003976:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800397a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	685b      	ldr	r3, [r3, #4]
 8003980:	2b00      	cmp	r3, #0
 8003982:	d013      	beq.n	80039ac <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003984:	f7fe fa5c 	bl	8001e40 <HAL_GetTick>
 8003988:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800398a:	e008      	b.n	800399e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800398c:	f7fe fa58 	bl	8001e40 <HAL_GetTick>
 8003990:	4602      	mov	r2, r0
 8003992:	693b      	ldr	r3, [r7, #16]
 8003994:	1ad3      	subs	r3, r2, r3
 8003996:	2b64      	cmp	r3, #100	; 0x64
 8003998:	d901      	bls.n	800399e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800399a:	2303      	movs	r3, #3
 800399c:	e2ae      	b.n	8003efc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800399e:	4b92      	ldr	r3, [pc, #584]	; (8003be8 <HAL_RCC_OscConfig+0x504>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d0f0      	beq.n	800398c <HAL_RCC_OscConfig+0x2a8>
 80039aa:	e014      	b.n	80039d6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039ac:	f7fe fa48 	bl	8001e40 <HAL_GetTick>
 80039b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80039b2:	e008      	b.n	80039c6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80039b4:	f7fe fa44 	bl	8001e40 <HAL_GetTick>
 80039b8:	4602      	mov	r2, r0
 80039ba:	693b      	ldr	r3, [r7, #16]
 80039bc:	1ad3      	subs	r3, r2, r3
 80039be:	2b64      	cmp	r3, #100	; 0x64
 80039c0:	d901      	bls.n	80039c6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80039c2:	2303      	movs	r3, #3
 80039c4:	e29a      	b.n	8003efc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80039c6:	4b88      	ldr	r3, [pc, #544]	; (8003be8 <HAL_RCC_OscConfig+0x504>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d1f0      	bne.n	80039b4 <HAL_RCC_OscConfig+0x2d0>
 80039d2:	e000      	b.n	80039d6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f003 0302 	and.w	r3, r3, #2
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d060      	beq.n	8003aa4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80039e2:	69bb      	ldr	r3, [r7, #24]
 80039e4:	2b04      	cmp	r3, #4
 80039e6:	d005      	beq.n	80039f4 <HAL_RCC_OscConfig+0x310>
 80039e8:	69bb      	ldr	r3, [r7, #24]
 80039ea:	2b0c      	cmp	r3, #12
 80039ec:	d119      	bne.n	8003a22 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80039ee:	697b      	ldr	r3, [r7, #20]
 80039f0:	2b02      	cmp	r3, #2
 80039f2:	d116      	bne.n	8003a22 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80039f4:	4b7c      	ldr	r3, [pc, #496]	; (8003be8 <HAL_RCC_OscConfig+0x504>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d005      	beq.n	8003a0c <HAL_RCC_OscConfig+0x328>
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	68db      	ldr	r3, [r3, #12]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d101      	bne.n	8003a0c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003a08:	2301      	movs	r3, #1
 8003a0a:	e277      	b.n	8003efc <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a0c:	4b76      	ldr	r3, [pc, #472]	; (8003be8 <HAL_RCC_OscConfig+0x504>)
 8003a0e:	685b      	ldr	r3, [r3, #4]
 8003a10:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	691b      	ldr	r3, [r3, #16]
 8003a18:	061b      	lsls	r3, r3, #24
 8003a1a:	4973      	ldr	r1, [pc, #460]	; (8003be8 <HAL_RCC_OscConfig+0x504>)
 8003a1c:	4313      	orrs	r3, r2
 8003a1e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003a20:	e040      	b.n	8003aa4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	68db      	ldr	r3, [r3, #12]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d023      	beq.n	8003a72 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a2a:	4b6f      	ldr	r3, [pc, #444]	; (8003be8 <HAL_RCC_OscConfig+0x504>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4a6e      	ldr	r2, [pc, #440]	; (8003be8 <HAL_RCC_OscConfig+0x504>)
 8003a30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a34:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a36:	f7fe fa03 	bl	8001e40 <HAL_GetTick>
 8003a3a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003a3c:	e008      	b.n	8003a50 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a3e:	f7fe f9ff 	bl	8001e40 <HAL_GetTick>
 8003a42:	4602      	mov	r2, r0
 8003a44:	693b      	ldr	r3, [r7, #16]
 8003a46:	1ad3      	subs	r3, r2, r3
 8003a48:	2b02      	cmp	r3, #2
 8003a4a:	d901      	bls.n	8003a50 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003a4c:	2303      	movs	r3, #3
 8003a4e:	e255      	b.n	8003efc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003a50:	4b65      	ldr	r3, [pc, #404]	; (8003be8 <HAL_RCC_OscConfig+0x504>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d0f0      	beq.n	8003a3e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a5c:	4b62      	ldr	r3, [pc, #392]	; (8003be8 <HAL_RCC_OscConfig+0x504>)
 8003a5e:	685b      	ldr	r3, [r3, #4]
 8003a60:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	691b      	ldr	r3, [r3, #16]
 8003a68:	061b      	lsls	r3, r3, #24
 8003a6a:	495f      	ldr	r1, [pc, #380]	; (8003be8 <HAL_RCC_OscConfig+0x504>)
 8003a6c:	4313      	orrs	r3, r2
 8003a6e:	604b      	str	r3, [r1, #4]
 8003a70:	e018      	b.n	8003aa4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a72:	4b5d      	ldr	r3, [pc, #372]	; (8003be8 <HAL_RCC_OscConfig+0x504>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	4a5c      	ldr	r2, [pc, #368]	; (8003be8 <HAL_RCC_OscConfig+0x504>)
 8003a78:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003a7c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a7e:	f7fe f9df 	bl	8001e40 <HAL_GetTick>
 8003a82:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003a84:	e008      	b.n	8003a98 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a86:	f7fe f9db 	bl	8001e40 <HAL_GetTick>
 8003a8a:	4602      	mov	r2, r0
 8003a8c:	693b      	ldr	r3, [r7, #16]
 8003a8e:	1ad3      	subs	r3, r2, r3
 8003a90:	2b02      	cmp	r3, #2
 8003a92:	d901      	bls.n	8003a98 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003a94:	2303      	movs	r3, #3
 8003a96:	e231      	b.n	8003efc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003a98:	4b53      	ldr	r3, [pc, #332]	; (8003be8 <HAL_RCC_OscConfig+0x504>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d1f0      	bne.n	8003a86 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f003 0308 	and.w	r3, r3, #8
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d03c      	beq.n	8003b2a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	695b      	ldr	r3, [r3, #20]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d01c      	beq.n	8003af2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ab8:	4b4b      	ldr	r3, [pc, #300]	; (8003be8 <HAL_RCC_OscConfig+0x504>)
 8003aba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003abe:	4a4a      	ldr	r2, [pc, #296]	; (8003be8 <HAL_RCC_OscConfig+0x504>)
 8003ac0:	f043 0301 	orr.w	r3, r3, #1
 8003ac4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ac8:	f7fe f9ba 	bl	8001e40 <HAL_GetTick>
 8003acc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003ace:	e008      	b.n	8003ae2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ad0:	f7fe f9b6 	bl	8001e40 <HAL_GetTick>
 8003ad4:	4602      	mov	r2, r0
 8003ad6:	693b      	ldr	r3, [r7, #16]
 8003ad8:	1ad3      	subs	r3, r2, r3
 8003ada:	2b02      	cmp	r3, #2
 8003adc:	d901      	bls.n	8003ae2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003ade:	2303      	movs	r3, #3
 8003ae0:	e20c      	b.n	8003efc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003ae2:	4b41      	ldr	r3, [pc, #260]	; (8003be8 <HAL_RCC_OscConfig+0x504>)
 8003ae4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ae8:	f003 0302 	and.w	r3, r3, #2
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d0ef      	beq.n	8003ad0 <HAL_RCC_OscConfig+0x3ec>
 8003af0:	e01b      	b.n	8003b2a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003af2:	4b3d      	ldr	r3, [pc, #244]	; (8003be8 <HAL_RCC_OscConfig+0x504>)
 8003af4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003af8:	4a3b      	ldr	r2, [pc, #236]	; (8003be8 <HAL_RCC_OscConfig+0x504>)
 8003afa:	f023 0301 	bic.w	r3, r3, #1
 8003afe:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b02:	f7fe f99d 	bl	8001e40 <HAL_GetTick>
 8003b06:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003b08:	e008      	b.n	8003b1c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b0a:	f7fe f999 	bl	8001e40 <HAL_GetTick>
 8003b0e:	4602      	mov	r2, r0
 8003b10:	693b      	ldr	r3, [r7, #16]
 8003b12:	1ad3      	subs	r3, r2, r3
 8003b14:	2b02      	cmp	r3, #2
 8003b16:	d901      	bls.n	8003b1c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003b18:	2303      	movs	r3, #3
 8003b1a:	e1ef      	b.n	8003efc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003b1c:	4b32      	ldr	r3, [pc, #200]	; (8003be8 <HAL_RCC_OscConfig+0x504>)
 8003b1e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b22:	f003 0302 	and.w	r3, r3, #2
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d1ef      	bne.n	8003b0a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f003 0304 	and.w	r3, r3, #4
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	f000 80a6 	beq.w	8003c84 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b38:	2300      	movs	r3, #0
 8003b3a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003b3c:	4b2a      	ldr	r3, [pc, #168]	; (8003be8 <HAL_RCC_OscConfig+0x504>)
 8003b3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d10d      	bne.n	8003b64 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b48:	4b27      	ldr	r3, [pc, #156]	; (8003be8 <HAL_RCC_OscConfig+0x504>)
 8003b4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b4c:	4a26      	ldr	r2, [pc, #152]	; (8003be8 <HAL_RCC_OscConfig+0x504>)
 8003b4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b52:	6593      	str	r3, [r2, #88]	; 0x58
 8003b54:	4b24      	ldr	r3, [pc, #144]	; (8003be8 <HAL_RCC_OscConfig+0x504>)
 8003b56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b5c:	60bb      	str	r3, [r7, #8]
 8003b5e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b60:	2301      	movs	r3, #1
 8003b62:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003b64:	4b21      	ldr	r3, [pc, #132]	; (8003bec <HAL_RCC_OscConfig+0x508>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d118      	bne.n	8003ba2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003b70:	4b1e      	ldr	r3, [pc, #120]	; (8003bec <HAL_RCC_OscConfig+0x508>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	4a1d      	ldr	r2, [pc, #116]	; (8003bec <HAL_RCC_OscConfig+0x508>)
 8003b76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b7a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b7c:	f7fe f960 	bl	8001e40 <HAL_GetTick>
 8003b80:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003b82:	e008      	b.n	8003b96 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b84:	f7fe f95c 	bl	8001e40 <HAL_GetTick>
 8003b88:	4602      	mov	r2, r0
 8003b8a:	693b      	ldr	r3, [r7, #16]
 8003b8c:	1ad3      	subs	r3, r2, r3
 8003b8e:	2b02      	cmp	r3, #2
 8003b90:	d901      	bls.n	8003b96 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003b92:	2303      	movs	r3, #3
 8003b94:	e1b2      	b.n	8003efc <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003b96:	4b15      	ldr	r3, [pc, #84]	; (8003bec <HAL_RCC_OscConfig+0x508>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d0f0      	beq.n	8003b84 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	689b      	ldr	r3, [r3, #8]
 8003ba6:	2b01      	cmp	r3, #1
 8003ba8:	d108      	bne.n	8003bbc <HAL_RCC_OscConfig+0x4d8>
 8003baa:	4b0f      	ldr	r3, [pc, #60]	; (8003be8 <HAL_RCC_OscConfig+0x504>)
 8003bac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bb0:	4a0d      	ldr	r2, [pc, #52]	; (8003be8 <HAL_RCC_OscConfig+0x504>)
 8003bb2:	f043 0301 	orr.w	r3, r3, #1
 8003bb6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003bba:	e029      	b.n	8003c10 <HAL_RCC_OscConfig+0x52c>
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	689b      	ldr	r3, [r3, #8]
 8003bc0:	2b05      	cmp	r3, #5
 8003bc2:	d115      	bne.n	8003bf0 <HAL_RCC_OscConfig+0x50c>
 8003bc4:	4b08      	ldr	r3, [pc, #32]	; (8003be8 <HAL_RCC_OscConfig+0x504>)
 8003bc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bca:	4a07      	ldr	r2, [pc, #28]	; (8003be8 <HAL_RCC_OscConfig+0x504>)
 8003bcc:	f043 0304 	orr.w	r3, r3, #4
 8003bd0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003bd4:	4b04      	ldr	r3, [pc, #16]	; (8003be8 <HAL_RCC_OscConfig+0x504>)
 8003bd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bda:	4a03      	ldr	r2, [pc, #12]	; (8003be8 <HAL_RCC_OscConfig+0x504>)
 8003bdc:	f043 0301 	orr.w	r3, r3, #1
 8003be0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003be4:	e014      	b.n	8003c10 <HAL_RCC_OscConfig+0x52c>
 8003be6:	bf00      	nop
 8003be8:	40021000 	.word	0x40021000
 8003bec:	40007000 	.word	0x40007000
 8003bf0:	4b9a      	ldr	r3, [pc, #616]	; (8003e5c <HAL_RCC_OscConfig+0x778>)
 8003bf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bf6:	4a99      	ldr	r2, [pc, #612]	; (8003e5c <HAL_RCC_OscConfig+0x778>)
 8003bf8:	f023 0301 	bic.w	r3, r3, #1
 8003bfc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003c00:	4b96      	ldr	r3, [pc, #600]	; (8003e5c <HAL_RCC_OscConfig+0x778>)
 8003c02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c06:	4a95      	ldr	r2, [pc, #596]	; (8003e5c <HAL_RCC_OscConfig+0x778>)
 8003c08:	f023 0304 	bic.w	r3, r3, #4
 8003c0c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	689b      	ldr	r3, [r3, #8]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d016      	beq.n	8003c46 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c18:	f7fe f912 	bl	8001e40 <HAL_GetTick>
 8003c1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c1e:	e00a      	b.n	8003c36 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c20:	f7fe f90e 	bl	8001e40 <HAL_GetTick>
 8003c24:	4602      	mov	r2, r0
 8003c26:	693b      	ldr	r3, [r7, #16]
 8003c28:	1ad3      	subs	r3, r2, r3
 8003c2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d901      	bls.n	8003c36 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003c32:	2303      	movs	r3, #3
 8003c34:	e162      	b.n	8003efc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c36:	4b89      	ldr	r3, [pc, #548]	; (8003e5c <HAL_RCC_OscConfig+0x778>)
 8003c38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c3c:	f003 0302 	and.w	r3, r3, #2
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d0ed      	beq.n	8003c20 <HAL_RCC_OscConfig+0x53c>
 8003c44:	e015      	b.n	8003c72 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c46:	f7fe f8fb 	bl	8001e40 <HAL_GetTick>
 8003c4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003c4c:	e00a      	b.n	8003c64 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c4e:	f7fe f8f7 	bl	8001e40 <HAL_GetTick>
 8003c52:	4602      	mov	r2, r0
 8003c54:	693b      	ldr	r3, [r7, #16]
 8003c56:	1ad3      	subs	r3, r2, r3
 8003c58:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c5c:	4293      	cmp	r3, r2
 8003c5e:	d901      	bls.n	8003c64 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003c60:	2303      	movs	r3, #3
 8003c62:	e14b      	b.n	8003efc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003c64:	4b7d      	ldr	r3, [pc, #500]	; (8003e5c <HAL_RCC_OscConfig+0x778>)
 8003c66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c6a:	f003 0302 	and.w	r3, r3, #2
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d1ed      	bne.n	8003c4e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003c72:	7ffb      	ldrb	r3, [r7, #31]
 8003c74:	2b01      	cmp	r3, #1
 8003c76:	d105      	bne.n	8003c84 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c78:	4b78      	ldr	r3, [pc, #480]	; (8003e5c <HAL_RCC_OscConfig+0x778>)
 8003c7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c7c:	4a77      	ldr	r2, [pc, #476]	; (8003e5c <HAL_RCC_OscConfig+0x778>)
 8003c7e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c82:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f003 0320 	and.w	r3, r3, #32
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d03c      	beq.n	8003d0a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d01c      	beq.n	8003cd2 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003c98:	4b70      	ldr	r3, [pc, #448]	; (8003e5c <HAL_RCC_OscConfig+0x778>)
 8003c9a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003c9e:	4a6f      	ldr	r2, [pc, #444]	; (8003e5c <HAL_RCC_OscConfig+0x778>)
 8003ca0:	f043 0301 	orr.w	r3, r3, #1
 8003ca4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ca8:	f7fe f8ca 	bl	8001e40 <HAL_GetTick>
 8003cac:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003cae:	e008      	b.n	8003cc2 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003cb0:	f7fe f8c6 	bl	8001e40 <HAL_GetTick>
 8003cb4:	4602      	mov	r2, r0
 8003cb6:	693b      	ldr	r3, [r7, #16]
 8003cb8:	1ad3      	subs	r3, r2, r3
 8003cba:	2b02      	cmp	r3, #2
 8003cbc:	d901      	bls.n	8003cc2 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8003cbe:	2303      	movs	r3, #3
 8003cc0:	e11c      	b.n	8003efc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003cc2:	4b66      	ldr	r3, [pc, #408]	; (8003e5c <HAL_RCC_OscConfig+0x778>)
 8003cc4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003cc8:	f003 0302 	and.w	r3, r3, #2
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d0ef      	beq.n	8003cb0 <HAL_RCC_OscConfig+0x5cc>
 8003cd0:	e01b      	b.n	8003d0a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003cd2:	4b62      	ldr	r3, [pc, #392]	; (8003e5c <HAL_RCC_OscConfig+0x778>)
 8003cd4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003cd8:	4a60      	ldr	r2, [pc, #384]	; (8003e5c <HAL_RCC_OscConfig+0x778>)
 8003cda:	f023 0301 	bic.w	r3, r3, #1
 8003cde:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ce2:	f7fe f8ad 	bl	8001e40 <HAL_GetTick>
 8003ce6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003ce8:	e008      	b.n	8003cfc <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003cea:	f7fe f8a9 	bl	8001e40 <HAL_GetTick>
 8003cee:	4602      	mov	r2, r0
 8003cf0:	693b      	ldr	r3, [r7, #16]
 8003cf2:	1ad3      	subs	r3, r2, r3
 8003cf4:	2b02      	cmp	r3, #2
 8003cf6:	d901      	bls.n	8003cfc <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003cf8:	2303      	movs	r3, #3
 8003cfa:	e0ff      	b.n	8003efc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003cfc:	4b57      	ldr	r3, [pc, #348]	; (8003e5c <HAL_RCC_OscConfig+0x778>)
 8003cfe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003d02:	f003 0302 	and.w	r3, r3, #2
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d1ef      	bne.n	8003cea <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	f000 80f3 	beq.w	8003efa <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d18:	2b02      	cmp	r3, #2
 8003d1a:	f040 80c9 	bne.w	8003eb0 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003d1e:	4b4f      	ldr	r3, [pc, #316]	; (8003e5c <HAL_RCC_OscConfig+0x778>)
 8003d20:	68db      	ldr	r3, [r3, #12]
 8003d22:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d24:	697b      	ldr	r3, [r7, #20]
 8003d26:	f003 0203 	and.w	r2, r3, #3
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d2e:	429a      	cmp	r2, r3
 8003d30:	d12c      	bne.n	8003d8c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003d32:	697b      	ldr	r3, [r7, #20]
 8003d34:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d3c:	3b01      	subs	r3, #1
 8003d3e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d40:	429a      	cmp	r2, r3
 8003d42:	d123      	bne.n	8003d8c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003d44:	697b      	ldr	r3, [r7, #20]
 8003d46:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d4e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003d50:	429a      	cmp	r2, r3
 8003d52:	d11b      	bne.n	8003d8c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003d54:	697b      	ldr	r3, [r7, #20]
 8003d56:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d5e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003d60:	429a      	cmp	r2, r3
 8003d62:	d113      	bne.n	8003d8c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003d64:	697b      	ldr	r3, [r7, #20]
 8003d66:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d6e:	085b      	lsrs	r3, r3, #1
 8003d70:	3b01      	subs	r3, #1
 8003d72:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003d74:	429a      	cmp	r2, r3
 8003d76:	d109      	bne.n	8003d8c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003d78:	697b      	ldr	r3, [r7, #20]
 8003d7a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d82:	085b      	lsrs	r3, r3, #1
 8003d84:	3b01      	subs	r3, #1
 8003d86:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003d88:	429a      	cmp	r2, r3
 8003d8a:	d06b      	beq.n	8003e64 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003d8c:	69bb      	ldr	r3, [r7, #24]
 8003d8e:	2b0c      	cmp	r3, #12
 8003d90:	d062      	beq.n	8003e58 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003d92:	4b32      	ldr	r3, [pc, #200]	; (8003e5c <HAL_RCC_OscConfig+0x778>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d001      	beq.n	8003da2 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8003d9e:	2301      	movs	r3, #1
 8003da0:	e0ac      	b.n	8003efc <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003da2:	4b2e      	ldr	r3, [pc, #184]	; (8003e5c <HAL_RCC_OscConfig+0x778>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	4a2d      	ldr	r2, [pc, #180]	; (8003e5c <HAL_RCC_OscConfig+0x778>)
 8003da8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003dac:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003dae:	f7fe f847 	bl	8001e40 <HAL_GetTick>
 8003db2:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003db4:	e008      	b.n	8003dc8 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003db6:	f7fe f843 	bl	8001e40 <HAL_GetTick>
 8003dba:	4602      	mov	r2, r0
 8003dbc:	693b      	ldr	r3, [r7, #16]
 8003dbe:	1ad3      	subs	r3, r2, r3
 8003dc0:	2b02      	cmp	r3, #2
 8003dc2:	d901      	bls.n	8003dc8 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8003dc4:	2303      	movs	r3, #3
 8003dc6:	e099      	b.n	8003efc <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003dc8:	4b24      	ldr	r3, [pc, #144]	; (8003e5c <HAL_RCC_OscConfig+0x778>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d1f0      	bne.n	8003db6 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003dd4:	4b21      	ldr	r3, [pc, #132]	; (8003e5c <HAL_RCC_OscConfig+0x778>)
 8003dd6:	68da      	ldr	r2, [r3, #12]
 8003dd8:	4b21      	ldr	r3, [pc, #132]	; (8003e60 <HAL_RCC_OscConfig+0x77c>)
 8003dda:	4013      	ands	r3, r2
 8003ddc:	687a      	ldr	r2, [r7, #4]
 8003dde:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003de0:	687a      	ldr	r2, [r7, #4]
 8003de2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003de4:	3a01      	subs	r2, #1
 8003de6:	0112      	lsls	r2, r2, #4
 8003de8:	4311      	orrs	r1, r2
 8003dea:	687a      	ldr	r2, [r7, #4]
 8003dec:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003dee:	0212      	lsls	r2, r2, #8
 8003df0:	4311      	orrs	r1, r2
 8003df2:	687a      	ldr	r2, [r7, #4]
 8003df4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003df6:	0852      	lsrs	r2, r2, #1
 8003df8:	3a01      	subs	r2, #1
 8003dfa:	0552      	lsls	r2, r2, #21
 8003dfc:	4311      	orrs	r1, r2
 8003dfe:	687a      	ldr	r2, [r7, #4]
 8003e00:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003e02:	0852      	lsrs	r2, r2, #1
 8003e04:	3a01      	subs	r2, #1
 8003e06:	0652      	lsls	r2, r2, #25
 8003e08:	4311      	orrs	r1, r2
 8003e0a:	687a      	ldr	r2, [r7, #4]
 8003e0c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003e0e:	06d2      	lsls	r2, r2, #27
 8003e10:	430a      	orrs	r2, r1
 8003e12:	4912      	ldr	r1, [pc, #72]	; (8003e5c <HAL_RCC_OscConfig+0x778>)
 8003e14:	4313      	orrs	r3, r2
 8003e16:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003e18:	4b10      	ldr	r3, [pc, #64]	; (8003e5c <HAL_RCC_OscConfig+0x778>)
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	4a0f      	ldr	r2, [pc, #60]	; (8003e5c <HAL_RCC_OscConfig+0x778>)
 8003e1e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003e22:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003e24:	4b0d      	ldr	r3, [pc, #52]	; (8003e5c <HAL_RCC_OscConfig+0x778>)
 8003e26:	68db      	ldr	r3, [r3, #12]
 8003e28:	4a0c      	ldr	r2, [pc, #48]	; (8003e5c <HAL_RCC_OscConfig+0x778>)
 8003e2a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003e2e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003e30:	f7fe f806 	bl	8001e40 <HAL_GetTick>
 8003e34:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e36:	e008      	b.n	8003e4a <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e38:	f7fe f802 	bl	8001e40 <HAL_GetTick>
 8003e3c:	4602      	mov	r2, r0
 8003e3e:	693b      	ldr	r3, [r7, #16]
 8003e40:	1ad3      	subs	r3, r2, r3
 8003e42:	2b02      	cmp	r3, #2
 8003e44:	d901      	bls.n	8003e4a <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8003e46:	2303      	movs	r3, #3
 8003e48:	e058      	b.n	8003efc <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e4a:	4b04      	ldr	r3, [pc, #16]	; (8003e5c <HAL_RCC_OscConfig+0x778>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d0f0      	beq.n	8003e38 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003e56:	e050      	b.n	8003efa <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003e58:	2301      	movs	r3, #1
 8003e5a:	e04f      	b.n	8003efc <HAL_RCC_OscConfig+0x818>
 8003e5c:	40021000 	.word	0x40021000
 8003e60:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e64:	4b27      	ldr	r3, [pc, #156]	; (8003f04 <HAL_RCC_OscConfig+0x820>)
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d144      	bne.n	8003efa <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003e70:	4b24      	ldr	r3, [pc, #144]	; (8003f04 <HAL_RCC_OscConfig+0x820>)
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	4a23      	ldr	r2, [pc, #140]	; (8003f04 <HAL_RCC_OscConfig+0x820>)
 8003e76:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003e7a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003e7c:	4b21      	ldr	r3, [pc, #132]	; (8003f04 <HAL_RCC_OscConfig+0x820>)
 8003e7e:	68db      	ldr	r3, [r3, #12]
 8003e80:	4a20      	ldr	r2, [pc, #128]	; (8003f04 <HAL_RCC_OscConfig+0x820>)
 8003e82:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003e86:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003e88:	f7fd ffda 	bl	8001e40 <HAL_GetTick>
 8003e8c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e8e:	e008      	b.n	8003ea2 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e90:	f7fd ffd6 	bl	8001e40 <HAL_GetTick>
 8003e94:	4602      	mov	r2, r0
 8003e96:	693b      	ldr	r3, [r7, #16]
 8003e98:	1ad3      	subs	r3, r2, r3
 8003e9a:	2b02      	cmp	r3, #2
 8003e9c:	d901      	bls.n	8003ea2 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8003e9e:	2303      	movs	r3, #3
 8003ea0:	e02c      	b.n	8003efc <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ea2:	4b18      	ldr	r3, [pc, #96]	; (8003f04 <HAL_RCC_OscConfig+0x820>)
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d0f0      	beq.n	8003e90 <HAL_RCC_OscConfig+0x7ac>
 8003eae:	e024      	b.n	8003efa <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003eb0:	69bb      	ldr	r3, [r7, #24]
 8003eb2:	2b0c      	cmp	r3, #12
 8003eb4:	d01f      	beq.n	8003ef6 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003eb6:	4b13      	ldr	r3, [pc, #76]	; (8003f04 <HAL_RCC_OscConfig+0x820>)
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	4a12      	ldr	r2, [pc, #72]	; (8003f04 <HAL_RCC_OscConfig+0x820>)
 8003ebc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003ec0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ec2:	f7fd ffbd 	bl	8001e40 <HAL_GetTick>
 8003ec6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ec8:	e008      	b.n	8003edc <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003eca:	f7fd ffb9 	bl	8001e40 <HAL_GetTick>
 8003ece:	4602      	mov	r2, r0
 8003ed0:	693b      	ldr	r3, [r7, #16]
 8003ed2:	1ad3      	subs	r3, r2, r3
 8003ed4:	2b02      	cmp	r3, #2
 8003ed6:	d901      	bls.n	8003edc <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8003ed8:	2303      	movs	r3, #3
 8003eda:	e00f      	b.n	8003efc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003edc:	4b09      	ldr	r3, [pc, #36]	; (8003f04 <HAL_RCC_OscConfig+0x820>)
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d1f0      	bne.n	8003eca <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8003ee8:	4b06      	ldr	r3, [pc, #24]	; (8003f04 <HAL_RCC_OscConfig+0x820>)
 8003eea:	68da      	ldr	r2, [r3, #12]
 8003eec:	4905      	ldr	r1, [pc, #20]	; (8003f04 <HAL_RCC_OscConfig+0x820>)
 8003eee:	4b06      	ldr	r3, [pc, #24]	; (8003f08 <HAL_RCC_OscConfig+0x824>)
 8003ef0:	4013      	ands	r3, r2
 8003ef2:	60cb      	str	r3, [r1, #12]
 8003ef4:	e001      	b.n	8003efa <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003ef6:	2301      	movs	r3, #1
 8003ef8:	e000      	b.n	8003efc <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8003efa:	2300      	movs	r3, #0
}
 8003efc:	4618      	mov	r0, r3
 8003efe:	3720      	adds	r7, #32
 8003f00:	46bd      	mov	sp, r7
 8003f02:	bd80      	pop	{r7, pc}
 8003f04:	40021000 	.word	0x40021000
 8003f08:	feeefffc 	.word	0xfeeefffc

08003f0c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b084      	sub	sp, #16
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
 8003f14:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d101      	bne.n	8003f20 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003f1c:	2301      	movs	r3, #1
 8003f1e:	e0e7      	b.n	80040f0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003f20:	4b75      	ldr	r3, [pc, #468]	; (80040f8 <HAL_RCC_ClockConfig+0x1ec>)
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f003 0307 	and.w	r3, r3, #7
 8003f28:	683a      	ldr	r2, [r7, #0]
 8003f2a:	429a      	cmp	r2, r3
 8003f2c:	d910      	bls.n	8003f50 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f2e:	4b72      	ldr	r3, [pc, #456]	; (80040f8 <HAL_RCC_ClockConfig+0x1ec>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f023 0207 	bic.w	r2, r3, #7
 8003f36:	4970      	ldr	r1, [pc, #448]	; (80040f8 <HAL_RCC_ClockConfig+0x1ec>)
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	4313      	orrs	r3, r2
 8003f3c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f3e:	4b6e      	ldr	r3, [pc, #440]	; (80040f8 <HAL_RCC_ClockConfig+0x1ec>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f003 0307 	and.w	r3, r3, #7
 8003f46:	683a      	ldr	r2, [r7, #0]
 8003f48:	429a      	cmp	r2, r3
 8003f4a:	d001      	beq.n	8003f50 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003f4c:	2301      	movs	r3, #1
 8003f4e:	e0cf      	b.n	80040f0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f003 0302 	and.w	r3, r3, #2
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d010      	beq.n	8003f7e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	689a      	ldr	r2, [r3, #8]
 8003f60:	4b66      	ldr	r3, [pc, #408]	; (80040fc <HAL_RCC_ClockConfig+0x1f0>)
 8003f62:	689b      	ldr	r3, [r3, #8]
 8003f64:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003f68:	429a      	cmp	r2, r3
 8003f6a:	d908      	bls.n	8003f7e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f6c:	4b63      	ldr	r3, [pc, #396]	; (80040fc <HAL_RCC_ClockConfig+0x1f0>)
 8003f6e:	689b      	ldr	r3, [r3, #8]
 8003f70:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	689b      	ldr	r3, [r3, #8]
 8003f78:	4960      	ldr	r1, [pc, #384]	; (80040fc <HAL_RCC_ClockConfig+0x1f0>)
 8003f7a:	4313      	orrs	r3, r2
 8003f7c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f003 0301 	and.w	r3, r3, #1
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d04c      	beq.n	8004024 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	685b      	ldr	r3, [r3, #4]
 8003f8e:	2b03      	cmp	r3, #3
 8003f90:	d107      	bne.n	8003fa2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f92:	4b5a      	ldr	r3, [pc, #360]	; (80040fc <HAL_RCC_ClockConfig+0x1f0>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d121      	bne.n	8003fe2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	e0a6      	b.n	80040f0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	685b      	ldr	r3, [r3, #4]
 8003fa6:	2b02      	cmp	r3, #2
 8003fa8:	d107      	bne.n	8003fba <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003faa:	4b54      	ldr	r3, [pc, #336]	; (80040fc <HAL_RCC_ClockConfig+0x1f0>)
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d115      	bne.n	8003fe2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	e09a      	b.n	80040f0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	685b      	ldr	r3, [r3, #4]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d107      	bne.n	8003fd2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003fc2:	4b4e      	ldr	r3, [pc, #312]	; (80040fc <HAL_RCC_ClockConfig+0x1f0>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f003 0302 	and.w	r3, r3, #2
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d109      	bne.n	8003fe2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003fce:	2301      	movs	r3, #1
 8003fd0:	e08e      	b.n	80040f0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003fd2:	4b4a      	ldr	r3, [pc, #296]	; (80040fc <HAL_RCC_ClockConfig+0x1f0>)
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d101      	bne.n	8003fe2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003fde:	2301      	movs	r3, #1
 8003fe0:	e086      	b.n	80040f0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003fe2:	4b46      	ldr	r3, [pc, #280]	; (80040fc <HAL_RCC_ClockConfig+0x1f0>)
 8003fe4:	689b      	ldr	r3, [r3, #8]
 8003fe6:	f023 0203 	bic.w	r2, r3, #3
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	685b      	ldr	r3, [r3, #4]
 8003fee:	4943      	ldr	r1, [pc, #268]	; (80040fc <HAL_RCC_ClockConfig+0x1f0>)
 8003ff0:	4313      	orrs	r3, r2
 8003ff2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ff4:	f7fd ff24 	bl	8001e40 <HAL_GetTick>
 8003ff8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ffa:	e00a      	b.n	8004012 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ffc:	f7fd ff20 	bl	8001e40 <HAL_GetTick>
 8004000:	4602      	mov	r2, r0
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	1ad3      	subs	r3, r2, r3
 8004006:	f241 3288 	movw	r2, #5000	; 0x1388
 800400a:	4293      	cmp	r3, r2
 800400c:	d901      	bls.n	8004012 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800400e:	2303      	movs	r3, #3
 8004010:	e06e      	b.n	80040f0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004012:	4b3a      	ldr	r3, [pc, #232]	; (80040fc <HAL_RCC_ClockConfig+0x1f0>)
 8004014:	689b      	ldr	r3, [r3, #8]
 8004016:	f003 020c 	and.w	r2, r3, #12
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	685b      	ldr	r3, [r3, #4]
 800401e:	009b      	lsls	r3, r3, #2
 8004020:	429a      	cmp	r2, r3
 8004022:	d1eb      	bne.n	8003ffc <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f003 0302 	and.w	r3, r3, #2
 800402c:	2b00      	cmp	r3, #0
 800402e:	d010      	beq.n	8004052 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	689a      	ldr	r2, [r3, #8]
 8004034:	4b31      	ldr	r3, [pc, #196]	; (80040fc <HAL_RCC_ClockConfig+0x1f0>)
 8004036:	689b      	ldr	r3, [r3, #8]
 8004038:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800403c:	429a      	cmp	r2, r3
 800403e:	d208      	bcs.n	8004052 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004040:	4b2e      	ldr	r3, [pc, #184]	; (80040fc <HAL_RCC_ClockConfig+0x1f0>)
 8004042:	689b      	ldr	r3, [r3, #8]
 8004044:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	689b      	ldr	r3, [r3, #8]
 800404c:	492b      	ldr	r1, [pc, #172]	; (80040fc <HAL_RCC_ClockConfig+0x1f0>)
 800404e:	4313      	orrs	r3, r2
 8004050:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004052:	4b29      	ldr	r3, [pc, #164]	; (80040f8 <HAL_RCC_ClockConfig+0x1ec>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f003 0307 	and.w	r3, r3, #7
 800405a:	683a      	ldr	r2, [r7, #0]
 800405c:	429a      	cmp	r2, r3
 800405e:	d210      	bcs.n	8004082 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004060:	4b25      	ldr	r3, [pc, #148]	; (80040f8 <HAL_RCC_ClockConfig+0x1ec>)
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f023 0207 	bic.w	r2, r3, #7
 8004068:	4923      	ldr	r1, [pc, #140]	; (80040f8 <HAL_RCC_ClockConfig+0x1ec>)
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	4313      	orrs	r3, r2
 800406e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004070:	4b21      	ldr	r3, [pc, #132]	; (80040f8 <HAL_RCC_ClockConfig+0x1ec>)
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f003 0307 	and.w	r3, r3, #7
 8004078:	683a      	ldr	r2, [r7, #0]
 800407a:	429a      	cmp	r2, r3
 800407c:	d001      	beq.n	8004082 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800407e:	2301      	movs	r3, #1
 8004080:	e036      	b.n	80040f0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f003 0304 	and.w	r3, r3, #4
 800408a:	2b00      	cmp	r3, #0
 800408c:	d008      	beq.n	80040a0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800408e:	4b1b      	ldr	r3, [pc, #108]	; (80040fc <HAL_RCC_ClockConfig+0x1f0>)
 8004090:	689b      	ldr	r3, [r3, #8]
 8004092:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	68db      	ldr	r3, [r3, #12]
 800409a:	4918      	ldr	r1, [pc, #96]	; (80040fc <HAL_RCC_ClockConfig+0x1f0>)
 800409c:	4313      	orrs	r3, r2
 800409e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f003 0308 	and.w	r3, r3, #8
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d009      	beq.n	80040c0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80040ac:	4b13      	ldr	r3, [pc, #76]	; (80040fc <HAL_RCC_ClockConfig+0x1f0>)
 80040ae:	689b      	ldr	r3, [r3, #8]
 80040b0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	691b      	ldr	r3, [r3, #16]
 80040b8:	00db      	lsls	r3, r3, #3
 80040ba:	4910      	ldr	r1, [pc, #64]	; (80040fc <HAL_RCC_ClockConfig+0x1f0>)
 80040bc:	4313      	orrs	r3, r2
 80040be:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80040c0:	f000 f824 	bl	800410c <HAL_RCC_GetSysClockFreq>
 80040c4:	4602      	mov	r2, r0
 80040c6:	4b0d      	ldr	r3, [pc, #52]	; (80040fc <HAL_RCC_ClockConfig+0x1f0>)
 80040c8:	689b      	ldr	r3, [r3, #8]
 80040ca:	091b      	lsrs	r3, r3, #4
 80040cc:	f003 030f 	and.w	r3, r3, #15
 80040d0:	490b      	ldr	r1, [pc, #44]	; (8004100 <HAL_RCC_ClockConfig+0x1f4>)
 80040d2:	5ccb      	ldrb	r3, [r1, r3]
 80040d4:	f003 031f 	and.w	r3, r3, #31
 80040d8:	fa22 f303 	lsr.w	r3, r2, r3
 80040dc:	4a09      	ldr	r2, [pc, #36]	; (8004104 <HAL_RCC_ClockConfig+0x1f8>)
 80040de:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80040e0:	4b09      	ldr	r3, [pc, #36]	; (8004108 <HAL_RCC_ClockConfig+0x1fc>)
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	4618      	mov	r0, r3
 80040e6:	f7fd fe5b 	bl	8001da0 <HAL_InitTick>
 80040ea:	4603      	mov	r3, r0
 80040ec:	72fb      	strb	r3, [r7, #11]

  return status;
 80040ee:	7afb      	ldrb	r3, [r7, #11]
}
 80040f0:	4618      	mov	r0, r3
 80040f2:	3710      	adds	r7, #16
 80040f4:	46bd      	mov	sp, r7
 80040f6:	bd80      	pop	{r7, pc}
 80040f8:	40022000 	.word	0x40022000
 80040fc:	40021000 	.word	0x40021000
 8004100:	08007704 	.word	0x08007704
 8004104:	20000004 	.word	0x20000004
 8004108:	20000008 	.word	0x20000008

0800410c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800410c:	b480      	push	{r7}
 800410e:	b089      	sub	sp, #36	; 0x24
 8004110:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004112:	2300      	movs	r3, #0
 8004114:	61fb      	str	r3, [r7, #28]
 8004116:	2300      	movs	r3, #0
 8004118:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800411a:	4b3e      	ldr	r3, [pc, #248]	; (8004214 <HAL_RCC_GetSysClockFreq+0x108>)
 800411c:	689b      	ldr	r3, [r3, #8]
 800411e:	f003 030c 	and.w	r3, r3, #12
 8004122:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004124:	4b3b      	ldr	r3, [pc, #236]	; (8004214 <HAL_RCC_GetSysClockFreq+0x108>)
 8004126:	68db      	ldr	r3, [r3, #12]
 8004128:	f003 0303 	and.w	r3, r3, #3
 800412c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800412e:	693b      	ldr	r3, [r7, #16]
 8004130:	2b00      	cmp	r3, #0
 8004132:	d005      	beq.n	8004140 <HAL_RCC_GetSysClockFreq+0x34>
 8004134:	693b      	ldr	r3, [r7, #16]
 8004136:	2b0c      	cmp	r3, #12
 8004138:	d121      	bne.n	800417e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	2b01      	cmp	r3, #1
 800413e:	d11e      	bne.n	800417e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004140:	4b34      	ldr	r3, [pc, #208]	; (8004214 <HAL_RCC_GetSysClockFreq+0x108>)
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f003 0308 	and.w	r3, r3, #8
 8004148:	2b00      	cmp	r3, #0
 800414a:	d107      	bne.n	800415c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800414c:	4b31      	ldr	r3, [pc, #196]	; (8004214 <HAL_RCC_GetSysClockFreq+0x108>)
 800414e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004152:	0a1b      	lsrs	r3, r3, #8
 8004154:	f003 030f 	and.w	r3, r3, #15
 8004158:	61fb      	str	r3, [r7, #28]
 800415a:	e005      	b.n	8004168 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800415c:	4b2d      	ldr	r3, [pc, #180]	; (8004214 <HAL_RCC_GetSysClockFreq+0x108>)
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	091b      	lsrs	r3, r3, #4
 8004162:	f003 030f 	and.w	r3, r3, #15
 8004166:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004168:	4a2b      	ldr	r2, [pc, #172]	; (8004218 <HAL_RCC_GetSysClockFreq+0x10c>)
 800416a:	69fb      	ldr	r3, [r7, #28]
 800416c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004170:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004172:	693b      	ldr	r3, [r7, #16]
 8004174:	2b00      	cmp	r3, #0
 8004176:	d10d      	bne.n	8004194 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004178:	69fb      	ldr	r3, [r7, #28]
 800417a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800417c:	e00a      	b.n	8004194 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800417e:	693b      	ldr	r3, [r7, #16]
 8004180:	2b04      	cmp	r3, #4
 8004182:	d102      	bne.n	800418a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004184:	4b25      	ldr	r3, [pc, #148]	; (800421c <HAL_RCC_GetSysClockFreq+0x110>)
 8004186:	61bb      	str	r3, [r7, #24]
 8004188:	e004      	b.n	8004194 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800418a:	693b      	ldr	r3, [r7, #16]
 800418c:	2b08      	cmp	r3, #8
 800418e:	d101      	bne.n	8004194 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004190:	4b23      	ldr	r3, [pc, #140]	; (8004220 <HAL_RCC_GetSysClockFreq+0x114>)
 8004192:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004194:	693b      	ldr	r3, [r7, #16]
 8004196:	2b0c      	cmp	r3, #12
 8004198:	d134      	bne.n	8004204 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800419a:	4b1e      	ldr	r3, [pc, #120]	; (8004214 <HAL_RCC_GetSysClockFreq+0x108>)
 800419c:	68db      	ldr	r3, [r3, #12]
 800419e:	f003 0303 	and.w	r3, r3, #3
 80041a2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80041a4:	68bb      	ldr	r3, [r7, #8]
 80041a6:	2b02      	cmp	r3, #2
 80041a8:	d003      	beq.n	80041b2 <HAL_RCC_GetSysClockFreq+0xa6>
 80041aa:	68bb      	ldr	r3, [r7, #8]
 80041ac:	2b03      	cmp	r3, #3
 80041ae:	d003      	beq.n	80041b8 <HAL_RCC_GetSysClockFreq+0xac>
 80041b0:	e005      	b.n	80041be <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80041b2:	4b1a      	ldr	r3, [pc, #104]	; (800421c <HAL_RCC_GetSysClockFreq+0x110>)
 80041b4:	617b      	str	r3, [r7, #20]
      break;
 80041b6:	e005      	b.n	80041c4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80041b8:	4b19      	ldr	r3, [pc, #100]	; (8004220 <HAL_RCC_GetSysClockFreq+0x114>)
 80041ba:	617b      	str	r3, [r7, #20]
      break;
 80041bc:	e002      	b.n	80041c4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80041be:	69fb      	ldr	r3, [r7, #28]
 80041c0:	617b      	str	r3, [r7, #20]
      break;
 80041c2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80041c4:	4b13      	ldr	r3, [pc, #76]	; (8004214 <HAL_RCC_GetSysClockFreq+0x108>)
 80041c6:	68db      	ldr	r3, [r3, #12]
 80041c8:	091b      	lsrs	r3, r3, #4
 80041ca:	f003 0307 	and.w	r3, r3, #7
 80041ce:	3301      	adds	r3, #1
 80041d0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80041d2:	4b10      	ldr	r3, [pc, #64]	; (8004214 <HAL_RCC_GetSysClockFreq+0x108>)
 80041d4:	68db      	ldr	r3, [r3, #12]
 80041d6:	0a1b      	lsrs	r3, r3, #8
 80041d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80041dc:	697a      	ldr	r2, [r7, #20]
 80041de:	fb03 f202 	mul.w	r2, r3, r2
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80041e8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80041ea:	4b0a      	ldr	r3, [pc, #40]	; (8004214 <HAL_RCC_GetSysClockFreq+0x108>)
 80041ec:	68db      	ldr	r3, [r3, #12]
 80041ee:	0e5b      	lsrs	r3, r3, #25
 80041f0:	f003 0303 	and.w	r3, r3, #3
 80041f4:	3301      	adds	r3, #1
 80041f6:	005b      	lsls	r3, r3, #1
 80041f8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80041fa:	697a      	ldr	r2, [r7, #20]
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8004202:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004204:	69bb      	ldr	r3, [r7, #24]
}
 8004206:	4618      	mov	r0, r3
 8004208:	3724      	adds	r7, #36	; 0x24
 800420a:	46bd      	mov	sp, r7
 800420c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004210:	4770      	bx	lr
 8004212:	bf00      	nop
 8004214:	40021000 	.word	0x40021000
 8004218:	0800771c 	.word	0x0800771c
 800421c:	00f42400 	.word	0x00f42400
 8004220:	007a1200 	.word	0x007a1200

08004224 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004224:	b480      	push	{r7}
 8004226:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004228:	4b03      	ldr	r3, [pc, #12]	; (8004238 <HAL_RCC_GetHCLKFreq+0x14>)
 800422a:	681b      	ldr	r3, [r3, #0]
}
 800422c:	4618      	mov	r0, r3
 800422e:	46bd      	mov	sp, r7
 8004230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004234:	4770      	bx	lr
 8004236:	bf00      	nop
 8004238:	20000004 	.word	0x20000004

0800423c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800423c:	b580      	push	{r7, lr}
 800423e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004240:	f7ff fff0 	bl	8004224 <HAL_RCC_GetHCLKFreq>
 8004244:	4602      	mov	r2, r0
 8004246:	4b06      	ldr	r3, [pc, #24]	; (8004260 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004248:	689b      	ldr	r3, [r3, #8]
 800424a:	0a1b      	lsrs	r3, r3, #8
 800424c:	f003 0307 	and.w	r3, r3, #7
 8004250:	4904      	ldr	r1, [pc, #16]	; (8004264 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004252:	5ccb      	ldrb	r3, [r1, r3]
 8004254:	f003 031f 	and.w	r3, r3, #31
 8004258:	fa22 f303 	lsr.w	r3, r2, r3
}
 800425c:	4618      	mov	r0, r3
 800425e:	bd80      	pop	{r7, pc}
 8004260:	40021000 	.word	0x40021000
 8004264:	08007714 	.word	0x08007714

08004268 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004268:	b580      	push	{r7, lr}
 800426a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800426c:	f7ff ffda 	bl	8004224 <HAL_RCC_GetHCLKFreq>
 8004270:	4602      	mov	r2, r0
 8004272:	4b06      	ldr	r3, [pc, #24]	; (800428c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004274:	689b      	ldr	r3, [r3, #8]
 8004276:	0adb      	lsrs	r3, r3, #11
 8004278:	f003 0307 	and.w	r3, r3, #7
 800427c:	4904      	ldr	r1, [pc, #16]	; (8004290 <HAL_RCC_GetPCLK2Freq+0x28>)
 800427e:	5ccb      	ldrb	r3, [r1, r3]
 8004280:	f003 031f 	and.w	r3, r3, #31
 8004284:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004288:	4618      	mov	r0, r3
 800428a:	bd80      	pop	{r7, pc}
 800428c:	40021000 	.word	0x40021000
 8004290:	08007714 	.word	0x08007714

08004294 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004294:	b580      	push	{r7, lr}
 8004296:	b086      	sub	sp, #24
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800429c:	2300      	movs	r3, #0
 800429e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80042a0:	4b2a      	ldr	r3, [pc, #168]	; (800434c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80042a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d003      	beq.n	80042b4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80042ac:	f7ff f9b6 	bl	800361c <HAL_PWREx_GetVoltageRange>
 80042b0:	6178      	str	r0, [r7, #20]
 80042b2:	e014      	b.n	80042de <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80042b4:	4b25      	ldr	r3, [pc, #148]	; (800434c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80042b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042b8:	4a24      	ldr	r2, [pc, #144]	; (800434c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80042ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042be:	6593      	str	r3, [r2, #88]	; 0x58
 80042c0:	4b22      	ldr	r3, [pc, #136]	; (800434c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80042c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042c8:	60fb      	str	r3, [r7, #12]
 80042ca:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80042cc:	f7ff f9a6 	bl	800361c <HAL_PWREx_GetVoltageRange>
 80042d0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80042d2:	4b1e      	ldr	r3, [pc, #120]	; (800434c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80042d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042d6:	4a1d      	ldr	r2, [pc, #116]	; (800434c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80042d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80042dc:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80042de:	697b      	ldr	r3, [r7, #20]
 80042e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80042e4:	d10b      	bne.n	80042fe <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	2b80      	cmp	r3, #128	; 0x80
 80042ea:	d919      	bls.n	8004320 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2ba0      	cmp	r3, #160	; 0xa0
 80042f0:	d902      	bls.n	80042f8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80042f2:	2302      	movs	r3, #2
 80042f4:	613b      	str	r3, [r7, #16]
 80042f6:	e013      	b.n	8004320 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80042f8:	2301      	movs	r3, #1
 80042fa:	613b      	str	r3, [r7, #16]
 80042fc:	e010      	b.n	8004320 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2b80      	cmp	r3, #128	; 0x80
 8004302:	d902      	bls.n	800430a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004304:	2303      	movs	r3, #3
 8004306:	613b      	str	r3, [r7, #16]
 8004308:	e00a      	b.n	8004320 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2b80      	cmp	r3, #128	; 0x80
 800430e:	d102      	bne.n	8004316 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004310:	2302      	movs	r3, #2
 8004312:	613b      	str	r3, [r7, #16]
 8004314:	e004      	b.n	8004320 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	2b70      	cmp	r3, #112	; 0x70
 800431a:	d101      	bne.n	8004320 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800431c:	2301      	movs	r3, #1
 800431e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004320:	4b0b      	ldr	r3, [pc, #44]	; (8004350 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f023 0207 	bic.w	r2, r3, #7
 8004328:	4909      	ldr	r1, [pc, #36]	; (8004350 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800432a:	693b      	ldr	r3, [r7, #16]
 800432c:	4313      	orrs	r3, r2
 800432e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004330:	4b07      	ldr	r3, [pc, #28]	; (8004350 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f003 0307 	and.w	r3, r3, #7
 8004338:	693a      	ldr	r2, [r7, #16]
 800433a:	429a      	cmp	r2, r3
 800433c:	d001      	beq.n	8004342 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800433e:	2301      	movs	r3, #1
 8004340:	e000      	b.n	8004344 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004342:	2300      	movs	r3, #0
}
 8004344:	4618      	mov	r0, r3
 8004346:	3718      	adds	r7, #24
 8004348:	46bd      	mov	sp, r7
 800434a:	bd80      	pop	{r7, pc}
 800434c:	40021000 	.word	0x40021000
 8004350:	40022000 	.word	0x40022000

08004354 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004354:	b580      	push	{r7, lr}
 8004356:	b086      	sub	sp, #24
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800435c:	2300      	movs	r3, #0
 800435e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004360:	2300      	movs	r3, #0
 8004362:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800436c:	2b00      	cmp	r3, #0
 800436e:	d031      	beq.n	80043d4 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004374:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004378:	d01a      	beq.n	80043b0 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800437a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800437e:	d814      	bhi.n	80043aa <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004380:	2b00      	cmp	r3, #0
 8004382:	d009      	beq.n	8004398 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004384:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004388:	d10f      	bne.n	80043aa <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800438a:	4b5d      	ldr	r3, [pc, #372]	; (8004500 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800438c:	68db      	ldr	r3, [r3, #12]
 800438e:	4a5c      	ldr	r2, [pc, #368]	; (8004500 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004390:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004394:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004396:	e00c      	b.n	80043b2 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	3304      	adds	r3, #4
 800439c:	2100      	movs	r1, #0
 800439e:	4618      	mov	r0, r3
 80043a0:	f000 fa44 	bl	800482c <RCCEx_PLLSAI1_Config>
 80043a4:	4603      	mov	r3, r0
 80043a6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80043a8:	e003      	b.n	80043b2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80043aa:	2301      	movs	r3, #1
 80043ac:	74fb      	strb	r3, [r7, #19]
      break;
 80043ae:	e000      	b.n	80043b2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80043b0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80043b2:	7cfb      	ldrb	r3, [r7, #19]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d10b      	bne.n	80043d0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80043b8:	4b51      	ldr	r3, [pc, #324]	; (8004500 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80043ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043be:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043c6:	494e      	ldr	r1, [pc, #312]	; (8004500 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80043c8:	4313      	orrs	r3, r2
 80043ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80043ce:	e001      	b.n	80043d4 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043d0:	7cfb      	ldrb	r3, [r7, #19]
 80043d2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043dc:	2b00      	cmp	r3, #0
 80043de:	f000 809e 	beq.w	800451e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80043e2:	2300      	movs	r3, #0
 80043e4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80043e6:	4b46      	ldr	r3, [pc, #280]	; (8004500 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80043e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d101      	bne.n	80043f6 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80043f2:	2301      	movs	r3, #1
 80043f4:	e000      	b.n	80043f8 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 80043f6:	2300      	movs	r3, #0
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d00d      	beq.n	8004418 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80043fc:	4b40      	ldr	r3, [pc, #256]	; (8004500 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80043fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004400:	4a3f      	ldr	r2, [pc, #252]	; (8004500 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004402:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004406:	6593      	str	r3, [r2, #88]	; 0x58
 8004408:	4b3d      	ldr	r3, [pc, #244]	; (8004500 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800440a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800440c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004410:	60bb      	str	r3, [r7, #8]
 8004412:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004414:	2301      	movs	r3, #1
 8004416:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004418:	4b3a      	ldr	r3, [pc, #232]	; (8004504 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	4a39      	ldr	r2, [pc, #228]	; (8004504 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800441e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004422:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004424:	f7fd fd0c 	bl	8001e40 <HAL_GetTick>
 8004428:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800442a:	e009      	b.n	8004440 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800442c:	f7fd fd08 	bl	8001e40 <HAL_GetTick>
 8004430:	4602      	mov	r2, r0
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	1ad3      	subs	r3, r2, r3
 8004436:	2b02      	cmp	r3, #2
 8004438:	d902      	bls.n	8004440 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 800443a:	2303      	movs	r3, #3
 800443c:	74fb      	strb	r3, [r7, #19]
        break;
 800443e:	e005      	b.n	800444c <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004440:	4b30      	ldr	r3, [pc, #192]	; (8004504 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004448:	2b00      	cmp	r3, #0
 800444a:	d0ef      	beq.n	800442c <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 800444c:	7cfb      	ldrb	r3, [r7, #19]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d15a      	bne.n	8004508 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004452:	4b2b      	ldr	r3, [pc, #172]	; (8004500 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004454:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004458:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800445c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800445e:	697b      	ldr	r3, [r7, #20]
 8004460:	2b00      	cmp	r3, #0
 8004462:	d01e      	beq.n	80044a2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004468:	697a      	ldr	r2, [r7, #20]
 800446a:	429a      	cmp	r2, r3
 800446c:	d019      	beq.n	80044a2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800446e:	4b24      	ldr	r3, [pc, #144]	; (8004500 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004470:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004474:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004478:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800447a:	4b21      	ldr	r3, [pc, #132]	; (8004500 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800447c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004480:	4a1f      	ldr	r2, [pc, #124]	; (8004500 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004482:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004486:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800448a:	4b1d      	ldr	r3, [pc, #116]	; (8004500 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800448c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004490:	4a1b      	ldr	r2, [pc, #108]	; (8004500 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004492:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004496:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800449a:	4a19      	ldr	r2, [pc, #100]	; (8004500 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800449c:	697b      	ldr	r3, [r7, #20]
 800449e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80044a2:	697b      	ldr	r3, [r7, #20]
 80044a4:	f003 0301 	and.w	r3, r3, #1
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d016      	beq.n	80044da <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044ac:	f7fd fcc8 	bl	8001e40 <HAL_GetTick>
 80044b0:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80044b2:	e00b      	b.n	80044cc <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80044b4:	f7fd fcc4 	bl	8001e40 <HAL_GetTick>
 80044b8:	4602      	mov	r2, r0
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	1ad3      	subs	r3, r2, r3
 80044be:	f241 3288 	movw	r2, #5000	; 0x1388
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d902      	bls.n	80044cc <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80044c6:	2303      	movs	r3, #3
 80044c8:	74fb      	strb	r3, [r7, #19]
            break;
 80044ca:	e006      	b.n	80044da <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80044cc:	4b0c      	ldr	r3, [pc, #48]	; (8004500 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80044ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044d2:	f003 0302 	and.w	r3, r3, #2
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d0ec      	beq.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 80044da:	7cfb      	ldrb	r3, [r7, #19]
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d10b      	bne.n	80044f8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80044e0:	4b07      	ldr	r3, [pc, #28]	; (8004500 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80044e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044e6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80044ee:	4904      	ldr	r1, [pc, #16]	; (8004500 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80044f0:	4313      	orrs	r3, r2
 80044f2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80044f6:	e009      	b.n	800450c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80044f8:	7cfb      	ldrb	r3, [r7, #19]
 80044fa:	74bb      	strb	r3, [r7, #18]
 80044fc:	e006      	b.n	800450c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 80044fe:	bf00      	nop
 8004500:	40021000 	.word	0x40021000
 8004504:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004508:	7cfb      	ldrb	r3, [r7, #19]
 800450a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800450c:	7c7b      	ldrb	r3, [r7, #17]
 800450e:	2b01      	cmp	r3, #1
 8004510:	d105      	bne.n	800451e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004512:	4b9e      	ldr	r3, [pc, #632]	; (800478c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004514:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004516:	4a9d      	ldr	r2, [pc, #628]	; (800478c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004518:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800451c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f003 0301 	and.w	r3, r3, #1
 8004526:	2b00      	cmp	r3, #0
 8004528:	d00a      	beq.n	8004540 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800452a:	4b98      	ldr	r3, [pc, #608]	; (800478c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800452c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004530:	f023 0203 	bic.w	r2, r3, #3
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6a1b      	ldr	r3, [r3, #32]
 8004538:	4994      	ldr	r1, [pc, #592]	; (800478c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800453a:	4313      	orrs	r3, r2
 800453c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f003 0302 	and.w	r3, r3, #2
 8004548:	2b00      	cmp	r3, #0
 800454a:	d00a      	beq.n	8004562 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800454c:	4b8f      	ldr	r3, [pc, #572]	; (800478c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800454e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004552:	f023 020c 	bic.w	r2, r3, #12
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800455a:	498c      	ldr	r1, [pc, #560]	; (800478c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800455c:	4313      	orrs	r3, r2
 800455e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f003 0304 	and.w	r3, r3, #4
 800456a:	2b00      	cmp	r3, #0
 800456c:	d00a      	beq.n	8004584 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800456e:	4b87      	ldr	r3, [pc, #540]	; (800478c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004570:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004574:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800457c:	4983      	ldr	r1, [pc, #524]	; (800478c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800457e:	4313      	orrs	r3, r2
 8004580:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f003 0308 	and.w	r3, r3, #8
 800458c:	2b00      	cmp	r3, #0
 800458e:	d00a      	beq.n	80045a6 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004590:	4b7e      	ldr	r3, [pc, #504]	; (800478c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004592:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004596:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800459e:	497b      	ldr	r1, [pc, #492]	; (800478c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80045a0:	4313      	orrs	r3, r2
 80045a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f003 0320 	and.w	r3, r3, #32
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d00a      	beq.n	80045c8 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80045b2:	4b76      	ldr	r3, [pc, #472]	; (800478c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80045b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045b8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045c0:	4972      	ldr	r1, [pc, #456]	; (800478c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80045c2:	4313      	orrs	r3, r2
 80045c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d00a      	beq.n	80045ea <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80045d4:	4b6d      	ldr	r3, [pc, #436]	; (800478c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80045d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045da:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045e2:	496a      	ldr	r1, [pc, #424]	; (800478c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80045e4:	4313      	orrs	r3, r2
 80045e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d00a      	beq.n	800460c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80045f6:	4b65      	ldr	r3, [pc, #404]	; (800478c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80045f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045fc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004604:	4961      	ldr	r1, [pc, #388]	; (800478c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004606:	4313      	orrs	r3, r2
 8004608:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004614:	2b00      	cmp	r3, #0
 8004616:	d00a      	beq.n	800462e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004618:	4b5c      	ldr	r3, [pc, #368]	; (800478c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800461a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800461e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004626:	4959      	ldr	r1, [pc, #356]	; (800478c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004628:	4313      	orrs	r3, r2
 800462a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004636:	2b00      	cmp	r3, #0
 8004638:	d00a      	beq.n	8004650 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800463a:	4b54      	ldr	r3, [pc, #336]	; (800478c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800463c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004640:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004648:	4950      	ldr	r1, [pc, #320]	; (800478c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800464a:	4313      	orrs	r3, r2
 800464c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004658:	2b00      	cmp	r3, #0
 800465a:	d00a      	beq.n	8004672 <HAL_RCCEx_PeriphCLKConfig+0x31e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800465c:	4b4b      	ldr	r3, [pc, #300]	; (800478c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800465e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004662:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800466a:	4948      	ldr	r1, [pc, #288]	; (800478c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800466c:	4313      	orrs	r3, r2
 800466e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800467a:	2b00      	cmp	r3, #0
 800467c:	d00a      	beq.n	8004694 <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800467e:	4b43      	ldr	r3, [pc, #268]	; (800478c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004680:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004684:	f023 0203 	bic.w	r2, r3, #3
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800468c:	493f      	ldr	r1, [pc, #252]	; (800478c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800468e:	4313      	orrs	r3, r2
 8004690:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800469c:	2b00      	cmp	r3, #0
 800469e:	d028      	beq.n	80046f2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80046a0:	4b3a      	ldr	r3, [pc, #232]	; (800478c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80046a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046a6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046ae:	4937      	ldr	r1, [pc, #220]	; (800478c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80046b0:	4313      	orrs	r3, r2
 80046b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046ba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80046be:	d106      	bne.n	80046ce <HAL_RCCEx_PeriphCLKConfig+0x37a>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80046c0:	4b32      	ldr	r3, [pc, #200]	; (800478c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80046c2:	68db      	ldr	r3, [r3, #12]
 80046c4:	4a31      	ldr	r2, [pc, #196]	; (800478c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80046c6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80046ca:	60d3      	str	r3, [r2, #12]
 80046cc:	e011      	b.n	80046f2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046d2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80046d6:	d10c      	bne.n	80046f2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	3304      	adds	r3, #4
 80046dc:	2101      	movs	r1, #1
 80046de:	4618      	mov	r0, r3
 80046e0:	f000 f8a4 	bl	800482c <RCCEx_PLLSAI1_Config>
 80046e4:	4603      	mov	r3, r0
 80046e6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80046e8:	7cfb      	ldrb	r3, [r7, #19]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d001      	beq.n	80046f2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
        {
          /* set overall return value */
          status = ret;
 80046ee:	7cfb      	ldrb	r3, [r7, #19]
 80046f0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d028      	beq.n	8004750 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80046fe:	4b23      	ldr	r3, [pc, #140]	; (800478c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004700:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004704:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800470c:	491f      	ldr	r1, [pc, #124]	; (800478c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800470e:	4313      	orrs	r3, r2
 8004710:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004718:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800471c:	d106      	bne.n	800472c <HAL_RCCEx_PeriphCLKConfig+0x3d8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800471e:	4b1b      	ldr	r3, [pc, #108]	; (800478c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004720:	68db      	ldr	r3, [r3, #12]
 8004722:	4a1a      	ldr	r2, [pc, #104]	; (800478c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004724:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004728:	60d3      	str	r3, [r2, #12]
 800472a:	e011      	b.n	8004750 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004730:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004734:	d10c      	bne.n	8004750 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	3304      	adds	r3, #4
 800473a:	2101      	movs	r1, #1
 800473c:	4618      	mov	r0, r3
 800473e:	f000 f875 	bl	800482c <RCCEx_PLLSAI1_Config>
 8004742:	4603      	mov	r3, r0
 8004744:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004746:	7cfb      	ldrb	r3, [r7, #19]
 8004748:	2b00      	cmp	r3, #0
 800474a:	d001      	beq.n	8004750 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
      {
        /* set overall return value */
        status = ret;
 800474c:	7cfb      	ldrb	r3, [r7, #19]
 800474e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004758:	2b00      	cmp	r3, #0
 800475a:	d02b      	beq.n	80047b4 <HAL_RCCEx_PeriphCLKConfig+0x460>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800475c:	4b0b      	ldr	r3, [pc, #44]	; (800478c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800475e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004762:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800476a:	4908      	ldr	r1, [pc, #32]	; (800478c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800476c:	4313      	orrs	r3, r2
 800476e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004776:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800477a:	d109      	bne.n	8004790 <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800477c:	4b03      	ldr	r3, [pc, #12]	; (800478c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800477e:	68db      	ldr	r3, [r3, #12]
 8004780:	4a02      	ldr	r2, [pc, #8]	; (800478c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004782:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004786:	60d3      	str	r3, [r2, #12]
 8004788:	e014      	b.n	80047b4 <HAL_RCCEx_PeriphCLKConfig+0x460>
 800478a:	bf00      	nop
 800478c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004794:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004798:	d10c      	bne.n	80047b4 <HAL_RCCEx_PeriphCLKConfig+0x460>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	3304      	adds	r3, #4
 800479e:	2101      	movs	r1, #1
 80047a0:	4618      	mov	r0, r3
 80047a2:	f000 f843 	bl	800482c <RCCEx_PLLSAI1_Config>
 80047a6:	4603      	mov	r3, r0
 80047a8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80047aa:	7cfb      	ldrb	r3, [r7, #19]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d001      	beq.n	80047b4 <HAL_RCCEx_PeriphCLKConfig+0x460>
      {
        /* set overall return value */
        status = ret;
 80047b0:	7cfb      	ldrb	r3, [r7, #19]
 80047b2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d01c      	beq.n	80047fa <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80047c0:	4b19      	ldr	r3, [pc, #100]	; (8004828 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 80047c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047c6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047ce:	4916      	ldr	r1, [pc, #88]	; (8004828 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 80047d0:	4313      	orrs	r3, r2
 80047d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047da:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80047de:	d10c      	bne.n	80047fa <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	3304      	adds	r3, #4
 80047e4:	2102      	movs	r1, #2
 80047e6:	4618      	mov	r0, r3
 80047e8:	f000 f820 	bl	800482c <RCCEx_PLLSAI1_Config>
 80047ec:	4603      	mov	r3, r0
 80047ee:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80047f0:	7cfb      	ldrb	r3, [r7, #19]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d001      	beq.n	80047fa <HAL_RCCEx_PeriphCLKConfig+0x4a6>
      {
        /* set overall return value */
        status = ret;
 80047f6:	7cfb      	ldrb	r3, [r7, #19]
 80047f8:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004802:	2b00      	cmp	r3, #0
 8004804:	d00a      	beq.n	800481c <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004806:	4b08      	ldr	r3, [pc, #32]	; (8004828 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8004808:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800480c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004814:	4904      	ldr	r1, [pc, #16]	; (8004828 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8004816:	4313      	orrs	r3, r2
 8004818:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800481c:	7cbb      	ldrb	r3, [r7, #18]
}
 800481e:	4618      	mov	r0, r3
 8004820:	3718      	adds	r7, #24
 8004822:	46bd      	mov	sp, r7
 8004824:	bd80      	pop	{r7, pc}
 8004826:	bf00      	nop
 8004828:	40021000 	.word	0x40021000

0800482c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800482c:	b580      	push	{r7, lr}
 800482e:	b084      	sub	sp, #16
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
 8004834:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004836:	2300      	movs	r3, #0
 8004838:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800483a:	4b74      	ldr	r3, [pc, #464]	; (8004a0c <RCCEx_PLLSAI1_Config+0x1e0>)
 800483c:	68db      	ldr	r3, [r3, #12]
 800483e:	f003 0303 	and.w	r3, r3, #3
 8004842:	2b00      	cmp	r3, #0
 8004844:	d018      	beq.n	8004878 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004846:	4b71      	ldr	r3, [pc, #452]	; (8004a0c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004848:	68db      	ldr	r3, [r3, #12]
 800484a:	f003 0203 	and.w	r2, r3, #3
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	429a      	cmp	r2, r3
 8004854:	d10d      	bne.n	8004872 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
       ||
 800485a:	2b00      	cmp	r3, #0
 800485c:	d009      	beq.n	8004872 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800485e:	4b6b      	ldr	r3, [pc, #428]	; (8004a0c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004860:	68db      	ldr	r3, [r3, #12]
 8004862:	091b      	lsrs	r3, r3, #4
 8004864:	f003 0307 	and.w	r3, r3, #7
 8004868:	1c5a      	adds	r2, r3, #1
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	685b      	ldr	r3, [r3, #4]
       ||
 800486e:	429a      	cmp	r2, r3
 8004870:	d047      	beq.n	8004902 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004872:	2301      	movs	r3, #1
 8004874:	73fb      	strb	r3, [r7, #15]
 8004876:	e044      	b.n	8004902 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	2b03      	cmp	r3, #3
 800487e:	d018      	beq.n	80048b2 <RCCEx_PLLSAI1_Config+0x86>
 8004880:	2b03      	cmp	r3, #3
 8004882:	d825      	bhi.n	80048d0 <RCCEx_PLLSAI1_Config+0xa4>
 8004884:	2b01      	cmp	r3, #1
 8004886:	d002      	beq.n	800488e <RCCEx_PLLSAI1_Config+0x62>
 8004888:	2b02      	cmp	r3, #2
 800488a:	d009      	beq.n	80048a0 <RCCEx_PLLSAI1_Config+0x74>
 800488c:	e020      	b.n	80048d0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800488e:	4b5f      	ldr	r3, [pc, #380]	; (8004a0c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f003 0302 	and.w	r3, r3, #2
 8004896:	2b00      	cmp	r3, #0
 8004898:	d11d      	bne.n	80048d6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800489a:	2301      	movs	r3, #1
 800489c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800489e:	e01a      	b.n	80048d6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80048a0:	4b5a      	ldr	r3, [pc, #360]	; (8004a0c <RCCEx_PLLSAI1_Config+0x1e0>)
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d116      	bne.n	80048da <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80048ac:	2301      	movs	r3, #1
 80048ae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80048b0:	e013      	b.n	80048da <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80048b2:	4b56      	ldr	r3, [pc, #344]	; (8004a0c <RCCEx_PLLSAI1_Config+0x1e0>)
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d10f      	bne.n	80048de <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80048be:	4b53      	ldr	r3, [pc, #332]	; (8004a0c <RCCEx_PLLSAI1_Config+0x1e0>)
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d109      	bne.n	80048de <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80048ca:	2301      	movs	r3, #1
 80048cc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80048ce:	e006      	b.n	80048de <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80048d0:	2301      	movs	r3, #1
 80048d2:	73fb      	strb	r3, [r7, #15]
      break;
 80048d4:	e004      	b.n	80048e0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80048d6:	bf00      	nop
 80048d8:	e002      	b.n	80048e0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80048da:	bf00      	nop
 80048dc:	e000      	b.n	80048e0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80048de:	bf00      	nop
    }

    if(status == HAL_OK)
 80048e0:	7bfb      	ldrb	r3, [r7, #15]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d10d      	bne.n	8004902 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80048e6:	4b49      	ldr	r3, [pc, #292]	; (8004a0c <RCCEx_PLLSAI1_Config+0x1e0>)
 80048e8:	68db      	ldr	r3, [r3, #12]
 80048ea:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6819      	ldr	r1, [r3, #0]
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	685b      	ldr	r3, [r3, #4]
 80048f6:	3b01      	subs	r3, #1
 80048f8:	011b      	lsls	r3, r3, #4
 80048fa:	430b      	orrs	r3, r1
 80048fc:	4943      	ldr	r1, [pc, #268]	; (8004a0c <RCCEx_PLLSAI1_Config+0x1e0>)
 80048fe:	4313      	orrs	r3, r2
 8004900:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004902:	7bfb      	ldrb	r3, [r7, #15]
 8004904:	2b00      	cmp	r3, #0
 8004906:	d17c      	bne.n	8004a02 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004908:	4b40      	ldr	r3, [pc, #256]	; (8004a0c <RCCEx_PLLSAI1_Config+0x1e0>)
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	4a3f      	ldr	r2, [pc, #252]	; (8004a0c <RCCEx_PLLSAI1_Config+0x1e0>)
 800490e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004912:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004914:	f7fd fa94 	bl	8001e40 <HAL_GetTick>
 8004918:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800491a:	e009      	b.n	8004930 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800491c:	f7fd fa90 	bl	8001e40 <HAL_GetTick>
 8004920:	4602      	mov	r2, r0
 8004922:	68bb      	ldr	r3, [r7, #8]
 8004924:	1ad3      	subs	r3, r2, r3
 8004926:	2b02      	cmp	r3, #2
 8004928:	d902      	bls.n	8004930 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800492a:	2303      	movs	r3, #3
 800492c:	73fb      	strb	r3, [r7, #15]
        break;
 800492e:	e005      	b.n	800493c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004930:	4b36      	ldr	r3, [pc, #216]	; (8004a0c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004938:	2b00      	cmp	r3, #0
 800493a:	d1ef      	bne.n	800491c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800493c:	7bfb      	ldrb	r3, [r7, #15]
 800493e:	2b00      	cmp	r3, #0
 8004940:	d15f      	bne.n	8004a02 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	2b00      	cmp	r3, #0
 8004946:	d110      	bne.n	800496a <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004948:	4b30      	ldr	r3, [pc, #192]	; (8004a0c <RCCEx_PLLSAI1_Config+0x1e0>)
 800494a:	691b      	ldr	r3, [r3, #16]
 800494c:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8004950:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004954:	687a      	ldr	r2, [r7, #4]
 8004956:	6892      	ldr	r2, [r2, #8]
 8004958:	0211      	lsls	r1, r2, #8
 800495a:	687a      	ldr	r2, [r7, #4]
 800495c:	68d2      	ldr	r2, [r2, #12]
 800495e:	06d2      	lsls	r2, r2, #27
 8004960:	430a      	orrs	r2, r1
 8004962:	492a      	ldr	r1, [pc, #168]	; (8004a0c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004964:	4313      	orrs	r3, r2
 8004966:	610b      	str	r3, [r1, #16]
 8004968:	e027      	b.n	80049ba <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	2b01      	cmp	r3, #1
 800496e:	d112      	bne.n	8004996 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004970:	4b26      	ldr	r3, [pc, #152]	; (8004a0c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004972:	691b      	ldr	r3, [r3, #16]
 8004974:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004978:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800497c:	687a      	ldr	r2, [r7, #4]
 800497e:	6892      	ldr	r2, [r2, #8]
 8004980:	0211      	lsls	r1, r2, #8
 8004982:	687a      	ldr	r2, [r7, #4]
 8004984:	6912      	ldr	r2, [r2, #16]
 8004986:	0852      	lsrs	r2, r2, #1
 8004988:	3a01      	subs	r2, #1
 800498a:	0552      	lsls	r2, r2, #21
 800498c:	430a      	orrs	r2, r1
 800498e:	491f      	ldr	r1, [pc, #124]	; (8004a0c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004990:	4313      	orrs	r3, r2
 8004992:	610b      	str	r3, [r1, #16]
 8004994:	e011      	b.n	80049ba <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004996:	4b1d      	ldr	r3, [pc, #116]	; (8004a0c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004998:	691b      	ldr	r3, [r3, #16]
 800499a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800499e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80049a2:	687a      	ldr	r2, [r7, #4]
 80049a4:	6892      	ldr	r2, [r2, #8]
 80049a6:	0211      	lsls	r1, r2, #8
 80049a8:	687a      	ldr	r2, [r7, #4]
 80049aa:	6952      	ldr	r2, [r2, #20]
 80049ac:	0852      	lsrs	r2, r2, #1
 80049ae:	3a01      	subs	r2, #1
 80049b0:	0652      	lsls	r2, r2, #25
 80049b2:	430a      	orrs	r2, r1
 80049b4:	4915      	ldr	r1, [pc, #84]	; (8004a0c <RCCEx_PLLSAI1_Config+0x1e0>)
 80049b6:	4313      	orrs	r3, r2
 80049b8:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80049ba:	4b14      	ldr	r3, [pc, #80]	; (8004a0c <RCCEx_PLLSAI1_Config+0x1e0>)
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	4a13      	ldr	r2, [pc, #76]	; (8004a0c <RCCEx_PLLSAI1_Config+0x1e0>)
 80049c0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80049c4:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049c6:	f7fd fa3b 	bl	8001e40 <HAL_GetTick>
 80049ca:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80049cc:	e009      	b.n	80049e2 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80049ce:	f7fd fa37 	bl	8001e40 <HAL_GetTick>
 80049d2:	4602      	mov	r2, r0
 80049d4:	68bb      	ldr	r3, [r7, #8]
 80049d6:	1ad3      	subs	r3, r2, r3
 80049d8:	2b02      	cmp	r3, #2
 80049da:	d902      	bls.n	80049e2 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80049dc:	2303      	movs	r3, #3
 80049de:	73fb      	strb	r3, [r7, #15]
          break;
 80049e0:	e005      	b.n	80049ee <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80049e2:	4b0a      	ldr	r3, [pc, #40]	; (8004a0c <RCCEx_PLLSAI1_Config+0x1e0>)
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d0ef      	beq.n	80049ce <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80049ee:	7bfb      	ldrb	r3, [r7, #15]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d106      	bne.n	8004a02 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80049f4:	4b05      	ldr	r3, [pc, #20]	; (8004a0c <RCCEx_PLLSAI1_Config+0x1e0>)
 80049f6:	691a      	ldr	r2, [r3, #16]
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	699b      	ldr	r3, [r3, #24]
 80049fc:	4903      	ldr	r1, [pc, #12]	; (8004a0c <RCCEx_PLLSAI1_Config+0x1e0>)
 80049fe:	4313      	orrs	r3, r2
 8004a00:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004a02:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a04:	4618      	mov	r0, r3
 8004a06:	3710      	adds	r7, #16
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	bd80      	pop	{r7, pc}
 8004a0c:	40021000 	.word	0x40021000

08004a10 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004a10:	b580      	push	{r7, lr}
 8004a12:	b082      	sub	sp, #8
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d101      	bne.n	8004a22 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004a1e:	2301      	movs	r3, #1
 8004a20:	e049      	b.n	8004ab6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a28:	b2db      	uxtb	r3, r3
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d106      	bne.n	8004a3c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	2200      	movs	r2, #0
 8004a32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004a36:	6878      	ldr	r0, [r7, #4]
 8004a38:	f7fc ffbc 	bl	80019b4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2202      	movs	r2, #2
 8004a40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681a      	ldr	r2, [r3, #0]
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	3304      	adds	r3, #4
 8004a4c:	4619      	mov	r1, r3
 8004a4e:	4610      	mov	r0, r2
 8004a50:	f000 fe0a 	bl	8005668 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2201      	movs	r2, #1
 8004a58:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2201      	movs	r2, #1
 8004a60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2201      	movs	r2, #1
 8004a68:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2201      	movs	r2, #1
 8004a70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2201      	movs	r2, #1
 8004a78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2201      	movs	r2, #1
 8004a80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2201      	movs	r2, #1
 8004a88:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2201      	movs	r2, #1
 8004a90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2201      	movs	r2, #1
 8004a98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2201      	movs	r2, #1
 8004aa0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2201      	movs	r2, #1
 8004aa8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2201      	movs	r2, #1
 8004ab0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004ab4:	2300      	movs	r3, #0
}
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	3708      	adds	r7, #8
 8004aba:	46bd      	mov	sp, r7
 8004abc:	bd80      	pop	{r7, pc}
	...

08004ac0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004ac0:	b480      	push	{r7}
 8004ac2:	b085      	sub	sp, #20
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ace:	b2db      	uxtb	r3, r3
 8004ad0:	2b01      	cmp	r3, #1
 8004ad2:	d001      	beq.n	8004ad8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004ad4:	2301      	movs	r3, #1
 8004ad6:	e040      	b.n	8004b5a <HAL_TIM_Base_Start_IT+0x9a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2202      	movs	r2, #2
 8004adc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	68da      	ldr	r2, [r3, #12]
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f042 0201 	orr.w	r2, r2, #1
 8004aee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	4a1c      	ldr	r2, [pc, #112]	; (8004b68 <HAL_TIM_Base_Start_IT+0xa8>)
 8004af6:	4293      	cmp	r3, r2
 8004af8:	d00e      	beq.n	8004b18 <HAL_TIM_Base_Start_IT+0x58>
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b02:	d009      	beq.n	8004b18 <HAL_TIM_Base_Start_IT+0x58>
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	4a18      	ldr	r2, [pc, #96]	; (8004b6c <HAL_TIM_Base_Start_IT+0xac>)
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d004      	beq.n	8004b18 <HAL_TIM_Base_Start_IT+0x58>
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	4a17      	ldr	r2, [pc, #92]	; (8004b70 <HAL_TIM_Base_Start_IT+0xb0>)
 8004b14:	4293      	cmp	r3, r2
 8004b16:	d115      	bne.n	8004b44 <HAL_TIM_Base_Start_IT+0x84>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	689a      	ldr	r2, [r3, #8]
 8004b1e:	4b15      	ldr	r3, [pc, #84]	; (8004b74 <HAL_TIM_Base_Start_IT+0xb4>)
 8004b20:	4013      	ands	r3, r2
 8004b22:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	2b06      	cmp	r3, #6
 8004b28:	d015      	beq.n	8004b56 <HAL_TIM_Base_Start_IT+0x96>
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b30:	d011      	beq.n	8004b56 <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	681a      	ldr	r2, [r3, #0]
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f042 0201 	orr.w	r2, r2, #1
 8004b40:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b42:	e008      	b.n	8004b56 <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	681a      	ldr	r2, [r3, #0]
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f042 0201 	orr.w	r2, r2, #1
 8004b52:	601a      	str	r2, [r3, #0]
 8004b54:	e000      	b.n	8004b58 <HAL_TIM_Base_Start_IT+0x98>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b56:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004b58:	2300      	movs	r3, #0
}
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	3714      	adds	r7, #20
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b64:	4770      	bx	lr
 8004b66:	bf00      	nop
 8004b68:	40012c00 	.word	0x40012c00
 8004b6c:	40000400 	.word	0x40000400
 8004b70:	40014000 	.word	0x40014000
 8004b74:	00010007 	.word	0x00010007

08004b78 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8004b78:	b480      	push	{r7}
 8004b7a:	b083      	sub	sp, #12
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	68da      	ldr	r2, [r3, #12]
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f022 0201 	bic.w	r2, r2, #1
 8004b8e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	6a1a      	ldr	r2, [r3, #32]
 8004b96:	f241 1311 	movw	r3, #4369	; 0x1111
 8004b9a:	4013      	ands	r3, r2
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d10f      	bne.n	8004bc0 <HAL_TIM_Base_Stop_IT+0x48>
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	6a1a      	ldr	r2, [r3, #32]
 8004ba6:	f240 4344 	movw	r3, #1092	; 0x444
 8004baa:	4013      	ands	r3, r2
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d107      	bne.n	8004bc0 <HAL_TIM_Base_Stop_IT+0x48>
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	681a      	ldr	r2, [r3, #0]
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f022 0201 	bic.w	r2, r2, #1
 8004bbe:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2201      	movs	r2, #1
 8004bc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8004bc8:	2300      	movs	r3, #0
}
 8004bca:	4618      	mov	r0, r3
 8004bcc:	370c      	adds	r7, #12
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd4:	4770      	bx	lr

08004bd6 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8004bd6:	b580      	push	{r7, lr}
 8004bd8:	b082      	sub	sp, #8
 8004bda:	af00      	add	r7, sp, #0
 8004bdc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d101      	bne.n	8004be8 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8004be4:	2301      	movs	r3, #1
 8004be6:	e049      	b.n	8004c7c <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bee:	b2db      	uxtb	r3, r3
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d106      	bne.n	8004c02 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8004bfc:	6878      	ldr	r0, [r7, #4]
 8004bfe:	f000 f841 	bl	8004c84 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	2202      	movs	r2, #2
 8004c06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681a      	ldr	r2, [r3, #0]
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	3304      	adds	r3, #4
 8004c12:	4619      	mov	r1, r3
 8004c14:	4610      	mov	r0, r2
 8004c16:	f000 fd27 	bl	8005668 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	2201      	movs	r2, #1
 8004c1e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	2201      	movs	r2, #1
 8004c26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	2201      	movs	r2, #1
 8004c2e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	2201      	movs	r2, #1
 8004c36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	2201      	movs	r2, #1
 8004c3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	2201      	movs	r2, #1
 8004c46:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	2201      	movs	r2, #1
 8004c4e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	2201      	movs	r2, #1
 8004c56:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2201      	movs	r2, #1
 8004c5e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	2201      	movs	r2, #1
 8004c66:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	2201      	movs	r2, #1
 8004c6e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	2201      	movs	r2, #1
 8004c76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004c7a:	2300      	movs	r3, #0
}
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	3708      	adds	r7, #8
 8004c80:	46bd      	mov	sp, r7
 8004c82:	bd80      	pop	{r7, pc}

08004c84 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8004c84:	b480      	push	{r7}
 8004c86:	b083      	sub	sp, #12
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8004c8c:	bf00      	nop
 8004c8e:	370c      	adds	r7, #12
 8004c90:	46bd      	mov	sp, r7
 8004c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c96:	4770      	bx	lr

08004c98 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	b082      	sub	sp, #8
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d101      	bne.n	8004caa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004ca6:	2301      	movs	r3, #1
 8004ca8:	e049      	b.n	8004d3e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cb0:	b2db      	uxtb	r3, r3
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d106      	bne.n	8004cc4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	2200      	movs	r2, #0
 8004cba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004cbe:	6878      	ldr	r0, [r7, #4]
 8004cc0:	f000 f841 	bl	8004d46 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2202      	movs	r2, #2
 8004cc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681a      	ldr	r2, [r3, #0]
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	3304      	adds	r3, #4
 8004cd4:	4619      	mov	r1, r3
 8004cd6:	4610      	mov	r0, r2
 8004cd8:	f000 fcc6 	bl	8005668 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2201      	movs	r2, #1
 8004ce0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2201      	movs	r2, #1
 8004ce8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2201      	movs	r2, #1
 8004cf0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2201      	movs	r2, #1
 8004cf8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2201      	movs	r2, #1
 8004d00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2201      	movs	r2, #1
 8004d08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2201      	movs	r2, #1
 8004d10:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2201      	movs	r2, #1
 8004d18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2201      	movs	r2, #1
 8004d20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2201      	movs	r2, #1
 8004d28:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2201      	movs	r2, #1
 8004d30:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2201      	movs	r2, #1
 8004d38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004d3c:	2300      	movs	r3, #0
}
 8004d3e:	4618      	mov	r0, r3
 8004d40:	3708      	adds	r7, #8
 8004d42:	46bd      	mov	sp, r7
 8004d44:	bd80      	pop	{r7, pc}

08004d46 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004d46:	b480      	push	{r7}
 8004d48:	b083      	sub	sp, #12
 8004d4a:	af00      	add	r7, sp, #0
 8004d4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004d4e:	bf00      	nop
 8004d50:	370c      	adds	r7, #12
 8004d52:	46bd      	mov	sp, r7
 8004d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d58:	4770      	bx	lr
	...

08004d5c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	b084      	sub	sp, #16
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
 8004d64:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004d66:	683b      	ldr	r3, [r7, #0]
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d109      	bne.n	8004d80 <HAL_TIM_PWM_Start+0x24>
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004d72:	b2db      	uxtb	r3, r3
 8004d74:	2b01      	cmp	r3, #1
 8004d76:	bf14      	ite	ne
 8004d78:	2301      	movne	r3, #1
 8004d7a:	2300      	moveq	r3, #0
 8004d7c:	b2db      	uxtb	r3, r3
 8004d7e:	e03c      	b.n	8004dfa <HAL_TIM_PWM_Start+0x9e>
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	2b04      	cmp	r3, #4
 8004d84:	d109      	bne.n	8004d9a <HAL_TIM_PWM_Start+0x3e>
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004d8c:	b2db      	uxtb	r3, r3
 8004d8e:	2b01      	cmp	r3, #1
 8004d90:	bf14      	ite	ne
 8004d92:	2301      	movne	r3, #1
 8004d94:	2300      	moveq	r3, #0
 8004d96:	b2db      	uxtb	r3, r3
 8004d98:	e02f      	b.n	8004dfa <HAL_TIM_PWM_Start+0x9e>
 8004d9a:	683b      	ldr	r3, [r7, #0]
 8004d9c:	2b08      	cmp	r3, #8
 8004d9e:	d109      	bne.n	8004db4 <HAL_TIM_PWM_Start+0x58>
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004da6:	b2db      	uxtb	r3, r3
 8004da8:	2b01      	cmp	r3, #1
 8004daa:	bf14      	ite	ne
 8004dac:	2301      	movne	r3, #1
 8004dae:	2300      	moveq	r3, #0
 8004db0:	b2db      	uxtb	r3, r3
 8004db2:	e022      	b.n	8004dfa <HAL_TIM_PWM_Start+0x9e>
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	2b0c      	cmp	r3, #12
 8004db8:	d109      	bne.n	8004dce <HAL_TIM_PWM_Start+0x72>
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004dc0:	b2db      	uxtb	r3, r3
 8004dc2:	2b01      	cmp	r3, #1
 8004dc4:	bf14      	ite	ne
 8004dc6:	2301      	movne	r3, #1
 8004dc8:	2300      	moveq	r3, #0
 8004dca:	b2db      	uxtb	r3, r3
 8004dcc:	e015      	b.n	8004dfa <HAL_TIM_PWM_Start+0x9e>
 8004dce:	683b      	ldr	r3, [r7, #0]
 8004dd0:	2b10      	cmp	r3, #16
 8004dd2:	d109      	bne.n	8004de8 <HAL_TIM_PWM_Start+0x8c>
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004dda:	b2db      	uxtb	r3, r3
 8004ddc:	2b01      	cmp	r3, #1
 8004dde:	bf14      	ite	ne
 8004de0:	2301      	movne	r3, #1
 8004de2:	2300      	moveq	r3, #0
 8004de4:	b2db      	uxtb	r3, r3
 8004de6:	e008      	b.n	8004dfa <HAL_TIM_PWM_Start+0x9e>
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004dee:	b2db      	uxtb	r3, r3
 8004df0:	2b01      	cmp	r3, #1
 8004df2:	bf14      	ite	ne
 8004df4:	2301      	movne	r3, #1
 8004df6:	2300      	moveq	r3, #0
 8004df8:	b2db      	uxtb	r3, r3
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d001      	beq.n	8004e02 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004dfe:	2301      	movs	r3, #1
 8004e00:	e083      	b.n	8004f0a <HAL_TIM_PWM_Start+0x1ae>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d104      	bne.n	8004e12 <HAL_TIM_PWM_Start+0xb6>
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2202      	movs	r2, #2
 8004e0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004e10:	e023      	b.n	8004e5a <HAL_TIM_PWM_Start+0xfe>
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	2b04      	cmp	r3, #4
 8004e16:	d104      	bne.n	8004e22 <HAL_TIM_PWM_Start+0xc6>
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2202      	movs	r2, #2
 8004e1c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004e20:	e01b      	b.n	8004e5a <HAL_TIM_PWM_Start+0xfe>
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	2b08      	cmp	r3, #8
 8004e26:	d104      	bne.n	8004e32 <HAL_TIM_PWM_Start+0xd6>
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2202      	movs	r2, #2
 8004e2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004e30:	e013      	b.n	8004e5a <HAL_TIM_PWM_Start+0xfe>
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	2b0c      	cmp	r3, #12
 8004e36:	d104      	bne.n	8004e42 <HAL_TIM_PWM_Start+0xe6>
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2202      	movs	r2, #2
 8004e3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004e40:	e00b      	b.n	8004e5a <HAL_TIM_PWM_Start+0xfe>
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	2b10      	cmp	r3, #16
 8004e46:	d104      	bne.n	8004e52 <HAL_TIM_PWM_Start+0xf6>
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2202      	movs	r2, #2
 8004e4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004e50:	e003      	b.n	8004e5a <HAL_TIM_PWM_Start+0xfe>
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	2202      	movs	r2, #2
 8004e56:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	2201      	movs	r2, #1
 8004e60:	6839      	ldr	r1, [r7, #0]
 8004e62:	4618      	mov	r0, r3
 8004e64:	f000 ff86 	bl	8005d74 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	4a29      	ldr	r2, [pc, #164]	; (8004f14 <HAL_TIM_PWM_Start+0x1b8>)
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	d009      	beq.n	8004e86 <HAL_TIM_PWM_Start+0x12a>
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	4a28      	ldr	r2, [pc, #160]	; (8004f18 <HAL_TIM_PWM_Start+0x1bc>)
 8004e78:	4293      	cmp	r3, r2
 8004e7a:	d004      	beq.n	8004e86 <HAL_TIM_PWM_Start+0x12a>
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	4a26      	ldr	r2, [pc, #152]	; (8004f1c <HAL_TIM_PWM_Start+0x1c0>)
 8004e82:	4293      	cmp	r3, r2
 8004e84:	d101      	bne.n	8004e8a <HAL_TIM_PWM_Start+0x12e>
 8004e86:	2301      	movs	r3, #1
 8004e88:	e000      	b.n	8004e8c <HAL_TIM_PWM_Start+0x130>
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d007      	beq.n	8004ea0 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004e9e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	4a1b      	ldr	r2, [pc, #108]	; (8004f14 <HAL_TIM_PWM_Start+0x1b8>)
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	d00e      	beq.n	8004ec8 <HAL_TIM_PWM_Start+0x16c>
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004eb2:	d009      	beq.n	8004ec8 <HAL_TIM_PWM_Start+0x16c>
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	4a19      	ldr	r2, [pc, #100]	; (8004f20 <HAL_TIM_PWM_Start+0x1c4>)
 8004eba:	4293      	cmp	r3, r2
 8004ebc:	d004      	beq.n	8004ec8 <HAL_TIM_PWM_Start+0x16c>
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	4a15      	ldr	r2, [pc, #84]	; (8004f18 <HAL_TIM_PWM_Start+0x1bc>)
 8004ec4:	4293      	cmp	r3, r2
 8004ec6:	d115      	bne.n	8004ef4 <HAL_TIM_PWM_Start+0x198>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	689a      	ldr	r2, [r3, #8]
 8004ece:	4b15      	ldr	r3, [pc, #84]	; (8004f24 <HAL_TIM_PWM_Start+0x1c8>)
 8004ed0:	4013      	ands	r3, r2
 8004ed2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	2b06      	cmp	r3, #6
 8004ed8:	d015      	beq.n	8004f06 <HAL_TIM_PWM_Start+0x1aa>
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ee0:	d011      	beq.n	8004f06 <HAL_TIM_PWM_Start+0x1aa>
    {
      __HAL_TIM_ENABLE(htim);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	681a      	ldr	r2, [r3, #0]
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f042 0201 	orr.w	r2, r2, #1
 8004ef0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ef2:	e008      	b.n	8004f06 <HAL_TIM_PWM_Start+0x1aa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	681a      	ldr	r2, [r3, #0]
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f042 0201 	orr.w	r2, r2, #1
 8004f02:	601a      	str	r2, [r3, #0]
 8004f04:	e000      	b.n	8004f08 <HAL_TIM_PWM_Start+0x1ac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f06:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004f08:	2300      	movs	r3, #0
}
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	3710      	adds	r7, #16
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	bd80      	pop	{r7, pc}
 8004f12:	bf00      	nop
 8004f14:	40012c00 	.word	0x40012c00
 8004f18:	40014000 	.word	0x40014000
 8004f1c:	40014400 	.word	0x40014400
 8004f20:	40000400 	.word	0x40000400
 8004f24:	00010007 	.word	0x00010007

08004f28 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b082      	sub	sp, #8
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	691b      	ldr	r3, [r3, #16]
 8004f36:	f003 0302 	and.w	r3, r3, #2
 8004f3a:	2b02      	cmp	r3, #2
 8004f3c:	d122      	bne.n	8004f84 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	68db      	ldr	r3, [r3, #12]
 8004f44:	f003 0302 	and.w	r3, r3, #2
 8004f48:	2b02      	cmp	r3, #2
 8004f4a:	d11b      	bne.n	8004f84 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f06f 0202 	mvn.w	r2, #2
 8004f54:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	2201      	movs	r2, #1
 8004f5a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	699b      	ldr	r3, [r3, #24]
 8004f62:	f003 0303 	and.w	r3, r3, #3
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d003      	beq.n	8004f72 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004f6a:	6878      	ldr	r0, [r7, #4]
 8004f6c:	f000 fb5d 	bl	800562a <HAL_TIM_IC_CaptureCallback>
 8004f70:	e005      	b.n	8004f7e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f72:	6878      	ldr	r0, [r7, #4]
 8004f74:	f000 fb4f 	bl	8005616 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f78:	6878      	ldr	r0, [r7, #4]
 8004f7a:	f000 fb60 	bl	800563e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	2200      	movs	r2, #0
 8004f82:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	691b      	ldr	r3, [r3, #16]
 8004f8a:	f003 0304 	and.w	r3, r3, #4
 8004f8e:	2b04      	cmp	r3, #4
 8004f90:	d122      	bne.n	8004fd8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	68db      	ldr	r3, [r3, #12]
 8004f98:	f003 0304 	and.w	r3, r3, #4
 8004f9c:	2b04      	cmp	r3, #4
 8004f9e:	d11b      	bne.n	8004fd8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f06f 0204 	mvn.w	r2, #4
 8004fa8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	2202      	movs	r2, #2
 8004fae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	699b      	ldr	r3, [r3, #24]
 8004fb6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d003      	beq.n	8004fc6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004fbe:	6878      	ldr	r0, [r7, #4]
 8004fc0:	f000 fb33 	bl	800562a <HAL_TIM_IC_CaptureCallback>
 8004fc4:	e005      	b.n	8004fd2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004fc6:	6878      	ldr	r0, [r7, #4]
 8004fc8:	f000 fb25 	bl	8005616 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004fcc:	6878      	ldr	r0, [r7, #4]
 8004fce:	f000 fb36 	bl	800563e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	691b      	ldr	r3, [r3, #16]
 8004fde:	f003 0308 	and.w	r3, r3, #8
 8004fe2:	2b08      	cmp	r3, #8
 8004fe4:	d122      	bne.n	800502c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	68db      	ldr	r3, [r3, #12]
 8004fec:	f003 0308 	and.w	r3, r3, #8
 8004ff0:	2b08      	cmp	r3, #8
 8004ff2:	d11b      	bne.n	800502c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f06f 0208 	mvn.w	r2, #8
 8004ffc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	2204      	movs	r2, #4
 8005002:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	69db      	ldr	r3, [r3, #28]
 800500a:	f003 0303 	and.w	r3, r3, #3
 800500e:	2b00      	cmp	r3, #0
 8005010:	d003      	beq.n	800501a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005012:	6878      	ldr	r0, [r7, #4]
 8005014:	f000 fb09 	bl	800562a <HAL_TIM_IC_CaptureCallback>
 8005018:	e005      	b.n	8005026 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800501a:	6878      	ldr	r0, [r7, #4]
 800501c:	f000 fafb 	bl	8005616 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005020:	6878      	ldr	r0, [r7, #4]
 8005022:	f000 fb0c 	bl	800563e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	2200      	movs	r2, #0
 800502a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	691b      	ldr	r3, [r3, #16]
 8005032:	f003 0310 	and.w	r3, r3, #16
 8005036:	2b10      	cmp	r3, #16
 8005038:	d122      	bne.n	8005080 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	68db      	ldr	r3, [r3, #12]
 8005040:	f003 0310 	and.w	r3, r3, #16
 8005044:	2b10      	cmp	r3, #16
 8005046:	d11b      	bne.n	8005080 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f06f 0210 	mvn.w	r2, #16
 8005050:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	2208      	movs	r2, #8
 8005056:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	69db      	ldr	r3, [r3, #28]
 800505e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005062:	2b00      	cmp	r3, #0
 8005064:	d003      	beq.n	800506e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005066:	6878      	ldr	r0, [r7, #4]
 8005068:	f000 fadf 	bl	800562a <HAL_TIM_IC_CaptureCallback>
 800506c:	e005      	b.n	800507a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800506e:	6878      	ldr	r0, [r7, #4]
 8005070:	f000 fad1 	bl	8005616 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005074:	6878      	ldr	r0, [r7, #4]
 8005076:	f000 fae2 	bl	800563e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	2200      	movs	r2, #0
 800507e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	691b      	ldr	r3, [r3, #16]
 8005086:	f003 0301 	and.w	r3, r3, #1
 800508a:	2b01      	cmp	r3, #1
 800508c:	d10e      	bne.n	80050ac <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	68db      	ldr	r3, [r3, #12]
 8005094:	f003 0301 	and.w	r3, r3, #1
 8005098:	2b01      	cmp	r3, #1
 800509a:	d107      	bne.n	80050ac <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f06f 0201 	mvn.w	r2, #1
 80050a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80050a6:	6878      	ldr	r0, [r7, #4]
 80050a8:	f7fc fa78 	bl	800159c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	691b      	ldr	r3, [r3, #16]
 80050b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050b6:	2b80      	cmp	r3, #128	; 0x80
 80050b8:	d10e      	bne.n	80050d8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	68db      	ldr	r3, [r3, #12]
 80050c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050c4:	2b80      	cmp	r3, #128	; 0x80
 80050c6:	d107      	bne.n	80050d8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80050d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80050d2:	6878      	ldr	r0, [r7, #4]
 80050d4:	f000 ff64 	bl	8005fa0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	691b      	ldr	r3, [r3, #16]
 80050de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80050e6:	d10e      	bne.n	8005106 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	68db      	ldr	r3, [r3, #12]
 80050ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050f2:	2b80      	cmp	r3, #128	; 0x80
 80050f4:	d107      	bne.n	8005106 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80050fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005100:	6878      	ldr	r0, [r7, #4]
 8005102:	f000 ff57 	bl	8005fb4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	691b      	ldr	r3, [r3, #16]
 800510c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005110:	2b40      	cmp	r3, #64	; 0x40
 8005112:	d10e      	bne.n	8005132 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	68db      	ldr	r3, [r3, #12]
 800511a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800511e:	2b40      	cmp	r3, #64	; 0x40
 8005120:	d107      	bne.n	8005132 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800512a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800512c:	6878      	ldr	r0, [r7, #4]
 800512e:	f000 fa90 	bl	8005652 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	691b      	ldr	r3, [r3, #16]
 8005138:	f003 0320 	and.w	r3, r3, #32
 800513c:	2b20      	cmp	r3, #32
 800513e:	d10e      	bne.n	800515e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	68db      	ldr	r3, [r3, #12]
 8005146:	f003 0320 	and.w	r3, r3, #32
 800514a:	2b20      	cmp	r3, #32
 800514c:	d107      	bne.n	800515e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f06f 0220 	mvn.w	r2, #32
 8005156:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005158:	6878      	ldr	r0, [r7, #4]
 800515a:	f000 ff17 	bl	8005f8c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800515e:	bf00      	nop
 8005160:	3708      	adds	r7, #8
 8005162:	46bd      	mov	sp, r7
 8005164:	bd80      	pop	{r7, pc}
	...

08005168 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8005168:	b580      	push	{r7, lr}
 800516a:	b086      	sub	sp, #24
 800516c:	af00      	add	r7, sp, #0
 800516e:	60f8      	str	r0, [r7, #12]
 8005170:	60b9      	str	r1, [r7, #8]
 8005172:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005174:	2300      	movs	r3, #0
 8005176:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800517e:	2b01      	cmp	r3, #1
 8005180:	d101      	bne.n	8005186 <HAL_TIM_OC_ConfigChannel+0x1e>
 8005182:	2302      	movs	r3, #2
 8005184:	e066      	b.n	8005254 <HAL_TIM_OC_ConfigChannel+0xec>
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	2201      	movs	r2, #1
 800518a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	2b14      	cmp	r3, #20
 8005192:	d857      	bhi.n	8005244 <HAL_TIM_OC_ConfigChannel+0xdc>
 8005194:	a201      	add	r2, pc, #4	; (adr r2, 800519c <HAL_TIM_OC_ConfigChannel+0x34>)
 8005196:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800519a:	bf00      	nop
 800519c:	080051f1 	.word	0x080051f1
 80051a0:	08005245 	.word	0x08005245
 80051a4:	08005245 	.word	0x08005245
 80051a8:	08005245 	.word	0x08005245
 80051ac:	080051ff 	.word	0x080051ff
 80051b0:	08005245 	.word	0x08005245
 80051b4:	08005245 	.word	0x08005245
 80051b8:	08005245 	.word	0x08005245
 80051bc:	0800520d 	.word	0x0800520d
 80051c0:	08005245 	.word	0x08005245
 80051c4:	08005245 	.word	0x08005245
 80051c8:	08005245 	.word	0x08005245
 80051cc:	0800521b 	.word	0x0800521b
 80051d0:	08005245 	.word	0x08005245
 80051d4:	08005245 	.word	0x08005245
 80051d8:	08005245 	.word	0x08005245
 80051dc:	08005229 	.word	0x08005229
 80051e0:	08005245 	.word	0x08005245
 80051e4:	08005245 	.word	0x08005245
 80051e8:	08005245 	.word	0x08005245
 80051ec:	08005237 	.word	0x08005237
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	68b9      	ldr	r1, [r7, #8]
 80051f6:	4618      	mov	r0, r3
 80051f8:	f000 faa4 	bl	8005744 <TIM_OC1_SetConfig>
      break;
 80051fc:	e025      	b.n	800524a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	68b9      	ldr	r1, [r7, #8]
 8005204:	4618      	mov	r0, r3
 8005206:	f000 fb19 	bl	800583c <TIM_OC2_SetConfig>
      break;
 800520a:	e01e      	b.n	800524a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	68b9      	ldr	r1, [r7, #8]
 8005212:	4618      	mov	r0, r3
 8005214:	f000 fb8c 	bl	8005930 <TIM_OC3_SetConfig>
      break;
 8005218:	e017      	b.n	800524a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	68b9      	ldr	r1, [r7, #8]
 8005220:	4618      	mov	r0, r3
 8005222:	f000 fbfd 	bl	8005a20 <TIM_OC4_SetConfig>
      break;
 8005226:	e010      	b.n	800524a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	68b9      	ldr	r1, [r7, #8]
 800522e:	4618      	mov	r0, r3
 8005230:	f000 fc54 	bl	8005adc <TIM_OC5_SetConfig>
      break;
 8005234:	e009      	b.n	800524a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	68b9      	ldr	r1, [r7, #8]
 800523c:	4618      	mov	r0, r3
 800523e:	f000 fca5 	bl	8005b8c <TIM_OC6_SetConfig>
      break;
 8005242:	e002      	b.n	800524a <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 8005244:	2301      	movs	r3, #1
 8005246:	75fb      	strb	r3, [r7, #23]
      break;
 8005248:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	2200      	movs	r2, #0
 800524e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005252:	7dfb      	ldrb	r3, [r7, #23]
}
 8005254:	4618      	mov	r0, r3
 8005256:	3718      	adds	r7, #24
 8005258:	46bd      	mov	sp, r7
 800525a:	bd80      	pop	{r7, pc}

0800525c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800525c:	b580      	push	{r7, lr}
 800525e:	b086      	sub	sp, #24
 8005260:	af00      	add	r7, sp, #0
 8005262:	60f8      	str	r0, [r7, #12]
 8005264:	60b9      	str	r1, [r7, #8]
 8005266:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005268:	2300      	movs	r3, #0
 800526a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005272:	2b01      	cmp	r3, #1
 8005274:	d101      	bne.n	800527a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005276:	2302      	movs	r3, #2
 8005278:	e0ff      	b.n	800547a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	2201      	movs	r2, #1
 800527e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	2b14      	cmp	r3, #20
 8005286:	f200 80f0 	bhi.w	800546a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800528a:	a201      	add	r2, pc, #4	; (adr r2, 8005290 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800528c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005290:	080052e5 	.word	0x080052e5
 8005294:	0800546b 	.word	0x0800546b
 8005298:	0800546b 	.word	0x0800546b
 800529c:	0800546b 	.word	0x0800546b
 80052a0:	08005325 	.word	0x08005325
 80052a4:	0800546b 	.word	0x0800546b
 80052a8:	0800546b 	.word	0x0800546b
 80052ac:	0800546b 	.word	0x0800546b
 80052b0:	08005367 	.word	0x08005367
 80052b4:	0800546b 	.word	0x0800546b
 80052b8:	0800546b 	.word	0x0800546b
 80052bc:	0800546b 	.word	0x0800546b
 80052c0:	080053a7 	.word	0x080053a7
 80052c4:	0800546b 	.word	0x0800546b
 80052c8:	0800546b 	.word	0x0800546b
 80052cc:	0800546b 	.word	0x0800546b
 80052d0:	080053e9 	.word	0x080053e9
 80052d4:	0800546b 	.word	0x0800546b
 80052d8:	0800546b 	.word	0x0800546b
 80052dc:	0800546b 	.word	0x0800546b
 80052e0:	08005429 	.word	0x08005429
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	68b9      	ldr	r1, [r7, #8]
 80052ea:	4618      	mov	r0, r3
 80052ec:	f000 fa2a 	bl	8005744 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	699a      	ldr	r2, [r3, #24]
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f042 0208 	orr.w	r2, r2, #8
 80052fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	699a      	ldr	r2, [r3, #24]
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f022 0204 	bic.w	r2, r2, #4
 800530e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	6999      	ldr	r1, [r3, #24]
 8005316:	68bb      	ldr	r3, [r7, #8]
 8005318:	691a      	ldr	r2, [r3, #16]
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	430a      	orrs	r2, r1
 8005320:	619a      	str	r2, [r3, #24]
      break;
 8005322:	e0a5      	b.n	8005470 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	68b9      	ldr	r1, [r7, #8]
 800532a:	4618      	mov	r0, r3
 800532c:	f000 fa86 	bl	800583c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	699a      	ldr	r2, [r3, #24]
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800533e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	699a      	ldr	r2, [r3, #24]
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800534e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	6999      	ldr	r1, [r3, #24]
 8005356:	68bb      	ldr	r3, [r7, #8]
 8005358:	691b      	ldr	r3, [r3, #16]
 800535a:	021a      	lsls	r2, r3, #8
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	430a      	orrs	r2, r1
 8005362:	619a      	str	r2, [r3, #24]
      break;
 8005364:	e084      	b.n	8005470 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	68b9      	ldr	r1, [r7, #8]
 800536c:	4618      	mov	r0, r3
 800536e:	f000 fadf 	bl	8005930 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	69da      	ldr	r2, [r3, #28]
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f042 0208 	orr.w	r2, r2, #8
 8005380:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	69da      	ldr	r2, [r3, #28]
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f022 0204 	bic.w	r2, r2, #4
 8005390:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	69d9      	ldr	r1, [r3, #28]
 8005398:	68bb      	ldr	r3, [r7, #8]
 800539a:	691a      	ldr	r2, [r3, #16]
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	430a      	orrs	r2, r1
 80053a2:	61da      	str	r2, [r3, #28]
      break;
 80053a4:	e064      	b.n	8005470 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	68b9      	ldr	r1, [r7, #8]
 80053ac:	4618      	mov	r0, r3
 80053ae:	f000 fb37 	bl	8005a20 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	69da      	ldr	r2, [r3, #28]
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80053c0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	69da      	ldr	r2, [r3, #28]
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80053d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	69d9      	ldr	r1, [r3, #28]
 80053d8:	68bb      	ldr	r3, [r7, #8]
 80053da:	691b      	ldr	r3, [r3, #16]
 80053dc:	021a      	lsls	r2, r3, #8
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	430a      	orrs	r2, r1
 80053e4:	61da      	str	r2, [r3, #28]
      break;
 80053e6:	e043      	b.n	8005470 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	68b9      	ldr	r1, [r7, #8]
 80053ee:	4618      	mov	r0, r3
 80053f0:	f000 fb74 	bl	8005adc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f042 0208 	orr.w	r2, r2, #8
 8005402:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f022 0204 	bic.w	r2, r2, #4
 8005412:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800541a:	68bb      	ldr	r3, [r7, #8]
 800541c:	691a      	ldr	r2, [r3, #16]
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	430a      	orrs	r2, r1
 8005424:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005426:	e023      	b.n	8005470 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	68b9      	ldr	r1, [r7, #8]
 800542e:	4618      	mov	r0, r3
 8005430:	f000 fbac 	bl	8005b8c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005442:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005452:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800545a:	68bb      	ldr	r3, [r7, #8]
 800545c:	691b      	ldr	r3, [r3, #16]
 800545e:	021a      	lsls	r2, r3, #8
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	430a      	orrs	r2, r1
 8005466:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005468:	e002      	b.n	8005470 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800546a:	2301      	movs	r3, #1
 800546c:	75fb      	strb	r3, [r7, #23]
      break;
 800546e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	2200      	movs	r2, #0
 8005474:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005478:	7dfb      	ldrb	r3, [r7, #23]
}
 800547a:	4618      	mov	r0, r3
 800547c:	3718      	adds	r7, #24
 800547e:	46bd      	mov	sp, r7
 8005480:	bd80      	pop	{r7, pc}
 8005482:	bf00      	nop

08005484 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005484:	b580      	push	{r7, lr}
 8005486:	b084      	sub	sp, #16
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]
 800548c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800548e:	2300      	movs	r3, #0
 8005490:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005498:	2b01      	cmp	r3, #1
 800549a:	d101      	bne.n	80054a0 <HAL_TIM_ConfigClockSource+0x1c>
 800549c:	2302      	movs	r3, #2
 800549e:	e0b6      	b.n	800560e <HAL_TIM_ConfigClockSource+0x18a>
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2201      	movs	r2, #1
 80054a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2202      	movs	r2, #2
 80054ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	689b      	ldr	r3, [r3, #8]
 80054b6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80054b8:	68bb      	ldr	r3, [r7, #8]
 80054ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80054be:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80054c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80054c4:	68bb      	ldr	r3, [r7, #8]
 80054c6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80054ca:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	68ba      	ldr	r2, [r7, #8]
 80054d2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80054d4:	683b      	ldr	r3, [r7, #0]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80054dc:	d03e      	beq.n	800555c <HAL_TIM_ConfigClockSource+0xd8>
 80054de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80054e2:	f200 8087 	bhi.w	80055f4 <HAL_TIM_ConfigClockSource+0x170>
 80054e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054ea:	f000 8086 	beq.w	80055fa <HAL_TIM_ConfigClockSource+0x176>
 80054ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054f2:	d87f      	bhi.n	80055f4 <HAL_TIM_ConfigClockSource+0x170>
 80054f4:	2b70      	cmp	r3, #112	; 0x70
 80054f6:	d01a      	beq.n	800552e <HAL_TIM_ConfigClockSource+0xaa>
 80054f8:	2b70      	cmp	r3, #112	; 0x70
 80054fa:	d87b      	bhi.n	80055f4 <HAL_TIM_ConfigClockSource+0x170>
 80054fc:	2b60      	cmp	r3, #96	; 0x60
 80054fe:	d050      	beq.n	80055a2 <HAL_TIM_ConfigClockSource+0x11e>
 8005500:	2b60      	cmp	r3, #96	; 0x60
 8005502:	d877      	bhi.n	80055f4 <HAL_TIM_ConfigClockSource+0x170>
 8005504:	2b50      	cmp	r3, #80	; 0x50
 8005506:	d03c      	beq.n	8005582 <HAL_TIM_ConfigClockSource+0xfe>
 8005508:	2b50      	cmp	r3, #80	; 0x50
 800550a:	d873      	bhi.n	80055f4 <HAL_TIM_ConfigClockSource+0x170>
 800550c:	2b40      	cmp	r3, #64	; 0x40
 800550e:	d058      	beq.n	80055c2 <HAL_TIM_ConfigClockSource+0x13e>
 8005510:	2b40      	cmp	r3, #64	; 0x40
 8005512:	d86f      	bhi.n	80055f4 <HAL_TIM_ConfigClockSource+0x170>
 8005514:	2b30      	cmp	r3, #48	; 0x30
 8005516:	d064      	beq.n	80055e2 <HAL_TIM_ConfigClockSource+0x15e>
 8005518:	2b30      	cmp	r3, #48	; 0x30
 800551a:	d86b      	bhi.n	80055f4 <HAL_TIM_ConfigClockSource+0x170>
 800551c:	2b20      	cmp	r3, #32
 800551e:	d060      	beq.n	80055e2 <HAL_TIM_ConfigClockSource+0x15e>
 8005520:	2b20      	cmp	r3, #32
 8005522:	d867      	bhi.n	80055f4 <HAL_TIM_ConfigClockSource+0x170>
 8005524:	2b00      	cmp	r3, #0
 8005526:	d05c      	beq.n	80055e2 <HAL_TIM_ConfigClockSource+0x15e>
 8005528:	2b10      	cmp	r3, #16
 800552a:	d05a      	beq.n	80055e2 <HAL_TIM_ConfigClockSource+0x15e>
 800552c:	e062      	b.n	80055f4 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	6818      	ldr	r0, [r3, #0]
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	6899      	ldr	r1, [r3, #8]
 8005536:	683b      	ldr	r3, [r7, #0]
 8005538:	685a      	ldr	r2, [r3, #4]
 800553a:	683b      	ldr	r3, [r7, #0]
 800553c:	68db      	ldr	r3, [r3, #12]
 800553e:	f000 fbf9 	bl	8005d34 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	689b      	ldr	r3, [r3, #8]
 8005548:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800554a:	68bb      	ldr	r3, [r7, #8]
 800554c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005550:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	68ba      	ldr	r2, [r7, #8]
 8005558:	609a      	str	r2, [r3, #8]
      break;
 800555a:	e04f      	b.n	80055fc <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	6818      	ldr	r0, [r3, #0]
 8005560:	683b      	ldr	r3, [r7, #0]
 8005562:	6899      	ldr	r1, [r3, #8]
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	685a      	ldr	r2, [r3, #4]
 8005568:	683b      	ldr	r3, [r7, #0]
 800556a:	68db      	ldr	r3, [r3, #12]
 800556c:	f000 fbe2 	bl	8005d34 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	689a      	ldr	r2, [r3, #8]
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800557e:	609a      	str	r2, [r3, #8]
      break;
 8005580:	e03c      	b.n	80055fc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	6818      	ldr	r0, [r3, #0]
 8005586:	683b      	ldr	r3, [r7, #0]
 8005588:	6859      	ldr	r1, [r3, #4]
 800558a:	683b      	ldr	r3, [r7, #0]
 800558c:	68db      	ldr	r3, [r3, #12]
 800558e:	461a      	mov	r2, r3
 8005590:	f000 fb56 	bl	8005c40 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	2150      	movs	r1, #80	; 0x50
 800559a:	4618      	mov	r0, r3
 800559c:	f000 fbaf 	bl	8005cfe <TIM_ITRx_SetConfig>
      break;
 80055a0:	e02c      	b.n	80055fc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6818      	ldr	r0, [r3, #0]
 80055a6:	683b      	ldr	r3, [r7, #0]
 80055a8:	6859      	ldr	r1, [r3, #4]
 80055aa:	683b      	ldr	r3, [r7, #0]
 80055ac:	68db      	ldr	r3, [r3, #12]
 80055ae:	461a      	mov	r2, r3
 80055b0:	f000 fb75 	bl	8005c9e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	2160      	movs	r1, #96	; 0x60
 80055ba:	4618      	mov	r0, r3
 80055bc:	f000 fb9f 	bl	8005cfe <TIM_ITRx_SetConfig>
      break;
 80055c0:	e01c      	b.n	80055fc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	6818      	ldr	r0, [r3, #0]
 80055c6:	683b      	ldr	r3, [r7, #0]
 80055c8:	6859      	ldr	r1, [r3, #4]
 80055ca:	683b      	ldr	r3, [r7, #0]
 80055cc:	68db      	ldr	r3, [r3, #12]
 80055ce:	461a      	mov	r2, r3
 80055d0:	f000 fb36 	bl	8005c40 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	2140      	movs	r1, #64	; 0x40
 80055da:	4618      	mov	r0, r3
 80055dc:	f000 fb8f 	bl	8005cfe <TIM_ITRx_SetConfig>
      break;
 80055e0:	e00c      	b.n	80055fc <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681a      	ldr	r2, [r3, #0]
 80055e6:	683b      	ldr	r3, [r7, #0]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	4619      	mov	r1, r3
 80055ec:	4610      	mov	r0, r2
 80055ee:	f000 fb86 	bl	8005cfe <TIM_ITRx_SetConfig>
      break;
 80055f2:	e003      	b.n	80055fc <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80055f4:	2301      	movs	r3, #1
 80055f6:	73fb      	strb	r3, [r7, #15]
      break;
 80055f8:	e000      	b.n	80055fc <HAL_TIM_ConfigClockSource+0x178>
      break;
 80055fa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2201      	movs	r2, #1
 8005600:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2200      	movs	r2, #0
 8005608:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800560c:	7bfb      	ldrb	r3, [r7, #15]
}
 800560e:	4618      	mov	r0, r3
 8005610:	3710      	adds	r7, #16
 8005612:	46bd      	mov	sp, r7
 8005614:	bd80      	pop	{r7, pc}

08005616 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005616:	b480      	push	{r7}
 8005618:	b083      	sub	sp, #12
 800561a:	af00      	add	r7, sp, #0
 800561c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800561e:	bf00      	nop
 8005620:	370c      	adds	r7, #12
 8005622:	46bd      	mov	sp, r7
 8005624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005628:	4770      	bx	lr

0800562a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800562a:	b480      	push	{r7}
 800562c:	b083      	sub	sp, #12
 800562e:	af00      	add	r7, sp, #0
 8005630:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005632:	bf00      	nop
 8005634:	370c      	adds	r7, #12
 8005636:	46bd      	mov	sp, r7
 8005638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563c:	4770      	bx	lr

0800563e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800563e:	b480      	push	{r7}
 8005640:	b083      	sub	sp, #12
 8005642:	af00      	add	r7, sp, #0
 8005644:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005646:	bf00      	nop
 8005648:	370c      	adds	r7, #12
 800564a:	46bd      	mov	sp, r7
 800564c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005650:	4770      	bx	lr

08005652 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005652:	b480      	push	{r7}
 8005654:	b083      	sub	sp, #12
 8005656:	af00      	add	r7, sp, #0
 8005658:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800565a:	bf00      	nop
 800565c:	370c      	adds	r7, #12
 800565e:	46bd      	mov	sp, r7
 8005660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005664:	4770      	bx	lr
	...

08005668 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005668:	b480      	push	{r7}
 800566a:	b085      	sub	sp, #20
 800566c:	af00      	add	r7, sp, #0
 800566e:	6078      	str	r0, [r7, #4]
 8005670:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	4a2e      	ldr	r2, [pc, #184]	; (8005734 <TIM_Base_SetConfig+0xcc>)
 800567c:	4293      	cmp	r3, r2
 800567e:	d007      	beq.n	8005690 <TIM_Base_SetConfig+0x28>
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005686:	d003      	beq.n	8005690 <TIM_Base_SetConfig+0x28>
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	4a2b      	ldr	r2, [pc, #172]	; (8005738 <TIM_Base_SetConfig+0xd0>)
 800568c:	4293      	cmp	r3, r2
 800568e:	d108      	bne.n	80056a2 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005696:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005698:	683b      	ldr	r3, [r7, #0]
 800569a:	685b      	ldr	r3, [r3, #4]
 800569c:	68fa      	ldr	r2, [r7, #12]
 800569e:	4313      	orrs	r3, r2
 80056a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	4a23      	ldr	r2, [pc, #140]	; (8005734 <TIM_Base_SetConfig+0xcc>)
 80056a6:	4293      	cmp	r3, r2
 80056a8:	d00f      	beq.n	80056ca <TIM_Base_SetConfig+0x62>
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056b0:	d00b      	beq.n	80056ca <TIM_Base_SetConfig+0x62>
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	4a20      	ldr	r2, [pc, #128]	; (8005738 <TIM_Base_SetConfig+0xd0>)
 80056b6:	4293      	cmp	r3, r2
 80056b8:	d007      	beq.n	80056ca <TIM_Base_SetConfig+0x62>
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	4a1f      	ldr	r2, [pc, #124]	; (800573c <TIM_Base_SetConfig+0xd4>)
 80056be:	4293      	cmp	r3, r2
 80056c0:	d003      	beq.n	80056ca <TIM_Base_SetConfig+0x62>
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	4a1e      	ldr	r2, [pc, #120]	; (8005740 <TIM_Base_SetConfig+0xd8>)
 80056c6:	4293      	cmp	r3, r2
 80056c8:	d108      	bne.n	80056dc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80056d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80056d2:	683b      	ldr	r3, [r7, #0]
 80056d4:	68db      	ldr	r3, [r3, #12]
 80056d6:	68fa      	ldr	r2, [r7, #12]
 80056d8:	4313      	orrs	r3, r2
 80056da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80056e2:	683b      	ldr	r3, [r7, #0]
 80056e4:	695b      	ldr	r3, [r3, #20]
 80056e6:	4313      	orrs	r3, r2
 80056e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	68fa      	ldr	r2, [r7, #12]
 80056ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80056f0:	683b      	ldr	r3, [r7, #0]
 80056f2:	689a      	ldr	r2, [r3, #8]
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80056f8:	683b      	ldr	r3, [r7, #0]
 80056fa:	681a      	ldr	r2, [r3, #0]
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	4a0c      	ldr	r2, [pc, #48]	; (8005734 <TIM_Base_SetConfig+0xcc>)
 8005704:	4293      	cmp	r3, r2
 8005706:	d007      	beq.n	8005718 <TIM_Base_SetConfig+0xb0>
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	4a0c      	ldr	r2, [pc, #48]	; (800573c <TIM_Base_SetConfig+0xd4>)
 800570c:	4293      	cmp	r3, r2
 800570e:	d003      	beq.n	8005718 <TIM_Base_SetConfig+0xb0>
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	4a0b      	ldr	r2, [pc, #44]	; (8005740 <TIM_Base_SetConfig+0xd8>)
 8005714:	4293      	cmp	r3, r2
 8005716:	d103      	bne.n	8005720 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005718:	683b      	ldr	r3, [r7, #0]
 800571a:	691a      	ldr	r2, [r3, #16]
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2201      	movs	r2, #1
 8005724:	615a      	str	r2, [r3, #20]
}
 8005726:	bf00      	nop
 8005728:	3714      	adds	r7, #20
 800572a:	46bd      	mov	sp, r7
 800572c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005730:	4770      	bx	lr
 8005732:	bf00      	nop
 8005734:	40012c00 	.word	0x40012c00
 8005738:	40000400 	.word	0x40000400
 800573c:	40014000 	.word	0x40014000
 8005740:	40014400 	.word	0x40014400

08005744 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005744:	b480      	push	{r7}
 8005746:	b087      	sub	sp, #28
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
 800574c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6a1b      	ldr	r3, [r3, #32]
 8005752:	f023 0201 	bic.w	r2, r3, #1
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	6a1b      	ldr	r3, [r3, #32]
 800575e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	685b      	ldr	r3, [r3, #4]
 8005764:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	699b      	ldr	r3, [r3, #24]
 800576a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005772:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005776:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	f023 0303 	bic.w	r3, r3, #3
 800577e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	68fa      	ldr	r2, [r7, #12]
 8005786:	4313      	orrs	r3, r2
 8005788:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800578a:	697b      	ldr	r3, [r7, #20]
 800578c:	f023 0302 	bic.w	r3, r3, #2
 8005790:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005792:	683b      	ldr	r3, [r7, #0]
 8005794:	689b      	ldr	r3, [r3, #8]
 8005796:	697a      	ldr	r2, [r7, #20]
 8005798:	4313      	orrs	r3, r2
 800579a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	4a24      	ldr	r2, [pc, #144]	; (8005830 <TIM_OC1_SetConfig+0xec>)
 80057a0:	4293      	cmp	r3, r2
 80057a2:	d007      	beq.n	80057b4 <TIM_OC1_SetConfig+0x70>
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	4a23      	ldr	r2, [pc, #140]	; (8005834 <TIM_OC1_SetConfig+0xf0>)
 80057a8:	4293      	cmp	r3, r2
 80057aa:	d003      	beq.n	80057b4 <TIM_OC1_SetConfig+0x70>
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	4a22      	ldr	r2, [pc, #136]	; (8005838 <TIM_OC1_SetConfig+0xf4>)
 80057b0:	4293      	cmp	r3, r2
 80057b2:	d10c      	bne.n	80057ce <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80057b4:	697b      	ldr	r3, [r7, #20]
 80057b6:	f023 0308 	bic.w	r3, r3, #8
 80057ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80057bc:	683b      	ldr	r3, [r7, #0]
 80057be:	68db      	ldr	r3, [r3, #12]
 80057c0:	697a      	ldr	r2, [r7, #20]
 80057c2:	4313      	orrs	r3, r2
 80057c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80057c6:	697b      	ldr	r3, [r7, #20]
 80057c8:	f023 0304 	bic.w	r3, r3, #4
 80057cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	4a17      	ldr	r2, [pc, #92]	; (8005830 <TIM_OC1_SetConfig+0xec>)
 80057d2:	4293      	cmp	r3, r2
 80057d4:	d007      	beq.n	80057e6 <TIM_OC1_SetConfig+0xa2>
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	4a16      	ldr	r2, [pc, #88]	; (8005834 <TIM_OC1_SetConfig+0xf0>)
 80057da:	4293      	cmp	r3, r2
 80057dc:	d003      	beq.n	80057e6 <TIM_OC1_SetConfig+0xa2>
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	4a15      	ldr	r2, [pc, #84]	; (8005838 <TIM_OC1_SetConfig+0xf4>)
 80057e2:	4293      	cmp	r3, r2
 80057e4:	d111      	bne.n	800580a <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80057e6:	693b      	ldr	r3, [r7, #16]
 80057e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80057ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80057ee:	693b      	ldr	r3, [r7, #16]
 80057f0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80057f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80057f6:	683b      	ldr	r3, [r7, #0]
 80057f8:	695b      	ldr	r3, [r3, #20]
 80057fa:	693a      	ldr	r2, [r7, #16]
 80057fc:	4313      	orrs	r3, r2
 80057fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005800:	683b      	ldr	r3, [r7, #0]
 8005802:	699b      	ldr	r3, [r3, #24]
 8005804:	693a      	ldr	r2, [r7, #16]
 8005806:	4313      	orrs	r3, r2
 8005808:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	693a      	ldr	r2, [r7, #16]
 800580e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	68fa      	ldr	r2, [r7, #12]
 8005814:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005816:	683b      	ldr	r3, [r7, #0]
 8005818:	685a      	ldr	r2, [r3, #4]
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	697a      	ldr	r2, [r7, #20]
 8005822:	621a      	str	r2, [r3, #32]
}
 8005824:	bf00      	nop
 8005826:	371c      	adds	r7, #28
 8005828:	46bd      	mov	sp, r7
 800582a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582e:	4770      	bx	lr
 8005830:	40012c00 	.word	0x40012c00
 8005834:	40014000 	.word	0x40014000
 8005838:	40014400 	.word	0x40014400

0800583c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800583c:	b480      	push	{r7}
 800583e:	b087      	sub	sp, #28
 8005840:	af00      	add	r7, sp, #0
 8005842:	6078      	str	r0, [r7, #4]
 8005844:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	6a1b      	ldr	r3, [r3, #32]
 800584a:	f023 0210 	bic.w	r2, r3, #16
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	6a1b      	ldr	r3, [r3, #32]
 8005856:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	685b      	ldr	r3, [r3, #4]
 800585c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	699b      	ldr	r3, [r3, #24]
 8005862:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800586a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800586e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005876:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005878:	683b      	ldr	r3, [r7, #0]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	021b      	lsls	r3, r3, #8
 800587e:	68fa      	ldr	r2, [r7, #12]
 8005880:	4313      	orrs	r3, r2
 8005882:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005884:	697b      	ldr	r3, [r7, #20]
 8005886:	f023 0320 	bic.w	r3, r3, #32
 800588a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800588c:	683b      	ldr	r3, [r7, #0]
 800588e:	689b      	ldr	r3, [r3, #8]
 8005890:	011b      	lsls	r3, r3, #4
 8005892:	697a      	ldr	r2, [r7, #20]
 8005894:	4313      	orrs	r3, r2
 8005896:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	4a22      	ldr	r2, [pc, #136]	; (8005924 <TIM_OC2_SetConfig+0xe8>)
 800589c:	4293      	cmp	r3, r2
 800589e:	d10d      	bne.n	80058bc <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80058a0:	697b      	ldr	r3, [r7, #20]
 80058a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80058a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80058a8:	683b      	ldr	r3, [r7, #0]
 80058aa:	68db      	ldr	r3, [r3, #12]
 80058ac:	011b      	lsls	r3, r3, #4
 80058ae:	697a      	ldr	r2, [r7, #20]
 80058b0:	4313      	orrs	r3, r2
 80058b2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80058b4:	697b      	ldr	r3, [r7, #20]
 80058b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80058ba:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	4a19      	ldr	r2, [pc, #100]	; (8005924 <TIM_OC2_SetConfig+0xe8>)
 80058c0:	4293      	cmp	r3, r2
 80058c2:	d007      	beq.n	80058d4 <TIM_OC2_SetConfig+0x98>
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	4a18      	ldr	r2, [pc, #96]	; (8005928 <TIM_OC2_SetConfig+0xec>)
 80058c8:	4293      	cmp	r3, r2
 80058ca:	d003      	beq.n	80058d4 <TIM_OC2_SetConfig+0x98>
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	4a17      	ldr	r2, [pc, #92]	; (800592c <TIM_OC2_SetConfig+0xf0>)
 80058d0:	4293      	cmp	r3, r2
 80058d2:	d113      	bne.n	80058fc <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80058d4:	693b      	ldr	r3, [r7, #16]
 80058d6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80058da:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80058dc:	693b      	ldr	r3, [r7, #16]
 80058de:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80058e2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80058e4:	683b      	ldr	r3, [r7, #0]
 80058e6:	695b      	ldr	r3, [r3, #20]
 80058e8:	009b      	lsls	r3, r3, #2
 80058ea:	693a      	ldr	r2, [r7, #16]
 80058ec:	4313      	orrs	r3, r2
 80058ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80058f0:	683b      	ldr	r3, [r7, #0]
 80058f2:	699b      	ldr	r3, [r3, #24]
 80058f4:	009b      	lsls	r3, r3, #2
 80058f6:	693a      	ldr	r2, [r7, #16]
 80058f8:	4313      	orrs	r3, r2
 80058fa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	693a      	ldr	r2, [r7, #16]
 8005900:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	68fa      	ldr	r2, [r7, #12]
 8005906:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005908:	683b      	ldr	r3, [r7, #0]
 800590a:	685a      	ldr	r2, [r3, #4]
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	697a      	ldr	r2, [r7, #20]
 8005914:	621a      	str	r2, [r3, #32]
}
 8005916:	bf00      	nop
 8005918:	371c      	adds	r7, #28
 800591a:	46bd      	mov	sp, r7
 800591c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005920:	4770      	bx	lr
 8005922:	bf00      	nop
 8005924:	40012c00 	.word	0x40012c00
 8005928:	40014000 	.word	0x40014000
 800592c:	40014400 	.word	0x40014400

08005930 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005930:	b480      	push	{r7}
 8005932:	b087      	sub	sp, #28
 8005934:	af00      	add	r7, sp, #0
 8005936:	6078      	str	r0, [r7, #4]
 8005938:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	6a1b      	ldr	r3, [r3, #32]
 800593e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	6a1b      	ldr	r3, [r3, #32]
 800594a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	685b      	ldr	r3, [r3, #4]
 8005950:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	69db      	ldr	r3, [r3, #28]
 8005956:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800595e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005962:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	f023 0303 	bic.w	r3, r3, #3
 800596a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800596c:	683b      	ldr	r3, [r7, #0]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	68fa      	ldr	r2, [r7, #12]
 8005972:	4313      	orrs	r3, r2
 8005974:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005976:	697b      	ldr	r3, [r7, #20]
 8005978:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800597c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800597e:	683b      	ldr	r3, [r7, #0]
 8005980:	689b      	ldr	r3, [r3, #8]
 8005982:	021b      	lsls	r3, r3, #8
 8005984:	697a      	ldr	r2, [r7, #20]
 8005986:	4313      	orrs	r3, r2
 8005988:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	4a21      	ldr	r2, [pc, #132]	; (8005a14 <TIM_OC3_SetConfig+0xe4>)
 800598e:	4293      	cmp	r3, r2
 8005990:	d10d      	bne.n	80059ae <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005992:	697b      	ldr	r3, [r7, #20]
 8005994:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005998:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800599a:	683b      	ldr	r3, [r7, #0]
 800599c:	68db      	ldr	r3, [r3, #12]
 800599e:	021b      	lsls	r3, r3, #8
 80059a0:	697a      	ldr	r2, [r7, #20]
 80059a2:	4313      	orrs	r3, r2
 80059a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80059a6:	697b      	ldr	r3, [r7, #20]
 80059a8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80059ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	4a18      	ldr	r2, [pc, #96]	; (8005a14 <TIM_OC3_SetConfig+0xe4>)
 80059b2:	4293      	cmp	r3, r2
 80059b4:	d007      	beq.n	80059c6 <TIM_OC3_SetConfig+0x96>
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	4a17      	ldr	r2, [pc, #92]	; (8005a18 <TIM_OC3_SetConfig+0xe8>)
 80059ba:	4293      	cmp	r3, r2
 80059bc:	d003      	beq.n	80059c6 <TIM_OC3_SetConfig+0x96>
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	4a16      	ldr	r2, [pc, #88]	; (8005a1c <TIM_OC3_SetConfig+0xec>)
 80059c2:	4293      	cmp	r3, r2
 80059c4:	d113      	bne.n	80059ee <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80059c6:	693b      	ldr	r3, [r7, #16]
 80059c8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80059cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80059ce:	693b      	ldr	r3, [r7, #16]
 80059d0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80059d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80059d6:	683b      	ldr	r3, [r7, #0]
 80059d8:	695b      	ldr	r3, [r3, #20]
 80059da:	011b      	lsls	r3, r3, #4
 80059dc:	693a      	ldr	r2, [r7, #16]
 80059de:	4313      	orrs	r3, r2
 80059e0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80059e2:	683b      	ldr	r3, [r7, #0]
 80059e4:	699b      	ldr	r3, [r3, #24]
 80059e6:	011b      	lsls	r3, r3, #4
 80059e8:	693a      	ldr	r2, [r7, #16]
 80059ea:	4313      	orrs	r3, r2
 80059ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	693a      	ldr	r2, [r7, #16]
 80059f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	68fa      	ldr	r2, [r7, #12]
 80059f8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80059fa:	683b      	ldr	r3, [r7, #0]
 80059fc:	685a      	ldr	r2, [r3, #4]
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	697a      	ldr	r2, [r7, #20]
 8005a06:	621a      	str	r2, [r3, #32]
}
 8005a08:	bf00      	nop
 8005a0a:	371c      	adds	r7, #28
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a12:	4770      	bx	lr
 8005a14:	40012c00 	.word	0x40012c00
 8005a18:	40014000 	.word	0x40014000
 8005a1c:	40014400 	.word	0x40014400

08005a20 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005a20:	b480      	push	{r7}
 8005a22:	b087      	sub	sp, #28
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	6078      	str	r0, [r7, #4]
 8005a28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	6a1b      	ldr	r3, [r3, #32]
 8005a2e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	6a1b      	ldr	r3, [r3, #32]
 8005a3a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	685b      	ldr	r3, [r3, #4]
 8005a40:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	69db      	ldr	r3, [r3, #28]
 8005a46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005a4e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a5a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005a5c:	683b      	ldr	r3, [r7, #0]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	021b      	lsls	r3, r3, #8
 8005a62:	68fa      	ldr	r2, [r7, #12]
 8005a64:	4313      	orrs	r3, r2
 8005a66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005a68:	693b      	ldr	r3, [r7, #16]
 8005a6a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005a6e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005a70:	683b      	ldr	r3, [r7, #0]
 8005a72:	689b      	ldr	r3, [r3, #8]
 8005a74:	031b      	lsls	r3, r3, #12
 8005a76:	693a      	ldr	r2, [r7, #16]
 8005a78:	4313      	orrs	r3, r2
 8005a7a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	4a14      	ldr	r2, [pc, #80]	; (8005ad0 <TIM_OC4_SetConfig+0xb0>)
 8005a80:	4293      	cmp	r3, r2
 8005a82:	d007      	beq.n	8005a94 <TIM_OC4_SetConfig+0x74>
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	4a13      	ldr	r2, [pc, #76]	; (8005ad4 <TIM_OC4_SetConfig+0xb4>)
 8005a88:	4293      	cmp	r3, r2
 8005a8a:	d003      	beq.n	8005a94 <TIM_OC4_SetConfig+0x74>
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	4a12      	ldr	r2, [pc, #72]	; (8005ad8 <TIM_OC4_SetConfig+0xb8>)
 8005a90:	4293      	cmp	r3, r2
 8005a92:	d109      	bne.n	8005aa8 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005a94:	697b      	ldr	r3, [r7, #20]
 8005a96:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005a9a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005a9c:	683b      	ldr	r3, [r7, #0]
 8005a9e:	695b      	ldr	r3, [r3, #20]
 8005aa0:	019b      	lsls	r3, r3, #6
 8005aa2:	697a      	ldr	r2, [r7, #20]
 8005aa4:	4313      	orrs	r3, r2
 8005aa6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	697a      	ldr	r2, [r7, #20]
 8005aac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	68fa      	ldr	r2, [r7, #12]
 8005ab2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005ab4:	683b      	ldr	r3, [r7, #0]
 8005ab6:	685a      	ldr	r2, [r3, #4]
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	693a      	ldr	r2, [r7, #16]
 8005ac0:	621a      	str	r2, [r3, #32]
}
 8005ac2:	bf00      	nop
 8005ac4:	371c      	adds	r7, #28
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005acc:	4770      	bx	lr
 8005ace:	bf00      	nop
 8005ad0:	40012c00 	.word	0x40012c00
 8005ad4:	40014000 	.word	0x40014000
 8005ad8:	40014400 	.word	0x40014400

08005adc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005adc:	b480      	push	{r7}
 8005ade:	b087      	sub	sp, #28
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	6078      	str	r0, [r7, #4]
 8005ae4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	6a1b      	ldr	r3, [r3, #32]
 8005aea:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	6a1b      	ldr	r3, [r3, #32]
 8005af6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	685b      	ldr	r3, [r3, #4]
 8005afc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005b0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b0e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005b10:	683b      	ldr	r3, [r7, #0]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	68fa      	ldr	r2, [r7, #12]
 8005b16:	4313      	orrs	r3, r2
 8005b18:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005b1a:	693b      	ldr	r3, [r7, #16]
 8005b1c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005b20:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005b22:	683b      	ldr	r3, [r7, #0]
 8005b24:	689b      	ldr	r3, [r3, #8]
 8005b26:	041b      	lsls	r3, r3, #16
 8005b28:	693a      	ldr	r2, [r7, #16]
 8005b2a:	4313      	orrs	r3, r2
 8005b2c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	4a13      	ldr	r2, [pc, #76]	; (8005b80 <TIM_OC5_SetConfig+0xa4>)
 8005b32:	4293      	cmp	r3, r2
 8005b34:	d007      	beq.n	8005b46 <TIM_OC5_SetConfig+0x6a>
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	4a12      	ldr	r2, [pc, #72]	; (8005b84 <TIM_OC5_SetConfig+0xa8>)
 8005b3a:	4293      	cmp	r3, r2
 8005b3c:	d003      	beq.n	8005b46 <TIM_OC5_SetConfig+0x6a>
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	4a11      	ldr	r2, [pc, #68]	; (8005b88 <TIM_OC5_SetConfig+0xac>)
 8005b42:	4293      	cmp	r3, r2
 8005b44:	d109      	bne.n	8005b5a <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005b46:	697b      	ldr	r3, [r7, #20]
 8005b48:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005b4c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005b4e:	683b      	ldr	r3, [r7, #0]
 8005b50:	695b      	ldr	r3, [r3, #20]
 8005b52:	021b      	lsls	r3, r3, #8
 8005b54:	697a      	ldr	r2, [r7, #20]
 8005b56:	4313      	orrs	r3, r2
 8005b58:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	697a      	ldr	r2, [r7, #20]
 8005b5e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	68fa      	ldr	r2, [r7, #12]
 8005b64:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005b66:	683b      	ldr	r3, [r7, #0]
 8005b68:	685a      	ldr	r2, [r3, #4]
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	693a      	ldr	r2, [r7, #16]
 8005b72:	621a      	str	r2, [r3, #32]
}
 8005b74:	bf00      	nop
 8005b76:	371c      	adds	r7, #28
 8005b78:	46bd      	mov	sp, r7
 8005b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7e:	4770      	bx	lr
 8005b80:	40012c00 	.word	0x40012c00
 8005b84:	40014000 	.word	0x40014000
 8005b88:	40014400 	.word	0x40014400

08005b8c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005b8c:	b480      	push	{r7}
 8005b8e:	b087      	sub	sp, #28
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	6078      	str	r0, [r7, #4]
 8005b94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	6a1b      	ldr	r3, [r3, #32]
 8005b9a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	6a1b      	ldr	r3, [r3, #32]
 8005ba6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	685b      	ldr	r3, [r3, #4]
 8005bac:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005bba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005bbe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005bc0:	683b      	ldr	r3, [r7, #0]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	021b      	lsls	r3, r3, #8
 8005bc6:	68fa      	ldr	r2, [r7, #12]
 8005bc8:	4313      	orrs	r3, r2
 8005bca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005bcc:	693b      	ldr	r3, [r7, #16]
 8005bce:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005bd2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005bd4:	683b      	ldr	r3, [r7, #0]
 8005bd6:	689b      	ldr	r3, [r3, #8]
 8005bd8:	051b      	lsls	r3, r3, #20
 8005bda:	693a      	ldr	r2, [r7, #16]
 8005bdc:	4313      	orrs	r3, r2
 8005bde:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	4a14      	ldr	r2, [pc, #80]	; (8005c34 <TIM_OC6_SetConfig+0xa8>)
 8005be4:	4293      	cmp	r3, r2
 8005be6:	d007      	beq.n	8005bf8 <TIM_OC6_SetConfig+0x6c>
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	4a13      	ldr	r2, [pc, #76]	; (8005c38 <TIM_OC6_SetConfig+0xac>)
 8005bec:	4293      	cmp	r3, r2
 8005bee:	d003      	beq.n	8005bf8 <TIM_OC6_SetConfig+0x6c>
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	4a12      	ldr	r2, [pc, #72]	; (8005c3c <TIM_OC6_SetConfig+0xb0>)
 8005bf4:	4293      	cmp	r3, r2
 8005bf6:	d109      	bne.n	8005c0c <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005bf8:	697b      	ldr	r3, [r7, #20]
 8005bfa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005bfe:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005c00:	683b      	ldr	r3, [r7, #0]
 8005c02:	695b      	ldr	r3, [r3, #20]
 8005c04:	029b      	lsls	r3, r3, #10
 8005c06:	697a      	ldr	r2, [r7, #20]
 8005c08:	4313      	orrs	r3, r2
 8005c0a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	697a      	ldr	r2, [r7, #20]
 8005c10:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	68fa      	ldr	r2, [r7, #12]
 8005c16:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	685a      	ldr	r2, [r3, #4]
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	693a      	ldr	r2, [r7, #16]
 8005c24:	621a      	str	r2, [r3, #32]
}
 8005c26:	bf00      	nop
 8005c28:	371c      	adds	r7, #28
 8005c2a:	46bd      	mov	sp, r7
 8005c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c30:	4770      	bx	lr
 8005c32:	bf00      	nop
 8005c34:	40012c00 	.word	0x40012c00
 8005c38:	40014000 	.word	0x40014000
 8005c3c:	40014400 	.word	0x40014400

08005c40 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005c40:	b480      	push	{r7}
 8005c42:	b087      	sub	sp, #28
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	60f8      	str	r0, [r7, #12]
 8005c48:	60b9      	str	r1, [r7, #8]
 8005c4a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	6a1b      	ldr	r3, [r3, #32]
 8005c50:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	6a1b      	ldr	r3, [r3, #32]
 8005c56:	f023 0201 	bic.w	r2, r3, #1
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	699b      	ldr	r3, [r3, #24]
 8005c62:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005c64:	693b      	ldr	r3, [r7, #16]
 8005c66:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005c6a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	011b      	lsls	r3, r3, #4
 8005c70:	693a      	ldr	r2, [r7, #16]
 8005c72:	4313      	orrs	r3, r2
 8005c74:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005c76:	697b      	ldr	r3, [r7, #20]
 8005c78:	f023 030a 	bic.w	r3, r3, #10
 8005c7c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005c7e:	697a      	ldr	r2, [r7, #20]
 8005c80:	68bb      	ldr	r3, [r7, #8]
 8005c82:	4313      	orrs	r3, r2
 8005c84:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	693a      	ldr	r2, [r7, #16]
 8005c8a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	697a      	ldr	r2, [r7, #20]
 8005c90:	621a      	str	r2, [r3, #32]
}
 8005c92:	bf00      	nop
 8005c94:	371c      	adds	r7, #28
 8005c96:	46bd      	mov	sp, r7
 8005c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9c:	4770      	bx	lr

08005c9e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005c9e:	b480      	push	{r7}
 8005ca0:	b087      	sub	sp, #28
 8005ca2:	af00      	add	r7, sp, #0
 8005ca4:	60f8      	str	r0, [r7, #12]
 8005ca6:	60b9      	str	r1, [r7, #8]
 8005ca8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	6a1b      	ldr	r3, [r3, #32]
 8005cae:	f023 0210 	bic.w	r2, r3, #16
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	699b      	ldr	r3, [r3, #24]
 8005cba:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	6a1b      	ldr	r3, [r3, #32]
 8005cc0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005cc2:	697b      	ldr	r3, [r7, #20]
 8005cc4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005cc8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	031b      	lsls	r3, r3, #12
 8005cce:	697a      	ldr	r2, [r7, #20]
 8005cd0:	4313      	orrs	r3, r2
 8005cd2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005cd4:	693b      	ldr	r3, [r7, #16]
 8005cd6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005cda:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005cdc:	68bb      	ldr	r3, [r7, #8]
 8005cde:	011b      	lsls	r3, r3, #4
 8005ce0:	693a      	ldr	r2, [r7, #16]
 8005ce2:	4313      	orrs	r3, r2
 8005ce4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	697a      	ldr	r2, [r7, #20]
 8005cea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	693a      	ldr	r2, [r7, #16]
 8005cf0:	621a      	str	r2, [r3, #32]
}
 8005cf2:	bf00      	nop
 8005cf4:	371c      	adds	r7, #28
 8005cf6:	46bd      	mov	sp, r7
 8005cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfc:	4770      	bx	lr

08005cfe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005cfe:	b480      	push	{r7}
 8005d00:	b085      	sub	sp, #20
 8005d02:	af00      	add	r7, sp, #0
 8005d04:	6078      	str	r0, [r7, #4]
 8005d06:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	689b      	ldr	r3, [r3, #8]
 8005d0c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d14:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005d16:	683a      	ldr	r2, [r7, #0]
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	4313      	orrs	r3, r2
 8005d1c:	f043 0307 	orr.w	r3, r3, #7
 8005d20:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	68fa      	ldr	r2, [r7, #12]
 8005d26:	609a      	str	r2, [r3, #8]
}
 8005d28:	bf00      	nop
 8005d2a:	3714      	adds	r7, #20
 8005d2c:	46bd      	mov	sp, r7
 8005d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d32:	4770      	bx	lr

08005d34 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005d34:	b480      	push	{r7}
 8005d36:	b087      	sub	sp, #28
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	60f8      	str	r0, [r7, #12]
 8005d3c:	60b9      	str	r1, [r7, #8]
 8005d3e:	607a      	str	r2, [r7, #4]
 8005d40:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	689b      	ldr	r3, [r3, #8]
 8005d46:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005d48:	697b      	ldr	r3, [r7, #20]
 8005d4a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005d4e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005d50:	683b      	ldr	r3, [r7, #0]
 8005d52:	021a      	lsls	r2, r3, #8
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	431a      	orrs	r2, r3
 8005d58:	68bb      	ldr	r3, [r7, #8]
 8005d5a:	4313      	orrs	r3, r2
 8005d5c:	697a      	ldr	r2, [r7, #20]
 8005d5e:	4313      	orrs	r3, r2
 8005d60:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	697a      	ldr	r2, [r7, #20]
 8005d66:	609a      	str	r2, [r3, #8]
}
 8005d68:	bf00      	nop
 8005d6a:	371c      	adds	r7, #28
 8005d6c:	46bd      	mov	sp, r7
 8005d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d72:	4770      	bx	lr

08005d74 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005d74:	b480      	push	{r7}
 8005d76:	b087      	sub	sp, #28
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	60f8      	str	r0, [r7, #12]
 8005d7c:	60b9      	str	r1, [r7, #8]
 8005d7e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005d80:	68bb      	ldr	r3, [r7, #8]
 8005d82:	f003 031f 	and.w	r3, r3, #31
 8005d86:	2201      	movs	r2, #1
 8005d88:	fa02 f303 	lsl.w	r3, r2, r3
 8005d8c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	6a1a      	ldr	r2, [r3, #32]
 8005d92:	697b      	ldr	r3, [r7, #20]
 8005d94:	43db      	mvns	r3, r3
 8005d96:	401a      	ands	r2, r3
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	6a1a      	ldr	r2, [r3, #32]
 8005da0:	68bb      	ldr	r3, [r7, #8]
 8005da2:	f003 031f 	and.w	r3, r3, #31
 8005da6:	6879      	ldr	r1, [r7, #4]
 8005da8:	fa01 f303 	lsl.w	r3, r1, r3
 8005dac:	431a      	orrs	r2, r3
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	621a      	str	r2, [r3, #32]
}
 8005db2:	bf00      	nop
 8005db4:	371c      	adds	r7, #28
 8005db6:	46bd      	mov	sp, r7
 8005db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dbc:	4770      	bx	lr
	...

08005dc0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005dc0:	b480      	push	{r7}
 8005dc2:	b085      	sub	sp, #20
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	6078      	str	r0, [r7, #4]
 8005dc8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005dd0:	2b01      	cmp	r3, #1
 8005dd2:	d101      	bne.n	8005dd8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005dd4:	2302      	movs	r3, #2
 8005dd6:	e054      	b.n	8005e82 <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	2201      	movs	r2, #1
 8005ddc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	2202      	movs	r2, #2
 8005de4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	685b      	ldr	r3, [r3, #4]
 8005dee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	689b      	ldr	r3, [r3, #8]
 8005df6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	4a24      	ldr	r2, [pc, #144]	; (8005e90 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005dfe:	4293      	cmp	r3, r2
 8005e00:	d108      	bne.n	8005e14 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005e08:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005e0a:	683b      	ldr	r3, [r7, #0]
 8005e0c:	685b      	ldr	r3, [r3, #4]
 8005e0e:	68fa      	ldr	r2, [r7, #12]
 8005e10:	4313      	orrs	r3, r2
 8005e12:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e1a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005e1c:	683b      	ldr	r3, [r7, #0]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	68fa      	ldr	r2, [r7, #12]
 8005e22:	4313      	orrs	r3, r2
 8005e24:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	68fa      	ldr	r2, [r7, #12]
 8005e2c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	4a17      	ldr	r2, [pc, #92]	; (8005e90 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005e34:	4293      	cmp	r3, r2
 8005e36:	d00e      	beq.n	8005e56 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e40:	d009      	beq.n	8005e56 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	4a13      	ldr	r2, [pc, #76]	; (8005e94 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005e48:	4293      	cmp	r3, r2
 8005e4a:	d004      	beq.n	8005e56 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	4a11      	ldr	r2, [pc, #68]	; (8005e98 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005e52:	4293      	cmp	r3, r2
 8005e54:	d10c      	bne.n	8005e70 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005e56:	68bb      	ldr	r3, [r7, #8]
 8005e58:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005e5c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005e5e:	683b      	ldr	r3, [r7, #0]
 8005e60:	689b      	ldr	r3, [r3, #8]
 8005e62:	68ba      	ldr	r2, [r7, #8]
 8005e64:	4313      	orrs	r3, r2
 8005e66:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	68ba      	ldr	r2, [r7, #8]
 8005e6e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2201      	movs	r2, #1
 8005e74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	2200      	movs	r2, #0
 8005e7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005e80:	2300      	movs	r3, #0
}
 8005e82:	4618      	mov	r0, r3
 8005e84:	3714      	adds	r7, #20
 8005e86:	46bd      	mov	sp, r7
 8005e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8c:	4770      	bx	lr
 8005e8e:	bf00      	nop
 8005e90:	40012c00 	.word	0x40012c00
 8005e94:	40000400 	.word	0x40000400
 8005e98:	40014000 	.word	0x40014000

08005e9c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005e9c:	b480      	push	{r7}
 8005e9e:	b085      	sub	sp, #20
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
 8005ea4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005ea6:	2300      	movs	r3, #0
 8005ea8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005eb0:	2b01      	cmp	r3, #1
 8005eb2:	d101      	bne.n	8005eb8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005eb4:	2302      	movs	r3, #2
 8005eb6:	e060      	b.n	8005f7a <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2201      	movs	r2, #1
 8005ebc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005ec6:	683b      	ldr	r3, [r7, #0]
 8005ec8:	68db      	ldr	r3, [r3, #12]
 8005eca:	4313      	orrs	r3, r2
 8005ecc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005ed4:	683b      	ldr	r3, [r7, #0]
 8005ed6:	689b      	ldr	r3, [r3, #8]
 8005ed8:	4313      	orrs	r3, r2
 8005eda:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005ee2:	683b      	ldr	r3, [r7, #0]
 8005ee4:	685b      	ldr	r3, [r3, #4]
 8005ee6:	4313      	orrs	r3, r2
 8005ee8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005ef0:	683b      	ldr	r3, [r7, #0]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	4313      	orrs	r3, r2
 8005ef6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005efe:	683b      	ldr	r3, [r7, #0]
 8005f00:	691b      	ldr	r3, [r3, #16]
 8005f02:	4313      	orrs	r3, r2
 8005f04:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005f0c:	683b      	ldr	r3, [r7, #0]
 8005f0e:	695b      	ldr	r3, [r3, #20]
 8005f10:	4313      	orrs	r3, r2
 8005f12:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005f1a:	683b      	ldr	r3, [r7, #0]
 8005f1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f1e:	4313      	orrs	r3, r2
 8005f20:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8005f28:	683b      	ldr	r3, [r7, #0]
 8005f2a:	699b      	ldr	r3, [r3, #24]
 8005f2c:	041b      	lsls	r3, r3, #16
 8005f2e:	4313      	orrs	r3, r2
 8005f30:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	4a14      	ldr	r2, [pc, #80]	; (8005f88 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8005f38:	4293      	cmp	r3, r2
 8005f3a:	d115      	bne.n	8005f68 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8005f42:	683b      	ldr	r3, [r7, #0]
 8005f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f46:	051b      	lsls	r3, r3, #20
 8005f48:	4313      	orrs	r3, r2
 8005f4a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005f52:	683b      	ldr	r3, [r7, #0]
 8005f54:	69db      	ldr	r3, [r3, #28]
 8005f56:	4313      	orrs	r3, r2
 8005f58:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005f60:	683b      	ldr	r3, [r7, #0]
 8005f62:	6a1b      	ldr	r3, [r3, #32]
 8005f64:	4313      	orrs	r3, r2
 8005f66:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	68fa      	ldr	r2, [r7, #12]
 8005f6e:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	2200      	movs	r2, #0
 8005f74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005f78:	2300      	movs	r3, #0
}
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	3714      	adds	r7, #20
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f84:	4770      	bx	lr
 8005f86:	bf00      	nop
 8005f88:	40012c00 	.word	0x40012c00

08005f8c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005f8c:	b480      	push	{r7}
 8005f8e:	b083      	sub	sp, #12
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005f94:	bf00      	nop
 8005f96:	370c      	adds	r7, #12
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9e:	4770      	bx	lr

08005fa0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005fa0:	b480      	push	{r7}
 8005fa2:	b083      	sub	sp, #12
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005fa8:	bf00      	nop
 8005faa:	370c      	adds	r7, #12
 8005fac:	46bd      	mov	sp, r7
 8005fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb2:	4770      	bx	lr

08005fb4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005fb4:	b480      	push	{r7}
 8005fb6:	b083      	sub	sp, #12
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005fbc:	bf00      	nop
 8005fbe:	370c      	adds	r7, #12
 8005fc0:	46bd      	mov	sp, r7
 8005fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc6:	4770      	bx	lr

08005fc8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005fc8:	b580      	push	{r7, lr}
 8005fca:	b082      	sub	sp, #8
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d101      	bne.n	8005fda <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005fd6:	2301      	movs	r3, #1
 8005fd8:	e040      	b.n	800605c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d106      	bne.n	8005ff0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005fea:	6878      	ldr	r0, [r7, #4]
 8005fec:	f7fb fddc 	bl	8001ba8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2224      	movs	r2, #36	; 0x24
 8005ff4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	681a      	ldr	r2, [r3, #0]
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	f022 0201 	bic.w	r2, r2, #1
 8006004:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006006:	6878      	ldr	r0, [r7, #4]
 8006008:	f000 fc18 	bl	800683c <UART_SetConfig>
 800600c:	4603      	mov	r3, r0
 800600e:	2b01      	cmp	r3, #1
 8006010:	d101      	bne.n	8006016 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006012:	2301      	movs	r3, #1
 8006014:	e022      	b.n	800605c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800601a:	2b00      	cmp	r3, #0
 800601c:	d002      	beq.n	8006024 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800601e:	6878      	ldr	r0, [r7, #4]
 8006020:	f000 fe92 	bl	8006d48 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	685a      	ldr	r2, [r3, #4]
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006032:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	689a      	ldr	r2, [r3, #8]
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006042:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	681a      	ldr	r2, [r3, #0]
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	f042 0201 	orr.w	r2, r2, #1
 8006052:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006054:	6878      	ldr	r0, [r7, #4]
 8006056:	f000 ff19 	bl	8006e8c <UART_CheckIdleState>
 800605a:	4603      	mov	r3, r0
}
 800605c:	4618      	mov	r0, r3
 800605e:	3708      	adds	r7, #8
 8006060:	46bd      	mov	sp, r7
 8006062:	bd80      	pop	{r7, pc}

08006064 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006064:	b580      	push	{r7, lr}
 8006066:	b08a      	sub	sp, #40	; 0x28
 8006068:	af02      	add	r7, sp, #8
 800606a:	60f8      	str	r0, [r7, #12]
 800606c:	60b9      	str	r1, [r7, #8]
 800606e:	603b      	str	r3, [r7, #0]
 8006070:	4613      	mov	r3, r2
 8006072:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006078:	2b20      	cmp	r3, #32
 800607a:	f040 8082 	bne.w	8006182 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800607e:	68bb      	ldr	r3, [r7, #8]
 8006080:	2b00      	cmp	r3, #0
 8006082:	d002      	beq.n	800608a <HAL_UART_Transmit+0x26>
 8006084:	88fb      	ldrh	r3, [r7, #6]
 8006086:	2b00      	cmp	r3, #0
 8006088:	d101      	bne.n	800608e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800608a:	2301      	movs	r3, #1
 800608c:	e07a      	b.n	8006184 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8006094:	2b01      	cmp	r3, #1
 8006096:	d101      	bne.n	800609c <HAL_UART_Transmit+0x38>
 8006098:	2302      	movs	r3, #2
 800609a:	e073      	b.n	8006184 <HAL_UART_Transmit+0x120>
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	2201      	movs	r2, #1
 80060a0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	2200      	movs	r2, #0
 80060a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	2221      	movs	r2, #33	; 0x21
 80060b0:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80060b2:	f7fb fec5 	bl	8001e40 <HAL_GetTick>
 80060b6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	88fa      	ldrh	r2, [r7, #6]
 80060bc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	88fa      	ldrh	r2, [r7, #6]
 80060c4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	689b      	ldr	r3, [r3, #8]
 80060cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060d0:	d108      	bne.n	80060e4 <HAL_UART_Transmit+0x80>
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	691b      	ldr	r3, [r3, #16]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d104      	bne.n	80060e4 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80060da:	2300      	movs	r3, #0
 80060dc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80060de:	68bb      	ldr	r3, [r7, #8]
 80060e0:	61bb      	str	r3, [r7, #24]
 80060e2:	e003      	b.n	80060ec <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80060e4:	68bb      	ldr	r3, [r7, #8]
 80060e6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80060e8:	2300      	movs	r3, #0
 80060ea:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	2200      	movs	r2, #0
 80060f0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80060f4:	e02d      	b.n	8006152 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80060f6:	683b      	ldr	r3, [r7, #0]
 80060f8:	9300      	str	r3, [sp, #0]
 80060fa:	697b      	ldr	r3, [r7, #20]
 80060fc:	2200      	movs	r2, #0
 80060fe:	2180      	movs	r1, #128	; 0x80
 8006100:	68f8      	ldr	r0, [r7, #12]
 8006102:	f000 ff0c 	bl	8006f1e <UART_WaitOnFlagUntilTimeout>
 8006106:	4603      	mov	r3, r0
 8006108:	2b00      	cmp	r3, #0
 800610a:	d001      	beq.n	8006110 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800610c:	2303      	movs	r3, #3
 800610e:	e039      	b.n	8006184 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8006110:	69fb      	ldr	r3, [r7, #28]
 8006112:	2b00      	cmp	r3, #0
 8006114:	d10b      	bne.n	800612e <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006116:	69bb      	ldr	r3, [r7, #24]
 8006118:	881a      	ldrh	r2, [r3, #0]
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006122:	b292      	uxth	r2, r2
 8006124:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006126:	69bb      	ldr	r3, [r7, #24]
 8006128:	3302      	adds	r3, #2
 800612a:	61bb      	str	r3, [r7, #24]
 800612c:	e008      	b.n	8006140 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800612e:	69fb      	ldr	r3, [r7, #28]
 8006130:	781a      	ldrb	r2, [r3, #0]
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	b292      	uxth	r2, r2
 8006138:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800613a:	69fb      	ldr	r3, [r7, #28]
 800613c:	3301      	adds	r3, #1
 800613e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006146:	b29b      	uxth	r3, r3
 8006148:	3b01      	subs	r3, #1
 800614a:	b29a      	uxth	r2, r3
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006158:	b29b      	uxth	r3, r3
 800615a:	2b00      	cmp	r3, #0
 800615c:	d1cb      	bne.n	80060f6 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800615e:	683b      	ldr	r3, [r7, #0]
 8006160:	9300      	str	r3, [sp, #0]
 8006162:	697b      	ldr	r3, [r7, #20]
 8006164:	2200      	movs	r2, #0
 8006166:	2140      	movs	r1, #64	; 0x40
 8006168:	68f8      	ldr	r0, [r7, #12]
 800616a:	f000 fed8 	bl	8006f1e <UART_WaitOnFlagUntilTimeout>
 800616e:	4603      	mov	r3, r0
 8006170:	2b00      	cmp	r3, #0
 8006172:	d001      	beq.n	8006178 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8006174:	2303      	movs	r3, #3
 8006176:	e005      	b.n	8006184 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	2220      	movs	r2, #32
 800617c:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800617e:	2300      	movs	r3, #0
 8006180:	e000      	b.n	8006184 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8006182:	2302      	movs	r3, #2
  }
}
 8006184:	4618      	mov	r0, r3
 8006186:	3720      	adds	r7, #32
 8006188:	46bd      	mov	sp, r7
 800618a:	bd80      	pop	{r7, pc}

0800618c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800618c:	b580      	push	{r7, lr}
 800618e:	b08a      	sub	sp, #40	; 0x28
 8006190:	af00      	add	r7, sp, #0
 8006192:	60f8      	str	r0, [r7, #12]
 8006194:	60b9      	str	r1, [r7, #8]
 8006196:	4613      	mov	r3, r2
 8006198:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800619e:	2b20      	cmp	r3, #32
 80061a0:	d142      	bne.n	8006228 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 80061a2:	68bb      	ldr	r3, [r7, #8]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d002      	beq.n	80061ae <HAL_UART_Receive_IT+0x22>
 80061a8:	88fb      	ldrh	r3, [r7, #6]
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d101      	bne.n	80061b2 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 80061ae:	2301      	movs	r3, #1
 80061b0:	e03b      	b.n	800622a <HAL_UART_Receive_IT+0x9e>
    }

    __HAL_LOCK(huart);
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80061b8:	2b01      	cmp	r3, #1
 80061ba:	d101      	bne.n	80061c0 <HAL_UART_Receive_IT+0x34>
 80061bc:	2302      	movs	r3, #2
 80061be:	e034      	b.n	800622a <HAL_UART_Receive_IT+0x9e>
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	2201      	movs	r2, #1
 80061c4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	2200      	movs	r2, #0
 80061cc:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	4a18      	ldr	r2, [pc, #96]	; (8006234 <HAL_UART_Receive_IT+0xa8>)
 80061d4:	4293      	cmp	r3, r2
 80061d6:	d01f      	beq.n	8006218 <HAL_UART_Receive_IT+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	685b      	ldr	r3, [r3, #4]
 80061de:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d018      	beq.n	8006218 <HAL_UART_Receive_IT+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061ec:	697b      	ldr	r3, [r7, #20]
 80061ee:	e853 3f00 	ldrex	r3, [r3]
 80061f2:	613b      	str	r3, [r7, #16]
   return(result);
 80061f4:	693b      	ldr	r3, [r7, #16]
 80061f6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80061fa:	627b      	str	r3, [r7, #36]	; 0x24
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	461a      	mov	r2, r3
 8006202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006204:	623b      	str	r3, [r7, #32]
 8006206:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006208:	69f9      	ldr	r1, [r7, #28]
 800620a:	6a3a      	ldr	r2, [r7, #32]
 800620c:	e841 2300 	strex	r3, r2, [r1]
 8006210:	61bb      	str	r3, [r7, #24]
   return(result);
 8006212:	69bb      	ldr	r3, [r7, #24]
 8006214:	2b00      	cmp	r3, #0
 8006216:	d1e6      	bne.n	80061e6 <HAL_UART_Receive_IT+0x5a>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006218:	88fb      	ldrh	r3, [r7, #6]
 800621a:	461a      	mov	r2, r3
 800621c:	68b9      	ldr	r1, [r7, #8]
 800621e:	68f8      	ldr	r0, [r7, #12]
 8006220:	f000 ff42 	bl	80070a8 <UART_Start_Receive_IT>
 8006224:	4603      	mov	r3, r0
 8006226:	e000      	b.n	800622a <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8006228:	2302      	movs	r3, #2
  }
}
 800622a:	4618      	mov	r0, r3
 800622c:	3728      	adds	r7, #40	; 0x28
 800622e:	46bd      	mov	sp, r7
 8006230:	bd80      	pop	{r7, pc}
 8006232:	bf00      	nop
 8006234:	40008000 	.word	0x40008000

08006238 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006238:	b580      	push	{r7, lr}
 800623a:	b0ba      	sub	sp, #232	; 0xe8
 800623c:	af00      	add	r7, sp, #0
 800623e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	69db      	ldr	r3, [r3, #28]
 8006246:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	689b      	ldr	r3, [r3, #8]
 800625a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800625e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8006262:	f640 030f 	movw	r3, #2063	; 0x80f
 8006266:	4013      	ands	r3, r2
 8006268:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800626c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006270:	2b00      	cmp	r3, #0
 8006272:	d115      	bne.n	80062a0 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006274:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006278:	f003 0320 	and.w	r3, r3, #32
 800627c:	2b00      	cmp	r3, #0
 800627e:	d00f      	beq.n	80062a0 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006280:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006284:	f003 0320 	and.w	r3, r3, #32
 8006288:	2b00      	cmp	r3, #0
 800628a:	d009      	beq.n	80062a0 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006290:	2b00      	cmp	r3, #0
 8006292:	f000 82a6 	beq.w	80067e2 <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800629a:	6878      	ldr	r0, [r7, #4]
 800629c:	4798      	blx	r3
      }
      return;
 800629e:	e2a0      	b.n	80067e2 <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80062a0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	f000 8117 	beq.w	80064d8 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80062aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80062ae:	f003 0301 	and.w	r3, r3, #1
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d106      	bne.n	80062c4 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80062b6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80062ba:	4b85      	ldr	r3, [pc, #532]	; (80064d0 <HAL_UART_IRQHandler+0x298>)
 80062bc:	4013      	ands	r3, r2
 80062be:	2b00      	cmp	r3, #0
 80062c0:	f000 810a 	beq.w	80064d8 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80062c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80062c8:	f003 0301 	and.w	r3, r3, #1
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d011      	beq.n	80062f4 <HAL_UART_IRQHandler+0xbc>
 80062d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80062d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d00b      	beq.n	80062f4 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	2201      	movs	r2, #1
 80062e2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80062ea:	f043 0201 	orr.w	r2, r3, #1
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80062f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80062f8:	f003 0302 	and.w	r3, r3, #2
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d011      	beq.n	8006324 <HAL_UART_IRQHandler+0xec>
 8006300:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006304:	f003 0301 	and.w	r3, r3, #1
 8006308:	2b00      	cmp	r3, #0
 800630a:	d00b      	beq.n	8006324 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	2202      	movs	r2, #2
 8006312:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800631a:	f043 0204 	orr.w	r2, r3, #4
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006324:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006328:	f003 0304 	and.w	r3, r3, #4
 800632c:	2b00      	cmp	r3, #0
 800632e:	d011      	beq.n	8006354 <HAL_UART_IRQHandler+0x11c>
 8006330:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006334:	f003 0301 	and.w	r3, r3, #1
 8006338:	2b00      	cmp	r3, #0
 800633a:	d00b      	beq.n	8006354 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	2204      	movs	r2, #4
 8006342:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800634a:	f043 0202 	orr.w	r2, r3, #2
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006354:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006358:	f003 0308 	and.w	r3, r3, #8
 800635c:	2b00      	cmp	r3, #0
 800635e:	d017      	beq.n	8006390 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006360:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006364:	f003 0320 	and.w	r3, r3, #32
 8006368:	2b00      	cmp	r3, #0
 800636a:	d105      	bne.n	8006378 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800636c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006370:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006374:	2b00      	cmp	r3, #0
 8006376:	d00b      	beq.n	8006390 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	2208      	movs	r2, #8
 800637e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006386:	f043 0208 	orr.w	r2, r3, #8
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006390:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006394:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006398:	2b00      	cmp	r3, #0
 800639a:	d012      	beq.n	80063c2 <HAL_UART_IRQHandler+0x18a>
 800639c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80063a0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d00c      	beq.n	80063c2 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80063b0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80063b8:	f043 0220 	orr.w	r2, r3, #32
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	f000 820c 	beq.w	80067e6 <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80063ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063d2:	f003 0320 	and.w	r3, r3, #32
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d00d      	beq.n	80063f6 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80063da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80063de:	f003 0320 	and.w	r3, r3, #32
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d007      	beq.n	80063f6 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d003      	beq.n	80063f6 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80063f2:	6878      	ldr	r0, [r7, #4]
 80063f4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80063fc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	689b      	ldr	r3, [r3, #8]
 8006406:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800640a:	2b40      	cmp	r3, #64	; 0x40
 800640c:	d005      	beq.n	800641a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800640e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006412:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006416:	2b00      	cmp	r3, #0
 8006418:	d04f      	beq.n	80064ba <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800641a:	6878      	ldr	r0, [r7, #4]
 800641c:	f000 ff0e 	bl	800723c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	689b      	ldr	r3, [r3, #8]
 8006426:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800642a:	2b40      	cmp	r3, #64	; 0x40
 800642c:	d141      	bne.n	80064b2 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	3308      	adds	r3, #8
 8006434:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006438:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800643c:	e853 3f00 	ldrex	r3, [r3]
 8006440:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006444:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006448:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800644c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	3308      	adds	r3, #8
 8006456:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800645a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800645e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006462:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006466:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800646a:	e841 2300 	strex	r3, r2, [r1]
 800646e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006472:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006476:	2b00      	cmp	r3, #0
 8006478:	d1d9      	bne.n	800642e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800647e:	2b00      	cmp	r3, #0
 8006480:	d013      	beq.n	80064aa <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006486:	4a13      	ldr	r2, [pc, #76]	; (80064d4 <HAL_UART_IRQHandler+0x29c>)
 8006488:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800648e:	4618      	mov	r0, r3
 8006490:	f7fc fed9 	bl	8003246 <HAL_DMA_Abort_IT>
 8006494:	4603      	mov	r3, r0
 8006496:	2b00      	cmp	r3, #0
 8006498:	d017      	beq.n	80064ca <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800649e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064a0:	687a      	ldr	r2, [r7, #4]
 80064a2:	6f12      	ldr	r2, [r2, #112]	; 0x70
 80064a4:	4610      	mov	r0, r2
 80064a6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064a8:	e00f      	b.n	80064ca <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80064aa:	6878      	ldr	r0, [r7, #4]
 80064ac:	f000 f9b0 	bl	8006810 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064b0:	e00b      	b.n	80064ca <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80064b2:	6878      	ldr	r0, [r7, #4]
 80064b4:	f000 f9ac 	bl	8006810 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064b8:	e007      	b.n	80064ca <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80064ba:	6878      	ldr	r0, [r7, #4]
 80064bc:	f000 f9a8 	bl	8006810 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	2200      	movs	r2, #0
 80064c4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 80064c8:	e18d      	b.n	80067e6 <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064ca:	bf00      	nop
    return;
 80064cc:	e18b      	b.n	80067e6 <HAL_UART_IRQHandler+0x5ae>
 80064ce:	bf00      	nop
 80064d0:	04000120 	.word	0x04000120
 80064d4:	08007303 	.word	0x08007303

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80064dc:	2b01      	cmp	r3, #1
 80064de:	f040 8146 	bne.w	800676e <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80064e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80064e6:	f003 0310 	and.w	r3, r3, #16
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	f000 813f 	beq.w	800676e <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80064f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80064f4:	f003 0310 	and.w	r3, r3, #16
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	f000 8138 	beq.w	800676e <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	2210      	movs	r2, #16
 8006504:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	689b      	ldr	r3, [r3, #8]
 800650c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006510:	2b40      	cmp	r3, #64	; 0x40
 8006512:	f040 80b4 	bne.w	800667e <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	685b      	ldr	r3, [r3, #4]
 800651e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006522:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006526:	2b00      	cmp	r3, #0
 8006528:	f000 815f 	beq.w	80067ea <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006532:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006536:	429a      	cmp	r2, r3
 8006538:	f080 8157 	bcs.w	80067ea <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006542:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	f003 0320 	and.w	r3, r3, #32
 8006552:	2b00      	cmp	r3, #0
 8006554:	f040 8085 	bne.w	8006662 <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006560:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006564:	e853 3f00 	ldrex	r3, [r3]
 8006568:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800656c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006570:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006574:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	461a      	mov	r2, r3
 800657e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006582:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006586:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800658a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800658e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006592:	e841 2300 	strex	r3, r2, [r1]
 8006596:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800659a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d1da      	bne.n	8006558 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	3308      	adds	r3, #8
 80065a8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80065ac:	e853 3f00 	ldrex	r3, [r3]
 80065b0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80065b2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80065b4:	f023 0301 	bic.w	r3, r3, #1
 80065b8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	3308      	adds	r3, #8
 80065c2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80065c6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80065ca:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065cc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80065ce:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80065d2:	e841 2300 	strex	r3, r2, [r1]
 80065d6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80065d8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d1e1      	bne.n	80065a2 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	3308      	adds	r3, #8
 80065e4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065e6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80065e8:	e853 3f00 	ldrex	r3, [r3]
 80065ec:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80065ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80065f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80065f4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	3308      	adds	r3, #8
 80065fe:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006602:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006604:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006606:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006608:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800660a:	e841 2300 	strex	r3, r2, [r1]
 800660e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006610:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006612:	2b00      	cmp	r3, #0
 8006614:	d1e3      	bne.n	80065de <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	2220      	movs	r2, #32
 800661a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	2200      	movs	r2, #0
 8006620:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006628:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800662a:	e853 3f00 	ldrex	r3, [r3]
 800662e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006630:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006632:	f023 0310 	bic.w	r3, r3, #16
 8006636:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	461a      	mov	r2, r3
 8006640:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006644:	65bb      	str	r3, [r7, #88]	; 0x58
 8006646:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006648:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800664a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800664c:	e841 2300 	strex	r3, r2, [r1]
 8006650:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006652:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006654:	2b00      	cmp	r3, #0
 8006656:	d1e4      	bne.n	8006622 <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800665c:	4618      	mov	r0, r3
 800665e:	f7fc fdb4 	bl	80031ca <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800666e:	b29b      	uxth	r3, r3
 8006670:	1ad3      	subs	r3, r2, r3
 8006672:	b29b      	uxth	r3, r3
 8006674:	4619      	mov	r1, r3
 8006676:	6878      	ldr	r0, [r7, #4]
 8006678:	f000 f8d4 	bl	8006824 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800667c:	e0b5      	b.n	80067ea <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800668a:	b29b      	uxth	r3, r3
 800668c:	1ad3      	subs	r3, r2, r3
 800668e:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006698:	b29b      	uxth	r3, r3
 800669a:	2b00      	cmp	r3, #0
 800669c:	f000 80a7 	beq.w	80067ee <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 80066a0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	f000 80a2 	beq.w	80067ee <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066b2:	e853 3f00 	ldrex	r3, [r3]
 80066b6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80066b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066ba:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80066be:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	461a      	mov	r2, r3
 80066c8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80066cc:	647b      	str	r3, [r7, #68]	; 0x44
 80066ce:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066d0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80066d2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80066d4:	e841 2300 	strex	r3, r2, [r1]
 80066d8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80066da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d1e4      	bne.n	80066aa <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	3308      	adds	r3, #8
 80066e6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066ea:	e853 3f00 	ldrex	r3, [r3]
 80066ee:	623b      	str	r3, [r7, #32]
   return(result);
 80066f0:	6a3b      	ldr	r3, [r7, #32]
 80066f2:	f023 0301 	bic.w	r3, r3, #1
 80066f6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	3308      	adds	r3, #8
 8006700:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006704:	633a      	str	r2, [r7, #48]	; 0x30
 8006706:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006708:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800670a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800670c:	e841 2300 	strex	r3, r2, [r1]
 8006710:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006712:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006714:	2b00      	cmp	r3, #0
 8006716:	d1e3      	bne.n	80066e0 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	2220      	movs	r2, #32
 800671c:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	2200      	movs	r2, #0
 8006722:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	2200      	movs	r2, #0
 8006728:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006730:	693b      	ldr	r3, [r7, #16]
 8006732:	e853 3f00 	ldrex	r3, [r3]
 8006736:	60fb      	str	r3, [r7, #12]
   return(result);
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	f023 0310 	bic.w	r3, r3, #16
 800673e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	461a      	mov	r2, r3
 8006748:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800674c:	61fb      	str	r3, [r7, #28]
 800674e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006750:	69b9      	ldr	r1, [r7, #24]
 8006752:	69fa      	ldr	r2, [r7, #28]
 8006754:	e841 2300 	strex	r3, r2, [r1]
 8006758:	617b      	str	r3, [r7, #20]
   return(result);
 800675a:	697b      	ldr	r3, [r7, #20]
 800675c:	2b00      	cmp	r3, #0
 800675e:	d1e4      	bne.n	800672a <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006760:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006764:	4619      	mov	r1, r3
 8006766:	6878      	ldr	r0, [r7, #4]
 8006768:	f000 f85c 	bl	8006824 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800676c:	e03f      	b.n	80067ee <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800676e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006772:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006776:	2b00      	cmp	r3, #0
 8006778:	d00e      	beq.n	8006798 <HAL_UART_IRQHandler+0x560>
 800677a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800677e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006782:	2b00      	cmp	r3, #0
 8006784:	d008      	beq.n	8006798 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800678e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006790:	6878      	ldr	r0, [r7, #4]
 8006792:	f000 ff56 	bl	8007642 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006796:	e02d      	b.n	80067f4 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006798:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800679c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d00e      	beq.n	80067c2 <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80067a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80067a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d008      	beq.n	80067c2 <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d01c      	beq.n	80067f2 <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80067bc:	6878      	ldr	r0, [r7, #4]
 80067be:	4798      	blx	r3
    }
    return;
 80067c0:	e017      	b.n	80067f2 <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80067c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80067c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d012      	beq.n	80067f4 <HAL_UART_IRQHandler+0x5bc>
 80067ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80067d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d00c      	beq.n	80067f4 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 80067da:	6878      	ldr	r0, [r7, #4]
 80067dc:	f000 fda7 	bl	800732e <UART_EndTransmit_IT>
    return;
 80067e0:	e008      	b.n	80067f4 <HAL_UART_IRQHandler+0x5bc>
      return;
 80067e2:	bf00      	nop
 80067e4:	e006      	b.n	80067f4 <HAL_UART_IRQHandler+0x5bc>
    return;
 80067e6:	bf00      	nop
 80067e8:	e004      	b.n	80067f4 <HAL_UART_IRQHandler+0x5bc>
      return;
 80067ea:	bf00      	nop
 80067ec:	e002      	b.n	80067f4 <HAL_UART_IRQHandler+0x5bc>
      return;
 80067ee:	bf00      	nop
 80067f0:	e000      	b.n	80067f4 <HAL_UART_IRQHandler+0x5bc>
    return;
 80067f2:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80067f4:	37e8      	adds	r7, #232	; 0xe8
 80067f6:	46bd      	mov	sp, r7
 80067f8:	bd80      	pop	{r7, pc}
 80067fa:	bf00      	nop

080067fc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80067fc:	b480      	push	{r7}
 80067fe:	b083      	sub	sp, #12
 8006800:	af00      	add	r7, sp, #0
 8006802:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006804:	bf00      	nop
 8006806:	370c      	adds	r7, #12
 8006808:	46bd      	mov	sp, r7
 800680a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680e:	4770      	bx	lr

08006810 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006810:	b480      	push	{r7}
 8006812:	b083      	sub	sp, #12
 8006814:	af00      	add	r7, sp, #0
 8006816:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006818:	bf00      	nop
 800681a:	370c      	adds	r7, #12
 800681c:	46bd      	mov	sp, r7
 800681e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006822:	4770      	bx	lr

08006824 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006824:	b480      	push	{r7}
 8006826:	b083      	sub	sp, #12
 8006828:	af00      	add	r7, sp, #0
 800682a:	6078      	str	r0, [r7, #4]
 800682c:	460b      	mov	r3, r1
 800682e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006830:	bf00      	nop
 8006832:	370c      	adds	r7, #12
 8006834:	46bd      	mov	sp, r7
 8006836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683a:	4770      	bx	lr

0800683c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800683c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006840:	b08a      	sub	sp, #40	; 0x28
 8006842:	af00      	add	r7, sp, #0
 8006844:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006846:	2300      	movs	r3, #0
 8006848:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	689a      	ldr	r2, [r3, #8]
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	691b      	ldr	r3, [r3, #16]
 8006854:	431a      	orrs	r2, r3
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	695b      	ldr	r3, [r3, #20]
 800685a:	431a      	orrs	r2, r3
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	69db      	ldr	r3, [r3, #28]
 8006860:	4313      	orrs	r3, r2
 8006862:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	681a      	ldr	r2, [r3, #0]
 800686a:	4ba5      	ldr	r3, [pc, #660]	; (8006b00 <UART_SetConfig+0x2c4>)
 800686c:	4013      	ands	r3, r2
 800686e:	68fa      	ldr	r2, [r7, #12]
 8006870:	6812      	ldr	r2, [r2, #0]
 8006872:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006874:	430b      	orrs	r3, r1
 8006876:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	685b      	ldr	r3, [r3, #4]
 800687e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	68da      	ldr	r2, [r3, #12]
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	430a      	orrs	r2, r1
 800688c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	699b      	ldr	r3, [r3, #24]
 8006892:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	4a9a      	ldr	r2, [pc, #616]	; (8006b04 <UART_SetConfig+0x2c8>)
 800689a:	4293      	cmp	r3, r2
 800689c:	d004      	beq.n	80068a8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	6a1b      	ldr	r3, [r3, #32]
 80068a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068a4:	4313      	orrs	r3, r2
 80068a6:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	689b      	ldr	r3, [r3, #8]
 80068ae:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068b8:	430a      	orrs	r2, r1
 80068ba:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	4a91      	ldr	r2, [pc, #580]	; (8006b08 <UART_SetConfig+0x2cc>)
 80068c2:	4293      	cmp	r3, r2
 80068c4:	d126      	bne.n	8006914 <UART_SetConfig+0xd8>
 80068c6:	4b91      	ldr	r3, [pc, #580]	; (8006b0c <UART_SetConfig+0x2d0>)
 80068c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068cc:	f003 0303 	and.w	r3, r3, #3
 80068d0:	2b03      	cmp	r3, #3
 80068d2:	d81b      	bhi.n	800690c <UART_SetConfig+0xd0>
 80068d4:	a201      	add	r2, pc, #4	; (adr r2, 80068dc <UART_SetConfig+0xa0>)
 80068d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068da:	bf00      	nop
 80068dc:	080068ed 	.word	0x080068ed
 80068e0:	080068fd 	.word	0x080068fd
 80068e4:	080068f5 	.word	0x080068f5
 80068e8:	08006905 	.word	0x08006905
 80068ec:	2301      	movs	r3, #1
 80068ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80068f2:	e0d6      	b.n	8006aa2 <UART_SetConfig+0x266>
 80068f4:	2302      	movs	r3, #2
 80068f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80068fa:	e0d2      	b.n	8006aa2 <UART_SetConfig+0x266>
 80068fc:	2304      	movs	r3, #4
 80068fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006902:	e0ce      	b.n	8006aa2 <UART_SetConfig+0x266>
 8006904:	2308      	movs	r3, #8
 8006906:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800690a:	e0ca      	b.n	8006aa2 <UART_SetConfig+0x266>
 800690c:	2310      	movs	r3, #16
 800690e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006912:	e0c6      	b.n	8006aa2 <UART_SetConfig+0x266>
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	4a7d      	ldr	r2, [pc, #500]	; (8006b10 <UART_SetConfig+0x2d4>)
 800691a:	4293      	cmp	r3, r2
 800691c:	d138      	bne.n	8006990 <UART_SetConfig+0x154>
 800691e:	4b7b      	ldr	r3, [pc, #492]	; (8006b0c <UART_SetConfig+0x2d0>)
 8006920:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006924:	f003 030c 	and.w	r3, r3, #12
 8006928:	2b0c      	cmp	r3, #12
 800692a:	d82d      	bhi.n	8006988 <UART_SetConfig+0x14c>
 800692c:	a201      	add	r2, pc, #4	; (adr r2, 8006934 <UART_SetConfig+0xf8>)
 800692e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006932:	bf00      	nop
 8006934:	08006969 	.word	0x08006969
 8006938:	08006989 	.word	0x08006989
 800693c:	08006989 	.word	0x08006989
 8006940:	08006989 	.word	0x08006989
 8006944:	08006979 	.word	0x08006979
 8006948:	08006989 	.word	0x08006989
 800694c:	08006989 	.word	0x08006989
 8006950:	08006989 	.word	0x08006989
 8006954:	08006971 	.word	0x08006971
 8006958:	08006989 	.word	0x08006989
 800695c:	08006989 	.word	0x08006989
 8006960:	08006989 	.word	0x08006989
 8006964:	08006981 	.word	0x08006981
 8006968:	2300      	movs	r3, #0
 800696a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800696e:	e098      	b.n	8006aa2 <UART_SetConfig+0x266>
 8006970:	2302      	movs	r3, #2
 8006972:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006976:	e094      	b.n	8006aa2 <UART_SetConfig+0x266>
 8006978:	2304      	movs	r3, #4
 800697a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800697e:	e090      	b.n	8006aa2 <UART_SetConfig+0x266>
 8006980:	2308      	movs	r3, #8
 8006982:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006986:	e08c      	b.n	8006aa2 <UART_SetConfig+0x266>
 8006988:	2310      	movs	r3, #16
 800698a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800698e:	e088      	b.n	8006aa2 <UART_SetConfig+0x266>
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	4a5f      	ldr	r2, [pc, #380]	; (8006b14 <UART_SetConfig+0x2d8>)
 8006996:	4293      	cmp	r3, r2
 8006998:	d125      	bne.n	80069e6 <UART_SetConfig+0x1aa>
 800699a:	4b5c      	ldr	r3, [pc, #368]	; (8006b0c <UART_SetConfig+0x2d0>)
 800699c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80069a0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80069a4:	2b30      	cmp	r3, #48	; 0x30
 80069a6:	d016      	beq.n	80069d6 <UART_SetConfig+0x19a>
 80069a8:	2b30      	cmp	r3, #48	; 0x30
 80069aa:	d818      	bhi.n	80069de <UART_SetConfig+0x1a2>
 80069ac:	2b20      	cmp	r3, #32
 80069ae:	d00a      	beq.n	80069c6 <UART_SetConfig+0x18a>
 80069b0:	2b20      	cmp	r3, #32
 80069b2:	d814      	bhi.n	80069de <UART_SetConfig+0x1a2>
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d002      	beq.n	80069be <UART_SetConfig+0x182>
 80069b8:	2b10      	cmp	r3, #16
 80069ba:	d008      	beq.n	80069ce <UART_SetConfig+0x192>
 80069bc:	e00f      	b.n	80069de <UART_SetConfig+0x1a2>
 80069be:	2300      	movs	r3, #0
 80069c0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80069c4:	e06d      	b.n	8006aa2 <UART_SetConfig+0x266>
 80069c6:	2302      	movs	r3, #2
 80069c8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80069cc:	e069      	b.n	8006aa2 <UART_SetConfig+0x266>
 80069ce:	2304      	movs	r3, #4
 80069d0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80069d4:	e065      	b.n	8006aa2 <UART_SetConfig+0x266>
 80069d6:	2308      	movs	r3, #8
 80069d8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80069dc:	e061      	b.n	8006aa2 <UART_SetConfig+0x266>
 80069de:	2310      	movs	r3, #16
 80069e0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80069e4:	e05d      	b.n	8006aa2 <UART_SetConfig+0x266>
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	4a4b      	ldr	r2, [pc, #300]	; (8006b18 <UART_SetConfig+0x2dc>)
 80069ec:	4293      	cmp	r3, r2
 80069ee:	d125      	bne.n	8006a3c <UART_SetConfig+0x200>
 80069f0:	4b46      	ldr	r3, [pc, #280]	; (8006b0c <UART_SetConfig+0x2d0>)
 80069f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80069f6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80069fa:	2bc0      	cmp	r3, #192	; 0xc0
 80069fc:	d016      	beq.n	8006a2c <UART_SetConfig+0x1f0>
 80069fe:	2bc0      	cmp	r3, #192	; 0xc0
 8006a00:	d818      	bhi.n	8006a34 <UART_SetConfig+0x1f8>
 8006a02:	2b80      	cmp	r3, #128	; 0x80
 8006a04:	d00a      	beq.n	8006a1c <UART_SetConfig+0x1e0>
 8006a06:	2b80      	cmp	r3, #128	; 0x80
 8006a08:	d814      	bhi.n	8006a34 <UART_SetConfig+0x1f8>
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d002      	beq.n	8006a14 <UART_SetConfig+0x1d8>
 8006a0e:	2b40      	cmp	r3, #64	; 0x40
 8006a10:	d008      	beq.n	8006a24 <UART_SetConfig+0x1e8>
 8006a12:	e00f      	b.n	8006a34 <UART_SetConfig+0x1f8>
 8006a14:	2300      	movs	r3, #0
 8006a16:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a1a:	e042      	b.n	8006aa2 <UART_SetConfig+0x266>
 8006a1c:	2302      	movs	r3, #2
 8006a1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a22:	e03e      	b.n	8006aa2 <UART_SetConfig+0x266>
 8006a24:	2304      	movs	r3, #4
 8006a26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a2a:	e03a      	b.n	8006aa2 <UART_SetConfig+0x266>
 8006a2c:	2308      	movs	r3, #8
 8006a2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a32:	e036      	b.n	8006aa2 <UART_SetConfig+0x266>
 8006a34:	2310      	movs	r3, #16
 8006a36:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a3a:	e032      	b.n	8006aa2 <UART_SetConfig+0x266>
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	4a30      	ldr	r2, [pc, #192]	; (8006b04 <UART_SetConfig+0x2c8>)
 8006a42:	4293      	cmp	r3, r2
 8006a44:	d12a      	bne.n	8006a9c <UART_SetConfig+0x260>
 8006a46:	4b31      	ldr	r3, [pc, #196]	; (8006b0c <UART_SetConfig+0x2d0>)
 8006a48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a4c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006a50:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006a54:	d01a      	beq.n	8006a8c <UART_SetConfig+0x250>
 8006a56:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006a5a:	d81b      	bhi.n	8006a94 <UART_SetConfig+0x258>
 8006a5c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006a60:	d00c      	beq.n	8006a7c <UART_SetConfig+0x240>
 8006a62:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006a66:	d815      	bhi.n	8006a94 <UART_SetConfig+0x258>
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d003      	beq.n	8006a74 <UART_SetConfig+0x238>
 8006a6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a70:	d008      	beq.n	8006a84 <UART_SetConfig+0x248>
 8006a72:	e00f      	b.n	8006a94 <UART_SetConfig+0x258>
 8006a74:	2300      	movs	r3, #0
 8006a76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a7a:	e012      	b.n	8006aa2 <UART_SetConfig+0x266>
 8006a7c:	2302      	movs	r3, #2
 8006a7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a82:	e00e      	b.n	8006aa2 <UART_SetConfig+0x266>
 8006a84:	2304      	movs	r3, #4
 8006a86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a8a:	e00a      	b.n	8006aa2 <UART_SetConfig+0x266>
 8006a8c:	2308      	movs	r3, #8
 8006a8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a92:	e006      	b.n	8006aa2 <UART_SetConfig+0x266>
 8006a94:	2310      	movs	r3, #16
 8006a96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a9a:	e002      	b.n	8006aa2 <UART_SetConfig+0x266>
 8006a9c:	2310      	movs	r3, #16
 8006a9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	4a17      	ldr	r2, [pc, #92]	; (8006b04 <UART_SetConfig+0x2c8>)
 8006aa8:	4293      	cmp	r3, r2
 8006aaa:	f040 808b 	bne.w	8006bc4 <UART_SetConfig+0x388>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006aae:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006ab2:	2b08      	cmp	r3, #8
 8006ab4:	d834      	bhi.n	8006b20 <UART_SetConfig+0x2e4>
 8006ab6:	a201      	add	r2, pc, #4	; (adr r2, 8006abc <UART_SetConfig+0x280>)
 8006ab8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006abc:	08006ae1 	.word	0x08006ae1
 8006ac0:	08006b21 	.word	0x08006b21
 8006ac4:	08006ae9 	.word	0x08006ae9
 8006ac8:	08006b21 	.word	0x08006b21
 8006acc:	08006aef 	.word	0x08006aef
 8006ad0:	08006b21 	.word	0x08006b21
 8006ad4:	08006b21 	.word	0x08006b21
 8006ad8:	08006b21 	.word	0x08006b21
 8006adc:	08006af7 	.word	0x08006af7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006ae0:	f7fd fbac 	bl	800423c <HAL_RCC_GetPCLK1Freq>
 8006ae4:	61f8      	str	r0, [r7, #28]
        break;
 8006ae6:	e021      	b.n	8006b2c <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006ae8:	4b0c      	ldr	r3, [pc, #48]	; (8006b1c <UART_SetConfig+0x2e0>)
 8006aea:	61fb      	str	r3, [r7, #28]
        break;
 8006aec:	e01e      	b.n	8006b2c <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006aee:	f7fd fb0d 	bl	800410c <HAL_RCC_GetSysClockFreq>
 8006af2:	61f8      	str	r0, [r7, #28]
        break;
 8006af4:	e01a      	b.n	8006b2c <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006af6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006afa:	61fb      	str	r3, [r7, #28]
        break;
 8006afc:	e016      	b.n	8006b2c <UART_SetConfig+0x2f0>
 8006afe:	bf00      	nop
 8006b00:	efff69f3 	.word	0xefff69f3
 8006b04:	40008000 	.word	0x40008000
 8006b08:	40013800 	.word	0x40013800
 8006b0c:	40021000 	.word	0x40021000
 8006b10:	40004400 	.word	0x40004400
 8006b14:	40004800 	.word	0x40004800
 8006b18:	40004c00 	.word	0x40004c00
 8006b1c:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8006b20:	2300      	movs	r3, #0
 8006b22:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006b24:	2301      	movs	r3, #1
 8006b26:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006b2a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006b2c:	69fb      	ldr	r3, [r7, #28]
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	f000 80fa 	beq.w	8006d28 <UART_SetConfig+0x4ec>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	685a      	ldr	r2, [r3, #4]
 8006b38:	4613      	mov	r3, r2
 8006b3a:	005b      	lsls	r3, r3, #1
 8006b3c:	4413      	add	r3, r2
 8006b3e:	69fa      	ldr	r2, [r7, #28]
 8006b40:	429a      	cmp	r2, r3
 8006b42:	d305      	bcc.n	8006b50 <UART_SetConfig+0x314>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	685b      	ldr	r3, [r3, #4]
 8006b48:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006b4a:	69fa      	ldr	r2, [r7, #28]
 8006b4c:	429a      	cmp	r2, r3
 8006b4e:	d903      	bls.n	8006b58 <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 8006b50:	2301      	movs	r3, #1
 8006b52:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006b56:	e0e7      	b.n	8006d28 <UART_SetConfig+0x4ec>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006b58:	69fb      	ldr	r3, [r7, #28]
 8006b5a:	2200      	movs	r2, #0
 8006b5c:	461c      	mov	r4, r3
 8006b5e:	4615      	mov	r5, r2
 8006b60:	f04f 0200 	mov.w	r2, #0
 8006b64:	f04f 0300 	mov.w	r3, #0
 8006b68:	022b      	lsls	r3, r5, #8
 8006b6a:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8006b6e:	0222      	lsls	r2, r4, #8
 8006b70:	68f9      	ldr	r1, [r7, #12]
 8006b72:	6849      	ldr	r1, [r1, #4]
 8006b74:	0849      	lsrs	r1, r1, #1
 8006b76:	2000      	movs	r0, #0
 8006b78:	4688      	mov	r8, r1
 8006b7a:	4681      	mov	r9, r0
 8006b7c:	eb12 0a08 	adds.w	sl, r2, r8
 8006b80:	eb43 0b09 	adc.w	fp, r3, r9
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	685b      	ldr	r3, [r3, #4]
 8006b88:	2200      	movs	r2, #0
 8006b8a:	603b      	str	r3, [r7, #0]
 8006b8c:	607a      	str	r2, [r7, #4]
 8006b8e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006b92:	4650      	mov	r0, sl
 8006b94:	4659      	mov	r1, fp
 8006b96:	f7f9 ff0b 	bl	80009b0 <__aeabi_uldivmod>
 8006b9a:	4602      	mov	r2, r0
 8006b9c:	460b      	mov	r3, r1
 8006b9e:	4613      	mov	r3, r2
 8006ba0:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006ba2:	69bb      	ldr	r3, [r7, #24]
 8006ba4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006ba8:	d308      	bcc.n	8006bbc <UART_SetConfig+0x380>
 8006baa:	69bb      	ldr	r3, [r7, #24]
 8006bac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006bb0:	d204      	bcs.n	8006bbc <UART_SetConfig+0x380>
        {
          huart->Instance->BRR = usartdiv;
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	69ba      	ldr	r2, [r7, #24]
 8006bb8:	60da      	str	r2, [r3, #12]
 8006bba:	e0b5      	b.n	8006d28 <UART_SetConfig+0x4ec>
        }
        else
        {
          ret = HAL_ERROR;
 8006bbc:	2301      	movs	r3, #1
 8006bbe:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006bc2:	e0b1      	b.n	8006d28 <UART_SetConfig+0x4ec>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	69db      	ldr	r3, [r3, #28]
 8006bc8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006bcc:	d15d      	bne.n	8006c8a <UART_SetConfig+0x44e>
  {
    switch (clocksource)
 8006bce:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006bd2:	2b08      	cmp	r3, #8
 8006bd4:	d827      	bhi.n	8006c26 <UART_SetConfig+0x3ea>
 8006bd6:	a201      	add	r2, pc, #4	; (adr r2, 8006bdc <UART_SetConfig+0x3a0>)
 8006bd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bdc:	08006c01 	.word	0x08006c01
 8006be0:	08006c09 	.word	0x08006c09
 8006be4:	08006c11 	.word	0x08006c11
 8006be8:	08006c27 	.word	0x08006c27
 8006bec:	08006c17 	.word	0x08006c17
 8006bf0:	08006c27 	.word	0x08006c27
 8006bf4:	08006c27 	.word	0x08006c27
 8006bf8:	08006c27 	.word	0x08006c27
 8006bfc:	08006c1f 	.word	0x08006c1f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006c00:	f7fd fb1c 	bl	800423c <HAL_RCC_GetPCLK1Freq>
 8006c04:	61f8      	str	r0, [r7, #28]
        break;
 8006c06:	e014      	b.n	8006c32 <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006c08:	f7fd fb2e 	bl	8004268 <HAL_RCC_GetPCLK2Freq>
 8006c0c:	61f8      	str	r0, [r7, #28]
        break;
 8006c0e:	e010      	b.n	8006c32 <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006c10:	4b4c      	ldr	r3, [pc, #304]	; (8006d44 <UART_SetConfig+0x508>)
 8006c12:	61fb      	str	r3, [r7, #28]
        break;
 8006c14:	e00d      	b.n	8006c32 <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006c16:	f7fd fa79 	bl	800410c <HAL_RCC_GetSysClockFreq>
 8006c1a:	61f8      	str	r0, [r7, #28]
        break;
 8006c1c:	e009      	b.n	8006c32 <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006c1e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006c22:	61fb      	str	r3, [r7, #28]
        break;
 8006c24:	e005      	b.n	8006c32 <UART_SetConfig+0x3f6>
      default:
        pclk = 0U;
 8006c26:	2300      	movs	r3, #0
 8006c28:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006c2a:	2301      	movs	r3, #1
 8006c2c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006c30:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006c32:	69fb      	ldr	r3, [r7, #28]
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d077      	beq.n	8006d28 <UART_SetConfig+0x4ec>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006c38:	69fb      	ldr	r3, [r7, #28]
 8006c3a:	005a      	lsls	r2, r3, #1
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	685b      	ldr	r3, [r3, #4]
 8006c40:	085b      	lsrs	r3, r3, #1
 8006c42:	441a      	add	r2, r3
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	685b      	ldr	r3, [r3, #4]
 8006c48:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c4c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006c4e:	69bb      	ldr	r3, [r7, #24]
 8006c50:	2b0f      	cmp	r3, #15
 8006c52:	d916      	bls.n	8006c82 <UART_SetConfig+0x446>
 8006c54:	69bb      	ldr	r3, [r7, #24]
 8006c56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c5a:	d212      	bcs.n	8006c82 <UART_SetConfig+0x446>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006c5c:	69bb      	ldr	r3, [r7, #24]
 8006c5e:	b29b      	uxth	r3, r3
 8006c60:	f023 030f 	bic.w	r3, r3, #15
 8006c64:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006c66:	69bb      	ldr	r3, [r7, #24]
 8006c68:	085b      	lsrs	r3, r3, #1
 8006c6a:	b29b      	uxth	r3, r3
 8006c6c:	f003 0307 	and.w	r3, r3, #7
 8006c70:	b29a      	uxth	r2, r3
 8006c72:	8afb      	ldrh	r3, [r7, #22]
 8006c74:	4313      	orrs	r3, r2
 8006c76:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	8afa      	ldrh	r2, [r7, #22]
 8006c7e:	60da      	str	r2, [r3, #12]
 8006c80:	e052      	b.n	8006d28 <UART_SetConfig+0x4ec>
      }
      else
      {
        ret = HAL_ERROR;
 8006c82:	2301      	movs	r3, #1
 8006c84:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006c88:	e04e      	b.n	8006d28 <UART_SetConfig+0x4ec>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006c8a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006c8e:	2b08      	cmp	r3, #8
 8006c90:	d827      	bhi.n	8006ce2 <UART_SetConfig+0x4a6>
 8006c92:	a201      	add	r2, pc, #4	; (adr r2, 8006c98 <UART_SetConfig+0x45c>)
 8006c94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c98:	08006cbd 	.word	0x08006cbd
 8006c9c:	08006cc5 	.word	0x08006cc5
 8006ca0:	08006ccd 	.word	0x08006ccd
 8006ca4:	08006ce3 	.word	0x08006ce3
 8006ca8:	08006cd3 	.word	0x08006cd3
 8006cac:	08006ce3 	.word	0x08006ce3
 8006cb0:	08006ce3 	.word	0x08006ce3
 8006cb4:	08006ce3 	.word	0x08006ce3
 8006cb8:	08006cdb 	.word	0x08006cdb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006cbc:	f7fd fabe 	bl	800423c <HAL_RCC_GetPCLK1Freq>
 8006cc0:	61f8      	str	r0, [r7, #28]
        break;
 8006cc2:	e014      	b.n	8006cee <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006cc4:	f7fd fad0 	bl	8004268 <HAL_RCC_GetPCLK2Freq>
 8006cc8:	61f8      	str	r0, [r7, #28]
        break;
 8006cca:	e010      	b.n	8006cee <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006ccc:	4b1d      	ldr	r3, [pc, #116]	; (8006d44 <UART_SetConfig+0x508>)
 8006cce:	61fb      	str	r3, [r7, #28]
        break;
 8006cd0:	e00d      	b.n	8006cee <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006cd2:	f7fd fa1b 	bl	800410c <HAL_RCC_GetSysClockFreq>
 8006cd6:	61f8      	str	r0, [r7, #28]
        break;
 8006cd8:	e009      	b.n	8006cee <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006cda:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006cde:	61fb      	str	r3, [r7, #28]
        break;
 8006ce0:	e005      	b.n	8006cee <UART_SetConfig+0x4b2>
      default:
        pclk = 0U;
 8006ce2:	2300      	movs	r3, #0
 8006ce4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006ce6:	2301      	movs	r3, #1
 8006ce8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006cec:	bf00      	nop
    }

    if (pclk != 0U)
 8006cee:	69fb      	ldr	r3, [r7, #28]
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d019      	beq.n	8006d28 <UART_SetConfig+0x4ec>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	685b      	ldr	r3, [r3, #4]
 8006cf8:	085a      	lsrs	r2, r3, #1
 8006cfa:	69fb      	ldr	r3, [r7, #28]
 8006cfc:	441a      	add	r2, r3
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	685b      	ldr	r3, [r3, #4]
 8006d02:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d06:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006d08:	69bb      	ldr	r3, [r7, #24]
 8006d0a:	2b0f      	cmp	r3, #15
 8006d0c:	d909      	bls.n	8006d22 <UART_SetConfig+0x4e6>
 8006d0e:	69bb      	ldr	r3, [r7, #24]
 8006d10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d14:	d205      	bcs.n	8006d22 <UART_SetConfig+0x4e6>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006d16:	69bb      	ldr	r3, [r7, #24]
 8006d18:	b29a      	uxth	r2, r3
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	60da      	str	r2, [r3, #12]
 8006d20:	e002      	b.n	8006d28 <UART_SetConfig+0x4ec>
      }
      else
      {
        ret = HAL_ERROR;
 8006d22:	2301      	movs	r3, #1
 8006d24:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	2200      	movs	r2, #0
 8006d2c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	2200      	movs	r2, #0
 8006d32:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006d34:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8006d38:	4618      	mov	r0, r3
 8006d3a:	3728      	adds	r7, #40	; 0x28
 8006d3c:	46bd      	mov	sp, r7
 8006d3e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006d42:	bf00      	nop
 8006d44:	00f42400 	.word	0x00f42400

08006d48 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006d48:	b480      	push	{r7}
 8006d4a:	b083      	sub	sp, #12
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d54:	f003 0301 	and.w	r3, r3, #1
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d00a      	beq.n	8006d72 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	685b      	ldr	r3, [r3, #4]
 8006d62:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	430a      	orrs	r2, r1
 8006d70:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d76:	f003 0302 	and.w	r3, r3, #2
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d00a      	beq.n	8006d94 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	685b      	ldr	r3, [r3, #4]
 8006d84:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	430a      	orrs	r2, r1
 8006d92:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d98:	f003 0304 	and.w	r3, r3, #4
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d00a      	beq.n	8006db6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	685b      	ldr	r3, [r3, #4]
 8006da6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	430a      	orrs	r2, r1
 8006db4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dba:	f003 0308 	and.w	r3, r3, #8
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d00a      	beq.n	8006dd8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	685b      	ldr	r3, [r3, #4]
 8006dc8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	430a      	orrs	r2, r1
 8006dd6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ddc:	f003 0310 	and.w	r3, r3, #16
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d00a      	beq.n	8006dfa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	689b      	ldr	r3, [r3, #8]
 8006dea:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	430a      	orrs	r2, r1
 8006df8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dfe:	f003 0320 	and.w	r3, r3, #32
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d00a      	beq.n	8006e1c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	689b      	ldr	r3, [r3, #8]
 8006e0c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	430a      	orrs	r2, r1
 8006e1a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d01a      	beq.n	8006e5e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	685b      	ldr	r3, [r3, #4]
 8006e2e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	430a      	orrs	r2, r1
 8006e3c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e42:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006e46:	d10a      	bne.n	8006e5e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	685b      	ldr	r3, [r3, #4]
 8006e4e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	430a      	orrs	r2, r1
 8006e5c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d00a      	beq.n	8006e80 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	685b      	ldr	r3, [r3, #4]
 8006e70:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	430a      	orrs	r2, r1
 8006e7e:	605a      	str	r2, [r3, #4]
  }
}
 8006e80:	bf00      	nop
 8006e82:	370c      	adds	r7, #12
 8006e84:	46bd      	mov	sp, r7
 8006e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e8a:	4770      	bx	lr

08006e8c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006e8c:	b580      	push	{r7, lr}
 8006e8e:	b086      	sub	sp, #24
 8006e90:	af02      	add	r7, sp, #8
 8006e92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	2200      	movs	r2, #0
 8006e98:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006e9c:	f7fa ffd0 	bl	8001e40 <HAL_GetTick>
 8006ea0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	f003 0308 	and.w	r3, r3, #8
 8006eac:	2b08      	cmp	r3, #8
 8006eae:	d10e      	bne.n	8006ece <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006eb0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006eb4:	9300      	str	r3, [sp, #0]
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	2200      	movs	r2, #0
 8006eba:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006ebe:	6878      	ldr	r0, [r7, #4]
 8006ec0:	f000 f82d 	bl	8006f1e <UART_WaitOnFlagUntilTimeout>
 8006ec4:	4603      	mov	r3, r0
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d001      	beq.n	8006ece <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006eca:	2303      	movs	r3, #3
 8006ecc:	e023      	b.n	8006f16 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	f003 0304 	and.w	r3, r3, #4
 8006ed8:	2b04      	cmp	r3, #4
 8006eda:	d10e      	bne.n	8006efa <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006edc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006ee0:	9300      	str	r3, [sp, #0]
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	2200      	movs	r2, #0
 8006ee6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006eea:	6878      	ldr	r0, [r7, #4]
 8006eec:	f000 f817 	bl	8006f1e <UART_WaitOnFlagUntilTimeout>
 8006ef0:	4603      	mov	r3, r0
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d001      	beq.n	8006efa <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006ef6:	2303      	movs	r3, #3
 8006ef8:	e00d      	b.n	8006f16 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	2220      	movs	r2, #32
 8006efe:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	2220      	movs	r2, #32
 8006f04:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	2200      	movs	r2, #0
 8006f0a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	2200      	movs	r2, #0
 8006f10:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8006f14:	2300      	movs	r3, #0
}
 8006f16:	4618      	mov	r0, r3
 8006f18:	3710      	adds	r7, #16
 8006f1a:	46bd      	mov	sp, r7
 8006f1c:	bd80      	pop	{r7, pc}

08006f1e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006f1e:	b580      	push	{r7, lr}
 8006f20:	b09c      	sub	sp, #112	; 0x70
 8006f22:	af00      	add	r7, sp, #0
 8006f24:	60f8      	str	r0, [r7, #12]
 8006f26:	60b9      	str	r1, [r7, #8]
 8006f28:	603b      	str	r3, [r7, #0]
 8006f2a:	4613      	mov	r3, r2
 8006f2c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006f2e:	e0a5      	b.n	800707c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006f30:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006f32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f36:	f000 80a1 	beq.w	800707c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006f3a:	f7fa ff81 	bl	8001e40 <HAL_GetTick>
 8006f3e:	4602      	mov	r2, r0
 8006f40:	683b      	ldr	r3, [r7, #0]
 8006f42:	1ad3      	subs	r3, r2, r3
 8006f44:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006f46:	429a      	cmp	r2, r3
 8006f48:	d302      	bcc.n	8006f50 <UART_WaitOnFlagUntilTimeout+0x32>
 8006f4a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d13e      	bne.n	8006fce <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f56:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006f58:	e853 3f00 	ldrex	r3, [r3]
 8006f5c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006f5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f60:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006f64:	667b      	str	r3, [r7, #100]	; 0x64
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	461a      	mov	r2, r3
 8006f6c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006f6e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006f70:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f72:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006f74:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006f76:	e841 2300 	strex	r3, r2, [r1]
 8006f7a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006f7c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d1e6      	bne.n	8006f50 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	3308      	adds	r3, #8
 8006f88:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f8c:	e853 3f00 	ldrex	r3, [r3]
 8006f90:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006f92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f94:	f023 0301 	bic.w	r3, r3, #1
 8006f98:	663b      	str	r3, [r7, #96]	; 0x60
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	3308      	adds	r3, #8
 8006fa0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006fa2:	64ba      	str	r2, [r7, #72]	; 0x48
 8006fa4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fa6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006fa8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006faa:	e841 2300 	strex	r3, r2, [r1]
 8006fae:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006fb0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d1e5      	bne.n	8006f82 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	2220      	movs	r2, #32
 8006fba:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	2220      	movs	r2, #32
 8006fc0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	2200      	movs	r2, #0
 8006fc6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8006fca:	2303      	movs	r3, #3
 8006fcc:	e067      	b.n	800709e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	f003 0304 	and.w	r3, r3, #4
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d04f      	beq.n	800707c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	69db      	ldr	r3, [r3, #28]
 8006fe2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006fe6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006fea:	d147      	bne.n	800707c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006ff4:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ffc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ffe:	e853 3f00 	ldrex	r3, [r3]
 8007002:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007006:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800700a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	461a      	mov	r2, r3
 8007012:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007014:	637b      	str	r3, [r7, #52]	; 0x34
 8007016:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007018:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800701a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800701c:	e841 2300 	strex	r3, r2, [r1]
 8007020:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007022:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007024:	2b00      	cmp	r3, #0
 8007026:	d1e6      	bne.n	8006ff6 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	3308      	adds	r3, #8
 800702e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007030:	697b      	ldr	r3, [r7, #20]
 8007032:	e853 3f00 	ldrex	r3, [r3]
 8007036:	613b      	str	r3, [r7, #16]
   return(result);
 8007038:	693b      	ldr	r3, [r7, #16]
 800703a:	f023 0301 	bic.w	r3, r3, #1
 800703e:	66bb      	str	r3, [r7, #104]	; 0x68
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	3308      	adds	r3, #8
 8007046:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007048:	623a      	str	r2, [r7, #32]
 800704a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800704c:	69f9      	ldr	r1, [r7, #28]
 800704e:	6a3a      	ldr	r2, [r7, #32]
 8007050:	e841 2300 	strex	r3, r2, [r1]
 8007054:	61bb      	str	r3, [r7, #24]
   return(result);
 8007056:	69bb      	ldr	r3, [r7, #24]
 8007058:	2b00      	cmp	r3, #0
 800705a:	d1e5      	bne.n	8007028 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	2220      	movs	r2, #32
 8007060:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	2220      	movs	r2, #32
 8007066:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	2220      	movs	r2, #32
 800706c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	2200      	movs	r2, #0
 8007074:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8007078:	2303      	movs	r3, #3
 800707a:	e010      	b.n	800709e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	69da      	ldr	r2, [r3, #28]
 8007082:	68bb      	ldr	r3, [r7, #8]
 8007084:	4013      	ands	r3, r2
 8007086:	68ba      	ldr	r2, [r7, #8]
 8007088:	429a      	cmp	r2, r3
 800708a:	bf0c      	ite	eq
 800708c:	2301      	moveq	r3, #1
 800708e:	2300      	movne	r3, #0
 8007090:	b2db      	uxtb	r3, r3
 8007092:	461a      	mov	r2, r3
 8007094:	79fb      	ldrb	r3, [r7, #7]
 8007096:	429a      	cmp	r2, r3
 8007098:	f43f af4a 	beq.w	8006f30 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800709c:	2300      	movs	r3, #0
}
 800709e:	4618      	mov	r0, r3
 80070a0:	3770      	adds	r7, #112	; 0x70
 80070a2:	46bd      	mov	sp, r7
 80070a4:	bd80      	pop	{r7, pc}
	...

080070a8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80070a8:	b480      	push	{r7}
 80070aa:	b097      	sub	sp, #92	; 0x5c
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	60f8      	str	r0, [r7, #12]
 80070b0:	60b9      	str	r1, [r7, #8]
 80070b2:	4613      	mov	r3, r2
 80070b4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	68ba      	ldr	r2, [r7, #8]
 80070ba:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	88fa      	ldrh	r2, [r7, #6]
 80070c0:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	88fa      	ldrh	r2, [r7, #6]
 80070c8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	2200      	movs	r2, #0
 80070d0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	689b      	ldr	r3, [r3, #8]
 80070d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80070da:	d10e      	bne.n	80070fa <UART_Start_Receive_IT+0x52>
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	691b      	ldr	r3, [r3, #16]
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d105      	bne.n	80070f0 <UART_Start_Receive_IT+0x48>
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	f240 12ff 	movw	r2, #511	; 0x1ff
 80070ea:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80070ee:	e02d      	b.n	800714c <UART_Start_Receive_IT+0xa4>
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	22ff      	movs	r2, #255	; 0xff
 80070f4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80070f8:	e028      	b.n	800714c <UART_Start_Receive_IT+0xa4>
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	689b      	ldr	r3, [r3, #8]
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d10d      	bne.n	800711e <UART_Start_Receive_IT+0x76>
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	691b      	ldr	r3, [r3, #16]
 8007106:	2b00      	cmp	r3, #0
 8007108:	d104      	bne.n	8007114 <UART_Start_Receive_IT+0x6c>
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	22ff      	movs	r2, #255	; 0xff
 800710e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007112:	e01b      	b.n	800714c <UART_Start_Receive_IT+0xa4>
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	227f      	movs	r2, #127	; 0x7f
 8007118:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800711c:	e016      	b.n	800714c <UART_Start_Receive_IT+0xa4>
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	689b      	ldr	r3, [r3, #8]
 8007122:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007126:	d10d      	bne.n	8007144 <UART_Start_Receive_IT+0x9c>
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	691b      	ldr	r3, [r3, #16]
 800712c:	2b00      	cmp	r3, #0
 800712e:	d104      	bne.n	800713a <UART_Start_Receive_IT+0x92>
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	227f      	movs	r2, #127	; 0x7f
 8007134:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007138:	e008      	b.n	800714c <UART_Start_Receive_IT+0xa4>
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	223f      	movs	r2, #63	; 0x3f
 800713e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007142:	e003      	b.n	800714c <UART_Start_Receive_IT+0xa4>
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	2200      	movs	r2, #0
 8007148:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	2200      	movs	r2, #0
 8007150:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	2222      	movs	r2, #34	; 0x22
 8007158:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	3308      	adds	r3, #8
 8007160:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007162:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007164:	e853 3f00 	ldrex	r3, [r3]
 8007168:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800716a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800716c:	f043 0301 	orr.w	r3, r3, #1
 8007170:	657b      	str	r3, [r7, #84]	; 0x54
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	3308      	adds	r3, #8
 8007178:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800717a:	64ba      	str	r2, [r7, #72]	; 0x48
 800717c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800717e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007180:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007182:	e841 2300 	strex	r3, r2, [r1]
 8007186:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007188:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800718a:	2b00      	cmp	r3, #0
 800718c:	d1e5      	bne.n	800715a <UART_Start_Receive_IT+0xb2>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	689b      	ldr	r3, [r3, #8]
 8007192:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007196:	d107      	bne.n	80071a8 <UART_Start_Receive_IT+0x100>
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	691b      	ldr	r3, [r3, #16]
 800719c:	2b00      	cmp	r3, #0
 800719e:	d103      	bne.n	80071a8 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	4a24      	ldr	r2, [pc, #144]	; (8007234 <UART_Start_Receive_IT+0x18c>)
 80071a4:	665a      	str	r2, [r3, #100]	; 0x64
 80071a6:	e002      	b.n	80071ae <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	4a23      	ldr	r2, [pc, #140]	; (8007238 <UART_Start_Receive_IT+0x190>)
 80071ac:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	2200      	movs	r2, #0
 80071b2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	691b      	ldr	r3, [r3, #16]
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d019      	beq.n	80071f2 <UART_Start_Receive_IT+0x14a>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071c6:	e853 3f00 	ldrex	r3, [r3]
 80071ca:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80071cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071ce:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80071d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	461a      	mov	r2, r3
 80071da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80071dc:	637b      	str	r3, [r7, #52]	; 0x34
 80071de:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071e0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80071e2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80071e4:	e841 2300 	strex	r3, r2, [r1]
 80071e8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80071ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d1e6      	bne.n	80071be <UART_Start_Receive_IT+0x116>
 80071f0:	e018      	b.n	8007224 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071f8:	697b      	ldr	r3, [r7, #20]
 80071fa:	e853 3f00 	ldrex	r3, [r3]
 80071fe:	613b      	str	r3, [r7, #16]
   return(result);
 8007200:	693b      	ldr	r3, [r7, #16]
 8007202:	f043 0320 	orr.w	r3, r3, #32
 8007206:	653b      	str	r3, [r7, #80]	; 0x50
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	461a      	mov	r2, r3
 800720e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007210:	623b      	str	r3, [r7, #32]
 8007212:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007214:	69f9      	ldr	r1, [r7, #28]
 8007216:	6a3a      	ldr	r2, [r7, #32]
 8007218:	e841 2300 	strex	r3, r2, [r1]
 800721c:	61bb      	str	r3, [r7, #24]
   return(result);
 800721e:	69bb      	ldr	r3, [r7, #24]
 8007220:	2b00      	cmp	r3, #0
 8007222:	d1e6      	bne.n	80071f2 <UART_Start_Receive_IT+0x14a>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8007224:	2300      	movs	r3, #0
}
 8007226:	4618      	mov	r0, r3
 8007228:	375c      	adds	r7, #92	; 0x5c
 800722a:	46bd      	mov	sp, r7
 800722c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007230:	4770      	bx	lr
 8007232:	bf00      	nop
 8007234:	080074e3 	.word	0x080074e3
 8007238:	08007383 	.word	0x08007383

0800723c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800723c:	b480      	push	{r7}
 800723e:	b095      	sub	sp, #84	; 0x54
 8007240:	af00      	add	r7, sp, #0
 8007242:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800724a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800724c:	e853 3f00 	ldrex	r3, [r3]
 8007250:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007252:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007254:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007258:	64fb      	str	r3, [r7, #76]	; 0x4c
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	461a      	mov	r2, r3
 8007260:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007262:	643b      	str	r3, [r7, #64]	; 0x40
 8007264:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007266:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007268:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800726a:	e841 2300 	strex	r3, r2, [r1]
 800726e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007270:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007272:	2b00      	cmp	r3, #0
 8007274:	d1e6      	bne.n	8007244 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	3308      	adds	r3, #8
 800727c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800727e:	6a3b      	ldr	r3, [r7, #32]
 8007280:	e853 3f00 	ldrex	r3, [r3]
 8007284:	61fb      	str	r3, [r7, #28]
   return(result);
 8007286:	69fb      	ldr	r3, [r7, #28]
 8007288:	f023 0301 	bic.w	r3, r3, #1
 800728c:	64bb      	str	r3, [r7, #72]	; 0x48
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	3308      	adds	r3, #8
 8007294:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007296:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007298:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800729a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800729c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800729e:	e841 2300 	strex	r3, r2, [r1]
 80072a2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80072a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d1e5      	bne.n	8007276 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80072ae:	2b01      	cmp	r3, #1
 80072b0:	d118      	bne.n	80072e4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	e853 3f00 	ldrex	r3, [r3]
 80072be:	60bb      	str	r3, [r7, #8]
   return(result);
 80072c0:	68bb      	ldr	r3, [r7, #8]
 80072c2:	f023 0310 	bic.w	r3, r3, #16
 80072c6:	647b      	str	r3, [r7, #68]	; 0x44
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	461a      	mov	r2, r3
 80072ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80072d0:	61bb      	str	r3, [r7, #24]
 80072d2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072d4:	6979      	ldr	r1, [r7, #20]
 80072d6:	69ba      	ldr	r2, [r7, #24]
 80072d8:	e841 2300 	strex	r3, r2, [r1]
 80072dc:	613b      	str	r3, [r7, #16]
   return(result);
 80072de:	693b      	ldr	r3, [r7, #16]
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d1e6      	bne.n	80072b2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	2220      	movs	r2, #32
 80072e8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	2200      	movs	r2, #0
 80072ee:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	2200      	movs	r2, #0
 80072f4:	665a      	str	r2, [r3, #100]	; 0x64
}
 80072f6:	bf00      	nop
 80072f8:	3754      	adds	r7, #84	; 0x54
 80072fa:	46bd      	mov	sp, r7
 80072fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007300:	4770      	bx	lr

08007302 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007302:	b580      	push	{r7, lr}
 8007304:	b084      	sub	sp, #16
 8007306:	af00      	add	r7, sp, #0
 8007308:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800730e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	2200      	movs	r2, #0
 8007314:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	2200      	movs	r2, #0
 800731c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007320:	68f8      	ldr	r0, [r7, #12]
 8007322:	f7ff fa75 	bl	8006810 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007326:	bf00      	nop
 8007328:	3710      	adds	r7, #16
 800732a:	46bd      	mov	sp, r7
 800732c:	bd80      	pop	{r7, pc}

0800732e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800732e:	b580      	push	{r7, lr}
 8007330:	b088      	sub	sp, #32
 8007332:	af00      	add	r7, sp, #0
 8007334:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	e853 3f00 	ldrex	r3, [r3]
 8007342:	60bb      	str	r3, [r7, #8]
   return(result);
 8007344:	68bb      	ldr	r3, [r7, #8]
 8007346:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800734a:	61fb      	str	r3, [r7, #28]
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	461a      	mov	r2, r3
 8007352:	69fb      	ldr	r3, [r7, #28]
 8007354:	61bb      	str	r3, [r7, #24]
 8007356:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007358:	6979      	ldr	r1, [r7, #20]
 800735a:	69ba      	ldr	r2, [r7, #24]
 800735c:	e841 2300 	strex	r3, r2, [r1]
 8007360:	613b      	str	r3, [r7, #16]
   return(result);
 8007362:	693b      	ldr	r3, [r7, #16]
 8007364:	2b00      	cmp	r3, #0
 8007366:	d1e6      	bne.n	8007336 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	2220      	movs	r2, #32
 800736c:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	2200      	movs	r2, #0
 8007372:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007374:	6878      	ldr	r0, [r7, #4]
 8007376:	f7ff fa41 	bl	80067fc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800737a:	bf00      	nop
 800737c:	3720      	adds	r7, #32
 800737e:	46bd      	mov	sp, r7
 8007380:	bd80      	pop	{r7, pc}

08007382 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007382:	b580      	push	{r7, lr}
 8007384:	b096      	sub	sp, #88	; 0x58
 8007386:	af00      	add	r7, sp, #0
 8007388:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007390:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007398:	2b22      	cmp	r3, #34	; 0x22
 800739a:	f040 8094 	bne.w	80074c6 <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80073a4:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80073a8:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80073ac:	b2d9      	uxtb	r1, r3
 80073ae:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80073b2:	b2da      	uxtb	r2, r3
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073b8:	400a      	ands	r2, r1
 80073ba:	b2d2      	uxtb	r2, r2
 80073bc:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073c2:	1c5a      	adds	r2, r3, #1
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80073ce:	b29b      	uxth	r3, r3
 80073d0:	3b01      	subs	r3, #1
 80073d2:	b29a      	uxth	r2, r3
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80073e0:	b29b      	uxth	r3, r3
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d179      	bne.n	80074da <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073ee:	e853 3f00 	ldrex	r3, [r3]
 80073f2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80073f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073f6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80073fa:	653b      	str	r3, [r7, #80]	; 0x50
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	461a      	mov	r2, r3
 8007402:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007404:	647b      	str	r3, [r7, #68]	; 0x44
 8007406:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007408:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800740a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800740c:	e841 2300 	strex	r3, r2, [r1]
 8007410:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007412:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007414:	2b00      	cmp	r3, #0
 8007416:	d1e6      	bne.n	80073e6 <UART_RxISR_8BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	3308      	adds	r3, #8
 800741e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007422:	e853 3f00 	ldrex	r3, [r3]
 8007426:	623b      	str	r3, [r7, #32]
   return(result);
 8007428:	6a3b      	ldr	r3, [r7, #32]
 800742a:	f023 0301 	bic.w	r3, r3, #1
 800742e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	3308      	adds	r3, #8
 8007436:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007438:	633a      	str	r2, [r7, #48]	; 0x30
 800743a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800743c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800743e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007440:	e841 2300 	strex	r3, r2, [r1]
 8007444:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007446:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007448:	2b00      	cmp	r3, #0
 800744a:	d1e5      	bne.n	8007418 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	2220      	movs	r2, #32
 8007450:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	2200      	movs	r2, #0
 8007456:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800745c:	2b01      	cmp	r3, #1
 800745e:	d12e      	bne.n	80074be <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	2200      	movs	r2, #0
 8007464:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800746c:	693b      	ldr	r3, [r7, #16]
 800746e:	e853 3f00 	ldrex	r3, [r3]
 8007472:	60fb      	str	r3, [r7, #12]
   return(result);
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	f023 0310 	bic.w	r3, r3, #16
 800747a:	64bb      	str	r3, [r7, #72]	; 0x48
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	461a      	mov	r2, r3
 8007482:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007484:	61fb      	str	r3, [r7, #28]
 8007486:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007488:	69b9      	ldr	r1, [r7, #24]
 800748a:	69fa      	ldr	r2, [r7, #28]
 800748c:	e841 2300 	strex	r3, r2, [r1]
 8007490:	617b      	str	r3, [r7, #20]
   return(result);
 8007492:	697b      	ldr	r3, [r7, #20]
 8007494:	2b00      	cmp	r3, #0
 8007496:	d1e6      	bne.n	8007466 <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	69db      	ldr	r3, [r3, #28]
 800749e:	f003 0310 	and.w	r3, r3, #16
 80074a2:	2b10      	cmp	r3, #16
 80074a4:	d103      	bne.n	80074ae <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	2210      	movs	r2, #16
 80074ac:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80074b4:	4619      	mov	r1, r3
 80074b6:	6878      	ldr	r0, [r7, #4]
 80074b8:	f7ff f9b4 	bl	8006824 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80074bc:	e00d      	b.n	80074da <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 80074be:	6878      	ldr	r0, [r7, #4]
 80074c0:	f7f9 ffde 	bl	8001480 <HAL_UART_RxCpltCallback>
}
 80074c4:	e009      	b.n	80074da <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	8b1b      	ldrh	r3, [r3, #24]
 80074cc:	b29a      	uxth	r2, r3
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	f042 0208 	orr.w	r2, r2, #8
 80074d6:	b292      	uxth	r2, r2
 80074d8:	831a      	strh	r2, [r3, #24]
}
 80074da:	bf00      	nop
 80074dc:	3758      	adds	r7, #88	; 0x58
 80074de:	46bd      	mov	sp, r7
 80074e0:	bd80      	pop	{r7, pc}

080074e2 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80074e2:	b580      	push	{r7, lr}
 80074e4:	b096      	sub	sp, #88	; 0x58
 80074e6:	af00      	add	r7, sp, #0
 80074e8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80074f0:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80074f8:	2b22      	cmp	r3, #34	; 0x22
 80074fa:	f040 8094 	bne.w	8007626 <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007504:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800750c:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800750e:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8007512:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8007516:	4013      	ands	r3, r2
 8007518:	b29a      	uxth	r2, r3
 800751a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800751c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007522:	1c9a      	adds	r2, r3, #2
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800752e:	b29b      	uxth	r3, r3
 8007530:	3b01      	subs	r3, #1
 8007532:	b29a      	uxth	r2, r3
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007540:	b29b      	uxth	r3, r3
 8007542:	2b00      	cmp	r3, #0
 8007544:	d179      	bne.n	800763a <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800754c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800754e:	e853 3f00 	ldrex	r3, [r3]
 8007552:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007554:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007556:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800755a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	461a      	mov	r2, r3
 8007562:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007564:	643b      	str	r3, [r7, #64]	; 0x40
 8007566:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007568:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800756a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800756c:	e841 2300 	strex	r3, r2, [r1]
 8007570:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007572:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007574:	2b00      	cmp	r3, #0
 8007576:	d1e6      	bne.n	8007546 <UART_RxISR_16BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	3308      	adds	r3, #8
 800757e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007580:	6a3b      	ldr	r3, [r7, #32]
 8007582:	e853 3f00 	ldrex	r3, [r3]
 8007586:	61fb      	str	r3, [r7, #28]
   return(result);
 8007588:	69fb      	ldr	r3, [r7, #28]
 800758a:	f023 0301 	bic.w	r3, r3, #1
 800758e:	64bb      	str	r3, [r7, #72]	; 0x48
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	3308      	adds	r3, #8
 8007596:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007598:	62fa      	str	r2, [r7, #44]	; 0x2c
 800759a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800759c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800759e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80075a0:	e841 2300 	strex	r3, r2, [r1]
 80075a4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80075a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d1e5      	bne.n	8007578 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	2220      	movs	r2, #32
 80075b0:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	2200      	movs	r2, #0
 80075b6:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80075bc:	2b01      	cmp	r3, #1
 80075be:	d12e      	bne.n	800761e <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	2200      	movs	r2, #0
 80075c4:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	e853 3f00 	ldrex	r3, [r3]
 80075d2:	60bb      	str	r3, [r7, #8]
   return(result);
 80075d4:	68bb      	ldr	r3, [r7, #8]
 80075d6:	f023 0310 	bic.w	r3, r3, #16
 80075da:	647b      	str	r3, [r7, #68]	; 0x44
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	461a      	mov	r2, r3
 80075e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80075e4:	61bb      	str	r3, [r7, #24]
 80075e6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075e8:	6979      	ldr	r1, [r7, #20]
 80075ea:	69ba      	ldr	r2, [r7, #24]
 80075ec:	e841 2300 	strex	r3, r2, [r1]
 80075f0:	613b      	str	r3, [r7, #16]
   return(result);
 80075f2:	693b      	ldr	r3, [r7, #16]
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d1e6      	bne.n	80075c6 <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	69db      	ldr	r3, [r3, #28]
 80075fe:	f003 0310 	and.w	r3, r3, #16
 8007602:	2b10      	cmp	r3, #16
 8007604:	d103      	bne.n	800760e <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	2210      	movs	r2, #16
 800760c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007614:	4619      	mov	r1, r3
 8007616:	6878      	ldr	r0, [r7, #4]
 8007618:	f7ff f904 	bl	8006824 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800761c:	e00d      	b.n	800763a <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800761e:	6878      	ldr	r0, [r7, #4]
 8007620:	f7f9 ff2e 	bl	8001480 <HAL_UART_RxCpltCallback>
}
 8007624:	e009      	b.n	800763a <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	8b1b      	ldrh	r3, [r3, #24]
 800762c:	b29a      	uxth	r2, r3
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	f042 0208 	orr.w	r2, r2, #8
 8007636:	b292      	uxth	r2, r2
 8007638:	831a      	strh	r2, [r3, #24]
}
 800763a:	bf00      	nop
 800763c:	3758      	adds	r7, #88	; 0x58
 800763e:	46bd      	mov	sp, r7
 8007640:	bd80      	pop	{r7, pc}

08007642 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007642:	b480      	push	{r7}
 8007644:	b083      	sub	sp, #12
 8007646:	af00      	add	r7, sp, #0
 8007648:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800764a:	bf00      	nop
 800764c:	370c      	adds	r7, #12
 800764e:	46bd      	mov	sp, r7
 8007650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007654:	4770      	bx	lr
	...

08007658 <__libc_init_array>:
 8007658:	b570      	push	{r4, r5, r6, lr}
 800765a:	4d0d      	ldr	r5, [pc, #52]	; (8007690 <__libc_init_array+0x38>)
 800765c:	4c0d      	ldr	r4, [pc, #52]	; (8007694 <__libc_init_array+0x3c>)
 800765e:	1b64      	subs	r4, r4, r5
 8007660:	10a4      	asrs	r4, r4, #2
 8007662:	2600      	movs	r6, #0
 8007664:	42a6      	cmp	r6, r4
 8007666:	d109      	bne.n	800767c <__libc_init_array+0x24>
 8007668:	4d0b      	ldr	r5, [pc, #44]	; (8007698 <__libc_init_array+0x40>)
 800766a:	4c0c      	ldr	r4, [pc, #48]	; (800769c <__libc_init_array+0x44>)
 800766c:	f000 f82e 	bl	80076cc <_init>
 8007670:	1b64      	subs	r4, r4, r5
 8007672:	10a4      	asrs	r4, r4, #2
 8007674:	2600      	movs	r6, #0
 8007676:	42a6      	cmp	r6, r4
 8007678:	d105      	bne.n	8007686 <__libc_init_array+0x2e>
 800767a:	bd70      	pop	{r4, r5, r6, pc}
 800767c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007680:	4798      	blx	r3
 8007682:	3601      	adds	r6, #1
 8007684:	e7ee      	b.n	8007664 <__libc_init_array+0xc>
 8007686:	f855 3b04 	ldr.w	r3, [r5], #4
 800768a:	4798      	blx	r3
 800768c:	3601      	adds	r6, #1
 800768e:	e7f2      	b.n	8007676 <__libc_init_array+0x1e>
 8007690:	08007754 	.word	0x08007754
 8007694:	08007754 	.word	0x08007754
 8007698:	08007754 	.word	0x08007754
 800769c:	08007758 	.word	0x08007758

080076a0 <memcpy>:
 80076a0:	440a      	add	r2, r1
 80076a2:	4291      	cmp	r1, r2
 80076a4:	f100 33ff 	add.w	r3, r0, #4294967295
 80076a8:	d100      	bne.n	80076ac <memcpy+0xc>
 80076aa:	4770      	bx	lr
 80076ac:	b510      	push	{r4, lr}
 80076ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 80076b2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80076b6:	4291      	cmp	r1, r2
 80076b8:	d1f9      	bne.n	80076ae <memcpy+0xe>
 80076ba:	bd10      	pop	{r4, pc}

080076bc <memset>:
 80076bc:	4402      	add	r2, r0
 80076be:	4603      	mov	r3, r0
 80076c0:	4293      	cmp	r3, r2
 80076c2:	d100      	bne.n	80076c6 <memset+0xa>
 80076c4:	4770      	bx	lr
 80076c6:	f803 1b01 	strb.w	r1, [r3], #1
 80076ca:	e7f9      	b.n	80076c0 <memset+0x4>

080076cc <_init>:
 80076cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076ce:	bf00      	nop
 80076d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80076d2:	bc08      	pop	{r3}
 80076d4:	469e      	mov	lr, r3
 80076d6:	4770      	bx	lr

080076d8 <_fini>:
 80076d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076da:	bf00      	nop
 80076dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80076de:	bc08      	pop	{r3}
 80076e0:	469e      	mov	lr, r3
 80076e2:	4770      	bx	lr
