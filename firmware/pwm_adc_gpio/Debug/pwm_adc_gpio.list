
pwm_adc_gpio.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007668  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  080077fc  080077fc  000177fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007864  08007864  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08007864  08007864  00017864  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800786c  0800786c  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800786c  0800786c  0001786c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007870  08007870  00017870  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08007874  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000378  20000010  08007884  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000388  08007884  00020388  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018c78  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000034c4  00000000  00000000  00038cb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012f8  00000000  00000000  0003c180  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001170  00000000  00000000  0003d478  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000261d2  00000000  00000000  0003e5e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018927  00000000  00000000  000647ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e9c95  00000000  00000000  0007d0e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00166d76  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004ef0  00000000  00000000  00166dc8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000010 	.word	0x20000010
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080077e4 	.word	0x080077e4

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000014 	.word	0x20000014
 80001d0:	080077e4 	.word	0x080077e4

080001d4 <__aeabi_drsub>:
 80001d4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001d8:	e002      	b.n	80001e0 <__adddf3>
 80001da:	bf00      	nop

080001dc <__aeabi_dsub>:
 80001dc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e0 <__adddf3>:
 80001e0:	b530      	push	{r4, r5, lr}
 80001e2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001e6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ea:	ea94 0f05 	teq	r4, r5
 80001ee:	bf08      	it	eq
 80001f0:	ea90 0f02 	teqeq	r0, r2
 80001f4:	bf1f      	itttt	ne
 80001f6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fa:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001fe:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000202:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000206:	f000 80e2 	beq.w	80003ce <__adddf3+0x1ee>
 800020a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800020e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000212:	bfb8      	it	lt
 8000214:	426d      	neglt	r5, r5
 8000216:	dd0c      	ble.n	8000232 <__adddf3+0x52>
 8000218:	442c      	add	r4, r5
 800021a:	ea80 0202 	eor.w	r2, r0, r2
 800021e:	ea81 0303 	eor.w	r3, r1, r3
 8000222:	ea82 0000 	eor.w	r0, r2, r0
 8000226:	ea83 0101 	eor.w	r1, r3, r1
 800022a:	ea80 0202 	eor.w	r2, r0, r2
 800022e:	ea81 0303 	eor.w	r3, r1, r3
 8000232:	2d36      	cmp	r5, #54	; 0x36
 8000234:	bf88      	it	hi
 8000236:	bd30      	pophi	{r4, r5, pc}
 8000238:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800023c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000240:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000244:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000248:	d002      	beq.n	8000250 <__adddf3+0x70>
 800024a:	4240      	negs	r0, r0
 800024c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000250:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000254:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000258:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800025c:	d002      	beq.n	8000264 <__adddf3+0x84>
 800025e:	4252      	negs	r2, r2
 8000260:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000264:	ea94 0f05 	teq	r4, r5
 8000268:	f000 80a7 	beq.w	80003ba <__adddf3+0x1da>
 800026c:	f1a4 0401 	sub.w	r4, r4, #1
 8000270:	f1d5 0e20 	rsbs	lr, r5, #32
 8000274:	db0d      	blt.n	8000292 <__adddf3+0xb2>
 8000276:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027a:	fa22 f205 	lsr.w	r2, r2, r5
 800027e:	1880      	adds	r0, r0, r2
 8000280:	f141 0100 	adc.w	r1, r1, #0
 8000284:	fa03 f20e 	lsl.w	r2, r3, lr
 8000288:	1880      	adds	r0, r0, r2
 800028a:	fa43 f305 	asr.w	r3, r3, r5
 800028e:	4159      	adcs	r1, r3
 8000290:	e00e      	b.n	80002b0 <__adddf3+0xd0>
 8000292:	f1a5 0520 	sub.w	r5, r5, #32
 8000296:	f10e 0e20 	add.w	lr, lr, #32
 800029a:	2a01      	cmp	r2, #1
 800029c:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a0:	bf28      	it	cs
 80002a2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002a6:	fa43 f305 	asr.w	r3, r3, r5
 80002aa:	18c0      	adds	r0, r0, r3
 80002ac:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b4:	d507      	bpl.n	80002c6 <__adddf3+0xe6>
 80002b6:	f04f 0e00 	mov.w	lr, #0
 80002ba:	f1dc 0c00 	rsbs	ip, ip, #0
 80002be:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c2:	eb6e 0101 	sbc.w	r1, lr, r1
 80002c6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ca:	d31b      	bcc.n	8000304 <__adddf3+0x124>
 80002cc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d0:	d30c      	bcc.n	80002ec <__adddf3+0x10c>
 80002d2:	0849      	lsrs	r1, r1, #1
 80002d4:	ea5f 0030 	movs.w	r0, r0, rrx
 80002d8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002dc:	f104 0401 	add.w	r4, r4, #1
 80002e0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002e8:	f080 809a 	bcs.w	8000420 <__adddf3+0x240>
 80002ec:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f0:	bf08      	it	eq
 80002f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002f6:	f150 0000 	adcs.w	r0, r0, #0
 80002fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002fe:	ea41 0105 	orr.w	r1, r1, r5
 8000302:	bd30      	pop	{r4, r5, pc}
 8000304:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000308:	4140      	adcs	r0, r0
 800030a:	eb41 0101 	adc.w	r1, r1, r1
 800030e:	3c01      	subs	r4, #1
 8000310:	bf28      	it	cs
 8000312:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000316:	d2e9      	bcs.n	80002ec <__adddf3+0x10c>
 8000318:	f091 0f00 	teq	r1, #0
 800031c:	bf04      	itt	eq
 800031e:	4601      	moveq	r1, r0
 8000320:	2000      	moveq	r0, #0
 8000322:	fab1 f381 	clz	r3, r1
 8000326:	bf08      	it	eq
 8000328:	3320      	addeq	r3, #32
 800032a:	f1a3 030b 	sub.w	r3, r3, #11
 800032e:	f1b3 0220 	subs.w	r2, r3, #32
 8000332:	da0c      	bge.n	800034e <__adddf3+0x16e>
 8000334:	320c      	adds	r2, #12
 8000336:	dd08      	ble.n	800034a <__adddf3+0x16a>
 8000338:	f102 0c14 	add.w	ip, r2, #20
 800033c:	f1c2 020c 	rsb	r2, r2, #12
 8000340:	fa01 f00c 	lsl.w	r0, r1, ip
 8000344:	fa21 f102 	lsr.w	r1, r1, r2
 8000348:	e00c      	b.n	8000364 <__adddf3+0x184>
 800034a:	f102 0214 	add.w	r2, r2, #20
 800034e:	bfd8      	it	le
 8000350:	f1c2 0c20 	rsble	ip, r2, #32
 8000354:	fa01 f102 	lsl.w	r1, r1, r2
 8000358:	fa20 fc0c 	lsr.w	ip, r0, ip
 800035c:	bfdc      	itt	le
 800035e:	ea41 010c 	orrle.w	r1, r1, ip
 8000362:	4090      	lslle	r0, r2
 8000364:	1ae4      	subs	r4, r4, r3
 8000366:	bfa2      	ittt	ge
 8000368:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800036c:	4329      	orrge	r1, r5
 800036e:	bd30      	popge	{r4, r5, pc}
 8000370:	ea6f 0404 	mvn.w	r4, r4
 8000374:	3c1f      	subs	r4, #31
 8000376:	da1c      	bge.n	80003b2 <__adddf3+0x1d2>
 8000378:	340c      	adds	r4, #12
 800037a:	dc0e      	bgt.n	800039a <__adddf3+0x1ba>
 800037c:	f104 0414 	add.w	r4, r4, #20
 8000380:	f1c4 0220 	rsb	r2, r4, #32
 8000384:	fa20 f004 	lsr.w	r0, r0, r4
 8000388:	fa01 f302 	lsl.w	r3, r1, r2
 800038c:	ea40 0003 	orr.w	r0, r0, r3
 8000390:	fa21 f304 	lsr.w	r3, r1, r4
 8000394:	ea45 0103 	orr.w	r1, r5, r3
 8000398:	bd30      	pop	{r4, r5, pc}
 800039a:	f1c4 040c 	rsb	r4, r4, #12
 800039e:	f1c4 0220 	rsb	r2, r4, #32
 80003a2:	fa20 f002 	lsr.w	r0, r0, r2
 80003a6:	fa01 f304 	lsl.w	r3, r1, r4
 80003aa:	ea40 0003 	orr.w	r0, r0, r3
 80003ae:	4629      	mov	r1, r5
 80003b0:	bd30      	pop	{r4, r5, pc}
 80003b2:	fa21 f004 	lsr.w	r0, r1, r4
 80003b6:	4629      	mov	r1, r5
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	f094 0f00 	teq	r4, #0
 80003be:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c2:	bf06      	itte	eq
 80003c4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003c8:	3401      	addeq	r4, #1
 80003ca:	3d01      	subne	r5, #1
 80003cc:	e74e      	b.n	800026c <__adddf3+0x8c>
 80003ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d2:	bf18      	it	ne
 80003d4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d8:	d029      	beq.n	800042e <__adddf3+0x24e>
 80003da:	ea94 0f05 	teq	r4, r5
 80003de:	bf08      	it	eq
 80003e0:	ea90 0f02 	teqeq	r0, r2
 80003e4:	d005      	beq.n	80003f2 <__adddf3+0x212>
 80003e6:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ea:	bf04      	itt	eq
 80003ec:	4619      	moveq	r1, r3
 80003ee:	4610      	moveq	r0, r2
 80003f0:	bd30      	pop	{r4, r5, pc}
 80003f2:	ea91 0f03 	teq	r1, r3
 80003f6:	bf1e      	ittt	ne
 80003f8:	2100      	movne	r1, #0
 80003fa:	2000      	movne	r0, #0
 80003fc:	bd30      	popne	{r4, r5, pc}
 80003fe:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000402:	d105      	bne.n	8000410 <__adddf3+0x230>
 8000404:	0040      	lsls	r0, r0, #1
 8000406:	4149      	adcs	r1, r1
 8000408:	bf28      	it	cs
 800040a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000414:	bf3c      	itt	cc
 8000416:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041a:	bd30      	popcc	{r4, r5, pc}
 800041c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000420:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000424:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000428:	f04f 0000 	mov.w	r0, #0
 800042c:	bd30      	pop	{r4, r5, pc}
 800042e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000432:	bf1a      	itte	ne
 8000434:	4619      	movne	r1, r3
 8000436:	4610      	movne	r0, r2
 8000438:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800043c:	bf1c      	itt	ne
 800043e:	460b      	movne	r3, r1
 8000440:	4602      	movne	r2, r0
 8000442:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000446:	bf06      	itte	eq
 8000448:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800044c:	ea91 0f03 	teqeq	r1, r3
 8000450:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	bf00      	nop

08000458 <__aeabi_ui2d>:
 8000458:	f090 0f00 	teq	r0, #0
 800045c:	bf04      	itt	eq
 800045e:	2100      	moveq	r1, #0
 8000460:	4770      	bxeq	lr
 8000462:	b530      	push	{r4, r5, lr}
 8000464:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000468:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800046c:	f04f 0500 	mov.w	r5, #0
 8000470:	f04f 0100 	mov.w	r1, #0
 8000474:	e750      	b.n	8000318 <__adddf3+0x138>
 8000476:	bf00      	nop

08000478 <__aeabi_i2d>:
 8000478:	f090 0f00 	teq	r0, #0
 800047c:	bf04      	itt	eq
 800047e:	2100      	moveq	r1, #0
 8000480:	4770      	bxeq	lr
 8000482:	b530      	push	{r4, r5, lr}
 8000484:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000488:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000490:	bf48      	it	mi
 8000492:	4240      	negmi	r0, r0
 8000494:	f04f 0100 	mov.w	r1, #0
 8000498:	e73e      	b.n	8000318 <__adddf3+0x138>
 800049a:	bf00      	nop

0800049c <__aeabi_f2d>:
 800049c:	0042      	lsls	r2, r0, #1
 800049e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a2:	ea4f 0131 	mov.w	r1, r1, rrx
 80004a6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004aa:	bf1f      	itttt	ne
 80004ac:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004b8:	4770      	bxne	lr
 80004ba:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004be:	bf08      	it	eq
 80004c0:	4770      	bxeq	lr
 80004c2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004c6:	bf04      	itt	eq
 80004c8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004cc:	4770      	bxeq	lr
 80004ce:	b530      	push	{r4, r5, lr}
 80004d0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004dc:	e71c      	b.n	8000318 <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_ul2d>:
 80004e0:	ea50 0201 	orrs.w	r2, r0, r1
 80004e4:	bf08      	it	eq
 80004e6:	4770      	bxeq	lr
 80004e8:	b530      	push	{r4, r5, lr}
 80004ea:	f04f 0500 	mov.w	r5, #0
 80004ee:	e00a      	b.n	8000506 <__aeabi_l2d+0x16>

080004f0 <__aeabi_l2d>:
 80004f0:	ea50 0201 	orrs.w	r2, r0, r1
 80004f4:	bf08      	it	eq
 80004f6:	4770      	bxeq	lr
 80004f8:	b530      	push	{r4, r5, lr}
 80004fa:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004fe:	d502      	bpl.n	8000506 <__aeabi_l2d+0x16>
 8000500:	4240      	negs	r0, r0
 8000502:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000506:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800050e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000512:	f43f aed8 	beq.w	80002c6 <__adddf3+0xe6>
 8000516:	f04f 0203 	mov.w	r2, #3
 800051a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051e:	bf18      	it	ne
 8000520:	3203      	addne	r2, #3
 8000522:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000526:	bf18      	it	ne
 8000528:	3203      	addne	r2, #3
 800052a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800052e:	f1c2 0320 	rsb	r3, r2, #32
 8000532:	fa00 fc03 	lsl.w	ip, r0, r3
 8000536:	fa20 f002 	lsr.w	r0, r0, r2
 800053a:	fa01 fe03 	lsl.w	lr, r1, r3
 800053e:	ea40 000e 	orr.w	r0, r0, lr
 8000542:	fa21 f102 	lsr.w	r1, r1, r2
 8000546:	4414      	add	r4, r2
 8000548:	e6bd      	b.n	80002c6 <__adddf3+0xe6>
 800054a:	bf00      	nop

0800054c <__aeabi_dmul>:
 800054c:	b570      	push	{r4, r5, r6, lr}
 800054e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000552:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000556:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055a:	bf1d      	ittte	ne
 800055c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000560:	ea94 0f0c 	teqne	r4, ip
 8000564:	ea95 0f0c 	teqne	r5, ip
 8000568:	f000 f8de 	bleq	8000728 <__aeabi_dmul+0x1dc>
 800056c:	442c      	add	r4, r5
 800056e:	ea81 0603 	eor.w	r6, r1, r3
 8000572:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000576:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800057e:	bf18      	it	ne
 8000580:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000584:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000588:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800058c:	d038      	beq.n	8000600 <__aeabi_dmul+0xb4>
 800058e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000592:	f04f 0500 	mov.w	r5, #0
 8000596:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800059e:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a2:	f04f 0600 	mov.w	r6, #0
 80005a6:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005aa:	f09c 0f00 	teq	ip, #0
 80005ae:	bf18      	it	ne
 80005b0:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005b8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005bc:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c0:	d204      	bcs.n	80005cc <__aeabi_dmul+0x80>
 80005c2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005c6:	416d      	adcs	r5, r5
 80005c8:	eb46 0606 	adc.w	r6, r6, r6
 80005cc:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005d8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005dc:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e4:	bf88      	it	hi
 80005e6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ea:	d81e      	bhi.n	800062a <__aeabi_dmul+0xde>
 80005ec:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f0:	bf08      	it	eq
 80005f2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005f6:	f150 0000 	adcs.w	r0, r0, #0
 80005fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fe:	bd70      	pop	{r4, r5, r6, pc}
 8000600:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000604:	ea46 0101 	orr.w	r1, r6, r1
 8000608:	ea40 0002 	orr.w	r0, r0, r2
 800060c:	ea81 0103 	eor.w	r1, r1, r3
 8000610:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000614:	bfc2      	ittt	gt
 8000616:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800061e:	bd70      	popgt	{r4, r5, r6, pc}
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f04f 0e00 	mov.w	lr, #0
 8000628:	3c01      	subs	r4, #1
 800062a:	f300 80ab 	bgt.w	8000784 <__aeabi_dmul+0x238>
 800062e:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000632:	bfde      	ittt	le
 8000634:	2000      	movle	r0, #0
 8000636:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063a:	bd70      	pople	{r4, r5, r6, pc}
 800063c:	f1c4 0400 	rsb	r4, r4, #0
 8000640:	3c20      	subs	r4, #32
 8000642:	da35      	bge.n	80006b0 <__aeabi_dmul+0x164>
 8000644:	340c      	adds	r4, #12
 8000646:	dc1b      	bgt.n	8000680 <__aeabi_dmul+0x134>
 8000648:	f104 0414 	add.w	r4, r4, #20
 800064c:	f1c4 0520 	rsb	r5, r4, #32
 8000650:	fa00 f305 	lsl.w	r3, r0, r5
 8000654:	fa20 f004 	lsr.w	r0, r0, r4
 8000658:	fa01 f205 	lsl.w	r2, r1, r5
 800065c:	ea40 0002 	orr.w	r0, r0, r2
 8000660:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000664:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000668:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800066c:	fa21 f604 	lsr.w	r6, r1, r4
 8000670:	eb42 0106 	adc.w	r1, r2, r6
 8000674:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000678:	bf08      	it	eq
 800067a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800067e:	bd70      	pop	{r4, r5, r6, pc}
 8000680:	f1c4 040c 	rsb	r4, r4, #12
 8000684:	f1c4 0520 	rsb	r5, r4, #32
 8000688:	fa00 f304 	lsl.w	r3, r0, r4
 800068c:	fa20 f005 	lsr.w	r0, r0, r5
 8000690:	fa01 f204 	lsl.w	r2, r1, r4
 8000694:	ea40 0002 	orr.w	r0, r0, r2
 8000698:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800069c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a0:	f141 0100 	adc.w	r1, r1, #0
 80006a4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a8:	bf08      	it	eq
 80006aa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ae:	bd70      	pop	{r4, r5, r6, pc}
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f205 	lsl.w	r2, r0, r5
 80006b8:	ea4e 0e02 	orr.w	lr, lr, r2
 80006bc:	fa20 f304 	lsr.w	r3, r0, r4
 80006c0:	fa01 f205 	lsl.w	r2, r1, r5
 80006c4:	ea43 0302 	orr.w	r3, r3, r2
 80006c8:	fa21 f004 	lsr.w	r0, r1, r4
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d0:	fa21 f204 	lsr.w	r2, r1, r4
 80006d4:	ea20 0002 	bic.w	r0, r0, r2
 80006d8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006dc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e0:	bf08      	it	eq
 80006e2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e6:	bd70      	pop	{r4, r5, r6, pc}
 80006e8:	f094 0f00 	teq	r4, #0
 80006ec:	d10f      	bne.n	800070e <__aeabi_dmul+0x1c2>
 80006ee:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f2:	0040      	lsls	r0, r0, #1
 80006f4:	eb41 0101 	adc.w	r1, r1, r1
 80006f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006fc:	bf08      	it	eq
 80006fe:	3c01      	subeq	r4, #1
 8000700:	d0f7      	beq.n	80006f2 <__aeabi_dmul+0x1a6>
 8000702:	ea41 0106 	orr.w	r1, r1, r6
 8000706:	f095 0f00 	teq	r5, #0
 800070a:	bf18      	it	ne
 800070c:	4770      	bxne	lr
 800070e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000712:	0052      	lsls	r2, r2, #1
 8000714:	eb43 0303 	adc.w	r3, r3, r3
 8000718:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800071c:	bf08      	it	eq
 800071e:	3d01      	subeq	r5, #1
 8000720:	d0f7      	beq.n	8000712 <__aeabi_dmul+0x1c6>
 8000722:	ea43 0306 	orr.w	r3, r3, r6
 8000726:	4770      	bx	lr
 8000728:	ea94 0f0c 	teq	r4, ip
 800072c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000730:	bf18      	it	ne
 8000732:	ea95 0f0c 	teqne	r5, ip
 8000736:	d00c      	beq.n	8000752 <__aeabi_dmul+0x206>
 8000738:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800073c:	bf18      	it	ne
 800073e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000742:	d1d1      	bne.n	80006e8 <__aeabi_dmul+0x19c>
 8000744:	ea81 0103 	eor.w	r1, r1, r3
 8000748:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800074c:	f04f 0000 	mov.w	r0, #0
 8000750:	bd70      	pop	{r4, r5, r6, pc}
 8000752:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000756:	bf06      	itte	eq
 8000758:	4610      	moveq	r0, r2
 800075a:	4619      	moveq	r1, r3
 800075c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000760:	d019      	beq.n	8000796 <__aeabi_dmul+0x24a>
 8000762:	ea94 0f0c 	teq	r4, ip
 8000766:	d102      	bne.n	800076e <__aeabi_dmul+0x222>
 8000768:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800076c:	d113      	bne.n	8000796 <__aeabi_dmul+0x24a>
 800076e:	ea95 0f0c 	teq	r5, ip
 8000772:	d105      	bne.n	8000780 <__aeabi_dmul+0x234>
 8000774:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000778:	bf1c      	itt	ne
 800077a:	4610      	movne	r0, r2
 800077c:	4619      	movne	r1, r3
 800077e:	d10a      	bne.n	8000796 <__aeabi_dmul+0x24a>
 8000780:	ea81 0103 	eor.w	r1, r1, r3
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800079e:	bd70      	pop	{r4, r5, r6, pc}

080007a0 <__aeabi_ddiv>:
 80007a0:	b570      	push	{r4, r5, r6, lr}
 80007a2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007a6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007aa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ae:	bf1d      	ittte	ne
 80007b0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b4:	ea94 0f0c 	teqne	r4, ip
 80007b8:	ea95 0f0c 	teqne	r5, ip
 80007bc:	f000 f8a7 	bleq	800090e <__aeabi_ddiv+0x16e>
 80007c0:	eba4 0405 	sub.w	r4, r4, r5
 80007c4:	ea81 0e03 	eor.w	lr, r1, r3
 80007c8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007cc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d0:	f000 8088 	beq.w	80008e4 <__aeabi_ddiv+0x144>
 80007d4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007d8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007dc:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007e8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007ec:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f0:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007f8:	429d      	cmp	r5, r3
 80007fa:	bf08      	it	eq
 80007fc:	4296      	cmpeq	r6, r2
 80007fe:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000802:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000806:	d202      	bcs.n	800080e <__aeabi_ddiv+0x6e>
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	1ab6      	subs	r6, r6, r2
 8000810:	eb65 0503 	sbc.w	r5, r5, r3
 8000814:	085b      	lsrs	r3, r3, #1
 8000816:	ea4f 0232 	mov.w	r2, r2, rrx
 800081a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800081e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000822:	ebb6 0e02 	subs.w	lr, r6, r2
 8000826:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082a:	bf22      	ittt	cs
 800082c:	1ab6      	subcs	r6, r6, r2
 800082e:	4675      	movcs	r5, lr
 8000830:	ea40 000c 	orrcs.w	r0, r0, ip
 8000834:	085b      	lsrs	r3, r3, #1
 8000836:	ea4f 0232 	mov.w	r2, r2, rrx
 800083a:	ebb6 0e02 	subs.w	lr, r6, r2
 800083e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000842:	bf22      	ittt	cs
 8000844:	1ab6      	subcs	r6, r6, r2
 8000846:	4675      	movcs	r5, lr
 8000848:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	ebb6 0e02 	subs.w	lr, r6, r2
 8000856:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085a:	bf22      	ittt	cs
 800085c:	1ab6      	subcs	r6, r6, r2
 800085e:	4675      	movcs	r5, lr
 8000860:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	ebb6 0e02 	subs.w	lr, r6, r2
 800086e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000872:	bf22      	ittt	cs
 8000874:	1ab6      	subcs	r6, r6, r2
 8000876:	4675      	movcs	r5, lr
 8000878:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800087c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000880:	d018      	beq.n	80008b4 <__aeabi_ddiv+0x114>
 8000882:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000886:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800088e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000892:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000896:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800089e:	d1c0      	bne.n	8000822 <__aeabi_ddiv+0x82>
 80008a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a4:	d10b      	bne.n	80008be <__aeabi_ddiv+0x11e>
 80008a6:	ea41 0100 	orr.w	r1, r1, r0
 80008aa:	f04f 0000 	mov.w	r0, #0
 80008ae:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b2:	e7b6      	b.n	8000822 <__aeabi_ddiv+0x82>
 80008b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b8:	bf04      	itt	eq
 80008ba:	4301      	orreq	r1, r0
 80008bc:	2000      	moveq	r0, #0
 80008be:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c2:	bf88      	it	hi
 80008c4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008c8:	f63f aeaf 	bhi.w	800062a <__aeabi_dmul+0xde>
 80008cc:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d0:	bf04      	itt	eq
 80008d2:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008d6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008da:	f150 0000 	adcs.w	r0, r0, #0
 80008de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e2:	bd70      	pop	{r4, r5, r6, pc}
 80008e4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008e8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008ec:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f0:	bfc2      	ittt	gt
 80008f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fa:	bd70      	popgt	{r4, r5, r6, pc}
 80008fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000900:	f04f 0e00 	mov.w	lr, #0
 8000904:	3c01      	subs	r4, #1
 8000906:	e690      	b.n	800062a <__aeabi_dmul+0xde>
 8000908:	ea45 0e06 	orr.w	lr, r5, r6
 800090c:	e68d      	b.n	800062a <__aeabi_dmul+0xde>
 800090e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000912:	ea94 0f0c 	teq	r4, ip
 8000916:	bf08      	it	eq
 8000918:	ea95 0f0c 	teqeq	r5, ip
 800091c:	f43f af3b 	beq.w	8000796 <__aeabi_dmul+0x24a>
 8000920:	ea94 0f0c 	teq	r4, ip
 8000924:	d10a      	bne.n	800093c <__aeabi_ddiv+0x19c>
 8000926:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092a:	f47f af34 	bne.w	8000796 <__aeabi_dmul+0x24a>
 800092e:	ea95 0f0c 	teq	r5, ip
 8000932:	f47f af25 	bne.w	8000780 <__aeabi_dmul+0x234>
 8000936:	4610      	mov	r0, r2
 8000938:	4619      	mov	r1, r3
 800093a:	e72c      	b.n	8000796 <__aeabi_dmul+0x24a>
 800093c:	ea95 0f0c 	teq	r5, ip
 8000940:	d106      	bne.n	8000950 <__aeabi_ddiv+0x1b0>
 8000942:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000946:	f43f aefd 	beq.w	8000744 <__aeabi_dmul+0x1f8>
 800094a:	4610      	mov	r0, r2
 800094c:	4619      	mov	r1, r3
 800094e:	e722      	b.n	8000796 <__aeabi_dmul+0x24a>
 8000950:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000954:	bf18      	it	ne
 8000956:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095a:	f47f aec5 	bne.w	80006e8 <__aeabi_dmul+0x19c>
 800095e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000962:	f47f af0d 	bne.w	8000780 <__aeabi_dmul+0x234>
 8000966:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096a:	f47f aeeb 	bne.w	8000744 <__aeabi_dmul+0x1f8>
 800096e:	e712      	b.n	8000796 <__aeabi_dmul+0x24a>

08000970 <__aeabi_d2uiz>:
 8000970:	004a      	lsls	r2, r1, #1
 8000972:	d211      	bcs.n	8000998 <__aeabi_d2uiz+0x28>
 8000974:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000978:	d211      	bcs.n	800099e <__aeabi_d2uiz+0x2e>
 800097a:	d50d      	bpl.n	8000998 <__aeabi_d2uiz+0x28>
 800097c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000980:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000984:	d40e      	bmi.n	80009a4 <__aeabi_d2uiz+0x34>
 8000986:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800098a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800098e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000992:	fa23 f002 	lsr.w	r0, r3, r2
 8000996:	4770      	bx	lr
 8000998:	f04f 0000 	mov.w	r0, #0
 800099c:	4770      	bx	lr
 800099e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009a2:	d102      	bne.n	80009aa <__aeabi_d2uiz+0x3a>
 80009a4:	f04f 30ff 	mov.w	r0, #4294967295
 80009a8:	4770      	bx	lr
 80009aa:	f04f 0000 	mov.w	r0, #0
 80009ae:	4770      	bx	lr

080009b0 <__aeabi_uldivmod>:
 80009b0:	b953      	cbnz	r3, 80009c8 <__aeabi_uldivmod+0x18>
 80009b2:	b94a      	cbnz	r2, 80009c8 <__aeabi_uldivmod+0x18>
 80009b4:	2900      	cmp	r1, #0
 80009b6:	bf08      	it	eq
 80009b8:	2800      	cmpeq	r0, #0
 80009ba:	bf1c      	itt	ne
 80009bc:	f04f 31ff 	movne.w	r1, #4294967295
 80009c0:	f04f 30ff 	movne.w	r0, #4294967295
 80009c4:	f000 b974 	b.w	8000cb0 <__aeabi_idiv0>
 80009c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80009cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009d0:	f000 f806 	bl	80009e0 <__udivmoddi4>
 80009d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009dc:	b004      	add	sp, #16
 80009de:	4770      	bx	lr

080009e0 <__udivmoddi4>:
 80009e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009e4:	9d08      	ldr	r5, [sp, #32]
 80009e6:	4604      	mov	r4, r0
 80009e8:	468e      	mov	lr, r1
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d14d      	bne.n	8000a8a <__udivmoddi4+0xaa>
 80009ee:	428a      	cmp	r2, r1
 80009f0:	4694      	mov	ip, r2
 80009f2:	d969      	bls.n	8000ac8 <__udivmoddi4+0xe8>
 80009f4:	fab2 f282 	clz	r2, r2
 80009f8:	b152      	cbz	r2, 8000a10 <__udivmoddi4+0x30>
 80009fa:	fa01 f302 	lsl.w	r3, r1, r2
 80009fe:	f1c2 0120 	rsb	r1, r2, #32
 8000a02:	fa20 f101 	lsr.w	r1, r0, r1
 8000a06:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a0a:	ea41 0e03 	orr.w	lr, r1, r3
 8000a0e:	4094      	lsls	r4, r2
 8000a10:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a14:	0c21      	lsrs	r1, r4, #16
 8000a16:	fbbe f6f8 	udiv	r6, lr, r8
 8000a1a:	fa1f f78c 	uxth.w	r7, ip
 8000a1e:	fb08 e316 	mls	r3, r8, r6, lr
 8000a22:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000a26:	fb06 f107 	mul.w	r1, r6, r7
 8000a2a:	4299      	cmp	r1, r3
 8000a2c:	d90a      	bls.n	8000a44 <__udivmoddi4+0x64>
 8000a2e:	eb1c 0303 	adds.w	r3, ip, r3
 8000a32:	f106 30ff 	add.w	r0, r6, #4294967295
 8000a36:	f080 811f 	bcs.w	8000c78 <__udivmoddi4+0x298>
 8000a3a:	4299      	cmp	r1, r3
 8000a3c:	f240 811c 	bls.w	8000c78 <__udivmoddi4+0x298>
 8000a40:	3e02      	subs	r6, #2
 8000a42:	4463      	add	r3, ip
 8000a44:	1a5b      	subs	r3, r3, r1
 8000a46:	b2a4      	uxth	r4, r4
 8000a48:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a4c:	fb08 3310 	mls	r3, r8, r0, r3
 8000a50:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a54:	fb00 f707 	mul.w	r7, r0, r7
 8000a58:	42a7      	cmp	r7, r4
 8000a5a:	d90a      	bls.n	8000a72 <__udivmoddi4+0x92>
 8000a5c:	eb1c 0404 	adds.w	r4, ip, r4
 8000a60:	f100 33ff 	add.w	r3, r0, #4294967295
 8000a64:	f080 810a 	bcs.w	8000c7c <__udivmoddi4+0x29c>
 8000a68:	42a7      	cmp	r7, r4
 8000a6a:	f240 8107 	bls.w	8000c7c <__udivmoddi4+0x29c>
 8000a6e:	4464      	add	r4, ip
 8000a70:	3802      	subs	r0, #2
 8000a72:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000a76:	1be4      	subs	r4, r4, r7
 8000a78:	2600      	movs	r6, #0
 8000a7a:	b11d      	cbz	r5, 8000a84 <__udivmoddi4+0xa4>
 8000a7c:	40d4      	lsrs	r4, r2
 8000a7e:	2300      	movs	r3, #0
 8000a80:	e9c5 4300 	strd	r4, r3, [r5]
 8000a84:	4631      	mov	r1, r6
 8000a86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a8a:	428b      	cmp	r3, r1
 8000a8c:	d909      	bls.n	8000aa2 <__udivmoddi4+0xc2>
 8000a8e:	2d00      	cmp	r5, #0
 8000a90:	f000 80ef 	beq.w	8000c72 <__udivmoddi4+0x292>
 8000a94:	2600      	movs	r6, #0
 8000a96:	e9c5 0100 	strd	r0, r1, [r5]
 8000a9a:	4630      	mov	r0, r6
 8000a9c:	4631      	mov	r1, r6
 8000a9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000aa2:	fab3 f683 	clz	r6, r3
 8000aa6:	2e00      	cmp	r6, #0
 8000aa8:	d14a      	bne.n	8000b40 <__udivmoddi4+0x160>
 8000aaa:	428b      	cmp	r3, r1
 8000aac:	d302      	bcc.n	8000ab4 <__udivmoddi4+0xd4>
 8000aae:	4282      	cmp	r2, r0
 8000ab0:	f200 80f9 	bhi.w	8000ca6 <__udivmoddi4+0x2c6>
 8000ab4:	1a84      	subs	r4, r0, r2
 8000ab6:	eb61 0303 	sbc.w	r3, r1, r3
 8000aba:	2001      	movs	r0, #1
 8000abc:	469e      	mov	lr, r3
 8000abe:	2d00      	cmp	r5, #0
 8000ac0:	d0e0      	beq.n	8000a84 <__udivmoddi4+0xa4>
 8000ac2:	e9c5 4e00 	strd	r4, lr, [r5]
 8000ac6:	e7dd      	b.n	8000a84 <__udivmoddi4+0xa4>
 8000ac8:	b902      	cbnz	r2, 8000acc <__udivmoddi4+0xec>
 8000aca:	deff      	udf	#255	; 0xff
 8000acc:	fab2 f282 	clz	r2, r2
 8000ad0:	2a00      	cmp	r2, #0
 8000ad2:	f040 8092 	bne.w	8000bfa <__udivmoddi4+0x21a>
 8000ad6:	eba1 010c 	sub.w	r1, r1, ip
 8000ada:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ade:	fa1f fe8c 	uxth.w	lr, ip
 8000ae2:	2601      	movs	r6, #1
 8000ae4:	0c20      	lsrs	r0, r4, #16
 8000ae6:	fbb1 f3f7 	udiv	r3, r1, r7
 8000aea:	fb07 1113 	mls	r1, r7, r3, r1
 8000aee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000af2:	fb0e f003 	mul.w	r0, lr, r3
 8000af6:	4288      	cmp	r0, r1
 8000af8:	d908      	bls.n	8000b0c <__udivmoddi4+0x12c>
 8000afa:	eb1c 0101 	adds.w	r1, ip, r1
 8000afe:	f103 38ff 	add.w	r8, r3, #4294967295
 8000b02:	d202      	bcs.n	8000b0a <__udivmoddi4+0x12a>
 8000b04:	4288      	cmp	r0, r1
 8000b06:	f200 80cb 	bhi.w	8000ca0 <__udivmoddi4+0x2c0>
 8000b0a:	4643      	mov	r3, r8
 8000b0c:	1a09      	subs	r1, r1, r0
 8000b0e:	b2a4      	uxth	r4, r4
 8000b10:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b14:	fb07 1110 	mls	r1, r7, r0, r1
 8000b18:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000b1c:	fb0e fe00 	mul.w	lr, lr, r0
 8000b20:	45a6      	cmp	lr, r4
 8000b22:	d908      	bls.n	8000b36 <__udivmoddi4+0x156>
 8000b24:	eb1c 0404 	adds.w	r4, ip, r4
 8000b28:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b2c:	d202      	bcs.n	8000b34 <__udivmoddi4+0x154>
 8000b2e:	45a6      	cmp	lr, r4
 8000b30:	f200 80bb 	bhi.w	8000caa <__udivmoddi4+0x2ca>
 8000b34:	4608      	mov	r0, r1
 8000b36:	eba4 040e 	sub.w	r4, r4, lr
 8000b3a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000b3e:	e79c      	b.n	8000a7a <__udivmoddi4+0x9a>
 8000b40:	f1c6 0720 	rsb	r7, r6, #32
 8000b44:	40b3      	lsls	r3, r6
 8000b46:	fa22 fc07 	lsr.w	ip, r2, r7
 8000b4a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000b4e:	fa20 f407 	lsr.w	r4, r0, r7
 8000b52:	fa01 f306 	lsl.w	r3, r1, r6
 8000b56:	431c      	orrs	r4, r3
 8000b58:	40f9      	lsrs	r1, r7
 8000b5a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000b5e:	fa00 f306 	lsl.w	r3, r0, r6
 8000b62:	fbb1 f8f9 	udiv	r8, r1, r9
 8000b66:	0c20      	lsrs	r0, r4, #16
 8000b68:	fa1f fe8c 	uxth.w	lr, ip
 8000b6c:	fb09 1118 	mls	r1, r9, r8, r1
 8000b70:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b74:	fb08 f00e 	mul.w	r0, r8, lr
 8000b78:	4288      	cmp	r0, r1
 8000b7a:	fa02 f206 	lsl.w	r2, r2, r6
 8000b7e:	d90b      	bls.n	8000b98 <__udivmoddi4+0x1b8>
 8000b80:	eb1c 0101 	adds.w	r1, ip, r1
 8000b84:	f108 3aff 	add.w	sl, r8, #4294967295
 8000b88:	f080 8088 	bcs.w	8000c9c <__udivmoddi4+0x2bc>
 8000b8c:	4288      	cmp	r0, r1
 8000b8e:	f240 8085 	bls.w	8000c9c <__udivmoddi4+0x2bc>
 8000b92:	f1a8 0802 	sub.w	r8, r8, #2
 8000b96:	4461      	add	r1, ip
 8000b98:	1a09      	subs	r1, r1, r0
 8000b9a:	b2a4      	uxth	r4, r4
 8000b9c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ba0:	fb09 1110 	mls	r1, r9, r0, r1
 8000ba4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000ba8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000bac:	458e      	cmp	lr, r1
 8000bae:	d908      	bls.n	8000bc2 <__udivmoddi4+0x1e2>
 8000bb0:	eb1c 0101 	adds.w	r1, ip, r1
 8000bb4:	f100 34ff 	add.w	r4, r0, #4294967295
 8000bb8:	d26c      	bcs.n	8000c94 <__udivmoddi4+0x2b4>
 8000bba:	458e      	cmp	lr, r1
 8000bbc:	d96a      	bls.n	8000c94 <__udivmoddi4+0x2b4>
 8000bbe:	3802      	subs	r0, #2
 8000bc0:	4461      	add	r1, ip
 8000bc2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000bc6:	fba0 9402 	umull	r9, r4, r0, r2
 8000bca:	eba1 010e 	sub.w	r1, r1, lr
 8000bce:	42a1      	cmp	r1, r4
 8000bd0:	46c8      	mov	r8, r9
 8000bd2:	46a6      	mov	lr, r4
 8000bd4:	d356      	bcc.n	8000c84 <__udivmoddi4+0x2a4>
 8000bd6:	d053      	beq.n	8000c80 <__udivmoddi4+0x2a0>
 8000bd8:	b15d      	cbz	r5, 8000bf2 <__udivmoddi4+0x212>
 8000bda:	ebb3 0208 	subs.w	r2, r3, r8
 8000bde:	eb61 010e 	sbc.w	r1, r1, lr
 8000be2:	fa01 f707 	lsl.w	r7, r1, r7
 8000be6:	fa22 f306 	lsr.w	r3, r2, r6
 8000bea:	40f1      	lsrs	r1, r6
 8000bec:	431f      	orrs	r7, r3
 8000bee:	e9c5 7100 	strd	r7, r1, [r5]
 8000bf2:	2600      	movs	r6, #0
 8000bf4:	4631      	mov	r1, r6
 8000bf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bfa:	f1c2 0320 	rsb	r3, r2, #32
 8000bfe:	40d8      	lsrs	r0, r3
 8000c00:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c04:	fa21 f303 	lsr.w	r3, r1, r3
 8000c08:	4091      	lsls	r1, r2
 8000c0a:	4301      	orrs	r1, r0
 8000c0c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c10:	fa1f fe8c 	uxth.w	lr, ip
 8000c14:	fbb3 f0f7 	udiv	r0, r3, r7
 8000c18:	fb07 3610 	mls	r6, r7, r0, r3
 8000c1c:	0c0b      	lsrs	r3, r1, #16
 8000c1e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000c22:	fb00 f60e 	mul.w	r6, r0, lr
 8000c26:	429e      	cmp	r6, r3
 8000c28:	fa04 f402 	lsl.w	r4, r4, r2
 8000c2c:	d908      	bls.n	8000c40 <__udivmoddi4+0x260>
 8000c2e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c32:	f100 38ff 	add.w	r8, r0, #4294967295
 8000c36:	d22f      	bcs.n	8000c98 <__udivmoddi4+0x2b8>
 8000c38:	429e      	cmp	r6, r3
 8000c3a:	d92d      	bls.n	8000c98 <__udivmoddi4+0x2b8>
 8000c3c:	3802      	subs	r0, #2
 8000c3e:	4463      	add	r3, ip
 8000c40:	1b9b      	subs	r3, r3, r6
 8000c42:	b289      	uxth	r1, r1
 8000c44:	fbb3 f6f7 	udiv	r6, r3, r7
 8000c48:	fb07 3316 	mls	r3, r7, r6, r3
 8000c4c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c50:	fb06 f30e 	mul.w	r3, r6, lr
 8000c54:	428b      	cmp	r3, r1
 8000c56:	d908      	bls.n	8000c6a <__udivmoddi4+0x28a>
 8000c58:	eb1c 0101 	adds.w	r1, ip, r1
 8000c5c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000c60:	d216      	bcs.n	8000c90 <__udivmoddi4+0x2b0>
 8000c62:	428b      	cmp	r3, r1
 8000c64:	d914      	bls.n	8000c90 <__udivmoddi4+0x2b0>
 8000c66:	3e02      	subs	r6, #2
 8000c68:	4461      	add	r1, ip
 8000c6a:	1ac9      	subs	r1, r1, r3
 8000c6c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000c70:	e738      	b.n	8000ae4 <__udivmoddi4+0x104>
 8000c72:	462e      	mov	r6, r5
 8000c74:	4628      	mov	r0, r5
 8000c76:	e705      	b.n	8000a84 <__udivmoddi4+0xa4>
 8000c78:	4606      	mov	r6, r0
 8000c7a:	e6e3      	b.n	8000a44 <__udivmoddi4+0x64>
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	e6f8      	b.n	8000a72 <__udivmoddi4+0x92>
 8000c80:	454b      	cmp	r3, r9
 8000c82:	d2a9      	bcs.n	8000bd8 <__udivmoddi4+0x1f8>
 8000c84:	ebb9 0802 	subs.w	r8, r9, r2
 8000c88:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000c8c:	3801      	subs	r0, #1
 8000c8e:	e7a3      	b.n	8000bd8 <__udivmoddi4+0x1f8>
 8000c90:	4646      	mov	r6, r8
 8000c92:	e7ea      	b.n	8000c6a <__udivmoddi4+0x28a>
 8000c94:	4620      	mov	r0, r4
 8000c96:	e794      	b.n	8000bc2 <__udivmoddi4+0x1e2>
 8000c98:	4640      	mov	r0, r8
 8000c9a:	e7d1      	b.n	8000c40 <__udivmoddi4+0x260>
 8000c9c:	46d0      	mov	r8, sl
 8000c9e:	e77b      	b.n	8000b98 <__udivmoddi4+0x1b8>
 8000ca0:	3b02      	subs	r3, #2
 8000ca2:	4461      	add	r1, ip
 8000ca4:	e732      	b.n	8000b0c <__udivmoddi4+0x12c>
 8000ca6:	4630      	mov	r0, r6
 8000ca8:	e709      	b.n	8000abe <__udivmoddi4+0xde>
 8000caa:	4464      	add	r4, ip
 8000cac:	3802      	subs	r0, #2
 8000cae:	e742      	b.n	8000b36 <__udivmoddi4+0x156>

08000cb0 <__aeabi_idiv0>:
 8000cb0:	4770      	bx	lr
 8000cb2:	bf00      	nop

08000cb4 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b086      	sub	sp, #24
 8000cb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000cba:	463b      	mov	r3, r7
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	601a      	str	r2, [r3, #0]
 8000cc0:	605a      	str	r2, [r3, #4]
 8000cc2:	609a      	str	r2, [r3, #8]
 8000cc4:	60da      	str	r2, [r3, #12]
 8000cc6:	611a      	str	r2, [r3, #16]
 8000cc8:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000cca:	4b29      	ldr	r3, [pc, #164]	; (8000d70 <MX_ADC1_Init+0xbc>)
 8000ccc:	4a29      	ldr	r2, [pc, #164]	; (8000d74 <MX_ADC1_Init+0xc0>)
 8000cce:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000cd0:	4b27      	ldr	r3, [pc, #156]	; (8000d70 <MX_ADC1_Init+0xbc>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000cd6:	4b26      	ldr	r3, [pc, #152]	; (8000d70 <MX_ADC1_Init+0xbc>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000cdc:	4b24      	ldr	r3, [pc, #144]	; (8000d70 <MX_ADC1_Init+0xbc>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000ce2:	4b23      	ldr	r3, [pc, #140]	; (8000d70 <MX_ADC1_Init+0xbc>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ce8:	4b21      	ldr	r3, [pc, #132]	; (8000d70 <MX_ADC1_Init+0xbc>)
 8000cea:	2204      	movs	r2, #4
 8000cec:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000cee:	4b20      	ldr	r3, [pc, #128]	; (8000d70 <MX_ADC1_Init+0xbc>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000cf4:	4b1e      	ldr	r3, [pc, #120]	; (8000d70 <MX_ADC1_Init+0xbc>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000cfa:	4b1d      	ldr	r3, [pc, #116]	; (8000d70 <MX_ADC1_Init+0xbc>)
 8000cfc:	2201      	movs	r2, #1
 8000cfe:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000d00:	4b1b      	ldr	r3, [pc, #108]	; (8000d70 <MX_ADC1_Init+0xbc>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d08:	4b19      	ldr	r3, [pc, #100]	; (8000d70 <MX_ADC1_Init+0xbc>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000d0e:	4b18      	ldr	r3, [pc, #96]	; (8000d70 <MX_ADC1_Init+0xbc>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000d14:	4b16      	ldr	r3, [pc, #88]	; (8000d70 <MX_ADC1_Init+0xbc>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000d1c:	4b14      	ldr	r3, [pc, #80]	; (8000d70 <MX_ADC1_Init+0xbc>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000d22:	4b13      	ldr	r3, [pc, #76]	; (8000d70 <MX_ADC1_Init+0xbc>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000d2a:	4811      	ldr	r0, [pc, #68]	; (8000d70 <MX_ADC1_Init+0xbc>)
 8000d2c:	f001 fa94 	bl	8002258 <HAL_ADC_Init>
 8000d30:	4603      	mov	r3, r0
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d001      	beq.n	8000d3a <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 8000d36:	f000 fc87 	bl	8001648 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000d3a:	4b0f      	ldr	r3, [pc, #60]	; (8000d78 <MX_ADC1_Init+0xc4>)
 8000d3c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000d3e:	2306      	movs	r3, #6
 8000d40:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000d42:	2300      	movs	r3, #0
 8000d44:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000d46:	237f      	movs	r3, #127	; 0x7f
 8000d48:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000d4a:	2304      	movs	r3, #4
 8000d4c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d52:	463b      	mov	r3, r7
 8000d54:	4619      	mov	r1, r3
 8000d56:	4806      	ldr	r0, [pc, #24]	; (8000d70 <MX_ADC1_Init+0xbc>)
 8000d58:	f001 fcca 	bl	80026f0 <HAL_ADC_ConfigChannel>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d001      	beq.n	8000d66 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000d62:	f000 fc71 	bl	8001648 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000d66:	bf00      	nop
 8000d68:	3718      	adds	r7, #24
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	2000002c 	.word	0x2000002c
 8000d74:	50040000 	.word	0x50040000
 8000d78:	04300002 	.word	0x04300002

08000d7c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b0a4      	sub	sp, #144	; 0x90
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d84:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000d88:	2200      	movs	r2, #0
 8000d8a:	601a      	str	r2, [r3, #0]
 8000d8c:	605a      	str	r2, [r3, #4]
 8000d8e:	609a      	str	r2, [r3, #8]
 8000d90:	60da      	str	r2, [r3, #12]
 8000d92:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d94:	f107 0314 	add.w	r3, r7, #20
 8000d98:	2268      	movs	r2, #104	; 0x68
 8000d9a:	2100      	movs	r1, #0
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	f006 fd19 	bl	80077d4 <memset>
  if(adcHandle->Instance==ADC1)
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	4a26      	ldr	r2, [pc, #152]	; (8000e40 <HAL_ADC_MspInit+0xc4>)
 8000da8:	4293      	cmp	r3, r2
 8000daa:	d144      	bne.n	8000e36 <HAL_ADC_MspInit+0xba>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000dac:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000db0:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000db2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000db6:	673b      	str	r3, [r7, #112]	; 0x70
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8000db8:	2302      	movs	r3, #2
 8000dba:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000dbc:	2301      	movs	r3, #1
 8000dbe:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8000dc0:	2308      	movs	r3, #8
 8000dc2:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000dc4:	2307      	movs	r3, #7
 8000dc6:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000dc8:	2302      	movs	r3, #2
 8000dca:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000dcc:	2302      	movs	r3, #2
 8000dce:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000dd0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000dd4:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000dd6:	f107 0314 	add.w	r3, r7, #20
 8000dda:	4618      	mov	r0, r3
 8000ddc:	f003 fae0 	bl	80043a0 <HAL_RCCEx_PeriphCLKConfig>
 8000de0:	4603      	mov	r3, r0
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d001      	beq.n	8000dea <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 8000de6:	f000 fc2f 	bl	8001648 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000dea:	4b16      	ldr	r3, [pc, #88]	; (8000e44 <HAL_ADC_MspInit+0xc8>)
 8000dec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dee:	4a15      	ldr	r2, [pc, #84]	; (8000e44 <HAL_ADC_MspInit+0xc8>)
 8000df0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000df4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000df6:	4b13      	ldr	r3, [pc, #76]	; (8000e44 <HAL_ADC_MspInit+0xc8>)
 8000df8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dfa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000dfe:	613b      	str	r3, [r7, #16]
 8000e00:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e02:	4b10      	ldr	r3, [pc, #64]	; (8000e44 <HAL_ADC_MspInit+0xc8>)
 8000e04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e06:	4a0f      	ldr	r2, [pc, #60]	; (8000e44 <HAL_ADC_MspInit+0xc8>)
 8000e08:	f043 0304 	orr.w	r3, r3, #4
 8000e0c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e0e:	4b0d      	ldr	r3, [pc, #52]	; (8000e44 <HAL_ADC_MspInit+0xc8>)
 8000e10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e12:	f003 0304 	and.w	r3, r3, #4
 8000e16:	60fb      	str	r3, [r7, #12]
 8000e18:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000e1a:	2301      	movs	r3, #1
 8000e1c:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000e1e:	230b      	movs	r3, #11
 8000e20:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e24:	2300      	movs	r3, #0
 8000e26:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e2a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000e2e:	4619      	mov	r1, r3
 8000e30:	4805      	ldr	r0, [pc, #20]	; (8000e48 <HAL_ADC_MspInit+0xcc>)
 8000e32:	f002 fa6f 	bl	8003314 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000e36:	bf00      	nop
 8000e38:	3790      	adds	r7, #144	; 0x90
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	50040000 	.word	0x50040000
 8000e44:	40021000 	.word	0x40021000
 8000e48:	48000800 	.word	0x48000800

08000e4c <decode_pc_command>:
extern led this_led;
extern potenciometro pot;
uint8_t counter;

int decode_pc_command(device *dev, uint8_t command_1, uint8_t command_2)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b082      	sub	sp, #8
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
 8000e54:	460b      	mov	r3, r1
 8000e56:	70fb      	strb	r3, [r7, #3]
 8000e58:	4613      	mov	r3, r2
 8000e5a:	70bb      	strb	r3, [r7, #2]

	if(dev->modo==SLAVE)
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	781b      	ldrb	r3, [r3, #0]
 8000e60:	2b01      	cmp	r3, #1
 8000e62:	d102      	bne.n	8000e6a <decode_pc_command+0x1e>
	{
		return -1;
 8000e64:	f04f 33ff 	mov.w	r3, #4294967295
 8000e68:	e009      	b.n	8000e7e <decode_pc_command+0x32>
	}
	else
	{
		send(&t_r_red, &command_1, &command_2);
 8000e6a:	1cba      	adds	r2, r7, #2
 8000e6c:	1cfb      	adds	r3, r7, #3
 8000e6e:	4619      	mov	r1, r3
 8000e70:	4805      	ldr	r0, [pc, #20]	; (8000e88 <decode_pc_command+0x3c>)
 8000e72:	f000 fe4c 	bl	8001b0e <send>
 		HAL_TIM_Base_Start_IT(&htim2);
 8000e76:	4805      	ldr	r0, [pc, #20]	; (8000e8c <decode_pc_command+0x40>)
 8000e78:	f003 fe48 	bl	8004b0c <HAL_TIM_Base_Start_IT>
		return 0;
 8000e7c:	2300      	movs	r3, #0
	}
}
 8000e7e:	4618      	mov	r0, r3
 8000e80:	3708      	adds	r7, #8
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	2000010c 	.word	0x2000010c
 8000e8c:	20000230 	.word	0x20000230

08000e90 <decode_red_command>:

int decode_red_command(device *dev, uint8_t red_command_1, uint8_t red_command_2)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b086      	sub	sp, #24
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
 8000e98:	460b      	mov	r3, r1
 8000e9a:	70fb      	strb	r3, [r7, #3]
 8000e9c:	4613      	mov	r3, r2
 8000e9e:	70bb      	strb	r3, [r7, #2]
	if(dev->modo==MASTER)
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	781b      	ldrb	r3, [r3, #0]
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d10e      	bne.n	8000ec6 <decode_red_command+0x36>
	{
		HAL_UART_Transmit(&huart1, &red_command_1, 1, 1000);
 8000ea8:	1cf9      	adds	r1, r7, #3
 8000eaa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000eae:	2201      	movs	r2, #1
 8000eb0:	482a      	ldr	r0, [pc, #168]	; (8000f5c <decode_red_command+0xcc>)
 8000eb2:	f005 f8fd 	bl	80060b0 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart1, &red_command_2, 1, 1000);
 8000eb6:	1cb9      	adds	r1, r7, #2
 8000eb8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ebc:	2201      	movs	r2, #1
 8000ebe:	4827      	ldr	r0, [pc, #156]	; (8000f5c <decode_red_command+0xcc>)
 8000ec0:	f005 f8f6 	bl	80060b0 <HAL_UART_Transmit>
 8000ec4:	e046      	b.n	8000f54 <decode_red_command+0xc4>
	}
	else
	{
		// chequear si es el ID correcto
		if( (0b00001111 & red_command_1) == dev->id )
 8000ec6:	78fb      	ldrb	r3, [r7, #3]
 8000ec8:	f003 020f 	and.w	r2, r3, #15
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	685b      	ldr	r3, [r3, #4]
 8000ed0:	429a      	cmp	r2, r3
 8000ed2:	d13d      	bne.n	8000f50 <decode_red_command+0xc0>
		{
			if(red_command_1>>7 == 0 )
 8000ed4:	78fb      	ldrb	r3, [r7, #3]
 8000ed6:	b25b      	sxtb	r3, r3
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	db13      	blt.n	8000f04 <decode_red_command+0x74>
			{
				potenciometro_init(&pot, &hadc1);	// solo funciona si se realiza la inicializacion siempre, ni idea
 8000edc:	4920      	ldr	r1, [pc, #128]	; (8000f60 <decode_red_command+0xd0>)
 8000ede:	4821      	ldr	r0, [pc, #132]	; (8000f64 <decode_red_command+0xd4>)
 8000ee0:	f000 fbb7 	bl	8001652 <potenciometro_init>
				uint8_t adc_val = potenciometro_get_value(&pot);
 8000ee4:	481f      	ldr	r0, [pc, #124]	; (8000f64 <decode_red_command+0xd4>)
 8000ee6:	f000 fbc9 	bl	800167c <potenciometro_get_value>
 8000eea:	4603      	mov	r3, r0
 8000eec:	75fb      	strb	r3, [r7, #23]
				int cero = 0;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	613b      	str	r3, [r7, #16]
				send(&t_r_red, &cero, &adc_val); //HAL_UART_Transmit(&huart1, &adc_val, 1, 1000);
 8000ef2:	f107 0217 	add.w	r2, r7, #23
 8000ef6:	f107 0310 	add.w	r3, r7, #16
 8000efa:	4619      	mov	r1, r3
 8000efc:	481a      	ldr	r0, [pc, #104]	; (8000f68 <decode_red_command+0xd8>)
 8000efe:	f000 fe06 	bl	8001b0e <send>
 8000f02:	e027      	b.n	8000f54 <decode_red_command+0xc4>
			}
			else
			{
				uint16_t dc_pwm = (float)red_command_2/127 * 1960;
 8000f04:	78bb      	ldrb	r3, [r7, #2]
 8000f06:	ee07 3a90 	vmov	s15, r3
 8000f0a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000f0e:	eddf 6a17 	vldr	s13, [pc, #92]	; 8000f6c <decode_red_command+0xdc>
 8000f12:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f16:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8000f70 <decode_red_command+0xe0>
 8000f1a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f1e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000f22:	ee17 3a90 	vmov	r3, s15
 8000f26:	b29b      	uxth	r3, r3
 8000f28:	81fb      	strh	r3, [r7, #14]
				led_set(&this_led, dc_pwm);
 8000f2a:	89fb      	ldrh	r3, [r7, #14]
 8000f2c:	ee07 3a90 	vmov	s15, r3
 8000f30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000f34:	eeb0 0a67 	vmov.f32	s0, s15
 8000f38:	480e      	ldr	r0, [pc, #56]	; (8000f74 <decode_red_command+0xe4>)
 8000f3a:	f000 f9a8 	bl	800128e <led_set>
				HAL_UART_Transmit(&huart1, &dc_pwm, 1, 1000);
 8000f3e:	f107 010e 	add.w	r1, r7, #14
 8000f42:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f46:	2201      	movs	r2, #1
 8000f48:	4804      	ldr	r0, [pc, #16]	; (8000f5c <decode_red_command+0xcc>)
 8000f4a:	f005 f8b1 	bl	80060b0 <HAL_UART_Transmit>
 8000f4e:	e001      	b.n	8000f54 <decode_red_command+0xc4>
			}
		}
		else
		{
			return 0;
 8000f50:	2300      	movs	r3, #0
 8000f52:	e7ff      	b.n	8000f54 <decode_red_command+0xc4>
		}
	}
}
 8000f54:	4618      	mov	r0, r3
 8000f56:	3718      	adds	r7, #24
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd80      	pop	{r7, pc}
 8000f5c:	2000027c 	.word	0x2000027c
 8000f60:	2000002c 	.word	0x2000002c
 8000f64:	200000a0 	.word	0x200000a0
 8000f68:	2000010c 	.word	0x2000010c
 8000f6c:	42fe0000 	.word	0x42fe0000
 8000f70:	44f50000 	.word	0x44f50000
 8000f74:	20000194 	.word	0x20000194

08000f78 <device_if_init>:

#include <stdlib.h>
#include "device.h"

void device_if_init( device *device_gc, int set_id)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	b083      	sub	sp, #12
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
 8000f80:	6039      	str	r1, [r7, #0]
	if(set_id==0)
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d103      	bne.n	8000f90 <device_if_init+0x18>
	{
		device_gc->modo = MASTER;
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	701a      	strb	r2, [r3, #0]
 8000f8e:	e002      	b.n	8000f96 <device_if_init+0x1e>
	}
	else
	{
		device_gc->modo = SLAVE;
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	2201      	movs	r2, #1
 8000f94:	701a      	strb	r2, [r3, #0]
	}
	device_gc->id = set_id;
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	683a      	ldr	r2, [r7, #0]
 8000f9a:	605a      	str	r2, [r3, #4]
}
 8000f9c:	bf00      	nop
 8000f9e:	370c      	adds	r7, #12
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa6:	4770      	bx	lr

08000fa8 <dip_switch_ports_init>:
#include "dip_switch.h"
#include "gpio_if.h"


void dip_switch_ports_init(dip_switch *dip, t_gpio_if *gpio_1, t_gpio_if *gpio_2, t_gpio_if *gpio_3, t_gpio_if *gpio_4)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	b085      	sub	sp, #20
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	60f8      	str	r0, [r7, #12]
 8000fb0:	60b9      	str	r1, [r7, #8]
 8000fb2:	607a      	str	r2, [r7, #4]
 8000fb4:	603b      	str	r3, [r7, #0]
	dip->sw_1 = gpio_1;
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	68ba      	ldr	r2, [r7, #8]
 8000fba:	601a      	str	r2, [r3, #0]
	dip->sw_2 = gpio_2;
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	687a      	ldr	r2, [r7, #4]
 8000fc0:	605a      	str	r2, [r3, #4]
	dip->sw_3 = gpio_3;
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	683a      	ldr	r2, [r7, #0]
 8000fc6:	609a      	str	r2, [r3, #8]
	dip->sw_4 = gpio_4;
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	69ba      	ldr	r2, [r7, #24]
 8000fcc:	60da      	str	r2, [r3, #12]
}
 8000fce:	bf00      	nop
 8000fd0:	3714      	adds	r7, #20
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd8:	4770      	bx	lr

08000fda <get_dip_value>:

int get_dip_value(dip_switch *dip)
{
 8000fda:	b580      	push	{r7, lr}
 8000fdc:	b084      	sub	sp, #16
 8000fde:	af00      	add	r7, sp, #0
 8000fe0:	6078      	str	r0, [r7, #4]
	int val=0;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	60fb      	str	r3, [r7, #12]
	if(gpio_if_get(dip->sw_1)==GPIO_IF_SET)
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	4618      	mov	r0, r3
 8000fec:	f000 f911 	bl	8001212 <gpio_if_get>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b01      	cmp	r3, #1
 8000ff4:	d102      	bne.n	8000ffc <get_dip_value+0x22>
	{
		val = val + 1;
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	3301      	adds	r3, #1
 8000ffa:	60fb      	str	r3, [r7, #12]
	}
	if(gpio_if_get(dip->sw_2)==GPIO_IF_SET)
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	685b      	ldr	r3, [r3, #4]
 8001000:	4618      	mov	r0, r3
 8001002:	f000 f906 	bl	8001212 <gpio_if_get>
 8001006:	4603      	mov	r3, r0
 8001008:	2b01      	cmp	r3, #1
 800100a:	d102      	bne.n	8001012 <get_dip_value+0x38>
	{
		val = val + 2;
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	3302      	adds	r3, #2
 8001010:	60fb      	str	r3, [r7, #12]
	}
	if(gpio_if_get(dip->sw_3)==GPIO_IF_SET)
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	689b      	ldr	r3, [r3, #8]
 8001016:	4618      	mov	r0, r3
 8001018:	f000 f8fb 	bl	8001212 <gpio_if_get>
 800101c:	4603      	mov	r3, r0
 800101e:	2b01      	cmp	r3, #1
 8001020:	d102      	bne.n	8001028 <get_dip_value+0x4e>
	{
		val = val + 4;
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	3304      	adds	r3, #4
 8001026:	60fb      	str	r3, [r7, #12]
	}
	if(gpio_if_get(dip->sw_4)==GPIO_IF_SET)
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	68db      	ldr	r3, [r3, #12]
 800102c:	4618      	mov	r0, r3
 800102e:	f000 f8f0 	bl	8001212 <gpio_if_get>
 8001032:	4603      	mov	r3, r0
 8001034:	2b01      	cmp	r3, #1
 8001036:	d102      	bne.n	800103e <get_dip_value+0x64>
	{
		val = val + 8;
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	3308      	adds	r3, #8
 800103c:	60fb      	str	r3, [r7, #12]
	}
	return val;
 800103e:	68fb      	ldr	r3, [r7, #12]
}
 8001040:	4618      	mov	r0, r3
 8001042:	3710      	adds	r7, #16
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}

08001048 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b08a      	sub	sp, #40	; 0x28
 800104c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800104e:	f107 0314 	add.w	r3, r7, #20
 8001052:	2200      	movs	r2, #0
 8001054:	601a      	str	r2, [r3, #0]
 8001056:	605a      	str	r2, [r3, #4]
 8001058:	609a      	str	r2, [r3, #8]
 800105a:	60da      	str	r2, [r3, #12]
 800105c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800105e:	4b2d      	ldr	r3, [pc, #180]	; (8001114 <MX_GPIO_Init+0xcc>)
 8001060:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001062:	4a2c      	ldr	r2, [pc, #176]	; (8001114 <MX_GPIO_Init+0xcc>)
 8001064:	f043 0304 	orr.w	r3, r3, #4
 8001068:	64d3      	str	r3, [r2, #76]	; 0x4c
 800106a:	4b2a      	ldr	r3, [pc, #168]	; (8001114 <MX_GPIO_Init+0xcc>)
 800106c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800106e:	f003 0304 	and.w	r3, r3, #4
 8001072:	613b      	str	r3, [r7, #16]
 8001074:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001076:	4b27      	ldr	r3, [pc, #156]	; (8001114 <MX_GPIO_Init+0xcc>)
 8001078:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800107a:	4a26      	ldr	r2, [pc, #152]	; (8001114 <MX_GPIO_Init+0xcc>)
 800107c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001080:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001082:	4b24      	ldr	r3, [pc, #144]	; (8001114 <MX_GPIO_Init+0xcc>)
 8001084:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001086:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800108a:	60fb      	str	r3, [r7, #12]
 800108c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800108e:	4b21      	ldr	r3, [pc, #132]	; (8001114 <MX_GPIO_Init+0xcc>)
 8001090:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001092:	4a20      	ldr	r2, [pc, #128]	; (8001114 <MX_GPIO_Init+0xcc>)
 8001094:	f043 0301 	orr.w	r3, r3, #1
 8001098:	64d3      	str	r3, [r2, #76]	; 0x4c
 800109a:	4b1e      	ldr	r3, [pc, #120]	; (8001114 <MX_GPIO_Init+0xcc>)
 800109c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800109e:	f003 0301 	and.w	r3, r3, #1
 80010a2:	60bb      	str	r3, [r7, #8]
 80010a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010a6:	4b1b      	ldr	r3, [pc, #108]	; (8001114 <MX_GPIO_Init+0xcc>)
 80010a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010aa:	4a1a      	ldr	r2, [pc, #104]	; (8001114 <MX_GPIO_Init+0xcc>)
 80010ac:	f043 0302 	orr.w	r3, r3, #2
 80010b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010b2:	4b18      	ldr	r3, [pc, #96]	; (8001114 <MX_GPIO_Init+0xcc>)
 80010b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010b6:	f003 0302 	and.w	r3, r3, #2
 80010ba:	607b      	str	r3, [r7, #4]
 80010bc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80010be:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80010c4:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80010c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ca:	2300      	movs	r3, #0
 80010cc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80010ce:	f107 0314 	add.w	r3, r7, #20
 80010d2:	4619      	mov	r1, r3
 80010d4:	4810      	ldr	r0, [pc, #64]	; (8001118 <MX_GPIO_Init+0xd0>)
 80010d6:	f002 f91d 	bl	8003314 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = SW4_Pin|SW3_Pin|SW2_Pin;
 80010da:	23e0      	movs	r3, #224	; 0xe0
 80010dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010de:	2300      	movs	r3, #0
 80010e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e2:	2300      	movs	r3, #0
 80010e4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010e6:	f107 0314 	add.w	r3, r7, #20
 80010ea:	4619      	mov	r1, r3
 80010ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010f0:	f002 f910 	bl	8003314 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SW1_Pin;
 80010f4:	2340      	movs	r3, #64	; 0x40
 80010f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010f8:	2300      	movs	r3, #0
 80010fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fc:	2300      	movs	r3, #0
 80010fe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SW1_GPIO_Port, &GPIO_InitStruct);
 8001100:	f107 0314 	add.w	r3, r7, #20
 8001104:	4619      	mov	r1, r3
 8001106:	4805      	ldr	r0, [pc, #20]	; (800111c <MX_GPIO_Init+0xd4>)
 8001108:	f002 f904 	bl	8003314 <HAL_GPIO_Init>

}
 800110c:	bf00      	nop
 800110e:	3728      	adds	r7, #40	; 0x28
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}
 8001114:	40021000 	.word	0x40021000
 8001118:	48000800 	.word	0x48000800
 800111c:	48000400 	.word	0x48000400

08001120 <gpio_if_init>:
/*- PUBLIC_API ---------------------------------------------------------------*/
/*
 * API: gpio_if_init
 */
void gpio_if_init( t_gpio_if *gpio_if, t_gpio_active active, t_gpio_pin *pin, t_gpio_state initial_state )
{
 8001120:	b480      	push	{r7}
 8001122:	b085      	sub	sp, #20
 8001124:	af00      	add	r7, sp, #0
 8001126:	60f8      	str	r0, [r7, #12]
 8001128:	607a      	str	r2, [r7, #4]
 800112a:	461a      	mov	r2, r3
 800112c:	460b      	mov	r3, r1
 800112e:	72fb      	strb	r3, [r7, #11]
 8001130:	4613      	mov	r3, r2
 8001132:	72bb      	strb	r3, [r7, #10]
  gpio_if->active = active;
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	7afa      	ldrb	r2, [r7, #11]
 8001138:	701a      	strb	r2, [r3, #0]
  gpio_if->pin = pin;
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	687a      	ldr	r2, [r7, #4]
 800113e:	605a      	str	r2, [r3, #4]
  gpio_if->initial_state = initial_state;
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	7aba      	ldrb	r2, [r7, #10]
 8001144:	721a      	strb	r2, [r3, #8]
}
 8001146:	bf00      	nop
 8001148:	3714      	adds	r7, #20
 800114a:	46bd      	mov	sp, r7
 800114c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001150:	4770      	bx	lr

08001152 <gpio_if_open>:

/*
 * API: gpio_if_open
 */
t_gpio_if_status gpio_if_open(t_gpio_if *gpio_if)
{
 8001152:	b580      	push	{r7, lr}
 8001154:	b082      	sub	sp, #8
 8001156:	af00      	add	r7, sp, #0
 8001158:	6078      	str	r0, [r7, #4]
  /* Sanity check */
  if (gpio_if->pin == NULL)
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	685b      	ldr	r3, [r3, #4]
 800115e:	2b00      	cmp	r3, #0
 8001160:	d101      	bne.n	8001166 <gpio_if_open+0x14>
  {
    return GPIO_IF_OPEN_FAILURE;
 8001162:	2301      	movs	r3, #1
 8001164:	e00f      	b.n	8001186 <gpio_if_open+0x34>
  }

  /* Init variables */

  /* Start peripherals */
  if (gpio_if->initial_state == GPIO_IF_SET)
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	7a1b      	ldrb	r3, [r3, #8]
 800116a:	2b01      	cmp	r3, #1
 800116c:	d103      	bne.n	8001176 <gpio_if_open+0x24>
  {
    gpio_if_set(gpio_if);
 800116e:	6878      	ldr	r0, [r7, #4]
 8001170:	f000 f80d 	bl	800118e <gpio_if_set>
 8001174:	e006      	b.n	8001184 <gpio_if_open+0x32>
  }
  else if (gpio_if->initial_state == GPIO_IF_CLEAR)
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	7a1b      	ldrb	r3, [r3, #8]
 800117a:	2b00      	cmp	r3, #0
 800117c:	d102      	bne.n	8001184 <gpio_if_open+0x32>
  {
    gpio_if_clear(gpio_if);
 800117e:	6878      	ldr	r0, [r7, #4]
 8001180:	f000 f826 	bl	80011d0 <gpio_if_clear>
  else
  {
    /* Nothing to do */
  }

  return GPIO_IF_SUCCESS;
 8001184:	2300      	movs	r3, #0
}
 8001186:	4618      	mov	r0, r3
 8001188:	3708      	adds	r7, #8
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}

0800118e <gpio_if_set>:

/*
 * API: gpio_if_set
 */
void gpio_if_set(t_gpio_if *gpio_if)
{
 800118e:	b580      	push	{r7, lr}
 8001190:	b082      	sub	sp, #8
 8001192:	af00      	add	r7, sp, #0
 8001194:	6078      	str	r0, [r7, #4]
  if (gpio_if->active == ACTIVE_HIGH)
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	781b      	ldrb	r3, [r3, #0]
 800119a:	2b01      	cmp	r3, #1
 800119c:	d10a      	bne.n	80011b4 <gpio_if_set+0x26>
  {
    HAL_GPIO_WritePin(gpio_if->pin->port, gpio_if->pin->pin, GPIO_PIN_SET);
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	685b      	ldr	r3, [r3, #4]
 80011a2:	6818      	ldr	r0, [r3, #0]
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	685b      	ldr	r3, [r3, #4]
 80011a8:	889b      	ldrh	r3, [r3, #4]
 80011aa:	2201      	movs	r2, #1
 80011ac:	4619      	mov	r1, r3
 80011ae:	f002 fa43 	bl	8003638 <HAL_GPIO_WritePin>
  }
  else
  {
    HAL_GPIO_WritePin(gpio_if->pin->port, gpio_if->pin->pin, GPIO_PIN_RESET);
  }
}
 80011b2:	e009      	b.n	80011c8 <gpio_if_set+0x3a>
    HAL_GPIO_WritePin(gpio_if->pin->port, gpio_if->pin->pin, GPIO_PIN_RESET);
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	685b      	ldr	r3, [r3, #4]
 80011b8:	6818      	ldr	r0, [r3, #0]
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	685b      	ldr	r3, [r3, #4]
 80011be:	889b      	ldrh	r3, [r3, #4]
 80011c0:	2200      	movs	r2, #0
 80011c2:	4619      	mov	r1, r3
 80011c4:	f002 fa38 	bl	8003638 <HAL_GPIO_WritePin>
}
 80011c8:	bf00      	nop
 80011ca:	3708      	adds	r7, #8
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd80      	pop	{r7, pc}

080011d0 <gpio_if_clear>:

/*
 * API: gpio_if_clear
 */
void gpio_if_clear(t_gpio_if *gpio_if)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b082      	sub	sp, #8
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
  if (gpio_if->active == ACTIVE_HIGH)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	781b      	ldrb	r3, [r3, #0]
 80011dc:	2b01      	cmp	r3, #1
 80011de:	d10a      	bne.n	80011f6 <gpio_if_clear+0x26>
  {
    HAL_GPIO_WritePin(gpio_if->pin->port, gpio_if->pin->pin, GPIO_PIN_RESET);
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	685b      	ldr	r3, [r3, #4]
 80011e4:	6818      	ldr	r0, [r3, #0]
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	685b      	ldr	r3, [r3, #4]
 80011ea:	889b      	ldrh	r3, [r3, #4]
 80011ec:	2200      	movs	r2, #0
 80011ee:	4619      	mov	r1, r3
 80011f0:	f002 fa22 	bl	8003638 <HAL_GPIO_WritePin>
  }
  else
  {
    HAL_GPIO_WritePin(gpio_if->pin->port, gpio_if->pin->pin, GPIO_PIN_SET);
  }
}
 80011f4:	e009      	b.n	800120a <gpio_if_clear+0x3a>
    HAL_GPIO_WritePin(gpio_if->pin->port, gpio_if->pin->pin, GPIO_PIN_SET);
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	685b      	ldr	r3, [r3, #4]
 80011fa:	6818      	ldr	r0, [r3, #0]
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	685b      	ldr	r3, [r3, #4]
 8001200:	889b      	ldrh	r3, [r3, #4]
 8001202:	2201      	movs	r2, #1
 8001204:	4619      	mov	r1, r3
 8001206:	f002 fa17 	bl	8003638 <HAL_GPIO_WritePin>
}
 800120a:	bf00      	nop
 800120c:	3708      	adds	r7, #8
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}

08001212 <gpio_if_get>:

/*
 * API: gpio_if_get
 */
t_gpio_state gpio_if_get(t_gpio_if *gpio_if)
{
 8001212:	b580      	push	{r7, lr}
 8001214:	b082      	sub	sp, #8
 8001216:	af00      	add	r7, sp, #0
 8001218:	6078      	str	r0, [r7, #4]
  if (gpio_if->active == ACTIVE_HIGH)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	781b      	ldrb	r3, [r3, #0]
 800121e:	2b01      	cmp	r3, #1
 8001220:	d110      	bne.n	8001244 <gpio_if_get+0x32>
  {
    if (HAL_GPIO_ReadPin(gpio_if->pin->port, gpio_if->pin->pin) == GPIO_PIN_SET)
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	685b      	ldr	r3, [r3, #4]
 8001226:	681a      	ldr	r2, [r3, #0]
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	685b      	ldr	r3, [r3, #4]
 800122c:	889b      	ldrh	r3, [r3, #4]
 800122e:	4619      	mov	r1, r3
 8001230:	4610      	mov	r0, r2
 8001232:	f002 f9e9 	bl	8003608 <HAL_GPIO_ReadPin>
 8001236:	4603      	mov	r3, r0
 8001238:	2b01      	cmp	r3, #1
 800123a:	d101      	bne.n	8001240 <gpio_if_get+0x2e>
    {
      return GPIO_IF_SET;
 800123c:	2301      	movs	r3, #1
 800123e:	e011      	b.n	8001264 <gpio_if_get+0x52>
    }
    else
    {
      return GPIO_IF_CLEAR;
 8001240:	2300      	movs	r3, #0
 8001242:	e00f      	b.n	8001264 <gpio_if_get+0x52>
    }
  }
  else
  {
    if (HAL_GPIO_ReadPin(gpio_if->pin->port, gpio_if->pin->pin) == GPIO_PIN_SET)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	685b      	ldr	r3, [r3, #4]
 8001248:	681a      	ldr	r2, [r3, #0]
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	685b      	ldr	r3, [r3, #4]
 800124e:	889b      	ldrh	r3, [r3, #4]
 8001250:	4619      	mov	r1, r3
 8001252:	4610      	mov	r0, r2
 8001254:	f002 f9d8 	bl	8003608 <HAL_GPIO_ReadPin>
 8001258:	4603      	mov	r3, r0
 800125a:	2b01      	cmp	r3, #1
 800125c:	d101      	bne.n	8001262 <gpio_if_get+0x50>
    {
      return GPIO_IF_CLEAR;
 800125e:	2300      	movs	r3, #0
 8001260:	e000      	b.n	8001264 <gpio_if_get+0x52>
    }
    else
    {
      return GPIO_IF_SET;
 8001262:	2301      	movs	r3, #1
    }
  }
}
 8001264:	4618      	mov	r0, r3
 8001266:	3708      	adds	r7, #8
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}

0800126c <led_init>:
 */

#include "led.h"

void led_init(led *this_led, TIM_HandleTypeDef *htim)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b082      	sub	sp, #8
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
 8001274:	6039      	str	r1, [r7, #0]
	this_led->htim = *htim;
 8001276:	687a      	ldr	r2, [r7, #4]
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	4610      	mov	r0, r2
 800127c:	4619      	mov	r1, r3
 800127e:	234c      	movs	r3, #76	; 0x4c
 8001280:	461a      	mov	r2, r3
 8001282:	f006 fa99 	bl	80077b8 <memcpy>
}
 8001286:	bf00      	nop
 8001288:	3708      	adds	r7, #8
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}

0800128e <led_set>:

void led_set(led *this_led, float value)
{
 800128e:	b480      	push	{r7}
 8001290:	b083      	sub	sp, #12
 8001292:	af00      	add	r7, sp, #0
 8001294:	6078      	str	r0, [r7, #4]
 8001296:	ed87 0a00 	vstr	s0, [r7]
	__HAL_TIM_SET_COMPARE(&(this_led->htim), TIM_CHANNEL_1, value);
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	edd7 7a00 	vldr	s15, [r7]
 80012a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80012a6:	ee17 2a90 	vmov	r2, s15
 80012aa:	635a      	str	r2, [r3, #52]	; 0x34
}
 80012ac:	bf00      	nop
 80012ae:	370c      	adds	r7, #12
 80012b0:	46bd      	mov	sp, r7
 80012b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b6:	4770      	bx	lr

080012b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012b8:	b590      	push	{r4, r7, lr}
 80012ba:	b09d      	sub	sp, #116	; 0x74
 80012bc:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */

	/*pines de switches*/
	t_gpio_pin user_switch1_pin = {SW1_GPIO_Port, SW1_Pin};
 80012be:	4a54      	ldr	r2, [pc, #336]	; (8001410 <main+0x158>)
 80012c0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80012c4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80012c8:	e883 0003 	stmia.w	r3, {r0, r1}
	t_gpio_if switch_1;
	t_gpio_pin user_switch2_pin = {SW2_GPIO_Port, SW2_Pin};
 80012cc:	4a51      	ldr	r2, [pc, #324]	; (8001414 <main+0x15c>)
 80012ce:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80012d2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80012d6:	e883 0003 	stmia.w	r3, {r0, r1}
	t_gpio_if switch_2;
	t_gpio_pin user_switch3_pin = {SW3_GPIO_Port, SW3_Pin};
 80012da:	4a4f      	ldr	r2, [pc, #316]	; (8001418 <main+0x160>)
 80012dc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80012e0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80012e4:	e883 0003 	stmia.w	r3, {r0, r1}
	t_gpio_if switch_3;
	t_gpio_pin user_switch4_pin = {SW4_GPIO_Port, SW4_Pin};
 80012e8:	4a4c      	ldr	r2, [pc, #304]	; (800141c <main+0x164>)
 80012ea:	f107 0320 	add.w	r3, r7, #32
 80012ee:	e892 0003 	ldmia.w	r2, {r0, r1}
 80012f2:	e883 0003 	stmia.w	r3, {r0, r1}
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012f6:	f000 fd59 	bl	8001dac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012fa:	f000 f8a5 	bl	8001448 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012fe:	f7ff fea3 	bl	8001048 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001302:	f000 fc4f 	bl	8001ba4 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8001306:	f7ff fcd5 	bl	8000cb4 <MX_ADC1_Init>
  MX_TIM1_Init();
 800130a:	f000 fa5d 	bl	80017c8 <MX_TIM1_Init>
  MX_TIM2_Init();
 800130e:	f000 fb09 	bl	8001924 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8001312:	f000 fc15 	bl	8001b40 <MX_USART1_UART_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */



  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);			// inicializacion pwm'
 8001316:	2100      	movs	r1, #0
 8001318:	4841      	ldr	r0, [pc, #260]	; (8001420 <main+0x168>)
 800131a:	f003 fd45 	bl	8004da8 <HAL_TIM_PWM_Start>
  led_init(&this_led, &htim1);
 800131e:	4940      	ldr	r1, [pc, #256]	; (8001420 <main+0x168>)
 8001320:	4840      	ldr	r0, [pc, #256]	; (8001424 <main+0x16c>)
 8001322:	f7ff ffa3 	bl	800126c <led_init>

  HAL_UART_Receive_IT(&huart2, &uart_pc, 1);		// inicializacion interrupciones UART2
 8001326:	2201      	movs	r2, #1
 8001328:	493f      	ldr	r1, [pc, #252]	; (8001428 <main+0x170>)
 800132a:	4840      	ldr	r0, [pc, #256]	; (800142c <main+0x174>)
 800132c:	f004 ff54 	bl	80061d8 <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart1, &uart_red, 1);		// inicializacion interrupciones UART1
 8001330:	2201      	movs	r2, #1
 8001332:	493f      	ldr	r1, [pc, #252]	; (8001430 <main+0x178>)
 8001334:	483f      	ldr	r0, [pc, #252]	; (8001434 <main+0x17c>)
 8001336:	f004 ff4f 	bl	80061d8 <HAL_UART_Receive_IT>

  gpio_if_init(&switch_1, ACTIVE_HIGH, &user_switch1_pin, GPIO_IF_INPUT);
 800133a:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 800133e:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8001342:	2302      	movs	r3, #2
 8001344:	2101      	movs	r1, #1
 8001346:	f7ff feeb 	bl	8001120 <gpio_if_init>
  if (gpio_if_open(&switch_1) != GPIO_IF_SUCCESS)
 800134a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800134e:	4618      	mov	r0, r3
 8001350:	f7ff feff 	bl	8001152 <gpio_if_open>
 8001354:	4603      	mov	r3, r0
 8001356:	2b00      	cmp	r3, #0
 8001358:	d001      	beq.n	800135e <main+0xa6>
    {
      Error_Handler();
 800135a:	f000 f975 	bl	8001648 <Error_Handler>
    }
  gpio_if_init(&switch_2, ACTIVE_HIGH, &user_switch2_pin, GPIO_IF_INPUT);
 800135e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8001362:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 8001366:	2302      	movs	r3, #2
 8001368:	2101      	movs	r1, #1
 800136a:	f7ff fed9 	bl	8001120 <gpio_if_init>
  if (gpio_if_open(&switch_2) != GPIO_IF_SUCCESS)
 800136e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001372:	4618      	mov	r0, r3
 8001374:	f7ff feed 	bl	8001152 <gpio_if_open>
 8001378:	4603      	mov	r3, r0
 800137a:	2b00      	cmp	r3, #0
 800137c:	d001      	beq.n	8001382 <main+0xca>
    {
      Error_Handler();
 800137e:	f000 f963 	bl	8001648 <Error_Handler>
    }
  gpio_if_init(&switch_3, ACTIVE_HIGH, &user_switch3_pin, GPIO_IF_INPUT);
 8001382:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001386:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800138a:	2302      	movs	r3, #2
 800138c:	2101      	movs	r1, #1
 800138e:	f7ff fec7 	bl	8001120 <gpio_if_init>
  if (gpio_if_open(&switch_3) != GPIO_IF_SUCCESS)
 8001392:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001396:	4618      	mov	r0, r3
 8001398:	f7ff fedb 	bl	8001152 <gpio_if_open>
 800139c:	4603      	mov	r3, r0
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d001      	beq.n	80013a6 <main+0xee>
    {
      Error_Handler();
 80013a2:	f000 f951 	bl	8001648 <Error_Handler>
    }
  gpio_if_init(&switch_4, ACTIVE_HIGH, &user_switch4_pin, GPIO_IF_INPUT);
 80013a6:	f107 0220 	add.w	r2, r7, #32
 80013aa:	f107 0014 	add.w	r0, r7, #20
 80013ae:	2302      	movs	r3, #2
 80013b0:	2101      	movs	r1, #1
 80013b2:	f7ff feb5 	bl	8001120 <gpio_if_init>
  if (gpio_if_open(&switch_4) != GPIO_IF_SUCCESS)
 80013b6:	f107 0314 	add.w	r3, r7, #20
 80013ba:	4618      	mov	r0, r3
 80013bc:	f7ff fec9 	bl	8001152 <gpio_if_open>
 80013c0:	4603      	mov	r3, r0
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d001      	beq.n	80013ca <main+0x112>
    {
      Error_Handler();
 80013c6:	f000 f93f 	bl	8001648 <Error_Handler>
    }

  HAL_ADC_Init(&hadc1);
 80013ca:	481b      	ldr	r0, [pc, #108]	; (8001438 <main+0x180>)
 80013cc:	f000 ff44 	bl	8002258 <HAL_ADC_Init>


  trans_recep_init(&t_r_red, &huart1);
 80013d0:	4918      	ldr	r1, [pc, #96]	; (8001434 <main+0x17c>)
 80013d2:	481a      	ldr	r0, [pc, #104]	; (800143c <main+0x184>)
 80013d4:	f000 fb8a 	bl	8001aec <trans_recep_init>

  dip_switch_ports_init(&this_dip, &switch_1, &switch_2, &switch_3, &switch_4);
 80013d8:	f107 0428 	add.w	r4, r7, #40	; 0x28
 80013dc:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80013e0:	f107 0150 	add.w	r1, r7, #80	; 0x50
 80013e4:	1d38      	adds	r0, r7, #4
 80013e6:	f107 0314 	add.w	r3, r7, #20
 80013ea:	9300      	str	r3, [sp, #0]
 80013ec:	4623      	mov	r3, r4
 80013ee:	f7ff fddb 	bl	8000fa8 <dip_switch_ports_init>
  int dip_value = get_dip_value(&this_dip);
 80013f2:	1d3b      	adds	r3, r7, #4
 80013f4:	4618      	mov	r0, r3
 80013f6:	f7ff fdf0 	bl	8000fda <get_dip_value>
 80013fa:	6678      	str	r0, [r7, #100]	; 0x64
  device_if_init(&this_device, dip_value);
 80013fc:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80013fe:	4810      	ldr	r0, [pc, #64]	; (8001440 <main+0x188>)
 8001400:	f7ff fdba 	bl	8000f78 <device_if_init>

  led_set(&this_led, 1960);
 8001404:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 8001444 <main+0x18c>
 8001408:	4806      	ldr	r0, [pc, #24]	; (8001424 <main+0x16c>)
 800140a:	f7ff ff40 	bl	800128e <led_set>

  while (1)
 800140e:	e7fe      	b.n	800140e <main+0x156>
 8001410:	080077fc 	.word	0x080077fc
 8001414:	08007804 	.word	0x08007804
 8001418:	0800780c 	.word	0x0800780c
 800141c:	08007814 	.word	0x08007814
 8001420:	200001e4 	.word	0x200001e4
 8001424:	20000194 	.word	0x20000194
 8001428:	20000094 	.word	0x20000094
 800142c:	20000300 	.word	0x20000300
 8001430:	20000191 	.word	0x20000191
 8001434:	2000027c 	.word	0x2000027c
 8001438:	2000002c 	.word	0x2000002c
 800143c:	2000010c 	.word	0x2000010c
 8001440:	20000098 	.word	0x20000098
 8001444:	44f50000 	.word	0x44f50000

08001448 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b096      	sub	sp, #88	; 0x58
 800144c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800144e:	f107 0314 	add.w	r3, r7, #20
 8001452:	2244      	movs	r2, #68	; 0x44
 8001454:	2100      	movs	r1, #0
 8001456:	4618      	mov	r0, r3
 8001458:	f006 f9bc 	bl	80077d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800145c:	463b      	mov	r3, r7
 800145e:	2200      	movs	r2, #0
 8001460:	601a      	str	r2, [r3, #0]
 8001462:	605a      	str	r2, [r3, #4]
 8001464:	609a      	str	r2, [r3, #8]
 8001466:	60da      	str	r2, [r3, #12]
 8001468:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800146a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800146e:	f002 f909 	bl	8003684 <HAL_PWREx_ControlVoltageScaling>
 8001472:	4603      	mov	r3, r0
 8001474:	2b00      	cmp	r3, #0
 8001476:	d001      	beq.n	800147c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001478:	f000 f8e6 	bl	8001648 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800147c:	2302      	movs	r3, #2
 800147e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001480:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001484:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001486:	2340      	movs	r3, #64	; 0x40
 8001488:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800148a:	2302      	movs	r3, #2
 800148c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800148e:	2302      	movs	r3, #2
 8001490:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001492:	2301      	movs	r3, #1
 8001494:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001496:	230a      	movs	r3, #10
 8001498:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800149a:	2307      	movs	r3, #7
 800149c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800149e:	2302      	movs	r3, #2
 80014a0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80014a2:	2302      	movs	r3, #2
 80014a4:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014a6:	f107 0314 	add.w	r3, r7, #20
 80014aa:	4618      	mov	r0, r3
 80014ac:	f002 f940 	bl	8003730 <HAL_RCC_OscConfig>
 80014b0:	4603      	mov	r3, r0
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d001      	beq.n	80014ba <SystemClock_Config+0x72>
  {
    Error_Handler();
 80014b6:	f000 f8c7 	bl	8001648 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014ba:	230f      	movs	r3, #15
 80014bc:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014be:	2303      	movs	r3, #3
 80014c0:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014c2:	2300      	movs	r3, #0
 80014c4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80014c6:	2300      	movs	r3, #0
 80014c8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014ca:	2300      	movs	r3, #0
 80014cc:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80014ce:	463b      	mov	r3, r7
 80014d0:	2104      	movs	r1, #4
 80014d2:	4618      	mov	r0, r3
 80014d4:	f002 fd40 	bl	8003f58 <HAL_RCC_ClockConfig>
 80014d8:	4603      	mov	r3, r0
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d001      	beq.n	80014e2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80014de:	f000 f8b3 	bl	8001648 <Error_Handler>
  }
}
 80014e2:	bf00      	nop
 80014e4:	3758      	adds	r7, #88	; 0x58
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}
	...

080014ec <HAL_UART_RxCpltCallback>:
// rutina de interrupcion por UART
uint8_t dato_1;
uint8_t dato_2;

void HAL_UART_RxCpltCallback (UART_HandleTypeDef *huart)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b084      	sub	sp, #16
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
	static uint8_t cont = 1;
	device_mode = this_device.modo;
 80014f4:	4b38      	ldr	r3, [pc, #224]	; (80015d8 <HAL_UART_RxCpltCallback+0xec>)
 80014f6:	781a      	ldrb	r2, [r3, #0]
 80014f8:	4b38      	ldr	r3, [pc, #224]	; (80015dc <HAL_UART_RxCpltCallback+0xf0>)
 80014fa:	701a      	strb	r2, [r3, #0]


	// Modo MASTER
	if(huart->Instance == USART2)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	4a37      	ldr	r2, [pc, #220]	; (80015e0 <HAL_UART_RxCpltCallback+0xf4>)
 8001502:	4293      	cmp	r3, r2
 8001504:	d123      	bne.n	800154e <HAL_UART_RxCpltCallback+0x62>
	{
		if (cont == 1)
 8001506:	4b37      	ldr	r3, [pc, #220]	; (80015e4 <HAL_UART_RxCpltCallback+0xf8>)
 8001508:	781b      	ldrb	r3, [r3, #0]
 800150a:	2b01      	cmp	r3, #1
 800150c:	d107      	bne.n	800151e <HAL_UART_RxCpltCallback+0x32>
		{
			dato_1 = uart_pc;
 800150e:	4b36      	ldr	r3, [pc, #216]	; (80015e8 <HAL_UART_RxCpltCallback+0xfc>)
 8001510:	781a      	ldrb	r2, [r3, #0]
 8001512:	4b36      	ldr	r3, [pc, #216]	; (80015ec <HAL_UART_RxCpltCallback+0x100>)
 8001514:	701a      	strb	r2, [r3, #0]
			cont = 2;
 8001516:	4b33      	ldr	r3, [pc, #204]	; (80015e4 <HAL_UART_RxCpltCallback+0xf8>)
 8001518:	2202      	movs	r2, #2
 800151a:	701a      	strb	r2, [r3, #0]
 800151c:	e017      	b.n	800154e <HAL_UART_RxCpltCallback+0x62>
		}
		else if (cont == 2)
 800151e:	4b31      	ldr	r3, [pc, #196]	; (80015e4 <HAL_UART_RxCpltCallback+0xf8>)
 8001520:	781b      	ldrb	r3, [r3, #0]
 8001522:	2b02      	cmp	r3, #2
 8001524:	d113      	bne.n	800154e <HAL_UART_RxCpltCallback+0x62>
		{
			dato_2 = uart_pc;
 8001526:	4b30      	ldr	r3, [pc, #192]	; (80015e8 <HAL_UART_RxCpltCallback+0xfc>)
 8001528:	781a      	ldrb	r2, [r3, #0]
 800152a:	4b31      	ldr	r3, [pc, #196]	; (80015f0 <HAL_UART_RxCpltCallback+0x104>)
 800152c:	701a      	strb	r2, [r3, #0]
			cont = 1;
 800152e:	4b2d      	ldr	r3, [pc, #180]	; (80015e4 <HAL_UART_RxCpltCallback+0xf8>)
 8001530:	2201      	movs	r2, #1
 8001532:	701a      	strb	r2, [r3, #0]
			if (device_mode == MASTER)
 8001534:	4b29      	ldr	r3, [pc, #164]	; (80015dc <HAL_UART_RxCpltCallback+0xf0>)
 8001536:	781b      	ldrb	r3, [r3, #0]
 8001538:	2b00      	cmp	r3, #0
 800153a:	d108      	bne.n	800154e <HAL_UART_RxCpltCallback+0x62>
			{
				int command = decode_pc_command(&this_device, dato_1, dato_2);
 800153c:	4b2b      	ldr	r3, [pc, #172]	; (80015ec <HAL_UART_RxCpltCallback+0x100>)
 800153e:	781b      	ldrb	r3, [r3, #0]
 8001540:	4a2b      	ldr	r2, [pc, #172]	; (80015f0 <HAL_UART_RxCpltCallback+0x104>)
 8001542:	7812      	ldrb	r2, [r2, #0]
 8001544:	4619      	mov	r1, r3
 8001546:	4824      	ldr	r0, [pc, #144]	; (80015d8 <HAL_UART_RxCpltCallback+0xec>)
 8001548:	f7ff fc80 	bl	8000e4c <decode_pc_command>
 800154c:	60f8      	str	r0, [r7, #12]
			}
		}
	}

	// Modo SLAVE
	if(huart->Instance == USART1)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	4a28      	ldr	r2, [pc, #160]	; (80015f4 <HAL_UART_RxCpltCallback+0x108>)
 8001554:	4293      	cmp	r3, r2
 8001556:	d131      	bne.n	80015bc <HAL_UART_RxCpltCallback+0xd0>
	{
		if (device_mode == MASTER)
 8001558:	4b20      	ldr	r3, [pc, #128]	; (80015dc <HAL_UART_RxCpltCallback+0xf0>)
 800155a:	781b      	ldrb	r3, [r3, #0]
 800155c:	2b00      	cmp	r3, #0
 800155e:	d109      	bne.n	8001574 <HAL_UART_RxCpltCallback+0x88>
		{
			HAL_UART_Transmit(&huart2, &uart_red, 1, 100);
 8001560:	2364      	movs	r3, #100	; 0x64
 8001562:	2201      	movs	r2, #1
 8001564:	4924      	ldr	r1, [pc, #144]	; (80015f8 <HAL_UART_RxCpltCallback+0x10c>)
 8001566:	4825      	ldr	r0, [pc, #148]	; (80015fc <HAL_UART_RxCpltCallback+0x110>)
 8001568:	f004 fda2 	bl	80060b0 <HAL_UART_Transmit>
			HAL_TIM_Base_Stop_IT(&htim2);
 800156c:	4824      	ldr	r0, [pc, #144]	; (8001600 <HAL_UART_RxCpltCallback+0x114>)
 800156e:	f003 fb29 	bl	8004bc4 <HAL_TIM_Base_Stop_IT>
 8001572:	e023      	b.n	80015bc <HAL_UART_RxCpltCallback+0xd0>
		}
		else
		{
			if (cont == 1)
 8001574:	4b1b      	ldr	r3, [pc, #108]	; (80015e4 <HAL_UART_RxCpltCallback+0xf8>)
 8001576:	781b      	ldrb	r3, [r3, #0]
 8001578:	2b01      	cmp	r3, #1
 800157a:	d107      	bne.n	800158c <HAL_UART_RxCpltCallback+0xa0>
			{
				dato_1 = uart_red;
 800157c:	4b1e      	ldr	r3, [pc, #120]	; (80015f8 <HAL_UART_RxCpltCallback+0x10c>)
 800157e:	781a      	ldrb	r2, [r3, #0]
 8001580:	4b1a      	ldr	r3, [pc, #104]	; (80015ec <HAL_UART_RxCpltCallback+0x100>)
 8001582:	701a      	strb	r2, [r3, #0]
				cont = 2;
 8001584:	4b17      	ldr	r3, [pc, #92]	; (80015e4 <HAL_UART_RxCpltCallback+0xf8>)
 8001586:	2202      	movs	r2, #2
 8001588:	701a      	strb	r2, [r3, #0]
 800158a:	e017      	b.n	80015bc <HAL_UART_RxCpltCallback+0xd0>
			}
			else if (cont == 2)
 800158c:	4b15      	ldr	r3, [pc, #84]	; (80015e4 <HAL_UART_RxCpltCallback+0xf8>)
 800158e:	781b      	ldrb	r3, [r3, #0]
 8001590:	2b02      	cmp	r3, #2
 8001592:	d113      	bne.n	80015bc <HAL_UART_RxCpltCallback+0xd0>
			{
				dato_2 = uart_red;
 8001594:	4b18      	ldr	r3, [pc, #96]	; (80015f8 <HAL_UART_RxCpltCallback+0x10c>)
 8001596:	781a      	ldrb	r2, [r3, #0]
 8001598:	4b15      	ldr	r3, [pc, #84]	; (80015f0 <HAL_UART_RxCpltCallback+0x104>)
 800159a:	701a      	strb	r2, [r3, #0]
				cont = 1;
 800159c:	4b11      	ldr	r3, [pc, #68]	; (80015e4 <HAL_UART_RxCpltCallback+0xf8>)
 800159e:	2201      	movs	r2, #1
 80015a0:	701a      	strb	r2, [r3, #0]
				if (device_mode == SLAVE)
 80015a2:	4b0e      	ldr	r3, [pc, #56]	; (80015dc <HAL_UART_RxCpltCallback+0xf0>)
 80015a4:	781b      	ldrb	r3, [r3, #0]
 80015a6:	2b01      	cmp	r3, #1
 80015a8:	d108      	bne.n	80015bc <HAL_UART_RxCpltCallback+0xd0>
				{
					int command = decode_red_command(&this_device, dato_1, dato_2);
 80015aa:	4b10      	ldr	r3, [pc, #64]	; (80015ec <HAL_UART_RxCpltCallback+0x100>)
 80015ac:	781b      	ldrb	r3, [r3, #0]
 80015ae:	4a10      	ldr	r2, [pc, #64]	; (80015f0 <HAL_UART_RxCpltCallback+0x104>)
 80015b0:	7812      	ldrb	r2, [r2, #0]
 80015b2:	4619      	mov	r1, r3
 80015b4:	4808      	ldr	r0, [pc, #32]	; (80015d8 <HAL_UART_RxCpltCallback+0xec>)
 80015b6:	f7ff fc6b 	bl	8000e90 <decode_red_command>
 80015ba:	60b8      	str	r0, [r7, #8]
				}
			}
		}
	}

	HAL_UART_Receive_IT(&huart2, &uart_pc, 1);
 80015bc:	2201      	movs	r2, #1
 80015be:	490a      	ldr	r1, [pc, #40]	; (80015e8 <HAL_UART_RxCpltCallback+0xfc>)
 80015c0:	480e      	ldr	r0, [pc, #56]	; (80015fc <HAL_UART_RxCpltCallback+0x110>)
 80015c2:	f004 fe09 	bl	80061d8 <HAL_UART_Receive_IT>
	HAL_UART_Receive_IT(&huart1, &uart_red, 1);
 80015c6:	2201      	movs	r2, #1
 80015c8:	490b      	ldr	r1, [pc, #44]	; (80015f8 <HAL_UART_RxCpltCallback+0x10c>)
 80015ca:	480e      	ldr	r0, [pc, #56]	; (8001604 <HAL_UART_RxCpltCallback+0x118>)
 80015cc:	f004 fe04 	bl	80061d8 <HAL_UART_Receive_IT>
}
 80015d0:	bf00      	nop
 80015d2:	3710      	adds	r7, #16
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd80      	pop	{r7, pc}
 80015d8:	20000098 	.word	0x20000098
 80015dc:	20000190 	.word	0x20000190
 80015e0:	40004400 	.word	0x40004400
 80015e4:	20000000 	.word	0x20000000
 80015e8:	20000094 	.word	0x20000094
 80015ec:	200001e0 	.word	0x200001e0
 80015f0:	200001e1 	.word	0x200001e1
 80015f4:	40013800 	.word	0x40013800
 80015f8:	20000191 	.word	0x20000191
 80015fc:	20000300 	.word	0x20000300
 8001600:	20000230 	.word	0x20000230
 8001604:	2000027c 	.word	0x2000027c

08001608 <HAL_TIM_PeriodElapsedCallback>:
}*/



void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b082      	sub	sp, #8
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
	if (cont_tim == 1) {
 8001610:	4b0a      	ldr	r3, [pc, #40]	; (800163c <HAL_TIM_PeriodElapsedCallback+0x34>)
 8001612:	781b      	ldrb	r3, [r3, #0]
 8001614:	2b01      	cmp	r3, #1
 8001616:	d109      	bne.n	800162c <HAL_TIM_PeriodElapsedCallback+0x24>
		HAL_UART_Transmit(&huart2, '1', 1, 100);
 8001618:	2364      	movs	r3, #100	; 0x64
 800161a:	2201      	movs	r2, #1
 800161c:	2131      	movs	r1, #49	; 0x31
 800161e:	4808      	ldr	r0, [pc, #32]	; (8001640 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8001620:	f004 fd46 	bl	80060b0 <HAL_UART_Transmit>
		HAL_TIM_Base_Stop_IT(&htim2);
 8001624:	4807      	ldr	r0, [pc, #28]	; (8001644 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8001626:	f003 facd 	bl	8004bc4 <HAL_TIM_Base_Stop_IT>
	}
	else
	{
		cont_tim = 1;
	}
}
 800162a:	e002      	b.n	8001632 <HAL_TIM_PeriodElapsedCallback+0x2a>
		cont_tim = 1;
 800162c:	4b03      	ldr	r3, [pc, #12]	; (800163c <HAL_TIM_PeriodElapsedCallback+0x34>)
 800162e:	2201      	movs	r2, #1
 8001630:	701a      	strb	r2, [r3, #0]
}
 8001632:	bf00      	nop
 8001634:	3708      	adds	r7, #8
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	20000192 	.word	0x20000192
 8001640:	20000300 	.word	0x20000300
 8001644:	20000230 	.word	0x20000230

08001648 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001648:	b480      	push	{r7}
 800164a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800164c:	b672      	cpsid	i
}
 800164e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001650:	e7fe      	b.n	8001650 <Error_Handler+0x8>

08001652 <potenciometro_init>:
 */

#include "potenciometro.h"

void potenciometro_init(potenciometro *pot, ADC_HandleTypeDef *hadc1)
{
 8001652:	b580      	push	{r7, lr}
 8001654:	b082      	sub	sp, #8
 8001656:	af00      	add	r7, sp, #0
 8001658:	6078      	str	r0, [r7, #4]
 800165a:	6039      	str	r1, [r7, #0]
	pot->adc_port = *hadc1;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	683a      	ldr	r2, [r7, #0]
 8001660:	3304      	adds	r3, #4
 8001662:	4611      	mov	r1, r2
 8001664:	2268      	movs	r2, #104	; 0x68
 8001666:	4618      	mov	r0, r3
 8001668:	f006 f8a6 	bl	80077b8 <memcpy>
	HAL_ADC_Start(hadc1);
 800166c:	6838      	ldr	r0, [r7, #0]
 800166e:	f000 ff3f 	bl	80024f0 <HAL_ADC_Start>
}
 8001672:	bf00      	nop
 8001674:	3708      	adds	r7, #8
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}
	...

0800167c <potenciometro_get_value>:

uint8_t potenciometro_get_value(potenciometro *pot)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b084      	sub	sp, #16
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
	HAL_ADC_PollForConversion(&(pot->adc_port), 100);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	3304      	adds	r3, #4
 8001688:	2164      	movs	r1, #100	; 0x64
 800168a:	4618      	mov	r0, r3
 800168c:	f000 ff93 	bl	80025b6 <HAL_ADC_PollForConversion>
	uint8_t adc_val = ( (double) HAL_ADC_GetValue(&(pot->adc_port)) ) /4096 * 100;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	3304      	adds	r3, #4
 8001694:	4618      	mov	r0, r3
 8001696:	f001 f81d 	bl	80026d4 <HAL_ADC_GetValue>
 800169a:	4603      	mov	r3, r0
 800169c:	4618      	mov	r0, r3
 800169e:	f7fe fedb 	bl	8000458 <__aeabi_ui2d>
 80016a2:	f04f 0200 	mov.w	r2, #0
 80016a6:	4b0c      	ldr	r3, [pc, #48]	; (80016d8 <potenciometro_get_value+0x5c>)
 80016a8:	f7ff f87a 	bl	80007a0 <__aeabi_ddiv>
 80016ac:	4602      	mov	r2, r0
 80016ae:	460b      	mov	r3, r1
 80016b0:	4610      	mov	r0, r2
 80016b2:	4619      	mov	r1, r3
 80016b4:	f04f 0200 	mov.w	r2, #0
 80016b8:	4b08      	ldr	r3, [pc, #32]	; (80016dc <potenciometro_get_value+0x60>)
 80016ba:	f7fe ff47 	bl	800054c <__aeabi_dmul>
 80016be:	4602      	mov	r2, r0
 80016c0:	460b      	mov	r3, r1
 80016c2:	4610      	mov	r0, r2
 80016c4:	4619      	mov	r1, r3
 80016c6:	f7ff f953 	bl	8000970 <__aeabi_d2uiz>
 80016ca:	4603      	mov	r3, r0
 80016cc:	73fb      	strb	r3, [r7, #15]
	return adc_val;
 80016ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80016d0:	4618      	mov	r0, r3
 80016d2:	3710      	adds	r7, #16
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bd80      	pop	{r7, pc}
 80016d8:	40b00000 	.word	0x40b00000
 80016dc:	40590000 	.word	0x40590000

080016e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016e0:	b480      	push	{r7}
 80016e2:	b083      	sub	sp, #12
 80016e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016e6:	4b0f      	ldr	r3, [pc, #60]	; (8001724 <HAL_MspInit+0x44>)
 80016e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016ea:	4a0e      	ldr	r2, [pc, #56]	; (8001724 <HAL_MspInit+0x44>)
 80016ec:	f043 0301 	orr.w	r3, r3, #1
 80016f0:	6613      	str	r3, [r2, #96]	; 0x60
 80016f2:	4b0c      	ldr	r3, [pc, #48]	; (8001724 <HAL_MspInit+0x44>)
 80016f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016f6:	f003 0301 	and.w	r3, r3, #1
 80016fa:	607b      	str	r3, [r7, #4]
 80016fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016fe:	4b09      	ldr	r3, [pc, #36]	; (8001724 <HAL_MspInit+0x44>)
 8001700:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001702:	4a08      	ldr	r2, [pc, #32]	; (8001724 <HAL_MspInit+0x44>)
 8001704:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001708:	6593      	str	r3, [r2, #88]	; 0x58
 800170a:	4b06      	ldr	r3, [pc, #24]	; (8001724 <HAL_MspInit+0x44>)
 800170c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800170e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001712:	603b      	str	r3, [r7, #0]
 8001714:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001716:	bf00      	nop
 8001718:	370c      	adds	r7, #12
 800171a:	46bd      	mov	sp, r7
 800171c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001720:	4770      	bx	lr
 8001722:	bf00      	nop
 8001724:	40021000 	.word	0x40021000

08001728 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001728:	b480      	push	{r7}
 800172a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800172c:	e7fe      	b.n	800172c <NMI_Handler+0x4>

0800172e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800172e:	b480      	push	{r7}
 8001730:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001732:	e7fe      	b.n	8001732 <HardFault_Handler+0x4>

08001734 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001734:	b480      	push	{r7}
 8001736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001738:	e7fe      	b.n	8001738 <MemManage_Handler+0x4>

0800173a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800173a:	b480      	push	{r7}
 800173c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800173e:	e7fe      	b.n	800173e <BusFault_Handler+0x4>

08001740 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001740:	b480      	push	{r7}
 8001742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001744:	e7fe      	b.n	8001744 <UsageFault_Handler+0x4>

08001746 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001746:	b480      	push	{r7}
 8001748:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800174a:	bf00      	nop
 800174c:	46bd      	mov	sp, r7
 800174e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001752:	4770      	bx	lr

08001754 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001754:	b480      	push	{r7}
 8001756:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001758:	bf00      	nop
 800175a:	46bd      	mov	sp, r7
 800175c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001760:	4770      	bx	lr

08001762 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001762:	b480      	push	{r7}
 8001764:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001766:	bf00      	nop
 8001768:	46bd      	mov	sp, r7
 800176a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176e:	4770      	bx	lr

08001770 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001774:	f000 fb76 	bl	8001e64 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001778:	bf00      	nop
 800177a:	bd80      	pop	{r7, pc}

0800177c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001780:	4802      	ldr	r0, [pc, #8]	; (800178c <TIM2_IRQHandler+0x10>)
 8001782:	f003 fbf7 	bl	8004f74 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001786:	bf00      	nop
 8001788:	bd80      	pop	{r7, pc}
 800178a:	bf00      	nop
 800178c:	20000230 	.word	0x20000230

08001790 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001794:	4802      	ldr	r0, [pc, #8]	; (80017a0 <USART2_IRQHandler+0x10>)
 8001796:	f004 fd75 	bl	8006284 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800179a:	bf00      	nop
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop
 80017a0:	20000300 	.word	0x20000300

080017a4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80017a4:	b480      	push	{r7}
 80017a6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80017a8:	4b06      	ldr	r3, [pc, #24]	; (80017c4 <SystemInit+0x20>)
 80017aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017ae:	4a05      	ldr	r2, [pc, #20]	; (80017c4 <SystemInit+0x20>)
 80017b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80017b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80017b8:	bf00      	nop
 80017ba:	46bd      	mov	sp, r7
 80017bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c0:	4770      	bx	lr
 80017c2:	bf00      	nop
 80017c4:	e000ed00 	.word	0xe000ed00

080017c8 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b09a      	sub	sp, #104	; 0x68
 80017cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017ce:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80017d2:	2200      	movs	r2, #0
 80017d4:	601a      	str	r2, [r3, #0]
 80017d6:	605a      	str	r2, [r3, #4]
 80017d8:	609a      	str	r2, [r3, #8]
 80017da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017dc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80017e0:	2200      	movs	r2, #0
 80017e2:	601a      	str	r2, [r3, #0]
 80017e4:	605a      	str	r2, [r3, #4]
 80017e6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80017e8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80017ec:	2200      	movs	r2, #0
 80017ee:	601a      	str	r2, [r3, #0]
 80017f0:	605a      	str	r2, [r3, #4]
 80017f2:	609a      	str	r2, [r3, #8]
 80017f4:	60da      	str	r2, [r3, #12]
 80017f6:	611a      	str	r2, [r3, #16]
 80017f8:	615a      	str	r2, [r3, #20]
 80017fa:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80017fc:	1d3b      	adds	r3, r7, #4
 80017fe:	222c      	movs	r2, #44	; 0x2c
 8001800:	2100      	movs	r1, #0
 8001802:	4618      	mov	r0, r3
 8001804:	f005 ffe6 	bl	80077d4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001808:	4b44      	ldr	r3, [pc, #272]	; (800191c <MX_TIM1_Init+0x154>)
 800180a:	4a45      	ldr	r2, [pc, #276]	; (8001920 <MX_TIM1_Init+0x158>)
 800180c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 655;
 800180e:	4b43      	ldr	r3, [pc, #268]	; (800191c <MX_TIM1_Init+0x154>)
 8001810:	f240 228f 	movw	r2, #655	; 0x28f
 8001814:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001816:	4b41      	ldr	r3, [pc, #260]	; (800191c <MX_TIM1_Init+0x154>)
 8001818:	2200      	movs	r2, #0
 800181a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1960;
 800181c:	4b3f      	ldr	r3, [pc, #252]	; (800191c <MX_TIM1_Init+0x154>)
 800181e:	f44f 62f5 	mov.w	r2, #1960	; 0x7a8
 8001822:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001824:	4b3d      	ldr	r3, [pc, #244]	; (800191c <MX_TIM1_Init+0x154>)
 8001826:	2200      	movs	r2, #0
 8001828:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800182a:	4b3c      	ldr	r3, [pc, #240]	; (800191c <MX_TIM1_Init+0x154>)
 800182c:	2200      	movs	r2, #0
 800182e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001830:	4b3a      	ldr	r3, [pc, #232]	; (800191c <MX_TIM1_Init+0x154>)
 8001832:	2200      	movs	r2, #0
 8001834:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001836:	4839      	ldr	r0, [pc, #228]	; (800191c <MX_TIM1_Init+0x154>)
 8001838:	f003 f910 	bl	8004a5c <HAL_TIM_Base_Init>
 800183c:	4603      	mov	r3, r0
 800183e:	2b00      	cmp	r3, #0
 8001840:	d001      	beq.n	8001846 <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 8001842:	f7ff ff01 	bl	8001648 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001846:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800184a:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800184c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001850:	4619      	mov	r1, r3
 8001852:	4832      	ldr	r0, [pc, #200]	; (800191c <MX_TIM1_Init+0x154>)
 8001854:	f003 fe3c 	bl	80054d0 <HAL_TIM_ConfigClockSource>
 8001858:	4603      	mov	r3, r0
 800185a:	2b00      	cmp	r3, #0
 800185c:	d001      	beq.n	8001862 <MX_TIM1_Init+0x9a>
  {
    Error_Handler();
 800185e:	f7ff fef3 	bl	8001648 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001862:	482e      	ldr	r0, [pc, #184]	; (800191c <MX_TIM1_Init+0x154>)
 8001864:	f003 fa3e 	bl	8004ce4 <HAL_TIM_PWM_Init>
 8001868:	4603      	mov	r3, r0
 800186a:	2b00      	cmp	r3, #0
 800186c:	d001      	beq.n	8001872 <MX_TIM1_Init+0xaa>
  {
    Error_Handler();
 800186e:	f7ff feeb 	bl	8001648 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001872:	2300      	movs	r3, #0
 8001874:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001876:	2300      	movs	r3, #0
 8001878:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800187a:	2300      	movs	r3, #0
 800187c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800187e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001882:	4619      	mov	r1, r3
 8001884:	4825      	ldr	r0, [pc, #148]	; (800191c <MX_TIM1_Init+0x154>)
 8001886:	f004 fac1 	bl	8005e0c <HAL_TIMEx_MasterConfigSynchronization>
 800188a:	4603      	mov	r3, r0
 800188c:	2b00      	cmp	r3, #0
 800188e:	d001      	beq.n	8001894 <MX_TIM1_Init+0xcc>
  {
    Error_Handler();
 8001890:	f7ff feda 	bl	8001648 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001894:	2360      	movs	r3, #96	; 0x60
 8001896:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8001898:	2300      	movs	r3, #0
 800189a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800189c:	2300      	movs	r3, #0
 800189e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80018a0:	2300      	movs	r3, #0
 80018a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80018a4:	2300      	movs	r3, #0
 80018a6:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80018a8:	2300      	movs	r3, #0
 80018aa:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80018ac:	2300      	movs	r3, #0
 80018ae:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80018b0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80018b4:	2200      	movs	r2, #0
 80018b6:	4619      	mov	r1, r3
 80018b8:	4818      	ldr	r0, [pc, #96]	; (800191c <MX_TIM1_Init+0x154>)
 80018ba:	f003 fcf5 	bl	80052a8 <HAL_TIM_PWM_ConfigChannel>
 80018be:	4603      	mov	r3, r0
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d001      	beq.n	80018c8 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 80018c4:	f7ff fec0 	bl	8001648 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80018c8:	2300      	movs	r3, #0
 80018ca:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80018cc:	2300      	movs	r3, #0
 80018ce:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80018d0:	2300      	movs	r3, #0
 80018d2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80018d4:	2300      	movs	r3, #0
 80018d6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80018d8:	2300      	movs	r3, #0
 80018da:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80018dc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018e0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80018e2:	2300      	movs	r3, #0
 80018e4:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80018e6:	2300      	movs	r3, #0
 80018e8:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80018ea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80018ee:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80018f0:	2300      	movs	r3, #0
 80018f2:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80018f4:	2300      	movs	r3, #0
 80018f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80018f8:	1d3b      	adds	r3, r7, #4
 80018fa:	4619      	mov	r1, r3
 80018fc:	4807      	ldr	r0, [pc, #28]	; (800191c <MX_TIM1_Init+0x154>)
 80018fe:	f004 faf3 	bl	8005ee8 <HAL_TIMEx_ConfigBreakDeadTime>
 8001902:	4603      	mov	r3, r0
 8001904:	2b00      	cmp	r3, #0
 8001906:	d001      	beq.n	800190c <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 8001908:	f7ff fe9e 	bl	8001648 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800190c:	4803      	ldr	r0, [pc, #12]	; (800191c <MX_TIM1_Init+0x154>)
 800190e:	f000 f8b5 	bl	8001a7c <HAL_TIM_MspPostInit>

}
 8001912:	bf00      	nop
 8001914:	3768      	adds	r7, #104	; 0x68
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}
 800191a:	bf00      	nop
 800191c:	200001e4 	.word	0x200001e4
 8001920:	40012c00 	.word	0x40012c00

08001924 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b08e      	sub	sp, #56	; 0x38
 8001928:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800192a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800192e:	2200      	movs	r2, #0
 8001930:	601a      	str	r2, [r3, #0]
 8001932:	605a      	str	r2, [r3, #4]
 8001934:	609a      	str	r2, [r3, #8]
 8001936:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001938:	f107 031c 	add.w	r3, r7, #28
 800193c:	2200      	movs	r2, #0
 800193e:	601a      	str	r2, [r3, #0]
 8001940:	605a      	str	r2, [r3, #4]
 8001942:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001944:	463b      	mov	r3, r7
 8001946:	2200      	movs	r2, #0
 8001948:	601a      	str	r2, [r3, #0]
 800194a:	605a      	str	r2, [r3, #4]
 800194c:	609a      	str	r2, [r3, #8]
 800194e:	60da      	str	r2, [r3, #12]
 8001950:	611a      	str	r2, [r3, #16]
 8001952:	615a      	str	r2, [r3, #20]
 8001954:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001956:	4b2c      	ldr	r3, [pc, #176]	; (8001a08 <MX_TIM2_Init+0xe4>)
 8001958:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800195c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 39999;
 800195e:	4b2a      	ldr	r3, [pc, #168]	; (8001a08 <MX_TIM2_Init+0xe4>)
 8001960:	f649 423f 	movw	r2, #39999	; 0x9c3f
 8001964:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001966:	4b28      	ldr	r3, [pc, #160]	; (8001a08 <MX_TIM2_Init+0xe4>)
 8001968:	2200      	movs	r2, #0
 800196a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 20000-1;
 800196c:	4b26      	ldr	r3, [pc, #152]	; (8001a08 <MX_TIM2_Init+0xe4>)
 800196e:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8001972:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001974:	4b24      	ldr	r3, [pc, #144]	; (8001a08 <MX_TIM2_Init+0xe4>)
 8001976:	2200      	movs	r2, #0
 8001978:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800197a:	4b23      	ldr	r3, [pc, #140]	; (8001a08 <MX_TIM2_Init+0xe4>)
 800197c:	2200      	movs	r2, #0
 800197e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001980:	4821      	ldr	r0, [pc, #132]	; (8001a08 <MX_TIM2_Init+0xe4>)
 8001982:	f003 f86b 	bl	8004a5c <HAL_TIM_Base_Init>
 8001986:	4603      	mov	r3, r0
 8001988:	2b00      	cmp	r3, #0
 800198a:	d001      	beq.n	8001990 <MX_TIM2_Init+0x6c>
  {
    Error_Handler();
 800198c:	f7ff fe5c 	bl	8001648 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001990:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001994:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001996:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800199a:	4619      	mov	r1, r3
 800199c:	481a      	ldr	r0, [pc, #104]	; (8001a08 <MX_TIM2_Init+0xe4>)
 800199e:	f003 fd97 	bl	80054d0 <HAL_TIM_ConfigClockSource>
 80019a2:	4603      	mov	r3, r0
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d001      	beq.n	80019ac <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 80019a8:	f7ff fe4e 	bl	8001648 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 80019ac:	4816      	ldr	r0, [pc, #88]	; (8001a08 <MX_TIM2_Init+0xe4>)
 80019ae:	f003 f938 	bl	8004c22 <HAL_TIM_OC_Init>
 80019b2:	4603      	mov	r3, r0
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d001      	beq.n	80019bc <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 80019b8:	f7ff fe46 	bl	8001648 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019bc:	2300      	movs	r3, #0
 80019be:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019c0:	2300      	movs	r3, #0
 80019c2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80019c4:	f107 031c 	add.w	r3, r7, #28
 80019c8:	4619      	mov	r1, r3
 80019ca:	480f      	ldr	r0, [pc, #60]	; (8001a08 <MX_TIM2_Init+0xe4>)
 80019cc:	f004 fa1e 	bl	8005e0c <HAL_TIMEx_MasterConfigSynchronization>
 80019d0:	4603      	mov	r3, r0
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d001      	beq.n	80019da <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 80019d6:	f7ff fe37 	bl	8001648 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80019da:	2300      	movs	r3, #0
 80019dc:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80019de:	2300      	movs	r3, #0
 80019e0:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80019e2:	2300      	movs	r3, #0
 80019e4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80019e6:	2300      	movs	r3, #0
 80019e8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80019ea:	463b      	mov	r3, r7
 80019ec:	2200      	movs	r2, #0
 80019ee:	4619      	mov	r1, r3
 80019f0:	4805      	ldr	r0, [pc, #20]	; (8001a08 <MX_TIM2_Init+0xe4>)
 80019f2:	f003 fbdf 	bl	80051b4 <HAL_TIM_OC_ConfigChannel>
 80019f6:	4603      	mov	r3, r0
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d001      	beq.n	8001a00 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 80019fc:	f7ff fe24 	bl	8001648 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001a00:	bf00      	nop
 8001a02:	3738      	adds	r7, #56	; 0x38
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bd80      	pop	{r7, pc}
 8001a08:	20000230 	.word	0x20000230

08001a0c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b084      	sub	sp, #16
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	4a16      	ldr	r2, [pc, #88]	; (8001a74 <HAL_TIM_Base_MspInit+0x68>)
 8001a1a:	4293      	cmp	r3, r2
 8001a1c:	d10c      	bne.n	8001a38 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001a1e:	4b16      	ldr	r3, [pc, #88]	; (8001a78 <HAL_TIM_Base_MspInit+0x6c>)
 8001a20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a22:	4a15      	ldr	r2, [pc, #84]	; (8001a78 <HAL_TIM_Base_MspInit+0x6c>)
 8001a24:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001a28:	6613      	str	r3, [r2, #96]	; 0x60
 8001a2a:	4b13      	ldr	r3, [pc, #76]	; (8001a78 <HAL_TIM_Base_MspInit+0x6c>)
 8001a2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a2e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001a32:	60fb      	str	r3, [r7, #12]
 8001a34:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001a36:	e018      	b.n	8001a6a <HAL_TIM_Base_MspInit+0x5e>
  else if(tim_baseHandle->Instance==TIM2)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a40:	d113      	bne.n	8001a6a <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001a42:	4b0d      	ldr	r3, [pc, #52]	; (8001a78 <HAL_TIM_Base_MspInit+0x6c>)
 8001a44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a46:	4a0c      	ldr	r2, [pc, #48]	; (8001a78 <HAL_TIM_Base_MspInit+0x6c>)
 8001a48:	f043 0301 	orr.w	r3, r3, #1
 8001a4c:	6593      	str	r3, [r2, #88]	; 0x58
 8001a4e:	4b0a      	ldr	r3, [pc, #40]	; (8001a78 <HAL_TIM_Base_MspInit+0x6c>)
 8001a50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a52:	f003 0301 	and.w	r3, r3, #1
 8001a56:	60bb      	str	r3, [r7, #8]
 8001a58:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	2100      	movs	r1, #0
 8001a5e:	201c      	movs	r0, #28
 8001a60:	f001 fba3 	bl	80031aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001a64:	201c      	movs	r0, #28
 8001a66:	f001 fbbc 	bl	80031e2 <HAL_NVIC_EnableIRQ>
}
 8001a6a:	bf00      	nop
 8001a6c:	3710      	adds	r7, #16
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}
 8001a72:	bf00      	nop
 8001a74:	40012c00 	.word	0x40012c00
 8001a78:	40021000 	.word	0x40021000

08001a7c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b088      	sub	sp, #32
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a84:	f107 030c 	add.w	r3, r7, #12
 8001a88:	2200      	movs	r2, #0
 8001a8a:	601a      	str	r2, [r3, #0]
 8001a8c:	605a      	str	r2, [r3, #4]
 8001a8e:	609a      	str	r2, [r3, #8]
 8001a90:	60da      	str	r2, [r3, #12]
 8001a92:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4a12      	ldr	r2, [pc, #72]	; (8001ae4 <HAL_TIM_MspPostInit+0x68>)
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d11d      	bne.n	8001ada <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a9e:	4b12      	ldr	r3, [pc, #72]	; (8001ae8 <HAL_TIM_MspPostInit+0x6c>)
 8001aa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001aa2:	4a11      	ldr	r2, [pc, #68]	; (8001ae8 <HAL_TIM_MspPostInit+0x6c>)
 8001aa4:	f043 0301 	orr.w	r3, r3, #1
 8001aa8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001aaa:	4b0f      	ldr	r3, [pc, #60]	; (8001ae8 <HAL_TIM_MspPostInit+0x6c>)
 8001aac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001aae:	f003 0301 	and.w	r3, r3, #1
 8001ab2:	60bb      	str	r3, [r7, #8]
 8001ab4:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001ab6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001aba:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001abc:	2302      	movs	r3, #2
 8001abe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001ac8:	2301      	movs	r3, #1
 8001aca:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001acc:	f107 030c 	add.w	r3, r7, #12
 8001ad0:	4619      	mov	r1, r3
 8001ad2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ad6:	f001 fc1d 	bl	8003314 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001ada:	bf00      	nop
 8001adc:	3720      	adds	r7, #32
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	bf00      	nop
 8001ae4:	40012c00 	.word	0x40012c00
 8001ae8:	40021000 	.word	0x40021000

08001aec <trans_recep_init>:

#include "transmisor_receptor_red.h"


void trans_recep_init( transmisor_receptor_red *t_r_red, UART_HandleTypeDef *uart)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b082      	sub	sp, #8
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
 8001af4:	6039      	str	r1, [r7, #0]
	t_r_red->puerto_uart = *uart;
 8001af6:	687a      	ldr	r2, [r7, #4]
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	4610      	mov	r0, r2
 8001afc:	4619      	mov	r1, r3
 8001afe:	2384      	movs	r3, #132	; 0x84
 8001b00:	461a      	mov	r2, r3
 8001b02:	f005 fe59 	bl	80077b8 <memcpy>
}
 8001b06:	bf00      	nop
 8001b08:	3708      	adds	r7, #8
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bd80      	pop	{r7, pc}

08001b0e <send>:

void send(transmisor_receptor_red *t_r_red, uint8_t *command_1, uint8_t *command_2)
{
 8001b0e:	b580      	push	{r7, lr}
 8001b10:	b084      	sub	sp, #16
 8001b12:	af00      	add	r7, sp, #0
 8001b14:	60f8      	str	r0, [r7, #12]
 8001b16:	60b9      	str	r1, [r7, #8]
 8001b18:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&(t_r_red->puerto_uart), command_1, 1, 1000);
 8001b1a:	68f8      	ldr	r0, [r7, #12]
 8001b1c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b20:	2201      	movs	r2, #1
 8001b22:	68b9      	ldr	r1, [r7, #8]
 8001b24:	f004 fac4 	bl	80060b0 <HAL_UART_Transmit>
	HAL_UART_Transmit(&(t_r_red->puerto_uart), command_2, 1, 1000);
 8001b28:	68f8      	ldr	r0, [r7, #12]
 8001b2a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b2e:	2201      	movs	r2, #1
 8001b30:	6879      	ldr	r1, [r7, #4]
 8001b32:	f004 fabd 	bl	80060b0 <HAL_UART_Transmit>
}
 8001b36:	bf00      	nop
 8001b38:	3710      	adds	r7, #16
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}
	...

08001b40 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001b44:	4b15      	ldr	r3, [pc, #84]	; (8001b9c <MX_USART1_UART_Init+0x5c>)
 8001b46:	4a16      	ldr	r2, [pc, #88]	; (8001ba0 <MX_USART1_UART_Init+0x60>)
 8001b48:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001b4a:	4b14      	ldr	r3, [pc, #80]	; (8001b9c <MX_USART1_UART_Init+0x5c>)
 8001b4c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001b50:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001b52:	4b12      	ldr	r3, [pc, #72]	; (8001b9c <MX_USART1_UART_Init+0x5c>)
 8001b54:	2200      	movs	r2, #0
 8001b56:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001b58:	4b10      	ldr	r3, [pc, #64]	; (8001b9c <MX_USART1_UART_Init+0x5c>)
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001b5e:	4b0f      	ldr	r3, [pc, #60]	; (8001b9c <MX_USART1_UART_Init+0x5c>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001b64:	4b0d      	ldr	r3, [pc, #52]	; (8001b9c <MX_USART1_UART_Init+0x5c>)
 8001b66:	220c      	movs	r2, #12
 8001b68:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b6a:	4b0c      	ldr	r3, [pc, #48]	; (8001b9c <MX_USART1_UART_Init+0x5c>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b70:	4b0a      	ldr	r3, [pc, #40]	; (8001b9c <MX_USART1_UART_Init+0x5c>)
 8001b72:	2200      	movs	r2, #0
 8001b74:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001b76:	4b09      	ldr	r3, [pc, #36]	; (8001b9c <MX_USART1_UART_Init+0x5c>)
 8001b78:	2200      	movs	r2, #0
 8001b7a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001b7c:	4b07      	ldr	r3, [pc, #28]	; (8001b9c <MX_USART1_UART_Init+0x5c>)
 8001b7e:	2200      	movs	r2, #0
 8001b80:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RS485Ex_Init(&huart1, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 8001b82:	2300      	movs	r3, #0
 8001b84:	2200      	movs	r2, #0
 8001b86:	2100      	movs	r1, #0
 8001b88:	4804      	ldr	r0, [pc, #16]	; (8001b9c <MX_USART1_UART_Init+0x5c>)
 8001b8a:	f005 fd80 	bl	800768e <HAL_RS485Ex_Init>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d001      	beq.n	8001b98 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001b94:	f7ff fd58 	bl	8001648 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001b98:	bf00      	nop
 8001b9a:	bd80      	pop	{r7, pc}
 8001b9c:	2000027c 	.word	0x2000027c
 8001ba0:	40013800 	.word	0x40013800

08001ba4 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001ba8:	4b14      	ldr	r3, [pc, #80]	; (8001bfc <MX_USART2_UART_Init+0x58>)
 8001baa:	4a15      	ldr	r2, [pc, #84]	; (8001c00 <MX_USART2_UART_Init+0x5c>)
 8001bac:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001bae:	4b13      	ldr	r3, [pc, #76]	; (8001bfc <MX_USART2_UART_Init+0x58>)
 8001bb0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001bb4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001bb6:	4b11      	ldr	r3, [pc, #68]	; (8001bfc <MX_USART2_UART_Init+0x58>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001bbc:	4b0f      	ldr	r3, [pc, #60]	; (8001bfc <MX_USART2_UART_Init+0x58>)
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001bc2:	4b0e      	ldr	r3, [pc, #56]	; (8001bfc <MX_USART2_UART_Init+0x58>)
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001bc8:	4b0c      	ldr	r3, [pc, #48]	; (8001bfc <MX_USART2_UART_Init+0x58>)
 8001bca:	220c      	movs	r2, #12
 8001bcc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001bce:	4b0b      	ldr	r3, [pc, #44]	; (8001bfc <MX_USART2_UART_Init+0x58>)
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001bd4:	4b09      	ldr	r3, [pc, #36]	; (8001bfc <MX_USART2_UART_Init+0x58>)
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001bda:	4b08      	ldr	r3, [pc, #32]	; (8001bfc <MX_USART2_UART_Init+0x58>)
 8001bdc:	2200      	movs	r2, #0
 8001bde:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001be0:	4b06      	ldr	r3, [pc, #24]	; (8001bfc <MX_USART2_UART_Init+0x58>)
 8001be2:	2200      	movs	r2, #0
 8001be4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001be6:	4805      	ldr	r0, [pc, #20]	; (8001bfc <MX_USART2_UART_Init+0x58>)
 8001be8:	f004 fa14 	bl	8006014 <HAL_UART_Init>
 8001bec:	4603      	mov	r3, r0
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d001      	beq.n	8001bf6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001bf2:	f7ff fd29 	bl	8001648 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001bf6:	bf00      	nop
 8001bf8:	bd80      	pop	{r7, pc}
 8001bfa:	bf00      	nop
 8001bfc:	20000300 	.word	0x20000300
 8001c00:	40004400 	.word	0x40004400

08001c04 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b0a6      	sub	sp, #152	; 0x98
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c0c:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001c10:	2200      	movs	r2, #0
 8001c12:	601a      	str	r2, [r3, #0]
 8001c14:	605a      	str	r2, [r3, #4]
 8001c16:	609a      	str	r2, [r3, #8]
 8001c18:	60da      	str	r2, [r3, #12]
 8001c1a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c1c:	f107 031c 	add.w	r3, r7, #28
 8001c20:	2268      	movs	r2, #104	; 0x68
 8001c22:	2100      	movs	r1, #0
 8001c24:	4618      	mov	r0, r3
 8001c26:	f005 fdd5 	bl	80077d4 <memset>
  if(uartHandle->Instance==USART1)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4a47      	ldr	r2, [pc, #284]	; (8001d4c <HAL_UART_MspInit+0x148>)
 8001c30:	4293      	cmp	r3, r2
 8001c32:	d13d      	bne.n	8001cb0 <HAL_UART_MspInit+0xac>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001c34:	2301      	movs	r3, #1
 8001c36:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c3c:	f107 031c 	add.w	r3, r7, #28
 8001c40:	4618      	mov	r0, r3
 8001c42:	f002 fbad 	bl	80043a0 <HAL_RCCEx_PeriphCLKConfig>
 8001c46:	4603      	mov	r3, r0
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d001      	beq.n	8001c50 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001c4c:	f7ff fcfc 	bl	8001648 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001c50:	4b3f      	ldr	r3, [pc, #252]	; (8001d50 <HAL_UART_MspInit+0x14c>)
 8001c52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c54:	4a3e      	ldr	r2, [pc, #248]	; (8001d50 <HAL_UART_MspInit+0x14c>)
 8001c56:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c5a:	6613      	str	r3, [r2, #96]	; 0x60
 8001c5c:	4b3c      	ldr	r3, [pc, #240]	; (8001d50 <HAL_UART_MspInit+0x14c>)
 8001c5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c60:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c64:	61bb      	str	r3, [r7, #24]
 8001c66:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c68:	4b39      	ldr	r3, [pc, #228]	; (8001d50 <HAL_UART_MspInit+0x14c>)
 8001c6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c6c:	4a38      	ldr	r2, [pc, #224]	; (8001d50 <HAL_UART_MspInit+0x14c>)
 8001c6e:	f043 0301 	orr.w	r3, r3, #1
 8001c72:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c74:	4b36      	ldr	r3, [pc, #216]	; (8001d50 <HAL_UART_MspInit+0x14c>)
 8001c76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c78:	f003 0301 	and.w	r3, r3, #1
 8001c7c:	617b      	str	r3, [r7, #20]
 8001c7e:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    PA12     ------> USART1_DE
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_12;
 8001c80:	f44f 53b0 	mov.w	r3, #5632	; 0x1600
 8001c84:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c88:	2302      	movs	r3, #2
 8001c8a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c94:	2303      	movs	r3, #3
 8001c96:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001c9a:	2307      	movs	r3, #7
 8001c9c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ca0:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001ca4:	4619      	mov	r1, r3
 8001ca6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001caa:	f001 fb33 	bl	8003314 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001cae:	e048      	b.n	8001d42 <HAL_UART_MspInit+0x13e>
  else if(uartHandle->Instance==USART2)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4a27      	ldr	r2, [pc, #156]	; (8001d54 <HAL_UART_MspInit+0x150>)
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	d143      	bne.n	8001d42 <HAL_UART_MspInit+0x13e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001cba:	2302      	movs	r3, #2
 8001cbc:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001cc2:	f107 031c 	add.w	r3, r7, #28
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	f002 fb6a 	bl	80043a0 <HAL_RCCEx_PeriphCLKConfig>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d001      	beq.n	8001cd6 <HAL_UART_MspInit+0xd2>
      Error_Handler();
 8001cd2:	f7ff fcb9 	bl	8001648 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001cd6:	4b1e      	ldr	r3, [pc, #120]	; (8001d50 <HAL_UART_MspInit+0x14c>)
 8001cd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cda:	4a1d      	ldr	r2, [pc, #116]	; (8001d50 <HAL_UART_MspInit+0x14c>)
 8001cdc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ce0:	6593      	str	r3, [r2, #88]	; 0x58
 8001ce2:	4b1b      	ldr	r3, [pc, #108]	; (8001d50 <HAL_UART_MspInit+0x14c>)
 8001ce4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ce6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cea:	613b      	str	r3, [r7, #16]
 8001cec:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cee:	4b18      	ldr	r3, [pc, #96]	; (8001d50 <HAL_UART_MspInit+0x14c>)
 8001cf0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cf2:	4a17      	ldr	r2, [pc, #92]	; (8001d50 <HAL_UART_MspInit+0x14c>)
 8001cf4:	f043 0301 	orr.w	r3, r3, #1
 8001cf8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001cfa:	4b15      	ldr	r3, [pc, #84]	; (8001d50 <HAL_UART_MspInit+0x14c>)
 8001cfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cfe:	f003 0301 	and.w	r3, r3, #1
 8001d02:	60fb      	str	r3, [r7, #12]
 8001d04:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001d06:	230c      	movs	r3, #12
 8001d08:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d0c:	2302      	movs	r3, #2
 8001d0e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d12:	2300      	movs	r3, #0
 8001d14:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d18:	2303      	movs	r3, #3
 8001d1a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001d1e:	2307      	movs	r3, #7
 8001d20:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d24:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001d28:	4619      	mov	r1, r3
 8001d2a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d2e:	f001 faf1 	bl	8003314 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001d32:	2200      	movs	r2, #0
 8001d34:	2100      	movs	r1, #0
 8001d36:	2026      	movs	r0, #38	; 0x26
 8001d38:	f001 fa37 	bl	80031aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001d3c:	2026      	movs	r0, #38	; 0x26
 8001d3e:	f001 fa50 	bl	80031e2 <HAL_NVIC_EnableIRQ>
}
 8001d42:	bf00      	nop
 8001d44:	3798      	adds	r7, #152	; 0x98
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}
 8001d4a:	bf00      	nop
 8001d4c:	40013800 	.word	0x40013800
 8001d50:	40021000 	.word	0x40021000
 8001d54:	40004400 	.word	0x40004400

08001d58 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001d58:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d90 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001d5c:	f7ff fd22 	bl	80017a4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d60:	480c      	ldr	r0, [pc, #48]	; (8001d94 <LoopForever+0x6>)
  ldr r1, =_edata
 8001d62:	490d      	ldr	r1, [pc, #52]	; (8001d98 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001d64:	4a0d      	ldr	r2, [pc, #52]	; (8001d9c <LoopForever+0xe>)
  movs r3, #0
 8001d66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d68:	e002      	b.n	8001d70 <LoopCopyDataInit>

08001d6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d6e:	3304      	adds	r3, #4

08001d70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d74:	d3f9      	bcc.n	8001d6a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d76:	4a0a      	ldr	r2, [pc, #40]	; (8001da0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001d78:	4c0a      	ldr	r4, [pc, #40]	; (8001da4 <LoopForever+0x16>)
  movs r3, #0
 8001d7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d7c:	e001      	b.n	8001d82 <LoopFillZerobss>

08001d7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d80:	3204      	adds	r2, #4

08001d82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d84:	d3fb      	bcc.n	8001d7e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001d86:	f005 fcf3 	bl	8007770 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001d8a:	f7ff fa95 	bl	80012b8 <main>

08001d8e <LoopForever>:

LoopForever:
    b LoopForever
 8001d8e:	e7fe      	b.n	8001d8e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001d90:	20028000 	.word	0x20028000
  ldr r0, =_sdata
 8001d94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d98:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001d9c:	08007874 	.word	0x08007874
  ldr r2, =_sbss
 8001da0:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001da4:	20000388 	.word	0x20000388

08001da8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001da8:	e7fe      	b.n	8001da8 <ADC1_IRQHandler>
	...

08001dac <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b082      	sub	sp, #8
 8001db0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001db2:	2300      	movs	r3, #0
 8001db4:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001db6:	4b0c      	ldr	r3, [pc, #48]	; (8001de8 <HAL_Init+0x3c>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4a0b      	ldr	r2, [pc, #44]	; (8001de8 <HAL_Init+0x3c>)
 8001dbc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dc0:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001dc2:	2003      	movs	r0, #3
 8001dc4:	f001 f9e6 	bl	8003194 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001dc8:	2000      	movs	r0, #0
 8001dca:	f000 f80f 	bl	8001dec <HAL_InitTick>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d002      	beq.n	8001dda <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	71fb      	strb	r3, [r7, #7]
 8001dd8:	e001      	b.n	8001dde <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001dda:	f7ff fc81 	bl	80016e0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001dde:	79fb      	ldrb	r3, [r7, #7]
}
 8001de0:	4618      	mov	r0, r3
 8001de2:	3708      	adds	r7, #8
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bd80      	pop	{r7, pc}
 8001de8:	40022000 	.word	0x40022000

08001dec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b084      	sub	sp, #16
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001df4:	2300      	movs	r3, #0
 8001df6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001df8:	4b17      	ldr	r3, [pc, #92]	; (8001e58 <HAL_InitTick+0x6c>)
 8001dfa:	781b      	ldrb	r3, [r3, #0]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d023      	beq.n	8001e48 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001e00:	4b16      	ldr	r3, [pc, #88]	; (8001e5c <HAL_InitTick+0x70>)
 8001e02:	681a      	ldr	r2, [r3, #0]
 8001e04:	4b14      	ldr	r3, [pc, #80]	; (8001e58 <HAL_InitTick+0x6c>)
 8001e06:	781b      	ldrb	r3, [r3, #0]
 8001e08:	4619      	mov	r1, r3
 8001e0a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e0e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e12:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e16:	4618      	mov	r0, r3
 8001e18:	f001 f9f1 	bl	80031fe <HAL_SYSTICK_Config>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d10f      	bne.n	8001e42 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	2b0f      	cmp	r3, #15
 8001e26:	d809      	bhi.n	8001e3c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e28:	2200      	movs	r2, #0
 8001e2a:	6879      	ldr	r1, [r7, #4]
 8001e2c:	f04f 30ff 	mov.w	r0, #4294967295
 8001e30:	f001 f9bb 	bl	80031aa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001e34:	4a0a      	ldr	r2, [pc, #40]	; (8001e60 <HAL_InitTick+0x74>)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6013      	str	r3, [r2, #0]
 8001e3a:	e007      	b.n	8001e4c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001e3c:	2301      	movs	r3, #1
 8001e3e:	73fb      	strb	r3, [r7, #15]
 8001e40:	e004      	b.n	8001e4c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001e42:	2301      	movs	r3, #1
 8001e44:	73fb      	strb	r3, [r7, #15]
 8001e46:	e001      	b.n	8001e4c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001e48:	2301      	movs	r3, #1
 8001e4a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001e4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e4e:	4618      	mov	r0, r3
 8001e50:	3710      	adds	r7, #16
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd80      	pop	{r7, pc}
 8001e56:	bf00      	nop
 8001e58:	2000000c 	.word	0x2000000c
 8001e5c:	20000004 	.word	0x20000004
 8001e60:	20000008 	.word	0x20000008

08001e64 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e64:	b480      	push	{r7}
 8001e66:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001e68:	4b06      	ldr	r3, [pc, #24]	; (8001e84 <HAL_IncTick+0x20>)
 8001e6a:	781b      	ldrb	r3, [r3, #0]
 8001e6c:	461a      	mov	r2, r3
 8001e6e:	4b06      	ldr	r3, [pc, #24]	; (8001e88 <HAL_IncTick+0x24>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4413      	add	r3, r2
 8001e74:	4a04      	ldr	r2, [pc, #16]	; (8001e88 <HAL_IncTick+0x24>)
 8001e76:	6013      	str	r3, [r2, #0]
}
 8001e78:	bf00      	nop
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e80:	4770      	bx	lr
 8001e82:	bf00      	nop
 8001e84:	2000000c 	.word	0x2000000c
 8001e88:	20000384 	.word	0x20000384

08001e8c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	af00      	add	r7, sp, #0
  return uwTick;
 8001e90:	4b03      	ldr	r3, [pc, #12]	; (8001ea0 <HAL_GetTick+0x14>)
 8001e92:	681b      	ldr	r3, [r3, #0]
}
 8001e94:	4618      	mov	r0, r3
 8001e96:	46bd      	mov	sp, r7
 8001e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9c:	4770      	bx	lr
 8001e9e:	bf00      	nop
 8001ea0:	20000384 	.word	0x20000384

08001ea4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	b083      	sub	sp, #12
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
 8001eac:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	689b      	ldr	r3, [r3, #8]
 8001eb2:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	431a      	orrs	r2, r3
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	609a      	str	r2, [r3, #8]
}
 8001ebe:	bf00      	nop
 8001ec0:	370c      	adds	r7, #12
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec8:	4770      	bx	lr

08001eca <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001eca:	b480      	push	{r7}
 8001ecc:	b083      	sub	sp, #12
 8001ece:	af00      	add	r7, sp, #0
 8001ed0:	6078      	str	r0, [r7, #4]
 8001ed2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	689b      	ldr	r3, [r3, #8]
 8001ed8:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	431a      	orrs	r2, r3
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	609a      	str	r2, [r3, #8]
}
 8001ee4:	bf00      	nop
 8001ee6:	370c      	adds	r7, #12
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eee:	4770      	bx	lr

08001ef0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	b083      	sub	sp, #12
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	689b      	ldr	r3, [r3, #8]
 8001efc:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001f00:	4618      	mov	r0, r3
 8001f02:	370c      	adds	r7, #12
 8001f04:	46bd      	mov	sp, r7
 8001f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0a:	4770      	bx	lr

08001f0c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	b087      	sub	sp, #28
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	60f8      	str	r0, [r7, #12]
 8001f14:	60b9      	str	r1, [r7, #8]
 8001f16:	607a      	str	r2, [r7, #4]
 8001f18:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	3360      	adds	r3, #96	; 0x60
 8001f1e:	461a      	mov	r2, r3
 8001f20:	68bb      	ldr	r3, [r7, #8]
 8001f22:	009b      	lsls	r3, r3, #2
 8001f24:	4413      	add	r3, r2
 8001f26:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001f28:	697b      	ldr	r3, [r7, #20]
 8001f2a:	681a      	ldr	r2, [r3, #0]
 8001f2c:	4b08      	ldr	r3, [pc, #32]	; (8001f50 <LL_ADC_SetOffset+0x44>)
 8001f2e:	4013      	ands	r3, r2
 8001f30:	687a      	ldr	r2, [r7, #4]
 8001f32:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001f36:	683a      	ldr	r2, [r7, #0]
 8001f38:	430a      	orrs	r2, r1
 8001f3a:	4313      	orrs	r3, r2
 8001f3c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001f40:	697b      	ldr	r3, [r7, #20]
 8001f42:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001f44:	bf00      	nop
 8001f46:	371c      	adds	r7, #28
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4e:	4770      	bx	lr
 8001f50:	03fff000 	.word	0x03fff000

08001f54 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001f54:	b480      	push	{r7}
 8001f56:	b085      	sub	sp, #20
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
 8001f5c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	3360      	adds	r3, #96	; 0x60
 8001f62:	461a      	mov	r2, r3
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	009b      	lsls	r3, r3, #2
 8001f68:	4413      	add	r3, r2
 8001f6a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001f74:	4618      	mov	r0, r3
 8001f76:	3714      	adds	r7, #20
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7e:	4770      	bx	lr

08001f80 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001f80:	b480      	push	{r7}
 8001f82:	b087      	sub	sp, #28
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	60f8      	str	r0, [r7, #12]
 8001f88:	60b9      	str	r1, [r7, #8]
 8001f8a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	3360      	adds	r3, #96	; 0x60
 8001f90:	461a      	mov	r2, r3
 8001f92:	68bb      	ldr	r3, [r7, #8]
 8001f94:	009b      	lsls	r3, r3, #2
 8001f96:	4413      	add	r3, r2
 8001f98:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001f9a:	697b      	ldr	r3, [r7, #20]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	431a      	orrs	r2, r3
 8001fa6:	697b      	ldr	r3, [r7, #20]
 8001fa8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001faa:	bf00      	nop
 8001fac:	371c      	adds	r7, #28
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb4:	4770      	bx	lr

08001fb6 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001fb6:	b480      	push	{r7}
 8001fb8:	b083      	sub	sp, #12
 8001fba:	af00      	add	r7, sp, #0
 8001fbc:	6078      	str	r0, [r7, #4]
 8001fbe:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	695b      	ldr	r3, [r3, #20]
 8001fc4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	431a      	orrs	r2, r3
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	615a      	str	r2, [r3, #20]
}
 8001fd0:	bf00      	nop
 8001fd2:	370c      	adds	r7, #12
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fda:	4770      	bx	lr

08001fdc <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	b083      	sub	sp, #12
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	68db      	ldr	r3, [r3, #12]
 8001fe8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d101      	bne.n	8001ff4 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001ff0:	2301      	movs	r3, #1
 8001ff2:	e000      	b.n	8001ff6 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001ff4:	2300      	movs	r3, #0
}
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	370c      	adds	r7, #12
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002000:	4770      	bx	lr

08002002 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002002:	b480      	push	{r7}
 8002004:	b087      	sub	sp, #28
 8002006:	af00      	add	r7, sp, #0
 8002008:	60f8      	str	r0, [r7, #12]
 800200a:	60b9      	str	r1, [r7, #8]
 800200c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	3330      	adds	r3, #48	; 0x30
 8002012:	461a      	mov	r2, r3
 8002014:	68bb      	ldr	r3, [r7, #8]
 8002016:	0a1b      	lsrs	r3, r3, #8
 8002018:	009b      	lsls	r3, r3, #2
 800201a:	f003 030c 	and.w	r3, r3, #12
 800201e:	4413      	add	r3, r2
 8002020:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002022:	697b      	ldr	r3, [r7, #20]
 8002024:	681a      	ldr	r2, [r3, #0]
 8002026:	68bb      	ldr	r3, [r7, #8]
 8002028:	f003 031f 	and.w	r3, r3, #31
 800202c:	211f      	movs	r1, #31
 800202e:	fa01 f303 	lsl.w	r3, r1, r3
 8002032:	43db      	mvns	r3, r3
 8002034:	401a      	ands	r2, r3
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	0e9b      	lsrs	r3, r3, #26
 800203a:	f003 011f 	and.w	r1, r3, #31
 800203e:	68bb      	ldr	r3, [r7, #8]
 8002040:	f003 031f 	and.w	r3, r3, #31
 8002044:	fa01 f303 	lsl.w	r3, r1, r3
 8002048:	431a      	orrs	r2, r3
 800204a:	697b      	ldr	r3, [r7, #20]
 800204c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800204e:	bf00      	nop
 8002050:	371c      	adds	r7, #28
 8002052:	46bd      	mov	sp, r7
 8002054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002058:	4770      	bx	lr

0800205a <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800205a:	b480      	push	{r7}
 800205c:	b087      	sub	sp, #28
 800205e:	af00      	add	r7, sp, #0
 8002060:	60f8      	str	r0, [r7, #12]
 8002062:	60b9      	str	r1, [r7, #8]
 8002064:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	3314      	adds	r3, #20
 800206a:	461a      	mov	r2, r3
 800206c:	68bb      	ldr	r3, [r7, #8]
 800206e:	0e5b      	lsrs	r3, r3, #25
 8002070:	009b      	lsls	r3, r3, #2
 8002072:	f003 0304 	and.w	r3, r3, #4
 8002076:	4413      	add	r3, r2
 8002078:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800207a:	697b      	ldr	r3, [r7, #20]
 800207c:	681a      	ldr	r2, [r3, #0]
 800207e:	68bb      	ldr	r3, [r7, #8]
 8002080:	0d1b      	lsrs	r3, r3, #20
 8002082:	f003 031f 	and.w	r3, r3, #31
 8002086:	2107      	movs	r1, #7
 8002088:	fa01 f303 	lsl.w	r3, r1, r3
 800208c:	43db      	mvns	r3, r3
 800208e:	401a      	ands	r2, r3
 8002090:	68bb      	ldr	r3, [r7, #8]
 8002092:	0d1b      	lsrs	r3, r3, #20
 8002094:	f003 031f 	and.w	r3, r3, #31
 8002098:	6879      	ldr	r1, [r7, #4]
 800209a:	fa01 f303 	lsl.w	r3, r1, r3
 800209e:	431a      	orrs	r2, r3
 80020a0:	697b      	ldr	r3, [r7, #20]
 80020a2:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80020a4:	bf00      	nop
 80020a6:	371c      	adds	r7, #28
 80020a8:	46bd      	mov	sp, r7
 80020aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ae:	4770      	bx	lr

080020b0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80020b0:	b480      	push	{r7}
 80020b2:	b085      	sub	sp, #20
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	60f8      	str	r0, [r7, #12]
 80020b8:	60b9      	str	r1, [r7, #8]
 80020ba:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80020c2:	68bb      	ldr	r3, [r7, #8]
 80020c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020c8:	43db      	mvns	r3, r3
 80020ca:	401a      	ands	r2, r3
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	f003 0318 	and.w	r3, r3, #24
 80020d2:	4908      	ldr	r1, [pc, #32]	; (80020f4 <LL_ADC_SetChannelSingleDiff+0x44>)
 80020d4:	40d9      	lsrs	r1, r3
 80020d6:	68bb      	ldr	r3, [r7, #8]
 80020d8:	400b      	ands	r3, r1
 80020da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020de:	431a      	orrs	r2, r3
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80020e6:	bf00      	nop
 80020e8:	3714      	adds	r7, #20
 80020ea:	46bd      	mov	sp, r7
 80020ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f0:	4770      	bx	lr
 80020f2:	bf00      	nop
 80020f4:	0007ffff 	.word	0x0007ffff

080020f8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80020f8:	b480      	push	{r7}
 80020fa:	b083      	sub	sp, #12
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	689b      	ldr	r3, [r3, #8]
 8002104:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002108:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800210c:	687a      	ldr	r2, [r7, #4]
 800210e:	6093      	str	r3, [r2, #8]
}
 8002110:	bf00      	nop
 8002112:	370c      	adds	r7, #12
 8002114:	46bd      	mov	sp, r7
 8002116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211a:	4770      	bx	lr

0800211c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 800211c:	b480      	push	{r7}
 800211e:	b083      	sub	sp, #12
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	689b      	ldr	r3, [r3, #8]
 8002128:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800212c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002130:	d101      	bne.n	8002136 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002132:	2301      	movs	r3, #1
 8002134:	e000      	b.n	8002138 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002136:	2300      	movs	r3, #0
}
 8002138:	4618      	mov	r0, r3
 800213a:	370c      	adds	r7, #12
 800213c:	46bd      	mov	sp, r7
 800213e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002142:	4770      	bx	lr

08002144 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002144:	b480      	push	{r7}
 8002146:	b083      	sub	sp, #12
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	689b      	ldr	r3, [r3, #8]
 8002150:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002154:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002158:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002160:	bf00      	nop
 8002162:	370c      	adds	r7, #12
 8002164:	46bd      	mov	sp, r7
 8002166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216a:	4770      	bx	lr

0800216c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800216c:	b480      	push	{r7}
 800216e:	b083      	sub	sp, #12
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	689b      	ldr	r3, [r3, #8]
 8002178:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800217c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002180:	d101      	bne.n	8002186 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002182:	2301      	movs	r3, #1
 8002184:	e000      	b.n	8002188 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002186:	2300      	movs	r3, #0
}
 8002188:	4618      	mov	r0, r3
 800218a:	370c      	adds	r7, #12
 800218c:	46bd      	mov	sp, r7
 800218e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002192:	4770      	bx	lr

08002194 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002194:	b480      	push	{r7}
 8002196:	b083      	sub	sp, #12
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	689b      	ldr	r3, [r3, #8]
 80021a0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80021a4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80021a8:	f043 0201 	orr.w	r2, r3, #1
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80021b0:	bf00      	nop
 80021b2:	370c      	adds	r7, #12
 80021b4:	46bd      	mov	sp, r7
 80021b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ba:	4770      	bx	lr

080021bc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80021bc:	b480      	push	{r7}
 80021be:	b083      	sub	sp, #12
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	689b      	ldr	r3, [r3, #8]
 80021c8:	f003 0301 	and.w	r3, r3, #1
 80021cc:	2b01      	cmp	r3, #1
 80021ce:	d101      	bne.n	80021d4 <LL_ADC_IsEnabled+0x18>
 80021d0:	2301      	movs	r3, #1
 80021d2:	e000      	b.n	80021d6 <LL_ADC_IsEnabled+0x1a>
 80021d4:	2300      	movs	r3, #0
}
 80021d6:	4618      	mov	r0, r3
 80021d8:	370c      	adds	r7, #12
 80021da:	46bd      	mov	sp, r7
 80021dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e0:	4770      	bx	lr

080021e2 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80021e2:	b480      	push	{r7}
 80021e4:	b083      	sub	sp, #12
 80021e6:	af00      	add	r7, sp, #0
 80021e8:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	689b      	ldr	r3, [r3, #8]
 80021ee:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80021f2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80021f6:	f043 0204 	orr.w	r2, r3, #4
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80021fe:	bf00      	nop
 8002200:	370c      	adds	r7, #12
 8002202:	46bd      	mov	sp, r7
 8002204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002208:	4770      	bx	lr

0800220a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800220a:	b480      	push	{r7}
 800220c:	b083      	sub	sp, #12
 800220e:	af00      	add	r7, sp, #0
 8002210:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	689b      	ldr	r3, [r3, #8]
 8002216:	f003 0304 	and.w	r3, r3, #4
 800221a:	2b04      	cmp	r3, #4
 800221c:	d101      	bne.n	8002222 <LL_ADC_REG_IsConversionOngoing+0x18>
 800221e:	2301      	movs	r3, #1
 8002220:	e000      	b.n	8002224 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002222:	2300      	movs	r3, #0
}
 8002224:	4618      	mov	r0, r3
 8002226:	370c      	adds	r7, #12
 8002228:	46bd      	mov	sp, r7
 800222a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222e:	4770      	bx	lr

08002230 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002230:	b480      	push	{r7}
 8002232:	b083      	sub	sp, #12
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	689b      	ldr	r3, [r3, #8]
 800223c:	f003 0308 	and.w	r3, r3, #8
 8002240:	2b08      	cmp	r3, #8
 8002242:	d101      	bne.n	8002248 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002244:	2301      	movs	r3, #1
 8002246:	e000      	b.n	800224a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002248:	2300      	movs	r3, #0
}
 800224a:	4618      	mov	r0, r3
 800224c:	370c      	adds	r7, #12
 800224e:	46bd      	mov	sp, r7
 8002250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002254:	4770      	bx	lr
	...

08002258 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b088      	sub	sp, #32
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002260:	2300      	movs	r3, #0
 8002262:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002264:	2300      	movs	r3, #0
 8002266:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2b00      	cmp	r3, #0
 800226c:	d101      	bne.n	8002272 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800226e:	2301      	movs	r3, #1
 8002270:	e12f      	b.n	80024d2 <HAL_ADC_Init+0x27a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	691b      	ldr	r3, [r3, #16]
 8002276:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800227c:	2b00      	cmp	r3, #0
 800227e:	d109      	bne.n	8002294 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002280:	6878      	ldr	r0, [r7, #4]
 8002282:	f7fe fd7b 	bl	8000d7c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	2200      	movs	r2, #0
 800228a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2200      	movs	r2, #0
 8002290:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4618      	mov	r0, r3
 800229a:	f7ff ff3f 	bl	800211c <LL_ADC_IsDeepPowerDownEnabled>
 800229e:	4603      	mov	r3, r0
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d004      	beq.n	80022ae <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4618      	mov	r0, r3
 80022aa:	f7ff ff25 	bl	80020f8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4618      	mov	r0, r3
 80022b4:	f7ff ff5a 	bl	800216c <LL_ADC_IsInternalRegulatorEnabled>
 80022b8:	4603      	mov	r3, r0
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d115      	bne.n	80022ea <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	4618      	mov	r0, r3
 80022c4:	f7ff ff3e 	bl	8002144 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80022c8:	4b84      	ldr	r3, [pc, #528]	; (80024dc <HAL_ADC_Init+0x284>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	099b      	lsrs	r3, r3, #6
 80022ce:	4a84      	ldr	r2, [pc, #528]	; (80024e0 <HAL_ADC_Init+0x288>)
 80022d0:	fba2 2303 	umull	r2, r3, r2, r3
 80022d4:	099b      	lsrs	r3, r3, #6
 80022d6:	3301      	adds	r3, #1
 80022d8:	005b      	lsls	r3, r3, #1
 80022da:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80022dc:	e002      	b.n	80022e4 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80022de:	68bb      	ldr	r3, [r7, #8]
 80022e0:	3b01      	subs	r3, #1
 80022e2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80022e4:	68bb      	ldr	r3, [r7, #8]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d1f9      	bne.n	80022de <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4618      	mov	r0, r3
 80022f0:	f7ff ff3c 	bl	800216c <LL_ADC_IsInternalRegulatorEnabled>
 80022f4:	4603      	mov	r3, r0
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d10d      	bne.n	8002316 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022fe:	f043 0210 	orr.w	r2, r3, #16
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800230a:	f043 0201 	orr.w	r2, r3, #1
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002312:	2301      	movs	r3, #1
 8002314:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4618      	mov	r0, r3
 800231c:	f7ff ff75 	bl	800220a <LL_ADC_REG_IsConversionOngoing>
 8002320:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002326:	f003 0310 	and.w	r3, r3, #16
 800232a:	2b00      	cmp	r3, #0
 800232c:	f040 80c8 	bne.w	80024c0 <HAL_ADC_Init+0x268>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002330:	697b      	ldr	r3, [r7, #20]
 8002332:	2b00      	cmp	r3, #0
 8002334:	f040 80c4 	bne.w	80024c0 <HAL_ADC_Init+0x268>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800233c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002340:	f043 0202 	orr.w	r2, r3, #2
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4618      	mov	r0, r3
 800234e:	f7ff ff35 	bl	80021bc <LL_ADC_IsEnabled>
 8002352:	4603      	mov	r3, r0
 8002354:	2b00      	cmp	r3, #0
 8002356:	d10b      	bne.n	8002370 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002358:	4862      	ldr	r0, [pc, #392]	; (80024e4 <HAL_ADC_Init+0x28c>)
 800235a:	f7ff ff2f 	bl	80021bc <LL_ADC_IsEnabled>
 800235e:	4603      	mov	r3, r0
 8002360:	2b00      	cmp	r3, #0
 8002362:	d105      	bne.n	8002370 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	4619      	mov	r1, r3
 800236a:	485f      	ldr	r0, [pc, #380]	; (80024e8 <HAL_ADC_Init+0x290>)
 800236c:	f7ff fd9a 	bl	8001ea4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	7e5b      	ldrb	r3, [r3, #25]
 8002374:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800237a:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002380:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8002386:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800238e:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002390:	4313      	orrs	r3, r2
 8002392:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	f893 3020 	ldrb.w	r3, [r3, #32]
 800239a:	2b01      	cmp	r3, #1
 800239c:	d106      	bne.n	80023ac <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023a2:	3b01      	subs	r3, #1
 80023a4:	045b      	lsls	r3, r3, #17
 80023a6:	69ba      	ldr	r2, [r7, #24]
 80023a8:	4313      	orrs	r3, r2
 80023aa:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d009      	beq.n	80023c8 <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023b8:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023c0:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80023c2:	69ba      	ldr	r2, [r7, #24]
 80023c4:	4313      	orrs	r3, r2
 80023c6:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	68da      	ldr	r2, [r3, #12]
 80023ce:	4b47      	ldr	r3, [pc, #284]	; (80024ec <HAL_ADC_Init+0x294>)
 80023d0:	4013      	ands	r3, r2
 80023d2:	687a      	ldr	r2, [r7, #4]
 80023d4:	6812      	ldr	r2, [r2, #0]
 80023d6:	69b9      	ldr	r1, [r7, #24]
 80023d8:	430b      	orrs	r3, r1
 80023da:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	4618      	mov	r0, r3
 80023e2:	f7ff ff12 	bl	800220a <LL_ADC_REG_IsConversionOngoing>
 80023e6:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4618      	mov	r0, r3
 80023ee:	f7ff ff1f 	bl	8002230 <LL_ADC_INJ_IsConversionOngoing>
 80023f2:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80023f4:	693b      	ldr	r3, [r7, #16]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d140      	bne.n	800247c <HAL_ADC_Init+0x224>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d13d      	bne.n	800247c <HAL_ADC_Init+0x224>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	7e1b      	ldrb	r3, [r3, #24]
 8002408:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800240a:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002412:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002414:	4313      	orrs	r3, r2
 8002416:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	68db      	ldr	r3, [r3, #12]
 800241e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002422:	f023 0306 	bic.w	r3, r3, #6
 8002426:	687a      	ldr	r2, [r7, #4]
 8002428:	6812      	ldr	r2, [r2, #0]
 800242a:	69b9      	ldr	r1, [r7, #24]
 800242c:	430b      	orrs	r3, r1
 800242e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002436:	2b01      	cmp	r3, #1
 8002438:	d118      	bne.n	800246c <HAL_ADC_Init+0x214>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	691b      	ldr	r3, [r3, #16]
 8002440:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002444:	f023 0304 	bic.w	r3, r3, #4
 8002448:	687a      	ldr	r2, [r7, #4]
 800244a:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800244c:	687a      	ldr	r2, [r7, #4]
 800244e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002450:	4311      	orrs	r1, r2
 8002452:	687a      	ldr	r2, [r7, #4]
 8002454:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002456:	4311      	orrs	r1, r2
 8002458:	687a      	ldr	r2, [r7, #4]
 800245a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800245c:	430a      	orrs	r2, r1
 800245e:	431a      	orrs	r2, r3
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f042 0201 	orr.w	r2, r2, #1
 8002468:	611a      	str	r2, [r3, #16]
 800246a:	e007      	b.n	800247c <HAL_ADC_Init+0x224>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	691a      	ldr	r2, [r3, #16]
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f022 0201 	bic.w	r2, r2, #1
 800247a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	691b      	ldr	r3, [r3, #16]
 8002480:	2b01      	cmp	r3, #1
 8002482:	d10c      	bne.n	800249e <HAL_ADC_Init+0x246>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800248a:	f023 010f 	bic.w	r1, r3, #15
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	69db      	ldr	r3, [r3, #28]
 8002492:	1e5a      	subs	r2, r3, #1
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	430a      	orrs	r2, r1
 800249a:	631a      	str	r2, [r3, #48]	; 0x30
 800249c:	e007      	b.n	80024ae <HAL_ADC_Init+0x256>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f022 020f 	bic.w	r2, r2, #15
 80024ac:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024b2:	f023 0303 	bic.w	r3, r3, #3
 80024b6:	f043 0201 	orr.w	r2, r3, #1
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	659a      	str	r2, [r3, #88]	; 0x58
 80024be:	e007      	b.n	80024d0 <HAL_ADC_Init+0x278>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024c4:	f043 0210 	orr.w	r2, r3, #16
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80024cc:	2301      	movs	r3, #1
 80024ce:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80024d0:	7ffb      	ldrb	r3, [r7, #31]
}
 80024d2:	4618      	mov	r0, r3
 80024d4:	3720      	adds	r7, #32
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bd80      	pop	{r7, pc}
 80024da:	bf00      	nop
 80024dc:	20000004 	.word	0x20000004
 80024e0:	053e2d63 	.word	0x053e2d63
 80024e4:	50040000 	.word	0x50040000
 80024e8:	50040300 	.word	0x50040300
 80024ec:	fff0c007 	.word	0xfff0c007

080024f0 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b084      	sub	sp, #16
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4618      	mov	r0, r3
 80024fe:	f7ff fe84 	bl	800220a <LL_ADC_REG_IsConversionOngoing>
 8002502:	4603      	mov	r3, r0
 8002504:	2b00      	cmp	r3, #0
 8002506:	d14f      	bne.n	80025a8 <HAL_ADC_Start+0xb8>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800250e:	2b01      	cmp	r3, #1
 8002510:	d101      	bne.n	8002516 <HAL_ADC_Start+0x26>
 8002512:	2302      	movs	r3, #2
 8002514:	e04b      	b.n	80025ae <HAL_ADC_Start+0xbe>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2201      	movs	r2, #1
 800251a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800251e:	6878      	ldr	r0, [r7, #4]
 8002520:	f000 fce2 	bl	8002ee8 <ADC_Enable>
 8002524:	4603      	mov	r3, r0
 8002526:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002528:	7bfb      	ldrb	r3, [r7, #15]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d137      	bne.n	800259e <HAL_ADC_Start+0xae>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002532:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002536:	f023 0301 	bic.w	r3, r3, #1
 800253a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	659a      	str	r2, [r3, #88]	; 0x58
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002546:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800254a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800254e:	d106      	bne.n	800255e <HAL_ADC_Start+0x6e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002554:	f023 0206 	bic.w	r2, r3, #6
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	65da      	str	r2, [r3, #92]	; 0x5c
 800255c:	e002      	b.n	8002564 <HAL_ADC_Start+0x74>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	2200      	movs	r2, #0
 8002562:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	221c      	movs	r2, #28
 800256a:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2200      	movs	r2, #0
 8002570:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }

      }
#else
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	68db      	ldr	r3, [r3, #12]
 800257a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800257e:	2b00      	cmp	r3, #0
 8002580:	d007      	beq.n	8002592 <HAL_ADC_Start+0xa2>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002586:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800258a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4618      	mov	r0, r3
 8002598:	f7ff fe23 	bl	80021e2 <LL_ADC_REG_StartConversion>
 800259c:	e006      	b.n	80025ac <HAL_ADC_Start+0xbc>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	2200      	movs	r2, #0
 80025a2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 80025a6:	e001      	b.n	80025ac <HAL_ADC_Start+0xbc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80025a8:	2302      	movs	r3, #2
 80025aa:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 80025ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80025ae:	4618      	mov	r0, r3
 80025b0:	3710      	adds	r7, #16
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bd80      	pop	{r7, pc}

080025b6 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80025b6:	b580      	push	{r7, lr}
 80025b8:	b086      	sub	sp, #24
 80025ba:	af00      	add	r7, sp, #0
 80025bc:	6078      	str	r0, [r7, #4]
 80025be:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	695b      	ldr	r3, [r3, #20]
 80025c4:	2b08      	cmp	r3, #8
 80025c6:	d102      	bne.n	80025ce <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 80025c8:	2308      	movs	r3, #8
 80025ca:	617b      	str	r3, [r7, #20]
 80025cc:	e010      	b.n	80025f0 <HAL_ADC_PollForConversion+0x3a>
        tmp_Flag_End = (ADC_FLAG_EOC);
      }
    }
#else
    /* Check ADC DMA mode */
    if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	68db      	ldr	r3, [r3, #12]
 80025d4:	f003 0301 	and.w	r3, r3, #1
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d007      	beq.n	80025ec <HAL_ADC_PollForConversion+0x36>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025e0:	f043 0220 	orr.w	r2, r3, #32
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 80025e8:	2301      	movs	r3, #1
 80025ea:	e06f      	b.n	80026cc <HAL_ADC_PollForConversion+0x116>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 80025ec:	2304      	movs	r3, #4
 80025ee:	617b      	str	r3, [r7, #20]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80025f0:	f7ff fc4c 	bl	8001e8c <HAL_GetTick>
 80025f4:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80025f6:	e021      	b.n	800263c <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025fe:	d01d      	beq.n	800263c <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8002600:	f7ff fc44 	bl	8001e8c <HAL_GetTick>
 8002604:	4602      	mov	r2, r0
 8002606:	693b      	ldr	r3, [r7, #16]
 8002608:	1ad3      	subs	r3, r2, r3
 800260a:	683a      	ldr	r2, [r7, #0]
 800260c:	429a      	cmp	r2, r3
 800260e:	d302      	bcc.n	8002616 <HAL_ADC_PollForConversion+0x60>
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	2b00      	cmp	r3, #0
 8002614:	d112      	bne.n	800263c <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	681a      	ldr	r2, [r3, #0]
 800261c:	697b      	ldr	r3, [r7, #20]
 800261e:	4013      	ands	r3, r2
 8002620:	2b00      	cmp	r3, #0
 8002622:	d10b      	bne.n	800263c <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002628:	f043 0204 	orr.w	r2, r3, #4
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	659a      	str	r2, [r3, #88]	; 0x58

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2200      	movs	r2, #0
 8002634:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

          return HAL_TIMEOUT;
 8002638:	2303      	movs	r3, #3
 800263a:	e047      	b.n	80026cc <HAL_ADC_PollForConversion+0x116>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	681a      	ldr	r2, [r3, #0]
 8002642:	697b      	ldr	r3, [r7, #20]
 8002644:	4013      	ands	r3, r2
 8002646:	2b00      	cmp	r3, #0
 8002648:	d0d6      	beq.n	80025f8 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800264e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	659a      	str	r2, [r3, #88]	; 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4618      	mov	r0, r3
 800265c:	f7ff fcbe 	bl	8001fdc <LL_ADC_REG_IsTriggerSourceSWStart>
 8002660:	4603      	mov	r3, r0
 8002662:	2b00      	cmp	r3, #0
 8002664:	d01c      	beq.n	80026a0 <HAL_ADC_PollForConversion+0xea>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	7e5b      	ldrb	r3, [r3, #25]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d118      	bne.n	80026a0 <HAL_ADC_PollForConversion+0xea>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f003 0308 	and.w	r3, r3, #8
 8002678:	2b08      	cmp	r3, #8
 800267a:	d111      	bne.n	80026a0 <HAL_ADC_PollForConversion+0xea>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002680:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	659a      	str	r2, [r3, #88]	; 0x58

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800268c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002690:	2b00      	cmp	r3, #0
 8002692:	d105      	bne.n	80026a0 <HAL_ADC_PollForConversion+0xea>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002698:	f043 0201 	orr.w	r2, r3, #1
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	659a      	str	r2, [r3, #88]	; 0x58
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
  }
#else
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	68db      	ldr	r3, [r3, #12]
 80026a6:	60fb      	str	r3, [r7, #12]
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 80026a8:	697b      	ldr	r3, [r7, #20]
 80026aa:	2b08      	cmp	r3, #8
 80026ac:	d104      	bne.n	80026b8 <HAL_ADC_PollForConversion+0x102>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	2208      	movs	r2, #8
 80026b4:	601a      	str	r2, [r3, #0]
 80026b6:	e008      	b.n	80026ca <HAL_ADC_PollForConversion+0x114>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d103      	bne.n	80026ca <HAL_ADC_PollForConversion+0x114>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	220c      	movs	r2, #12
 80026c8:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 80026ca:	2300      	movs	r3, #0
}
 80026cc:	4618      	mov	r0, r3
 80026ce:	3718      	adds	r7, #24
 80026d0:	46bd      	mov	sp, r7
 80026d2:	bd80      	pop	{r7, pc}

080026d4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80026d4:	b480      	push	{r7}
 80026d6:	b083      	sub	sp, #12
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80026e2:	4618      	mov	r0, r3
 80026e4:	370c      	adds	r7, #12
 80026e6:	46bd      	mov	sp, r7
 80026e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ec:	4770      	bx	lr
	...

080026f0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b0b6      	sub	sp, #216	; 0xd8
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
 80026f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80026fa:	2300      	movs	r3, #0
 80026fc:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002700:	2300      	movs	r3, #0
 8002702:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800270a:	2b01      	cmp	r3, #1
 800270c:	d101      	bne.n	8002712 <HAL_ADC_ConfigChannel+0x22>
 800270e:	2302      	movs	r3, #2
 8002710:	e3d5      	b.n	8002ebe <HAL_ADC_ConfigChannel+0x7ce>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2201      	movs	r2, #1
 8002716:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	4618      	mov	r0, r3
 8002720:	f7ff fd73 	bl	800220a <LL_ADC_REG_IsConversionOngoing>
 8002724:	4603      	mov	r3, r0
 8002726:	2b00      	cmp	r3, #0
 8002728:	f040 83ba 	bne.w	8002ea0 <HAL_ADC_ConfigChannel+0x7b0>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	2b05      	cmp	r3, #5
 8002732:	d824      	bhi.n	800277e <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	3b02      	subs	r3, #2
 800273a:	2b03      	cmp	r3, #3
 800273c:	d81b      	bhi.n	8002776 <HAL_ADC_ConfigChannel+0x86>
 800273e:	a201      	add	r2, pc, #4	; (adr r2, 8002744 <HAL_ADC_ConfigChannel+0x54>)
 8002740:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002744:	08002755 	.word	0x08002755
 8002748:	0800275d 	.word	0x0800275d
 800274c:	08002765 	.word	0x08002765
 8002750:	0800276d 	.word	0x0800276d
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	220c      	movs	r2, #12
 8002758:	605a      	str	r2, [r3, #4]
          break;
 800275a:	e011      	b.n	8002780 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	2212      	movs	r2, #18
 8002760:	605a      	str	r2, [r3, #4]
          break;
 8002762:	e00d      	b.n	8002780 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	2218      	movs	r2, #24
 8002768:	605a      	str	r2, [r3, #4]
          break;
 800276a:	e009      	b.n	8002780 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002772:	605a      	str	r2, [r3, #4]
          break;
 8002774:	e004      	b.n	8002780 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	2206      	movs	r2, #6
 800277a:	605a      	str	r2, [r3, #4]
          break;
 800277c:	e000      	b.n	8002780 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 800277e:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6818      	ldr	r0, [r3, #0]
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	6859      	ldr	r1, [r3, #4]
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	461a      	mov	r2, r3
 800278e:	f7ff fc38 	bl	8002002 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4618      	mov	r0, r3
 8002798:	f7ff fd37 	bl	800220a <LL_ADC_REG_IsConversionOngoing>
 800279c:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4618      	mov	r0, r3
 80027a6:	f7ff fd43 	bl	8002230 <LL_ADC_INJ_IsConversionOngoing>
 80027aa:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80027ae:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	f040 81c1 	bne.w	8002b3a <HAL_ADC_ConfigChannel+0x44a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80027b8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80027bc:	2b00      	cmp	r3, #0
 80027be:	f040 81bc 	bne.w	8002b3a <HAL_ADC_ConfigChannel+0x44a>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	689b      	ldr	r3, [r3, #8]
 80027c6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80027ca:	d10f      	bne.n	80027ec <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6818      	ldr	r0, [r3, #0]
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	2200      	movs	r2, #0
 80027d6:	4619      	mov	r1, r3
 80027d8:	f7ff fc3f 	bl	800205a <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80027e4:	4618      	mov	r0, r3
 80027e6:	f7ff fbe6 	bl	8001fb6 <LL_ADC_SetSamplingTimeCommonConfig>
 80027ea:	e00e      	b.n	800280a <HAL_ADC_ConfigChannel+0x11a>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6818      	ldr	r0, [r3, #0]
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	6819      	ldr	r1, [r3, #0]
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	689b      	ldr	r3, [r3, #8]
 80027f8:	461a      	mov	r2, r3
 80027fa:	f7ff fc2e 	bl	800205a <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	2100      	movs	r1, #0
 8002804:	4618      	mov	r0, r3
 8002806:	f7ff fbd6 	bl	8001fb6 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	695a      	ldr	r2, [r3, #20]
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	68db      	ldr	r3, [r3, #12]
 8002814:	08db      	lsrs	r3, r3, #3
 8002816:	f003 0303 	and.w	r3, r3, #3
 800281a:	005b      	lsls	r3, r3, #1
 800281c:	fa02 f303 	lsl.w	r3, r2, r3
 8002820:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	691b      	ldr	r3, [r3, #16]
 8002828:	2b04      	cmp	r3, #4
 800282a:	d00a      	beq.n	8002842 <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6818      	ldr	r0, [r3, #0]
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	6919      	ldr	r1, [r3, #16]
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	681a      	ldr	r2, [r3, #0]
 8002838:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800283c:	f7ff fb66 	bl	8001f0c <LL_ADC_SetOffset>
 8002840:	e17b      	b.n	8002b3a <HAL_ADC_ConfigChannel+0x44a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	2100      	movs	r1, #0
 8002848:	4618      	mov	r0, r3
 800284a:	f7ff fb83 	bl	8001f54 <LL_ADC_GetOffsetChannel>
 800284e:	4603      	mov	r3, r0
 8002850:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002854:	2b00      	cmp	r3, #0
 8002856:	d10a      	bne.n	800286e <HAL_ADC_ConfigChannel+0x17e>
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	2100      	movs	r1, #0
 800285e:	4618      	mov	r0, r3
 8002860:	f7ff fb78 	bl	8001f54 <LL_ADC_GetOffsetChannel>
 8002864:	4603      	mov	r3, r0
 8002866:	0e9b      	lsrs	r3, r3, #26
 8002868:	f003 021f 	and.w	r2, r3, #31
 800286c:	e01e      	b.n	80028ac <HAL_ADC_ConfigChannel+0x1bc>
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	2100      	movs	r1, #0
 8002874:	4618      	mov	r0, r3
 8002876:	f7ff fb6d 	bl	8001f54 <LL_ADC_GetOffsetChannel>
 800287a:	4603      	mov	r3, r0
 800287c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002880:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002884:	fa93 f3a3 	rbit	r3, r3
 8002888:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800288c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002890:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002894:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002898:	2b00      	cmp	r3, #0
 800289a:	d101      	bne.n	80028a0 <HAL_ADC_ConfigChannel+0x1b0>
  {
    return 32U;
 800289c:	2320      	movs	r3, #32
 800289e:	e004      	b.n	80028aa <HAL_ADC_ConfigChannel+0x1ba>
  }
  return __builtin_clz(value);
 80028a0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80028a4:	fab3 f383 	clz	r3, r3
 80028a8:	b2db      	uxtb	r3, r3
 80028aa:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d105      	bne.n	80028c4 <HAL_ADC_ConfigChannel+0x1d4>
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	0e9b      	lsrs	r3, r3, #26
 80028be:	f003 031f 	and.w	r3, r3, #31
 80028c2:	e018      	b.n	80028f6 <HAL_ADC_ConfigChannel+0x206>
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028cc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80028d0:	fa93 f3a3 	rbit	r3, r3
 80028d4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80028d8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80028dc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80028e0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d101      	bne.n	80028ec <HAL_ADC_ConfigChannel+0x1fc>
    return 32U;
 80028e8:	2320      	movs	r3, #32
 80028ea:	e004      	b.n	80028f6 <HAL_ADC_ConfigChannel+0x206>
  return __builtin_clz(value);
 80028ec:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80028f0:	fab3 f383 	clz	r3, r3
 80028f4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80028f6:	429a      	cmp	r2, r3
 80028f8:	d106      	bne.n	8002908 <HAL_ADC_ConfigChannel+0x218>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	2200      	movs	r2, #0
 8002900:	2100      	movs	r1, #0
 8002902:	4618      	mov	r0, r3
 8002904:	f7ff fb3c 	bl	8001f80 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	2101      	movs	r1, #1
 800290e:	4618      	mov	r0, r3
 8002910:	f7ff fb20 	bl	8001f54 <LL_ADC_GetOffsetChannel>
 8002914:	4603      	mov	r3, r0
 8002916:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800291a:	2b00      	cmp	r3, #0
 800291c:	d10a      	bne.n	8002934 <HAL_ADC_ConfigChannel+0x244>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	2101      	movs	r1, #1
 8002924:	4618      	mov	r0, r3
 8002926:	f7ff fb15 	bl	8001f54 <LL_ADC_GetOffsetChannel>
 800292a:	4603      	mov	r3, r0
 800292c:	0e9b      	lsrs	r3, r3, #26
 800292e:	f003 021f 	and.w	r2, r3, #31
 8002932:	e01e      	b.n	8002972 <HAL_ADC_ConfigChannel+0x282>
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	2101      	movs	r1, #1
 800293a:	4618      	mov	r0, r3
 800293c:	f7ff fb0a 	bl	8001f54 <LL_ADC_GetOffsetChannel>
 8002940:	4603      	mov	r3, r0
 8002942:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002946:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800294a:	fa93 f3a3 	rbit	r3, r3
 800294e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002952:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002956:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 800295a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800295e:	2b00      	cmp	r3, #0
 8002960:	d101      	bne.n	8002966 <HAL_ADC_ConfigChannel+0x276>
    return 32U;
 8002962:	2320      	movs	r3, #32
 8002964:	e004      	b.n	8002970 <HAL_ADC_ConfigChannel+0x280>
  return __builtin_clz(value);
 8002966:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800296a:	fab3 f383 	clz	r3, r3
 800296e:	b2db      	uxtb	r3, r3
 8002970:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800297a:	2b00      	cmp	r3, #0
 800297c:	d105      	bne.n	800298a <HAL_ADC_ConfigChannel+0x29a>
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	0e9b      	lsrs	r3, r3, #26
 8002984:	f003 031f 	and.w	r3, r3, #31
 8002988:	e018      	b.n	80029bc <HAL_ADC_ConfigChannel+0x2cc>
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002992:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002996:	fa93 f3a3 	rbit	r3, r3
 800299a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 800299e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80029a2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80029a6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d101      	bne.n	80029b2 <HAL_ADC_ConfigChannel+0x2c2>
    return 32U;
 80029ae:	2320      	movs	r3, #32
 80029b0:	e004      	b.n	80029bc <HAL_ADC_ConfigChannel+0x2cc>
  return __builtin_clz(value);
 80029b2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80029b6:	fab3 f383 	clz	r3, r3
 80029ba:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80029bc:	429a      	cmp	r2, r3
 80029be:	d106      	bne.n	80029ce <HAL_ADC_ConfigChannel+0x2de>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	2200      	movs	r2, #0
 80029c6:	2101      	movs	r1, #1
 80029c8:	4618      	mov	r0, r3
 80029ca:	f7ff fad9 	bl	8001f80 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	2102      	movs	r1, #2
 80029d4:	4618      	mov	r0, r3
 80029d6:	f7ff fabd 	bl	8001f54 <LL_ADC_GetOffsetChannel>
 80029da:	4603      	mov	r3, r0
 80029dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d10a      	bne.n	80029fa <HAL_ADC_ConfigChannel+0x30a>
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	2102      	movs	r1, #2
 80029ea:	4618      	mov	r0, r3
 80029ec:	f7ff fab2 	bl	8001f54 <LL_ADC_GetOffsetChannel>
 80029f0:	4603      	mov	r3, r0
 80029f2:	0e9b      	lsrs	r3, r3, #26
 80029f4:	f003 021f 	and.w	r2, r3, #31
 80029f8:	e01e      	b.n	8002a38 <HAL_ADC_ConfigChannel+0x348>
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	2102      	movs	r1, #2
 8002a00:	4618      	mov	r0, r3
 8002a02:	f7ff faa7 	bl	8001f54 <LL_ADC_GetOffsetChannel>
 8002a06:	4603      	mov	r3, r0
 8002a08:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a0c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002a10:	fa93 f3a3 	rbit	r3, r3
 8002a14:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002a18:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002a1c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002a20:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d101      	bne.n	8002a2c <HAL_ADC_ConfigChannel+0x33c>
    return 32U;
 8002a28:	2320      	movs	r3, #32
 8002a2a:	e004      	b.n	8002a36 <HAL_ADC_ConfigChannel+0x346>
  return __builtin_clz(value);
 8002a2c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002a30:	fab3 f383 	clz	r3, r3
 8002a34:	b2db      	uxtb	r3, r3
 8002a36:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d105      	bne.n	8002a50 <HAL_ADC_ConfigChannel+0x360>
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	0e9b      	lsrs	r3, r3, #26
 8002a4a:	f003 031f 	and.w	r3, r3, #31
 8002a4e:	e016      	b.n	8002a7e <HAL_ADC_ConfigChannel+0x38e>
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a58:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002a5c:	fa93 f3a3 	rbit	r3, r3
 8002a60:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002a62:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002a64:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002a68:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d101      	bne.n	8002a74 <HAL_ADC_ConfigChannel+0x384>
    return 32U;
 8002a70:	2320      	movs	r3, #32
 8002a72:	e004      	b.n	8002a7e <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 8002a74:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002a78:	fab3 f383 	clz	r3, r3
 8002a7c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002a7e:	429a      	cmp	r2, r3
 8002a80:	d106      	bne.n	8002a90 <HAL_ADC_ConfigChannel+0x3a0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	2200      	movs	r2, #0
 8002a88:	2102      	movs	r1, #2
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	f7ff fa78 	bl	8001f80 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	2103      	movs	r1, #3
 8002a96:	4618      	mov	r0, r3
 8002a98:	f7ff fa5c 	bl	8001f54 <LL_ADC_GetOffsetChannel>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d10a      	bne.n	8002abc <HAL_ADC_ConfigChannel+0x3cc>
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	2103      	movs	r1, #3
 8002aac:	4618      	mov	r0, r3
 8002aae:	f7ff fa51 	bl	8001f54 <LL_ADC_GetOffsetChannel>
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	0e9b      	lsrs	r3, r3, #26
 8002ab6:	f003 021f 	and.w	r2, r3, #31
 8002aba:	e017      	b.n	8002aec <HAL_ADC_ConfigChannel+0x3fc>
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	2103      	movs	r1, #3
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	f7ff fa46 	bl	8001f54 <LL_ADC_GetOffsetChannel>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002acc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ace:	fa93 f3a3 	rbit	r3, r3
 8002ad2:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002ad4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002ad6:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002ad8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d101      	bne.n	8002ae2 <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 8002ade:	2320      	movs	r3, #32
 8002ae0:	e003      	b.n	8002aea <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 8002ae2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002ae4:	fab3 f383 	clz	r3, r3
 8002ae8:	b2db      	uxtb	r3, r3
 8002aea:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d105      	bne.n	8002b04 <HAL_ADC_ConfigChannel+0x414>
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	0e9b      	lsrs	r3, r3, #26
 8002afe:	f003 031f 	and.w	r3, r3, #31
 8002b02:	e011      	b.n	8002b28 <HAL_ADC_ConfigChannel+0x438>
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b0a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002b0c:	fa93 f3a3 	rbit	r3, r3
 8002b10:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002b12:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002b14:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002b16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d101      	bne.n	8002b20 <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 8002b1c:	2320      	movs	r3, #32
 8002b1e:	e003      	b.n	8002b28 <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 8002b20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b22:	fab3 f383 	clz	r3, r3
 8002b26:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002b28:	429a      	cmp	r2, r3
 8002b2a:	d106      	bne.n	8002b3a <HAL_ADC_ConfigChannel+0x44a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	2200      	movs	r2, #0
 8002b32:	2103      	movs	r1, #3
 8002b34:	4618      	mov	r0, r3
 8002b36:	f7ff fa23 	bl	8001f80 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4618      	mov	r0, r3
 8002b40:	f7ff fb3c 	bl	80021bc <LL_ADC_IsEnabled>
 8002b44:	4603      	mov	r3, r0
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	f040 8140 	bne.w	8002dcc <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6818      	ldr	r0, [r3, #0]
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	6819      	ldr	r1, [r3, #0]
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	68db      	ldr	r3, [r3, #12]
 8002b58:	461a      	mov	r2, r3
 8002b5a:	f7ff faa9 	bl	80020b0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	68db      	ldr	r3, [r3, #12]
 8002b62:	4a8f      	ldr	r2, [pc, #572]	; (8002da0 <HAL_ADC_ConfigChannel+0x6b0>)
 8002b64:	4293      	cmp	r3, r2
 8002b66:	f040 8131 	bne.w	8002dcc <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d10b      	bne.n	8002b92 <HAL_ADC_ConfigChannel+0x4a2>
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	0e9b      	lsrs	r3, r3, #26
 8002b80:	3301      	adds	r3, #1
 8002b82:	f003 031f 	and.w	r3, r3, #31
 8002b86:	2b09      	cmp	r3, #9
 8002b88:	bf94      	ite	ls
 8002b8a:	2301      	movls	r3, #1
 8002b8c:	2300      	movhi	r3, #0
 8002b8e:	b2db      	uxtb	r3, r3
 8002b90:	e019      	b.n	8002bc6 <HAL_ADC_ConfigChannel+0x4d6>
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b98:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b9a:	fa93 f3a3 	rbit	r3, r3
 8002b9e:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002ba0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002ba2:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002ba4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d101      	bne.n	8002bae <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 8002baa:	2320      	movs	r3, #32
 8002bac:	e003      	b.n	8002bb6 <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 8002bae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002bb0:	fab3 f383 	clz	r3, r3
 8002bb4:	b2db      	uxtb	r3, r3
 8002bb6:	3301      	adds	r3, #1
 8002bb8:	f003 031f 	and.w	r3, r3, #31
 8002bbc:	2b09      	cmp	r3, #9
 8002bbe:	bf94      	ite	ls
 8002bc0:	2301      	movls	r3, #1
 8002bc2:	2300      	movhi	r3, #0
 8002bc4:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d079      	beq.n	8002cbe <HAL_ADC_ConfigChannel+0x5ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d107      	bne.n	8002be6 <HAL_ADC_ConfigChannel+0x4f6>
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	0e9b      	lsrs	r3, r3, #26
 8002bdc:	3301      	adds	r3, #1
 8002bde:	069b      	lsls	r3, r3, #26
 8002be0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002be4:	e015      	b.n	8002c12 <HAL_ADC_ConfigChannel+0x522>
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002bee:	fa93 f3a3 	rbit	r3, r3
 8002bf2:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002bf4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002bf6:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002bf8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d101      	bne.n	8002c02 <HAL_ADC_ConfigChannel+0x512>
    return 32U;
 8002bfe:	2320      	movs	r3, #32
 8002c00:	e003      	b.n	8002c0a <HAL_ADC_ConfigChannel+0x51a>
  return __builtin_clz(value);
 8002c02:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c04:	fab3 f383 	clz	r3, r3
 8002c08:	b2db      	uxtb	r3, r3
 8002c0a:	3301      	adds	r3, #1
 8002c0c:	069b      	lsls	r3, r3, #26
 8002c0e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d109      	bne.n	8002c32 <HAL_ADC_ConfigChannel+0x542>
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	0e9b      	lsrs	r3, r3, #26
 8002c24:	3301      	adds	r3, #1
 8002c26:	f003 031f 	and.w	r3, r3, #31
 8002c2a:	2101      	movs	r1, #1
 8002c2c:	fa01 f303 	lsl.w	r3, r1, r3
 8002c30:	e017      	b.n	8002c62 <HAL_ADC_ConfigChannel+0x572>
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c3a:	fa93 f3a3 	rbit	r3, r3
 8002c3e:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002c40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c42:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002c44:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d101      	bne.n	8002c4e <HAL_ADC_ConfigChannel+0x55e>
    return 32U;
 8002c4a:	2320      	movs	r3, #32
 8002c4c:	e003      	b.n	8002c56 <HAL_ADC_ConfigChannel+0x566>
  return __builtin_clz(value);
 8002c4e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c50:	fab3 f383 	clz	r3, r3
 8002c54:	b2db      	uxtb	r3, r3
 8002c56:	3301      	adds	r3, #1
 8002c58:	f003 031f 	and.w	r3, r3, #31
 8002c5c:	2101      	movs	r1, #1
 8002c5e:	fa01 f303 	lsl.w	r3, r1, r3
 8002c62:	ea42 0103 	orr.w	r1, r2, r3
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d10a      	bne.n	8002c88 <HAL_ADC_ConfigChannel+0x598>
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	0e9b      	lsrs	r3, r3, #26
 8002c78:	3301      	adds	r3, #1
 8002c7a:	f003 021f 	and.w	r2, r3, #31
 8002c7e:	4613      	mov	r3, r2
 8002c80:	005b      	lsls	r3, r3, #1
 8002c82:	4413      	add	r3, r2
 8002c84:	051b      	lsls	r3, r3, #20
 8002c86:	e018      	b.n	8002cba <HAL_ADC_ConfigChannel+0x5ca>
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c90:	fa93 f3a3 	rbit	r3, r3
 8002c94:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002c96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c98:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002c9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d101      	bne.n	8002ca4 <HAL_ADC_ConfigChannel+0x5b4>
    return 32U;
 8002ca0:	2320      	movs	r3, #32
 8002ca2:	e003      	b.n	8002cac <HAL_ADC_ConfigChannel+0x5bc>
  return __builtin_clz(value);
 8002ca4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ca6:	fab3 f383 	clz	r3, r3
 8002caa:	b2db      	uxtb	r3, r3
 8002cac:	3301      	adds	r3, #1
 8002cae:	f003 021f 	and.w	r2, r3, #31
 8002cb2:	4613      	mov	r3, r2
 8002cb4:	005b      	lsls	r3, r3, #1
 8002cb6:	4413      	add	r3, r2
 8002cb8:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002cba:	430b      	orrs	r3, r1
 8002cbc:	e081      	b.n	8002dc2 <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d107      	bne.n	8002cda <HAL_ADC_ConfigChannel+0x5ea>
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	0e9b      	lsrs	r3, r3, #26
 8002cd0:	3301      	adds	r3, #1
 8002cd2:	069b      	lsls	r3, r3, #26
 8002cd4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002cd8:	e015      	b.n	8002d06 <HAL_ADC_ConfigChannel+0x616>
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ce0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ce2:	fa93 f3a3 	rbit	r3, r3
 8002ce6:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002ce8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cea:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002cec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d101      	bne.n	8002cf6 <HAL_ADC_ConfigChannel+0x606>
    return 32U;
 8002cf2:	2320      	movs	r3, #32
 8002cf4:	e003      	b.n	8002cfe <HAL_ADC_ConfigChannel+0x60e>
  return __builtin_clz(value);
 8002cf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cf8:	fab3 f383 	clz	r3, r3
 8002cfc:	b2db      	uxtb	r3, r3
 8002cfe:	3301      	adds	r3, #1
 8002d00:	069b      	lsls	r3, r3, #26
 8002d02:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d109      	bne.n	8002d26 <HAL_ADC_ConfigChannel+0x636>
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	0e9b      	lsrs	r3, r3, #26
 8002d18:	3301      	adds	r3, #1
 8002d1a:	f003 031f 	and.w	r3, r3, #31
 8002d1e:	2101      	movs	r1, #1
 8002d20:	fa01 f303 	lsl.w	r3, r1, r3
 8002d24:	e017      	b.n	8002d56 <HAL_ADC_ConfigChannel+0x666>
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d2c:	6a3b      	ldr	r3, [r7, #32]
 8002d2e:	fa93 f3a3 	rbit	r3, r3
 8002d32:	61fb      	str	r3, [r7, #28]
  return result;
 8002d34:	69fb      	ldr	r3, [r7, #28]
 8002d36:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d101      	bne.n	8002d42 <HAL_ADC_ConfigChannel+0x652>
    return 32U;
 8002d3e:	2320      	movs	r3, #32
 8002d40:	e003      	b.n	8002d4a <HAL_ADC_ConfigChannel+0x65a>
  return __builtin_clz(value);
 8002d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d44:	fab3 f383 	clz	r3, r3
 8002d48:	b2db      	uxtb	r3, r3
 8002d4a:	3301      	adds	r3, #1
 8002d4c:	f003 031f 	and.w	r3, r3, #31
 8002d50:	2101      	movs	r1, #1
 8002d52:	fa01 f303 	lsl.w	r3, r1, r3
 8002d56:	ea42 0103 	orr.w	r1, r2, r3
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d10d      	bne.n	8002d82 <HAL_ADC_ConfigChannel+0x692>
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	0e9b      	lsrs	r3, r3, #26
 8002d6c:	3301      	adds	r3, #1
 8002d6e:	f003 021f 	and.w	r2, r3, #31
 8002d72:	4613      	mov	r3, r2
 8002d74:	005b      	lsls	r3, r3, #1
 8002d76:	4413      	add	r3, r2
 8002d78:	3b1e      	subs	r3, #30
 8002d7a:	051b      	lsls	r3, r3, #20
 8002d7c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002d80:	e01e      	b.n	8002dc0 <HAL_ADC_ConfigChannel+0x6d0>
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d88:	697b      	ldr	r3, [r7, #20]
 8002d8a:	fa93 f3a3 	rbit	r3, r3
 8002d8e:	613b      	str	r3, [r7, #16]
  return result;
 8002d90:	693b      	ldr	r3, [r7, #16]
 8002d92:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002d94:	69bb      	ldr	r3, [r7, #24]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d104      	bne.n	8002da4 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8002d9a:	2320      	movs	r3, #32
 8002d9c:	e006      	b.n	8002dac <HAL_ADC_ConfigChannel+0x6bc>
 8002d9e:	bf00      	nop
 8002da0:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002da4:	69bb      	ldr	r3, [r7, #24]
 8002da6:	fab3 f383 	clz	r3, r3
 8002daa:	b2db      	uxtb	r3, r3
 8002dac:	3301      	adds	r3, #1
 8002dae:	f003 021f 	and.w	r2, r3, #31
 8002db2:	4613      	mov	r3, r2
 8002db4:	005b      	lsls	r3, r3, #1
 8002db6:	4413      	add	r3, r2
 8002db8:	3b1e      	subs	r3, #30
 8002dba:	051b      	lsls	r3, r3, #20
 8002dbc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002dc0:	430b      	orrs	r3, r1
 8002dc2:	683a      	ldr	r2, [r7, #0]
 8002dc4:	6892      	ldr	r2, [r2, #8]
 8002dc6:	4619      	mov	r1, r3
 8002dc8:	f7ff f947 	bl	800205a <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	681a      	ldr	r2, [r3, #0]
 8002dd0:	4b3d      	ldr	r3, [pc, #244]	; (8002ec8 <HAL_ADC_ConfigChannel+0x7d8>)
 8002dd2:	4013      	ands	r3, r2
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d06c      	beq.n	8002eb2 <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002dd8:	483c      	ldr	r0, [pc, #240]	; (8002ecc <HAL_ADC_ConfigChannel+0x7dc>)
 8002dda:	f7ff f889 	bl	8001ef0 <LL_ADC_GetCommonPathInternalCh>
 8002dde:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4a3a      	ldr	r2, [pc, #232]	; (8002ed0 <HAL_ADC_ConfigChannel+0x7e0>)
 8002de8:	4293      	cmp	r3, r2
 8002dea:	d127      	bne.n	8002e3c <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002dec:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002df0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d121      	bne.n	8002e3c <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4a35      	ldr	r2, [pc, #212]	; (8002ed4 <HAL_ADC_ConfigChannel+0x7e4>)
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d157      	bne.n	8002eb2 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002e02:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002e06:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002e0a:	4619      	mov	r1, r3
 8002e0c:	482f      	ldr	r0, [pc, #188]	; (8002ecc <HAL_ADC_ConfigChannel+0x7dc>)
 8002e0e:	f7ff f85c 	bl	8001eca <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002e12:	4b31      	ldr	r3, [pc, #196]	; (8002ed8 <HAL_ADC_ConfigChannel+0x7e8>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	099b      	lsrs	r3, r3, #6
 8002e18:	4a30      	ldr	r2, [pc, #192]	; (8002edc <HAL_ADC_ConfigChannel+0x7ec>)
 8002e1a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e1e:	099b      	lsrs	r3, r3, #6
 8002e20:	1c5a      	adds	r2, r3, #1
 8002e22:	4613      	mov	r3, r2
 8002e24:	005b      	lsls	r3, r3, #1
 8002e26:	4413      	add	r3, r2
 8002e28:	009b      	lsls	r3, r3, #2
 8002e2a:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002e2c:	e002      	b.n	8002e34 <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	3b01      	subs	r3, #1
 8002e32:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d1f9      	bne.n	8002e2e <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002e3a:	e03a      	b.n	8002eb2 <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4a27      	ldr	r2, [pc, #156]	; (8002ee0 <HAL_ADC_ConfigChannel+0x7f0>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d113      	bne.n	8002e6e <HAL_ADC_ConfigChannel+0x77e>
 8002e46:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002e4a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d10d      	bne.n	8002e6e <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4a1f      	ldr	r2, [pc, #124]	; (8002ed4 <HAL_ADC_ConfigChannel+0x7e4>)
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	d12a      	bne.n	8002eb2 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002e5c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002e60:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e64:	4619      	mov	r1, r3
 8002e66:	4819      	ldr	r0, [pc, #100]	; (8002ecc <HAL_ADC_ConfigChannel+0x7dc>)
 8002e68:	f7ff f82f 	bl	8001eca <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002e6c:	e021      	b.n	8002eb2 <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4a1c      	ldr	r2, [pc, #112]	; (8002ee4 <HAL_ADC_ConfigChannel+0x7f4>)
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d11c      	bne.n	8002eb2 <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002e78:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002e7c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d116      	bne.n	8002eb2 <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	4a12      	ldr	r2, [pc, #72]	; (8002ed4 <HAL_ADC_ConfigChannel+0x7e4>)
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d111      	bne.n	8002eb2 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002e8e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002e92:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002e96:	4619      	mov	r1, r3
 8002e98:	480c      	ldr	r0, [pc, #48]	; (8002ecc <HAL_ADC_ConfigChannel+0x7dc>)
 8002e9a:	f7ff f816 	bl	8001eca <LL_ADC_SetCommonPathInternalCh>
 8002e9e:	e008      	b.n	8002eb2 <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ea4:	f043 0220 	orr.w	r2, r3, #32
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002eac:	2301      	movs	r3, #1
 8002eae:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8002eba:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	37d8      	adds	r7, #216	; 0xd8
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	bd80      	pop	{r7, pc}
 8002ec6:	bf00      	nop
 8002ec8:	80080000 	.word	0x80080000
 8002ecc:	50040300 	.word	0x50040300
 8002ed0:	c7520000 	.word	0xc7520000
 8002ed4:	50040000 	.word	0x50040000
 8002ed8:	20000004 	.word	0x20000004
 8002edc:	053e2d63 	.word	0x053e2d63
 8002ee0:	cb840000 	.word	0xcb840000
 8002ee4:	80000001 	.word	0x80000001

08002ee8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b084      	sub	sp, #16
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4618      	mov	r0, r3
 8002efa:	f7ff f95f 	bl	80021bc <LL_ADC_IsEnabled>
 8002efe:	4603      	mov	r3, r0
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d169      	bne.n	8002fd8 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	689a      	ldr	r2, [r3, #8]
 8002f0a:	4b36      	ldr	r3, [pc, #216]	; (8002fe4 <ADC_Enable+0xfc>)
 8002f0c:	4013      	ands	r3, r2
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d00d      	beq.n	8002f2e <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f16:	f043 0210 	orr.w	r2, r3, #16
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f22:	f043 0201 	orr.w	r2, r3, #1
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	e055      	b.n	8002fda <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4618      	mov	r0, r3
 8002f34:	f7ff f92e 	bl	8002194 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002f38:	482b      	ldr	r0, [pc, #172]	; (8002fe8 <ADC_Enable+0x100>)
 8002f3a:	f7fe ffd9 	bl	8001ef0 <LL_ADC_GetCommonPathInternalCh>
 8002f3e:	4603      	mov	r3, r0
 8002f40:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d013      	beq.n	8002f70 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002f48:	4b28      	ldr	r3, [pc, #160]	; (8002fec <ADC_Enable+0x104>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	099b      	lsrs	r3, r3, #6
 8002f4e:	4a28      	ldr	r2, [pc, #160]	; (8002ff0 <ADC_Enable+0x108>)
 8002f50:	fba2 2303 	umull	r2, r3, r2, r3
 8002f54:	099b      	lsrs	r3, r3, #6
 8002f56:	1c5a      	adds	r2, r3, #1
 8002f58:	4613      	mov	r3, r2
 8002f5a:	005b      	lsls	r3, r3, #1
 8002f5c:	4413      	add	r3, r2
 8002f5e:	009b      	lsls	r3, r3, #2
 8002f60:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8002f62:	e002      	b.n	8002f6a <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8002f64:	68bb      	ldr	r3, [r7, #8]
 8002f66:	3b01      	subs	r3, #1
 8002f68:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8002f6a:	68bb      	ldr	r3, [r7, #8]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d1f9      	bne.n	8002f64 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002f70:	f7fe ff8c 	bl	8001e8c <HAL_GetTick>
 8002f74:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002f76:	e028      	b.n	8002fca <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	f7ff f91d 	bl	80021bc <LL_ADC_IsEnabled>
 8002f82:	4603      	mov	r3, r0
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d104      	bne.n	8002f92 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	f7ff f901 	bl	8002194 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002f92:	f7fe ff7b 	bl	8001e8c <HAL_GetTick>
 8002f96:	4602      	mov	r2, r0
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	1ad3      	subs	r3, r2, r3
 8002f9c:	2b02      	cmp	r3, #2
 8002f9e:	d914      	bls.n	8002fca <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f003 0301 	and.w	r3, r3, #1
 8002faa:	2b01      	cmp	r3, #1
 8002fac:	d00d      	beq.n	8002fca <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fb2:	f043 0210 	orr.w	r2, r3, #16
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fbe:	f043 0201 	orr.w	r2, r3, #1
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	e007      	b.n	8002fda <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f003 0301 	and.w	r3, r3, #1
 8002fd4:	2b01      	cmp	r3, #1
 8002fd6:	d1cf      	bne.n	8002f78 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002fd8:	2300      	movs	r3, #0
}
 8002fda:	4618      	mov	r0, r3
 8002fdc:	3710      	adds	r7, #16
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bd80      	pop	{r7, pc}
 8002fe2:	bf00      	nop
 8002fe4:	8000003f 	.word	0x8000003f
 8002fe8:	50040300 	.word	0x50040300
 8002fec:	20000004 	.word	0x20000004
 8002ff0:	053e2d63 	.word	0x053e2d63

08002ff4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	b085      	sub	sp, #20
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	f003 0307 	and.w	r3, r3, #7
 8003002:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003004:	4b0c      	ldr	r3, [pc, #48]	; (8003038 <__NVIC_SetPriorityGrouping+0x44>)
 8003006:	68db      	ldr	r3, [r3, #12]
 8003008:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800300a:	68ba      	ldr	r2, [r7, #8]
 800300c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003010:	4013      	ands	r3, r2
 8003012:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003018:	68bb      	ldr	r3, [r7, #8]
 800301a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800301c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003020:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003024:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003026:	4a04      	ldr	r2, [pc, #16]	; (8003038 <__NVIC_SetPriorityGrouping+0x44>)
 8003028:	68bb      	ldr	r3, [r7, #8]
 800302a:	60d3      	str	r3, [r2, #12]
}
 800302c:	bf00      	nop
 800302e:	3714      	adds	r7, #20
 8003030:	46bd      	mov	sp, r7
 8003032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003036:	4770      	bx	lr
 8003038:	e000ed00 	.word	0xe000ed00

0800303c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800303c:	b480      	push	{r7}
 800303e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003040:	4b04      	ldr	r3, [pc, #16]	; (8003054 <__NVIC_GetPriorityGrouping+0x18>)
 8003042:	68db      	ldr	r3, [r3, #12]
 8003044:	0a1b      	lsrs	r3, r3, #8
 8003046:	f003 0307 	and.w	r3, r3, #7
}
 800304a:	4618      	mov	r0, r3
 800304c:	46bd      	mov	sp, r7
 800304e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003052:	4770      	bx	lr
 8003054:	e000ed00 	.word	0xe000ed00

08003058 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003058:	b480      	push	{r7}
 800305a:	b083      	sub	sp, #12
 800305c:	af00      	add	r7, sp, #0
 800305e:	4603      	mov	r3, r0
 8003060:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003062:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003066:	2b00      	cmp	r3, #0
 8003068:	db0b      	blt.n	8003082 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800306a:	79fb      	ldrb	r3, [r7, #7]
 800306c:	f003 021f 	and.w	r2, r3, #31
 8003070:	4907      	ldr	r1, [pc, #28]	; (8003090 <__NVIC_EnableIRQ+0x38>)
 8003072:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003076:	095b      	lsrs	r3, r3, #5
 8003078:	2001      	movs	r0, #1
 800307a:	fa00 f202 	lsl.w	r2, r0, r2
 800307e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003082:	bf00      	nop
 8003084:	370c      	adds	r7, #12
 8003086:	46bd      	mov	sp, r7
 8003088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308c:	4770      	bx	lr
 800308e:	bf00      	nop
 8003090:	e000e100 	.word	0xe000e100

08003094 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003094:	b480      	push	{r7}
 8003096:	b083      	sub	sp, #12
 8003098:	af00      	add	r7, sp, #0
 800309a:	4603      	mov	r3, r0
 800309c:	6039      	str	r1, [r7, #0]
 800309e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	db0a      	blt.n	80030be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	b2da      	uxtb	r2, r3
 80030ac:	490c      	ldr	r1, [pc, #48]	; (80030e0 <__NVIC_SetPriority+0x4c>)
 80030ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030b2:	0112      	lsls	r2, r2, #4
 80030b4:	b2d2      	uxtb	r2, r2
 80030b6:	440b      	add	r3, r1
 80030b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80030bc:	e00a      	b.n	80030d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	b2da      	uxtb	r2, r3
 80030c2:	4908      	ldr	r1, [pc, #32]	; (80030e4 <__NVIC_SetPriority+0x50>)
 80030c4:	79fb      	ldrb	r3, [r7, #7]
 80030c6:	f003 030f 	and.w	r3, r3, #15
 80030ca:	3b04      	subs	r3, #4
 80030cc:	0112      	lsls	r2, r2, #4
 80030ce:	b2d2      	uxtb	r2, r2
 80030d0:	440b      	add	r3, r1
 80030d2:	761a      	strb	r2, [r3, #24]
}
 80030d4:	bf00      	nop
 80030d6:	370c      	adds	r7, #12
 80030d8:	46bd      	mov	sp, r7
 80030da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030de:	4770      	bx	lr
 80030e0:	e000e100 	.word	0xe000e100
 80030e4:	e000ed00 	.word	0xe000ed00

080030e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80030e8:	b480      	push	{r7}
 80030ea:	b089      	sub	sp, #36	; 0x24
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	60f8      	str	r0, [r7, #12]
 80030f0:	60b9      	str	r1, [r7, #8]
 80030f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	f003 0307 	and.w	r3, r3, #7
 80030fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80030fc:	69fb      	ldr	r3, [r7, #28]
 80030fe:	f1c3 0307 	rsb	r3, r3, #7
 8003102:	2b04      	cmp	r3, #4
 8003104:	bf28      	it	cs
 8003106:	2304      	movcs	r3, #4
 8003108:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800310a:	69fb      	ldr	r3, [r7, #28]
 800310c:	3304      	adds	r3, #4
 800310e:	2b06      	cmp	r3, #6
 8003110:	d902      	bls.n	8003118 <NVIC_EncodePriority+0x30>
 8003112:	69fb      	ldr	r3, [r7, #28]
 8003114:	3b03      	subs	r3, #3
 8003116:	e000      	b.n	800311a <NVIC_EncodePriority+0x32>
 8003118:	2300      	movs	r3, #0
 800311a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800311c:	f04f 32ff 	mov.w	r2, #4294967295
 8003120:	69bb      	ldr	r3, [r7, #24]
 8003122:	fa02 f303 	lsl.w	r3, r2, r3
 8003126:	43da      	mvns	r2, r3
 8003128:	68bb      	ldr	r3, [r7, #8]
 800312a:	401a      	ands	r2, r3
 800312c:	697b      	ldr	r3, [r7, #20]
 800312e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003130:	f04f 31ff 	mov.w	r1, #4294967295
 8003134:	697b      	ldr	r3, [r7, #20]
 8003136:	fa01 f303 	lsl.w	r3, r1, r3
 800313a:	43d9      	mvns	r1, r3
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003140:	4313      	orrs	r3, r2
         );
}
 8003142:	4618      	mov	r0, r3
 8003144:	3724      	adds	r7, #36	; 0x24
 8003146:	46bd      	mov	sp, r7
 8003148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314c:	4770      	bx	lr
	...

08003150 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b082      	sub	sp, #8
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	3b01      	subs	r3, #1
 800315c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003160:	d301      	bcc.n	8003166 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003162:	2301      	movs	r3, #1
 8003164:	e00f      	b.n	8003186 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003166:	4a0a      	ldr	r2, [pc, #40]	; (8003190 <SysTick_Config+0x40>)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	3b01      	subs	r3, #1
 800316c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800316e:	210f      	movs	r1, #15
 8003170:	f04f 30ff 	mov.w	r0, #4294967295
 8003174:	f7ff ff8e 	bl	8003094 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003178:	4b05      	ldr	r3, [pc, #20]	; (8003190 <SysTick_Config+0x40>)
 800317a:	2200      	movs	r2, #0
 800317c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800317e:	4b04      	ldr	r3, [pc, #16]	; (8003190 <SysTick_Config+0x40>)
 8003180:	2207      	movs	r2, #7
 8003182:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003184:	2300      	movs	r3, #0
}
 8003186:	4618      	mov	r0, r3
 8003188:	3708      	adds	r7, #8
 800318a:	46bd      	mov	sp, r7
 800318c:	bd80      	pop	{r7, pc}
 800318e:	bf00      	nop
 8003190:	e000e010 	.word	0xe000e010

08003194 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b082      	sub	sp, #8
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800319c:	6878      	ldr	r0, [r7, #4]
 800319e:	f7ff ff29 	bl	8002ff4 <__NVIC_SetPriorityGrouping>
}
 80031a2:	bf00      	nop
 80031a4:	3708      	adds	r7, #8
 80031a6:	46bd      	mov	sp, r7
 80031a8:	bd80      	pop	{r7, pc}

080031aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80031aa:	b580      	push	{r7, lr}
 80031ac:	b086      	sub	sp, #24
 80031ae:	af00      	add	r7, sp, #0
 80031b0:	4603      	mov	r3, r0
 80031b2:	60b9      	str	r1, [r7, #8]
 80031b4:	607a      	str	r2, [r7, #4]
 80031b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80031b8:	2300      	movs	r3, #0
 80031ba:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80031bc:	f7ff ff3e 	bl	800303c <__NVIC_GetPriorityGrouping>
 80031c0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80031c2:	687a      	ldr	r2, [r7, #4]
 80031c4:	68b9      	ldr	r1, [r7, #8]
 80031c6:	6978      	ldr	r0, [r7, #20]
 80031c8:	f7ff ff8e 	bl	80030e8 <NVIC_EncodePriority>
 80031cc:	4602      	mov	r2, r0
 80031ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80031d2:	4611      	mov	r1, r2
 80031d4:	4618      	mov	r0, r3
 80031d6:	f7ff ff5d 	bl	8003094 <__NVIC_SetPriority>
}
 80031da:	bf00      	nop
 80031dc:	3718      	adds	r7, #24
 80031de:	46bd      	mov	sp, r7
 80031e0:	bd80      	pop	{r7, pc}

080031e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031e2:	b580      	push	{r7, lr}
 80031e4:	b082      	sub	sp, #8
 80031e6:	af00      	add	r7, sp, #0
 80031e8:	4603      	mov	r3, r0
 80031ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80031ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031f0:	4618      	mov	r0, r3
 80031f2:	f7ff ff31 	bl	8003058 <__NVIC_EnableIRQ>
}
 80031f6:	bf00      	nop
 80031f8:	3708      	adds	r7, #8
 80031fa:	46bd      	mov	sp, r7
 80031fc:	bd80      	pop	{r7, pc}

080031fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80031fe:	b580      	push	{r7, lr}
 8003200:	b082      	sub	sp, #8
 8003202:	af00      	add	r7, sp, #0
 8003204:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003206:	6878      	ldr	r0, [r7, #4]
 8003208:	f7ff ffa2 	bl	8003150 <SysTick_Config>
 800320c:	4603      	mov	r3, r0
}
 800320e:	4618      	mov	r0, r3
 8003210:	3708      	adds	r7, #8
 8003212:	46bd      	mov	sp, r7
 8003214:	bd80      	pop	{r7, pc}

08003216 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003216:	b480      	push	{r7}
 8003218:	b085      	sub	sp, #20
 800321a:	af00      	add	r7, sp, #0
 800321c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800321e:	2300      	movs	r3, #0
 8003220:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003228:	b2db      	uxtb	r3, r3
 800322a:	2b02      	cmp	r3, #2
 800322c:	d008      	beq.n	8003240 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2204      	movs	r2, #4
 8003232:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2200      	movs	r2, #0
 8003238:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800323c:	2301      	movs	r3, #1
 800323e:	e022      	b.n	8003286 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	681a      	ldr	r2, [r3, #0]
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f022 020e 	bic.w	r2, r2, #14
 800324e:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	681a      	ldr	r2, [r3, #0]
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f022 0201 	bic.w	r2, r2, #1
 800325e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003264:	f003 021c 	and.w	r2, r3, #28
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800326c:	2101      	movs	r1, #1
 800326e:	fa01 f202 	lsl.w	r2, r1, r2
 8003272:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2201      	movs	r2, #1
 8003278:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2200      	movs	r2, #0
 8003280:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8003284:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8003286:	4618      	mov	r0, r3
 8003288:	3714      	adds	r7, #20
 800328a:	46bd      	mov	sp, r7
 800328c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003290:	4770      	bx	lr

08003292 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003292:	b580      	push	{r7, lr}
 8003294:	b084      	sub	sp, #16
 8003296:	af00      	add	r7, sp, #0
 8003298:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800329a:	2300      	movs	r3, #0
 800329c:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80032a4:	b2db      	uxtb	r3, r3
 80032a6:	2b02      	cmp	r3, #2
 80032a8:	d005      	beq.n	80032b6 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	2204      	movs	r2, #4
 80032ae:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80032b0:	2301      	movs	r3, #1
 80032b2:	73fb      	strb	r3, [r7, #15]
 80032b4:	e029      	b.n	800330a <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	681a      	ldr	r2, [r3, #0]
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f022 020e 	bic.w	r2, r2, #14
 80032c4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	681a      	ldr	r2, [r3, #0]
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f022 0201 	bic.w	r2, r2, #1
 80032d4:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032da:	f003 021c 	and.w	r2, r3, #28
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032e2:	2101      	movs	r1, #1
 80032e4:	fa01 f202 	lsl.w	r2, r1, r2
 80032e8:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2201      	movs	r2, #1
 80032ee:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2200      	movs	r2, #0
 80032f6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d003      	beq.n	800330a <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003306:	6878      	ldr	r0, [r7, #4]
 8003308:	4798      	blx	r3
    }
  }
  return status;
 800330a:	7bfb      	ldrb	r3, [r7, #15]
}
 800330c:	4618      	mov	r0, r3
 800330e:	3710      	adds	r7, #16
 8003310:	46bd      	mov	sp, r7
 8003312:	bd80      	pop	{r7, pc}

08003314 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003314:	b480      	push	{r7}
 8003316:	b087      	sub	sp, #28
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
 800331c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800331e:	2300      	movs	r3, #0
 8003320:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003322:	e154      	b.n	80035ce <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	681a      	ldr	r2, [r3, #0]
 8003328:	2101      	movs	r1, #1
 800332a:	697b      	ldr	r3, [r7, #20]
 800332c:	fa01 f303 	lsl.w	r3, r1, r3
 8003330:	4013      	ands	r3, r2
 8003332:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	2b00      	cmp	r3, #0
 8003338:	f000 8146 	beq.w	80035c8 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	685b      	ldr	r3, [r3, #4]
 8003340:	f003 0303 	and.w	r3, r3, #3
 8003344:	2b01      	cmp	r3, #1
 8003346:	d005      	beq.n	8003354 <HAL_GPIO_Init+0x40>
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	f003 0303 	and.w	r3, r3, #3
 8003350:	2b02      	cmp	r3, #2
 8003352:	d130      	bne.n	80033b6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	689b      	ldr	r3, [r3, #8]
 8003358:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800335a:	697b      	ldr	r3, [r7, #20]
 800335c:	005b      	lsls	r3, r3, #1
 800335e:	2203      	movs	r2, #3
 8003360:	fa02 f303 	lsl.w	r3, r2, r3
 8003364:	43db      	mvns	r3, r3
 8003366:	693a      	ldr	r2, [r7, #16]
 8003368:	4013      	ands	r3, r2
 800336a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	68da      	ldr	r2, [r3, #12]
 8003370:	697b      	ldr	r3, [r7, #20]
 8003372:	005b      	lsls	r3, r3, #1
 8003374:	fa02 f303 	lsl.w	r3, r2, r3
 8003378:	693a      	ldr	r2, [r7, #16]
 800337a:	4313      	orrs	r3, r2
 800337c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	693a      	ldr	r2, [r7, #16]
 8003382:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800338a:	2201      	movs	r2, #1
 800338c:	697b      	ldr	r3, [r7, #20]
 800338e:	fa02 f303 	lsl.w	r3, r2, r3
 8003392:	43db      	mvns	r3, r3
 8003394:	693a      	ldr	r2, [r7, #16]
 8003396:	4013      	ands	r3, r2
 8003398:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	685b      	ldr	r3, [r3, #4]
 800339e:	091b      	lsrs	r3, r3, #4
 80033a0:	f003 0201 	and.w	r2, r3, #1
 80033a4:	697b      	ldr	r3, [r7, #20]
 80033a6:	fa02 f303 	lsl.w	r3, r2, r3
 80033aa:	693a      	ldr	r2, [r7, #16]
 80033ac:	4313      	orrs	r3, r2
 80033ae:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	693a      	ldr	r2, [r7, #16]
 80033b4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	f003 0303 	and.w	r3, r3, #3
 80033be:	2b03      	cmp	r3, #3
 80033c0:	d017      	beq.n	80033f2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	68db      	ldr	r3, [r3, #12]
 80033c6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80033c8:	697b      	ldr	r3, [r7, #20]
 80033ca:	005b      	lsls	r3, r3, #1
 80033cc:	2203      	movs	r2, #3
 80033ce:	fa02 f303 	lsl.w	r3, r2, r3
 80033d2:	43db      	mvns	r3, r3
 80033d4:	693a      	ldr	r2, [r7, #16]
 80033d6:	4013      	ands	r3, r2
 80033d8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	689a      	ldr	r2, [r3, #8]
 80033de:	697b      	ldr	r3, [r7, #20]
 80033e0:	005b      	lsls	r3, r3, #1
 80033e2:	fa02 f303 	lsl.w	r3, r2, r3
 80033e6:	693a      	ldr	r2, [r7, #16]
 80033e8:	4313      	orrs	r3, r2
 80033ea:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	693a      	ldr	r2, [r7, #16]
 80033f0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	f003 0303 	and.w	r3, r3, #3
 80033fa:	2b02      	cmp	r3, #2
 80033fc:	d123      	bne.n	8003446 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80033fe:	697b      	ldr	r3, [r7, #20]
 8003400:	08da      	lsrs	r2, r3, #3
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	3208      	adds	r2, #8
 8003406:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800340a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800340c:	697b      	ldr	r3, [r7, #20]
 800340e:	f003 0307 	and.w	r3, r3, #7
 8003412:	009b      	lsls	r3, r3, #2
 8003414:	220f      	movs	r2, #15
 8003416:	fa02 f303 	lsl.w	r3, r2, r3
 800341a:	43db      	mvns	r3, r3
 800341c:	693a      	ldr	r2, [r7, #16]
 800341e:	4013      	ands	r3, r2
 8003420:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	691a      	ldr	r2, [r3, #16]
 8003426:	697b      	ldr	r3, [r7, #20]
 8003428:	f003 0307 	and.w	r3, r3, #7
 800342c:	009b      	lsls	r3, r3, #2
 800342e:	fa02 f303 	lsl.w	r3, r2, r3
 8003432:	693a      	ldr	r2, [r7, #16]
 8003434:	4313      	orrs	r3, r2
 8003436:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003438:	697b      	ldr	r3, [r7, #20]
 800343a:	08da      	lsrs	r2, r3, #3
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	3208      	adds	r2, #8
 8003440:	6939      	ldr	r1, [r7, #16]
 8003442:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800344c:	697b      	ldr	r3, [r7, #20]
 800344e:	005b      	lsls	r3, r3, #1
 8003450:	2203      	movs	r2, #3
 8003452:	fa02 f303 	lsl.w	r3, r2, r3
 8003456:	43db      	mvns	r3, r3
 8003458:	693a      	ldr	r2, [r7, #16]
 800345a:	4013      	ands	r3, r2
 800345c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	685b      	ldr	r3, [r3, #4]
 8003462:	f003 0203 	and.w	r2, r3, #3
 8003466:	697b      	ldr	r3, [r7, #20]
 8003468:	005b      	lsls	r3, r3, #1
 800346a:	fa02 f303 	lsl.w	r3, r2, r3
 800346e:	693a      	ldr	r2, [r7, #16]
 8003470:	4313      	orrs	r3, r2
 8003472:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	693a      	ldr	r2, [r7, #16]
 8003478:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	685b      	ldr	r3, [r3, #4]
 800347e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003482:	2b00      	cmp	r3, #0
 8003484:	f000 80a0 	beq.w	80035c8 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003488:	4b58      	ldr	r3, [pc, #352]	; (80035ec <HAL_GPIO_Init+0x2d8>)
 800348a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800348c:	4a57      	ldr	r2, [pc, #348]	; (80035ec <HAL_GPIO_Init+0x2d8>)
 800348e:	f043 0301 	orr.w	r3, r3, #1
 8003492:	6613      	str	r3, [r2, #96]	; 0x60
 8003494:	4b55      	ldr	r3, [pc, #340]	; (80035ec <HAL_GPIO_Init+0x2d8>)
 8003496:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003498:	f003 0301 	and.w	r3, r3, #1
 800349c:	60bb      	str	r3, [r7, #8]
 800349e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80034a0:	4a53      	ldr	r2, [pc, #332]	; (80035f0 <HAL_GPIO_Init+0x2dc>)
 80034a2:	697b      	ldr	r3, [r7, #20]
 80034a4:	089b      	lsrs	r3, r3, #2
 80034a6:	3302      	adds	r3, #2
 80034a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034ac:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80034ae:	697b      	ldr	r3, [r7, #20]
 80034b0:	f003 0303 	and.w	r3, r3, #3
 80034b4:	009b      	lsls	r3, r3, #2
 80034b6:	220f      	movs	r2, #15
 80034b8:	fa02 f303 	lsl.w	r3, r2, r3
 80034bc:	43db      	mvns	r3, r3
 80034be:	693a      	ldr	r2, [r7, #16]
 80034c0:	4013      	ands	r3, r2
 80034c2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80034ca:	d019      	beq.n	8003500 <HAL_GPIO_Init+0x1ec>
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	4a49      	ldr	r2, [pc, #292]	; (80035f4 <HAL_GPIO_Init+0x2e0>)
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d013      	beq.n	80034fc <HAL_GPIO_Init+0x1e8>
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	4a48      	ldr	r2, [pc, #288]	; (80035f8 <HAL_GPIO_Init+0x2e4>)
 80034d8:	4293      	cmp	r3, r2
 80034da:	d00d      	beq.n	80034f8 <HAL_GPIO_Init+0x1e4>
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	4a47      	ldr	r2, [pc, #284]	; (80035fc <HAL_GPIO_Init+0x2e8>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d007      	beq.n	80034f4 <HAL_GPIO_Init+0x1e0>
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	4a46      	ldr	r2, [pc, #280]	; (8003600 <HAL_GPIO_Init+0x2ec>)
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d101      	bne.n	80034f0 <HAL_GPIO_Init+0x1dc>
 80034ec:	2304      	movs	r3, #4
 80034ee:	e008      	b.n	8003502 <HAL_GPIO_Init+0x1ee>
 80034f0:	2307      	movs	r3, #7
 80034f2:	e006      	b.n	8003502 <HAL_GPIO_Init+0x1ee>
 80034f4:	2303      	movs	r3, #3
 80034f6:	e004      	b.n	8003502 <HAL_GPIO_Init+0x1ee>
 80034f8:	2302      	movs	r3, #2
 80034fa:	e002      	b.n	8003502 <HAL_GPIO_Init+0x1ee>
 80034fc:	2301      	movs	r3, #1
 80034fe:	e000      	b.n	8003502 <HAL_GPIO_Init+0x1ee>
 8003500:	2300      	movs	r3, #0
 8003502:	697a      	ldr	r2, [r7, #20]
 8003504:	f002 0203 	and.w	r2, r2, #3
 8003508:	0092      	lsls	r2, r2, #2
 800350a:	4093      	lsls	r3, r2
 800350c:	693a      	ldr	r2, [r7, #16]
 800350e:	4313      	orrs	r3, r2
 8003510:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003512:	4937      	ldr	r1, [pc, #220]	; (80035f0 <HAL_GPIO_Init+0x2dc>)
 8003514:	697b      	ldr	r3, [r7, #20]
 8003516:	089b      	lsrs	r3, r3, #2
 8003518:	3302      	adds	r3, #2
 800351a:	693a      	ldr	r2, [r7, #16]
 800351c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003520:	4b38      	ldr	r3, [pc, #224]	; (8003604 <HAL_GPIO_Init+0x2f0>)
 8003522:	689b      	ldr	r3, [r3, #8]
 8003524:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	43db      	mvns	r3, r3
 800352a:	693a      	ldr	r2, [r7, #16]
 800352c:	4013      	ands	r3, r2
 800352e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	685b      	ldr	r3, [r3, #4]
 8003534:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003538:	2b00      	cmp	r3, #0
 800353a:	d003      	beq.n	8003544 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 800353c:	693a      	ldr	r2, [r7, #16]
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	4313      	orrs	r3, r2
 8003542:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003544:	4a2f      	ldr	r2, [pc, #188]	; (8003604 <HAL_GPIO_Init+0x2f0>)
 8003546:	693b      	ldr	r3, [r7, #16]
 8003548:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800354a:	4b2e      	ldr	r3, [pc, #184]	; (8003604 <HAL_GPIO_Init+0x2f0>)
 800354c:	68db      	ldr	r3, [r3, #12]
 800354e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	43db      	mvns	r3, r3
 8003554:	693a      	ldr	r2, [r7, #16]
 8003556:	4013      	ands	r3, r2
 8003558:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	685b      	ldr	r3, [r3, #4]
 800355e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003562:	2b00      	cmp	r3, #0
 8003564:	d003      	beq.n	800356e <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8003566:	693a      	ldr	r2, [r7, #16]
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	4313      	orrs	r3, r2
 800356c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800356e:	4a25      	ldr	r2, [pc, #148]	; (8003604 <HAL_GPIO_Init+0x2f0>)
 8003570:	693b      	ldr	r3, [r7, #16]
 8003572:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003574:	4b23      	ldr	r3, [pc, #140]	; (8003604 <HAL_GPIO_Init+0x2f0>)
 8003576:	685b      	ldr	r3, [r3, #4]
 8003578:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	43db      	mvns	r3, r3
 800357e:	693a      	ldr	r2, [r7, #16]
 8003580:	4013      	ands	r3, r2
 8003582:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800358c:	2b00      	cmp	r3, #0
 800358e:	d003      	beq.n	8003598 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8003590:	693a      	ldr	r2, [r7, #16]
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	4313      	orrs	r3, r2
 8003596:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003598:	4a1a      	ldr	r2, [pc, #104]	; (8003604 <HAL_GPIO_Init+0x2f0>)
 800359a:	693b      	ldr	r3, [r7, #16]
 800359c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800359e:	4b19      	ldr	r3, [pc, #100]	; (8003604 <HAL_GPIO_Init+0x2f0>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	43db      	mvns	r3, r3
 80035a8:	693a      	ldr	r2, [r7, #16]
 80035aa:	4013      	ands	r3, r2
 80035ac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	685b      	ldr	r3, [r3, #4]
 80035b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d003      	beq.n	80035c2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80035ba:	693a      	ldr	r2, [r7, #16]
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	4313      	orrs	r3, r2
 80035c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80035c2:	4a10      	ldr	r2, [pc, #64]	; (8003604 <HAL_GPIO_Init+0x2f0>)
 80035c4:	693b      	ldr	r3, [r7, #16]
 80035c6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80035c8:	697b      	ldr	r3, [r7, #20]
 80035ca:	3301      	adds	r3, #1
 80035cc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	681a      	ldr	r2, [r3, #0]
 80035d2:	697b      	ldr	r3, [r7, #20]
 80035d4:	fa22 f303 	lsr.w	r3, r2, r3
 80035d8:	2b00      	cmp	r3, #0
 80035da:	f47f aea3 	bne.w	8003324 <HAL_GPIO_Init+0x10>
  }
}
 80035de:	bf00      	nop
 80035e0:	bf00      	nop
 80035e2:	371c      	adds	r7, #28
 80035e4:	46bd      	mov	sp, r7
 80035e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ea:	4770      	bx	lr
 80035ec:	40021000 	.word	0x40021000
 80035f0:	40010000 	.word	0x40010000
 80035f4:	48000400 	.word	0x48000400
 80035f8:	48000800 	.word	0x48000800
 80035fc:	48000c00 	.word	0x48000c00
 8003600:	48001000 	.word	0x48001000
 8003604:	40010400 	.word	0x40010400

08003608 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003608:	b480      	push	{r7}
 800360a:	b085      	sub	sp, #20
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
 8003610:	460b      	mov	r3, r1
 8003612:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	691a      	ldr	r2, [r3, #16]
 8003618:	887b      	ldrh	r3, [r7, #2]
 800361a:	4013      	ands	r3, r2
 800361c:	2b00      	cmp	r3, #0
 800361e:	d002      	beq.n	8003626 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003620:	2301      	movs	r3, #1
 8003622:	73fb      	strb	r3, [r7, #15]
 8003624:	e001      	b.n	800362a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003626:	2300      	movs	r3, #0
 8003628:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800362a:	7bfb      	ldrb	r3, [r7, #15]
}
 800362c:	4618      	mov	r0, r3
 800362e:	3714      	adds	r7, #20
 8003630:	46bd      	mov	sp, r7
 8003632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003636:	4770      	bx	lr

08003638 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003638:	b480      	push	{r7}
 800363a:	b083      	sub	sp, #12
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
 8003640:	460b      	mov	r3, r1
 8003642:	807b      	strh	r3, [r7, #2]
 8003644:	4613      	mov	r3, r2
 8003646:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003648:	787b      	ldrb	r3, [r7, #1]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d003      	beq.n	8003656 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800364e:	887a      	ldrh	r2, [r7, #2]
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003654:	e002      	b.n	800365c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003656:	887a      	ldrh	r2, [r7, #2]
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800365c:	bf00      	nop
 800365e:	370c      	adds	r7, #12
 8003660:	46bd      	mov	sp, r7
 8003662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003666:	4770      	bx	lr

08003668 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003668:	b480      	push	{r7}
 800366a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800366c:	4b04      	ldr	r3, [pc, #16]	; (8003680 <HAL_PWREx_GetVoltageRange+0x18>)
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003674:	4618      	mov	r0, r3
 8003676:	46bd      	mov	sp, r7
 8003678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367c:	4770      	bx	lr
 800367e:	bf00      	nop
 8003680:	40007000 	.word	0x40007000

08003684 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003684:	b480      	push	{r7}
 8003686:	b085      	sub	sp, #20
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003692:	d130      	bne.n	80036f6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003694:	4b23      	ldr	r3, [pc, #140]	; (8003724 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800369c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80036a0:	d038      	beq.n	8003714 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80036a2:	4b20      	ldr	r3, [pc, #128]	; (8003724 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80036aa:	4a1e      	ldr	r2, [pc, #120]	; (8003724 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80036ac:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80036b0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80036b2:	4b1d      	ldr	r3, [pc, #116]	; (8003728 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	2232      	movs	r2, #50	; 0x32
 80036b8:	fb02 f303 	mul.w	r3, r2, r3
 80036bc:	4a1b      	ldr	r2, [pc, #108]	; (800372c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80036be:	fba2 2303 	umull	r2, r3, r2, r3
 80036c2:	0c9b      	lsrs	r3, r3, #18
 80036c4:	3301      	adds	r3, #1
 80036c6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80036c8:	e002      	b.n	80036d0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	3b01      	subs	r3, #1
 80036ce:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80036d0:	4b14      	ldr	r3, [pc, #80]	; (8003724 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80036d2:	695b      	ldr	r3, [r3, #20]
 80036d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036dc:	d102      	bne.n	80036e4 <HAL_PWREx_ControlVoltageScaling+0x60>
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d1f2      	bne.n	80036ca <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80036e4:	4b0f      	ldr	r3, [pc, #60]	; (8003724 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80036e6:	695b      	ldr	r3, [r3, #20]
 80036e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036f0:	d110      	bne.n	8003714 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80036f2:	2303      	movs	r3, #3
 80036f4:	e00f      	b.n	8003716 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80036f6:	4b0b      	ldr	r3, [pc, #44]	; (8003724 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80036fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003702:	d007      	beq.n	8003714 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003704:	4b07      	ldr	r3, [pc, #28]	; (8003724 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800370c:	4a05      	ldr	r2, [pc, #20]	; (8003724 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800370e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003712:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003714:	2300      	movs	r3, #0
}
 8003716:	4618      	mov	r0, r3
 8003718:	3714      	adds	r7, #20
 800371a:	46bd      	mov	sp, r7
 800371c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003720:	4770      	bx	lr
 8003722:	bf00      	nop
 8003724:	40007000 	.word	0x40007000
 8003728:	20000004 	.word	0x20000004
 800372c:	431bde83 	.word	0x431bde83

08003730 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b088      	sub	sp, #32
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d102      	bne.n	8003744 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800373e:	2301      	movs	r3, #1
 8003740:	f000 bc02 	b.w	8003f48 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003744:	4b96      	ldr	r3, [pc, #600]	; (80039a0 <HAL_RCC_OscConfig+0x270>)
 8003746:	689b      	ldr	r3, [r3, #8]
 8003748:	f003 030c 	and.w	r3, r3, #12
 800374c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800374e:	4b94      	ldr	r3, [pc, #592]	; (80039a0 <HAL_RCC_OscConfig+0x270>)
 8003750:	68db      	ldr	r3, [r3, #12]
 8003752:	f003 0303 	and.w	r3, r3, #3
 8003756:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f003 0310 	and.w	r3, r3, #16
 8003760:	2b00      	cmp	r3, #0
 8003762:	f000 80e4 	beq.w	800392e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003766:	69bb      	ldr	r3, [r7, #24]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d007      	beq.n	800377c <HAL_RCC_OscConfig+0x4c>
 800376c:	69bb      	ldr	r3, [r7, #24]
 800376e:	2b0c      	cmp	r3, #12
 8003770:	f040 808b 	bne.w	800388a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003774:	697b      	ldr	r3, [r7, #20]
 8003776:	2b01      	cmp	r3, #1
 8003778:	f040 8087 	bne.w	800388a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800377c:	4b88      	ldr	r3, [pc, #544]	; (80039a0 <HAL_RCC_OscConfig+0x270>)
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f003 0302 	and.w	r3, r3, #2
 8003784:	2b00      	cmp	r3, #0
 8003786:	d005      	beq.n	8003794 <HAL_RCC_OscConfig+0x64>
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	699b      	ldr	r3, [r3, #24]
 800378c:	2b00      	cmp	r3, #0
 800378e:	d101      	bne.n	8003794 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003790:	2301      	movs	r3, #1
 8003792:	e3d9      	b.n	8003f48 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6a1a      	ldr	r2, [r3, #32]
 8003798:	4b81      	ldr	r3, [pc, #516]	; (80039a0 <HAL_RCC_OscConfig+0x270>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f003 0308 	and.w	r3, r3, #8
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d004      	beq.n	80037ae <HAL_RCC_OscConfig+0x7e>
 80037a4:	4b7e      	ldr	r3, [pc, #504]	; (80039a0 <HAL_RCC_OscConfig+0x270>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80037ac:	e005      	b.n	80037ba <HAL_RCC_OscConfig+0x8a>
 80037ae:	4b7c      	ldr	r3, [pc, #496]	; (80039a0 <HAL_RCC_OscConfig+0x270>)
 80037b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80037b4:	091b      	lsrs	r3, r3, #4
 80037b6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d223      	bcs.n	8003806 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6a1b      	ldr	r3, [r3, #32]
 80037c2:	4618      	mov	r0, r3
 80037c4:	f000 fd8c 	bl	80042e0 <RCC_SetFlashLatencyFromMSIRange>
 80037c8:	4603      	mov	r3, r0
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d001      	beq.n	80037d2 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80037ce:	2301      	movs	r3, #1
 80037d0:	e3ba      	b.n	8003f48 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80037d2:	4b73      	ldr	r3, [pc, #460]	; (80039a0 <HAL_RCC_OscConfig+0x270>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	4a72      	ldr	r2, [pc, #456]	; (80039a0 <HAL_RCC_OscConfig+0x270>)
 80037d8:	f043 0308 	orr.w	r3, r3, #8
 80037dc:	6013      	str	r3, [r2, #0]
 80037de:	4b70      	ldr	r3, [pc, #448]	; (80039a0 <HAL_RCC_OscConfig+0x270>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6a1b      	ldr	r3, [r3, #32]
 80037ea:	496d      	ldr	r1, [pc, #436]	; (80039a0 <HAL_RCC_OscConfig+0x270>)
 80037ec:	4313      	orrs	r3, r2
 80037ee:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80037f0:	4b6b      	ldr	r3, [pc, #428]	; (80039a0 <HAL_RCC_OscConfig+0x270>)
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	69db      	ldr	r3, [r3, #28]
 80037fc:	021b      	lsls	r3, r3, #8
 80037fe:	4968      	ldr	r1, [pc, #416]	; (80039a0 <HAL_RCC_OscConfig+0x270>)
 8003800:	4313      	orrs	r3, r2
 8003802:	604b      	str	r3, [r1, #4]
 8003804:	e025      	b.n	8003852 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003806:	4b66      	ldr	r3, [pc, #408]	; (80039a0 <HAL_RCC_OscConfig+0x270>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	4a65      	ldr	r2, [pc, #404]	; (80039a0 <HAL_RCC_OscConfig+0x270>)
 800380c:	f043 0308 	orr.w	r3, r3, #8
 8003810:	6013      	str	r3, [r2, #0]
 8003812:	4b63      	ldr	r3, [pc, #396]	; (80039a0 <HAL_RCC_OscConfig+0x270>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6a1b      	ldr	r3, [r3, #32]
 800381e:	4960      	ldr	r1, [pc, #384]	; (80039a0 <HAL_RCC_OscConfig+0x270>)
 8003820:	4313      	orrs	r3, r2
 8003822:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003824:	4b5e      	ldr	r3, [pc, #376]	; (80039a0 <HAL_RCC_OscConfig+0x270>)
 8003826:	685b      	ldr	r3, [r3, #4]
 8003828:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	69db      	ldr	r3, [r3, #28]
 8003830:	021b      	lsls	r3, r3, #8
 8003832:	495b      	ldr	r1, [pc, #364]	; (80039a0 <HAL_RCC_OscConfig+0x270>)
 8003834:	4313      	orrs	r3, r2
 8003836:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003838:	69bb      	ldr	r3, [r7, #24]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d109      	bne.n	8003852 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6a1b      	ldr	r3, [r3, #32]
 8003842:	4618      	mov	r0, r3
 8003844:	f000 fd4c 	bl	80042e0 <RCC_SetFlashLatencyFromMSIRange>
 8003848:	4603      	mov	r3, r0
 800384a:	2b00      	cmp	r3, #0
 800384c:	d001      	beq.n	8003852 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800384e:	2301      	movs	r3, #1
 8003850:	e37a      	b.n	8003f48 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003852:	f000 fc81 	bl	8004158 <HAL_RCC_GetSysClockFreq>
 8003856:	4602      	mov	r2, r0
 8003858:	4b51      	ldr	r3, [pc, #324]	; (80039a0 <HAL_RCC_OscConfig+0x270>)
 800385a:	689b      	ldr	r3, [r3, #8]
 800385c:	091b      	lsrs	r3, r3, #4
 800385e:	f003 030f 	and.w	r3, r3, #15
 8003862:	4950      	ldr	r1, [pc, #320]	; (80039a4 <HAL_RCC_OscConfig+0x274>)
 8003864:	5ccb      	ldrb	r3, [r1, r3]
 8003866:	f003 031f 	and.w	r3, r3, #31
 800386a:	fa22 f303 	lsr.w	r3, r2, r3
 800386e:	4a4e      	ldr	r2, [pc, #312]	; (80039a8 <HAL_RCC_OscConfig+0x278>)
 8003870:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003872:	4b4e      	ldr	r3, [pc, #312]	; (80039ac <HAL_RCC_OscConfig+0x27c>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4618      	mov	r0, r3
 8003878:	f7fe fab8 	bl	8001dec <HAL_InitTick>
 800387c:	4603      	mov	r3, r0
 800387e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003880:	7bfb      	ldrb	r3, [r7, #15]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d052      	beq.n	800392c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8003886:	7bfb      	ldrb	r3, [r7, #15]
 8003888:	e35e      	b.n	8003f48 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	699b      	ldr	r3, [r3, #24]
 800388e:	2b00      	cmp	r3, #0
 8003890:	d032      	beq.n	80038f8 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003892:	4b43      	ldr	r3, [pc, #268]	; (80039a0 <HAL_RCC_OscConfig+0x270>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4a42      	ldr	r2, [pc, #264]	; (80039a0 <HAL_RCC_OscConfig+0x270>)
 8003898:	f043 0301 	orr.w	r3, r3, #1
 800389c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800389e:	f7fe faf5 	bl	8001e8c <HAL_GetTick>
 80038a2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80038a4:	e008      	b.n	80038b8 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80038a6:	f7fe faf1 	bl	8001e8c <HAL_GetTick>
 80038aa:	4602      	mov	r2, r0
 80038ac:	693b      	ldr	r3, [r7, #16]
 80038ae:	1ad3      	subs	r3, r2, r3
 80038b0:	2b02      	cmp	r3, #2
 80038b2:	d901      	bls.n	80038b8 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80038b4:	2303      	movs	r3, #3
 80038b6:	e347      	b.n	8003f48 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80038b8:	4b39      	ldr	r3, [pc, #228]	; (80039a0 <HAL_RCC_OscConfig+0x270>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f003 0302 	and.w	r3, r3, #2
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d0f0      	beq.n	80038a6 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80038c4:	4b36      	ldr	r3, [pc, #216]	; (80039a0 <HAL_RCC_OscConfig+0x270>)
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4a35      	ldr	r2, [pc, #212]	; (80039a0 <HAL_RCC_OscConfig+0x270>)
 80038ca:	f043 0308 	orr.w	r3, r3, #8
 80038ce:	6013      	str	r3, [r2, #0]
 80038d0:	4b33      	ldr	r3, [pc, #204]	; (80039a0 <HAL_RCC_OscConfig+0x270>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6a1b      	ldr	r3, [r3, #32]
 80038dc:	4930      	ldr	r1, [pc, #192]	; (80039a0 <HAL_RCC_OscConfig+0x270>)
 80038de:	4313      	orrs	r3, r2
 80038e0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80038e2:	4b2f      	ldr	r3, [pc, #188]	; (80039a0 <HAL_RCC_OscConfig+0x270>)
 80038e4:	685b      	ldr	r3, [r3, #4]
 80038e6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	69db      	ldr	r3, [r3, #28]
 80038ee:	021b      	lsls	r3, r3, #8
 80038f0:	492b      	ldr	r1, [pc, #172]	; (80039a0 <HAL_RCC_OscConfig+0x270>)
 80038f2:	4313      	orrs	r3, r2
 80038f4:	604b      	str	r3, [r1, #4]
 80038f6:	e01a      	b.n	800392e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80038f8:	4b29      	ldr	r3, [pc, #164]	; (80039a0 <HAL_RCC_OscConfig+0x270>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	4a28      	ldr	r2, [pc, #160]	; (80039a0 <HAL_RCC_OscConfig+0x270>)
 80038fe:	f023 0301 	bic.w	r3, r3, #1
 8003902:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003904:	f7fe fac2 	bl	8001e8c <HAL_GetTick>
 8003908:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800390a:	e008      	b.n	800391e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800390c:	f7fe fabe 	bl	8001e8c <HAL_GetTick>
 8003910:	4602      	mov	r2, r0
 8003912:	693b      	ldr	r3, [r7, #16]
 8003914:	1ad3      	subs	r3, r2, r3
 8003916:	2b02      	cmp	r3, #2
 8003918:	d901      	bls.n	800391e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800391a:	2303      	movs	r3, #3
 800391c:	e314      	b.n	8003f48 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800391e:	4b20      	ldr	r3, [pc, #128]	; (80039a0 <HAL_RCC_OscConfig+0x270>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f003 0302 	and.w	r3, r3, #2
 8003926:	2b00      	cmp	r3, #0
 8003928:	d1f0      	bne.n	800390c <HAL_RCC_OscConfig+0x1dc>
 800392a:	e000      	b.n	800392e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800392c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f003 0301 	and.w	r3, r3, #1
 8003936:	2b00      	cmp	r3, #0
 8003938:	d073      	beq.n	8003a22 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800393a:	69bb      	ldr	r3, [r7, #24]
 800393c:	2b08      	cmp	r3, #8
 800393e:	d005      	beq.n	800394c <HAL_RCC_OscConfig+0x21c>
 8003940:	69bb      	ldr	r3, [r7, #24]
 8003942:	2b0c      	cmp	r3, #12
 8003944:	d10e      	bne.n	8003964 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003946:	697b      	ldr	r3, [r7, #20]
 8003948:	2b03      	cmp	r3, #3
 800394a:	d10b      	bne.n	8003964 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800394c:	4b14      	ldr	r3, [pc, #80]	; (80039a0 <HAL_RCC_OscConfig+0x270>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003954:	2b00      	cmp	r3, #0
 8003956:	d063      	beq.n	8003a20 <HAL_RCC_OscConfig+0x2f0>
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	685b      	ldr	r3, [r3, #4]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d15f      	bne.n	8003a20 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003960:	2301      	movs	r3, #1
 8003962:	e2f1      	b.n	8003f48 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	685b      	ldr	r3, [r3, #4]
 8003968:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800396c:	d106      	bne.n	800397c <HAL_RCC_OscConfig+0x24c>
 800396e:	4b0c      	ldr	r3, [pc, #48]	; (80039a0 <HAL_RCC_OscConfig+0x270>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	4a0b      	ldr	r2, [pc, #44]	; (80039a0 <HAL_RCC_OscConfig+0x270>)
 8003974:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003978:	6013      	str	r3, [r2, #0]
 800397a:	e025      	b.n	80039c8 <HAL_RCC_OscConfig+0x298>
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	685b      	ldr	r3, [r3, #4]
 8003980:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003984:	d114      	bne.n	80039b0 <HAL_RCC_OscConfig+0x280>
 8003986:	4b06      	ldr	r3, [pc, #24]	; (80039a0 <HAL_RCC_OscConfig+0x270>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	4a05      	ldr	r2, [pc, #20]	; (80039a0 <HAL_RCC_OscConfig+0x270>)
 800398c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003990:	6013      	str	r3, [r2, #0]
 8003992:	4b03      	ldr	r3, [pc, #12]	; (80039a0 <HAL_RCC_OscConfig+0x270>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	4a02      	ldr	r2, [pc, #8]	; (80039a0 <HAL_RCC_OscConfig+0x270>)
 8003998:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800399c:	6013      	str	r3, [r2, #0]
 800399e:	e013      	b.n	80039c8 <HAL_RCC_OscConfig+0x298>
 80039a0:	40021000 	.word	0x40021000
 80039a4:	0800781c 	.word	0x0800781c
 80039a8:	20000004 	.word	0x20000004
 80039ac:	20000008 	.word	0x20000008
 80039b0:	4ba0      	ldr	r3, [pc, #640]	; (8003c34 <HAL_RCC_OscConfig+0x504>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	4a9f      	ldr	r2, [pc, #636]	; (8003c34 <HAL_RCC_OscConfig+0x504>)
 80039b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039ba:	6013      	str	r3, [r2, #0]
 80039bc:	4b9d      	ldr	r3, [pc, #628]	; (8003c34 <HAL_RCC_OscConfig+0x504>)
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	4a9c      	ldr	r2, [pc, #624]	; (8003c34 <HAL_RCC_OscConfig+0x504>)
 80039c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80039c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	685b      	ldr	r3, [r3, #4]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d013      	beq.n	80039f8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039d0:	f7fe fa5c 	bl	8001e8c <HAL_GetTick>
 80039d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80039d6:	e008      	b.n	80039ea <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80039d8:	f7fe fa58 	bl	8001e8c <HAL_GetTick>
 80039dc:	4602      	mov	r2, r0
 80039de:	693b      	ldr	r3, [r7, #16]
 80039e0:	1ad3      	subs	r3, r2, r3
 80039e2:	2b64      	cmp	r3, #100	; 0x64
 80039e4:	d901      	bls.n	80039ea <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80039e6:	2303      	movs	r3, #3
 80039e8:	e2ae      	b.n	8003f48 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80039ea:	4b92      	ldr	r3, [pc, #584]	; (8003c34 <HAL_RCC_OscConfig+0x504>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d0f0      	beq.n	80039d8 <HAL_RCC_OscConfig+0x2a8>
 80039f6:	e014      	b.n	8003a22 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039f8:	f7fe fa48 	bl	8001e8c <HAL_GetTick>
 80039fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80039fe:	e008      	b.n	8003a12 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a00:	f7fe fa44 	bl	8001e8c <HAL_GetTick>
 8003a04:	4602      	mov	r2, r0
 8003a06:	693b      	ldr	r3, [r7, #16]
 8003a08:	1ad3      	subs	r3, r2, r3
 8003a0a:	2b64      	cmp	r3, #100	; 0x64
 8003a0c:	d901      	bls.n	8003a12 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003a0e:	2303      	movs	r3, #3
 8003a10:	e29a      	b.n	8003f48 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003a12:	4b88      	ldr	r3, [pc, #544]	; (8003c34 <HAL_RCC_OscConfig+0x504>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d1f0      	bne.n	8003a00 <HAL_RCC_OscConfig+0x2d0>
 8003a1e:	e000      	b.n	8003a22 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a20:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f003 0302 	and.w	r3, r3, #2
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d060      	beq.n	8003af0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003a2e:	69bb      	ldr	r3, [r7, #24]
 8003a30:	2b04      	cmp	r3, #4
 8003a32:	d005      	beq.n	8003a40 <HAL_RCC_OscConfig+0x310>
 8003a34:	69bb      	ldr	r3, [r7, #24]
 8003a36:	2b0c      	cmp	r3, #12
 8003a38:	d119      	bne.n	8003a6e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003a3a:	697b      	ldr	r3, [r7, #20]
 8003a3c:	2b02      	cmp	r3, #2
 8003a3e:	d116      	bne.n	8003a6e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003a40:	4b7c      	ldr	r3, [pc, #496]	; (8003c34 <HAL_RCC_OscConfig+0x504>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d005      	beq.n	8003a58 <HAL_RCC_OscConfig+0x328>
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	68db      	ldr	r3, [r3, #12]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d101      	bne.n	8003a58 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003a54:	2301      	movs	r3, #1
 8003a56:	e277      	b.n	8003f48 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a58:	4b76      	ldr	r3, [pc, #472]	; (8003c34 <HAL_RCC_OscConfig+0x504>)
 8003a5a:	685b      	ldr	r3, [r3, #4]
 8003a5c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	691b      	ldr	r3, [r3, #16]
 8003a64:	061b      	lsls	r3, r3, #24
 8003a66:	4973      	ldr	r1, [pc, #460]	; (8003c34 <HAL_RCC_OscConfig+0x504>)
 8003a68:	4313      	orrs	r3, r2
 8003a6a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003a6c:	e040      	b.n	8003af0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	68db      	ldr	r3, [r3, #12]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d023      	beq.n	8003abe <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a76:	4b6f      	ldr	r3, [pc, #444]	; (8003c34 <HAL_RCC_OscConfig+0x504>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	4a6e      	ldr	r2, [pc, #440]	; (8003c34 <HAL_RCC_OscConfig+0x504>)
 8003a7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a80:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a82:	f7fe fa03 	bl	8001e8c <HAL_GetTick>
 8003a86:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003a88:	e008      	b.n	8003a9c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a8a:	f7fe f9ff 	bl	8001e8c <HAL_GetTick>
 8003a8e:	4602      	mov	r2, r0
 8003a90:	693b      	ldr	r3, [r7, #16]
 8003a92:	1ad3      	subs	r3, r2, r3
 8003a94:	2b02      	cmp	r3, #2
 8003a96:	d901      	bls.n	8003a9c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003a98:	2303      	movs	r3, #3
 8003a9a:	e255      	b.n	8003f48 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003a9c:	4b65      	ldr	r3, [pc, #404]	; (8003c34 <HAL_RCC_OscConfig+0x504>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d0f0      	beq.n	8003a8a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003aa8:	4b62      	ldr	r3, [pc, #392]	; (8003c34 <HAL_RCC_OscConfig+0x504>)
 8003aaa:	685b      	ldr	r3, [r3, #4]
 8003aac:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	691b      	ldr	r3, [r3, #16]
 8003ab4:	061b      	lsls	r3, r3, #24
 8003ab6:	495f      	ldr	r1, [pc, #380]	; (8003c34 <HAL_RCC_OscConfig+0x504>)
 8003ab8:	4313      	orrs	r3, r2
 8003aba:	604b      	str	r3, [r1, #4]
 8003abc:	e018      	b.n	8003af0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003abe:	4b5d      	ldr	r3, [pc, #372]	; (8003c34 <HAL_RCC_OscConfig+0x504>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4a5c      	ldr	r2, [pc, #368]	; (8003c34 <HAL_RCC_OscConfig+0x504>)
 8003ac4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003ac8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003aca:	f7fe f9df 	bl	8001e8c <HAL_GetTick>
 8003ace:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003ad0:	e008      	b.n	8003ae4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ad2:	f7fe f9db 	bl	8001e8c <HAL_GetTick>
 8003ad6:	4602      	mov	r2, r0
 8003ad8:	693b      	ldr	r3, [r7, #16]
 8003ada:	1ad3      	subs	r3, r2, r3
 8003adc:	2b02      	cmp	r3, #2
 8003ade:	d901      	bls.n	8003ae4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003ae0:	2303      	movs	r3, #3
 8003ae2:	e231      	b.n	8003f48 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003ae4:	4b53      	ldr	r3, [pc, #332]	; (8003c34 <HAL_RCC_OscConfig+0x504>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d1f0      	bne.n	8003ad2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f003 0308 	and.w	r3, r3, #8
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d03c      	beq.n	8003b76 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	695b      	ldr	r3, [r3, #20]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d01c      	beq.n	8003b3e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b04:	4b4b      	ldr	r3, [pc, #300]	; (8003c34 <HAL_RCC_OscConfig+0x504>)
 8003b06:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b0a:	4a4a      	ldr	r2, [pc, #296]	; (8003c34 <HAL_RCC_OscConfig+0x504>)
 8003b0c:	f043 0301 	orr.w	r3, r3, #1
 8003b10:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b14:	f7fe f9ba 	bl	8001e8c <HAL_GetTick>
 8003b18:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003b1a:	e008      	b.n	8003b2e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b1c:	f7fe f9b6 	bl	8001e8c <HAL_GetTick>
 8003b20:	4602      	mov	r2, r0
 8003b22:	693b      	ldr	r3, [r7, #16]
 8003b24:	1ad3      	subs	r3, r2, r3
 8003b26:	2b02      	cmp	r3, #2
 8003b28:	d901      	bls.n	8003b2e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003b2a:	2303      	movs	r3, #3
 8003b2c:	e20c      	b.n	8003f48 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003b2e:	4b41      	ldr	r3, [pc, #260]	; (8003c34 <HAL_RCC_OscConfig+0x504>)
 8003b30:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b34:	f003 0302 	and.w	r3, r3, #2
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d0ef      	beq.n	8003b1c <HAL_RCC_OscConfig+0x3ec>
 8003b3c:	e01b      	b.n	8003b76 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b3e:	4b3d      	ldr	r3, [pc, #244]	; (8003c34 <HAL_RCC_OscConfig+0x504>)
 8003b40:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b44:	4a3b      	ldr	r2, [pc, #236]	; (8003c34 <HAL_RCC_OscConfig+0x504>)
 8003b46:	f023 0301 	bic.w	r3, r3, #1
 8003b4a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b4e:	f7fe f99d 	bl	8001e8c <HAL_GetTick>
 8003b52:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003b54:	e008      	b.n	8003b68 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b56:	f7fe f999 	bl	8001e8c <HAL_GetTick>
 8003b5a:	4602      	mov	r2, r0
 8003b5c:	693b      	ldr	r3, [r7, #16]
 8003b5e:	1ad3      	subs	r3, r2, r3
 8003b60:	2b02      	cmp	r3, #2
 8003b62:	d901      	bls.n	8003b68 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003b64:	2303      	movs	r3, #3
 8003b66:	e1ef      	b.n	8003f48 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003b68:	4b32      	ldr	r3, [pc, #200]	; (8003c34 <HAL_RCC_OscConfig+0x504>)
 8003b6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b6e:	f003 0302 	and.w	r3, r3, #2
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d1ef      	bne.n	8003b56 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f003 0304 	and.w	r3, r3, #4
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	f000 80a6 	beq.w	8003cd0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b84:	2300      	movs	r3, #0
 8003b86:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003b88:	4b2a      	ldr	r3, [pc, #168]	; (8003c34 <HAL_RCC_OscConfig+0x504>)
 8003b8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d10d      	bne.n	8003bb0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b94:	4b27      	ldr	r3, [pc, #156]	; (8003c34 <HAL_RCC_OscConfig+0x504>)
 8003b96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b98:	4a26      	ldr	r2, [pc, #152]	; (8003c34 <HAL_RCC_OscConfig+0x504>)
 8003b9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b9e:	6593      	str	r3, [r2, #88]	; 0x58
 8003ba0:	4b24      	ldr	r3, [pc, #144]	; (8003c34 <HAL_RCC_OscConfig+0x504>)
 8003ba2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ba4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ba8:	60bb      	str	r3, [r7, #8]
 8003baa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003bac:	2301      	movs	r3, #1
 8003bae:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003bb0:	4b21      	ldr	r3, [pc, #132]	; (8003c38 <HAL_RCC_OscConfig+0x508>)
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d118      	bne.n	8003bee <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003bbc:	4b1e      	ldr	r3, [pc, #120]	; (8003c38 <HAL_RCC_OscConfig+0x508>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4a1d      	ldr	r2, [pc, #116]	; (8003c38 <HAL_RCC_OscConfig+0x508>)
 8003bc2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bc6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003bc8:	f7fe f960 	bl	8001e8c <HAL_GetTick>
 8003bcc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003bce:	e008      	b.n	8003be2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003bd0:	f7fe f95c 	bl	8001e8c <HAL_GetTick>
 8003bd4:	4602      	mov	r2, r0
 8003bd6:	693b      	ldr	r3, [r7, #16]
 8003bd8:	1ad3      	subs	r3, r2, r3
 8003bda:	2b02      	cmp	r3, #2
 8003bdc:	d901      	bls.n	8003be2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003bde:	2303      	movs	r3, #3
 8003be0:	e1b2      	b.n	8003f48 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003be2:	4b15      	ldr	r3, [pc, #84]	; (8003c38 <HAL_RCC_OscConfig+0x508>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d0f0      	beq.n	8003bd0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	689b      	ldr	r3, [r3, #8]
 8003bf2:	2b01      	cmp	r3, #1
 8003bf4:	d108      	bne.n	8003c08 <HAL_RCC_OscConfig+0x4d8>
 8003bf6:	4b0f      	ldr	r3, [pc, #60]	; (8003c34 <HAL_RCC_OscConfig+0x504>)
 8003bf8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bfc:	4a0d      	ldr	r2, [pc, #52]	; (8003c34 <HAL_RCC_OscConfig+0x504>)
 8003bfe:	f043 0301 	orr.w	r3, r3, #1
 8003c02:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003c06:	e029      	b.n	8003c5c <HAL_RCC_OscConfig+0x52c>
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	689b      	ldr	r3, [r3, #8]
 8003c0c:	2b05      	cmp	r3, #5
 8003c0e:	d115      	bne.n	8003c3c <HAL_RCC_OscConfig+0x50c>
 8003c10:	4b08      	ldr	r3, [pc, #32]	; (8003c34 <HAL_RCC_OscConfig+0x504>)
 8003c12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c16:	4a07      	ldr	r2, [pc, #28]	; (8003c34 <HAL_RCC_OscConfig+0x504>)
 8003c18:	f043 0304 	orr.w	r3, r3, #4
 8003c1c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003c20:	4b04      	ldr	r3, [pc, #16]	; (8003c34 <HAL_RCC_OscConfig+0x504>)
 8003c22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c26:	4a03      	ldr	r2, [pc, #12]	; (8003c34 <HAL_RCC_OscConfig+0x504>)
 8003c28:	f043 0301 	orr.w	r3, r3, #1
 8003c2c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003c30:	e014      	b.n	8003c5c <HAL_RCC_OscConfig+0x52c>
 8003c32:	bf00      	nop
 8003c34:	40021000 	.word	0x40021000
 8003c38:	40007000 	.word	0x40007000
 8003c3c:	4b9a      	ldr	r3, [pc, #616]	; (8003ea8 <HAL_RCC_OscConfig+0x778>)
 8003c3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c42:	4a99      	ldr	r2, [pc, #612]	; (8003ea8 <HAL_RCC_OscConfig+0x778>)
 8003c44:	f023 0301 	bic.w	r3, r3, #1
 8003c48:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003c4c:	4b96      	ldr	r3, [pc, #600]	; (8003ea8 <HAL_RCC_OscConfig+0x778>)
 8003c4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c52:	4a95      	ldr	r2, [pc, #596]	; (8003ea8 <HAL_RCC_OscConfig+0x778>)
 8003c54:	f023 0304 	bic.w	r3, r3, #4
 8003c58:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	689b      	ldr	r3, [r3, #8]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d016      	beq.n	8003c92 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c64:	f7fe f912 	bl	8001e8c <HAL_GetTick>
 8003c68:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c6a:	e00a      	b.n	8003c82 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c6c:	f7fe f90e 	bl	8001e8c <HAL_GetTick>
 8003c70:	4602      	mov	r2, r0
 8003c72:	693b      	ldr	r3, [r7, #16]
 8003c74:	1ad3      	subs	r3, r2, r3
 8003c76:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d901      	bls.n	8003c82 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003c7e:	2303      	movs	r3, #3
 8003c80:	e162      	b.n	8003f48 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c82:	4b89      	ldr	r3, [pc, #548]	; (8003ea8 <HAL_RCC_OscConfig+0x778>)
 8003c84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c88:	f003 0302 	and.w	r3, r3, #2
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d0ed      	beq.n	8003c6c <HAL_RCC_OscConfig+0x53c>
 8003c90:	e015      	b.n	8003cbe <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c92:	f7fe f8fb 	bl	8001e8c <HAL_GetTick>
 8003c96:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003c98:	e00a      	b.n	8003cb0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c9a:	f7fe f8f7 	bl	8001e8c <HAL_GetTick>
 8003c9e:	4602      	mov	r2, r0
 8003ca0:	693b      	ldr	r3, [r7, #16]
 8003ca2:	1ad3      	subs	r3, r2, r3
 8003ca4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d901      	bls.n	8003cb0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003cac:	2303      	movs	r3, #3
 8003cae:	e14b      	b.n	8003f48 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003cb0:	4b7d      	ldr	r3, [pc, #500]	; (8003ea8 <HAL_RCC_OscConfig+0x778>)
 8003cb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cb6:	f003 0302 	and.w	r3, r3, #2
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d1ed      	bne.n	8003c9a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003cbe:	7ffb      	ldrb	r3, [r7, #31]
 8003cc0:	2b01      	cmp	r3, #1
 8003cc2:	d105      	bne.n	8003cd0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003cc4:	4b78      	ldr	r3, [pc, #480]	; (8003ea8 <HAL_RCC_OscConfig+0x778>)
 8003cc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cc8:	4a77      	ldr	r2, [pc, #476]	; (8003ea8 <HAL_RCC_OscConfig+0x778>)
 8003cca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003cce:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f003 0320 	and.w	r3, r3, #32
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d03c      	beq.n	8003d56 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d01c      	beq.n	8003d1e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003ce4:	4b70      	ldr	r3, [pc, #448]	; (8003ea8 <HAL_RCC_OscConfig+0x778>)
 8003ce6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003cea:	4a6f      	ldr	r2, [pc, #444]	; (8003ea8 <HAL_RCC_OscConfig+0x778>)
 8003cec:	f043 0301 	orr.w	r3, r3, #1
 8003cf0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cf4:	f7fe f8ca 	bl	8001e8c <HAL_GetTick>
 8003cf8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003cfa:	e008      	b.n	8003d0e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003cfc:	f7fe f8c6 	bl	8001e8c <HAL_GetTick>
 8003d00:	4602      	mov	r2, r0
 8003d02:	693b      	ldr	r3, [r7, #16]
 8003d04:	1ad3      	subs	r3, r2, r3
 8003d06:	2b02      	cmp	r3, #2
 8003d08:	d901      	bls.n	8003d0e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8003d0a:	2303      	movs	r3, #3
 8003d0c:	e11c      	b.n	8003f48 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003d0e:	4b66      	ldr	r3, [pc, #408]	; (8003ea8 <HAL_RCC_OscConfig+0x778>)
 8003d10:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003d14:	f003 0302 	and.w	r3, r3, #2
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d0ef      	beq.n	8003cfc <HAL_RCC_OscConfig+0x5cc>
 8003d1c:	e01b      	b.n	8003d56 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003d1e:	4b62      	ldr	r3, [pc, #392]	; (8003ea8 <HAL_RCC_OscConfig+0x778>)
 8003d20:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003d24:	4a60      	ldr	r2, [pc, #384]	; (8003ea8 <HAL_RCC_OscConfig+0x778>)
 8003d26:	f023 0301 	bic.w	r3, r3, #1
 8003d2a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d2e:	f7fe f8ad 	bl	8001e8c <HAL_GetTick>
 8003d32:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003d34:	e008      	b.n	8003d48 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003d36:	f7fe f8a9 	bl	8001e8c <HAL_GetTick>
 8003d3a:	4602      	mov	r2, r0
 8003d3c:	693b      	ldr	r3, [r7, #16]
 8003d3e:	1ad3      	subs	r3, r2, r3
 8003d40:	2b02      	cmp	r3, #2
 8003d42:	d901      	bls.n	8003d48 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003d44:	2303      	movs	r3, #3
 8003d46:	e0ff      	b.n	8003f48 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003d48:	4b57      	ldr	r3, [pc, #348]	; (8003ea8 <HAL_RCC_OscConfig+0x778>)
 8003d4a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003d4e:	f003 0302 	and.w	r3, r3, #2
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d1ef      	bne.n	8003d36 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	f000 80f3 	beq.w	8003f46 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d64:	2b02      	cmp	r3, #2
 8003d66:	f040 80c9 	bne.w	8003efc <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003d6a:	4b4f      	ldr	r3, [pc, #316]	; (8003ea8 <HAL_RCC_OscConfig+0x778>)
 8003d6c:	68db      	ldr	r3, [r3, #12]
 8003d6e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d70:	697b      	ldr	r3, [r7, #20]
 8003d72:	f003 0203 	and.w	r2, r3, #3
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d7a:	429a      	cmp	r2, r3
 8003d7c:	d12c      	bne.n	8003dd8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003d7e:	697b      	ldr	r3, [r7, #20]
 8003d80:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d88:	3b01      	subs	r3, #1
 8003d8a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d8c:	429a      	cmp	r2, r3
 8003d8e:	d123      	bne.n	8003dd8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003d90:	697b      	ldr	r3, [r7, #20]
 8003d92:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d9a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003d9c:	429a      	cmp	r2, r3
 8003d9e:	d11b      	bne.n	8003dd8 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003da0:	697b      	ldr	r3, [r7, #20]
 8003da2:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003daa:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003dac:	429a      	cmp	r2, r3
 8003dae:	d113      	bne.n	8003dd8 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003db0:	697b      	ldr	r3, [r7, #20]
 8003db2:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dba:	085b      	lsrs	r3, r3, #1
 8003dbc:	3b01      	subs	r3, #1
 8003dbe:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003dc0:	429a      	cmp	r2, r3
 8003dc2:	d109      	bne.n	8003dd8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003dc4:	697b      	ldr	r3, [r7, #20]
 8003dc6:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dce:	085b      	lsrs	r3, r3, #1
 8003dd0:	3b01      	subs	r3, #1
 8003dd2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003dd4:	429a      	cmp	r2, r3
 8003dd6:	d06b      	beq.n	8003eb0 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003dd8:	69bb      	ldr	r3, [r7, #24]
 8003dda:	2b0c      	cmp	r3, #12
 8003ddc:	d062      	beq.n	8003ea4 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003dde:	4b32      	ldr	r3, [pc, #200]	; (8003ea8 <HAL_RCC_OscConfig+0x778>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d001      	beq.n	8003dee <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8003dea:	2301      	movs	r3, #1
 8003dec:	e0ac      	b.n	8003f48 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003dee:	4b2e      	ldr	r3, [pc, #184]	; (8003ea8 <HAL_RCC_OscConfig+0x778>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	4a2d      	ldr	r2, [pc, #180]	; (8003ea8 <HAL_RCC_OscConfig+0x778>)
 8003df4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003df8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003dfa:	f7fe f847 	bl	8001e8c <HAL_GetTick>
 8003dfe:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e00:	e008      	b.n	8003e14 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e02:	f7fe f843 	bl	8001e8c <HAL_GetTick>
 8003e06:	4602      	mov	r2, r0
 8003e08:	693b      	ldr	r3, [r7, #16]
 8003e0a:	1ad3      	subs	r3, r2, r3
 8003e0c:	2b02      	cmp	r3, #2
 8003e0e:	d901      	bls.n	8003e14 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8003e10:	2303      	movs	r3, #3
 8003e12:	e099      	b.n	8003f48 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e14:	4b24      	ldr	r3, [pc, #144]	; (8003ea8 <HAL_RCC_OscConfig+0x778>)
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d1f0      	bne.n	8003e02 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003e20:	4b21      	ldr	r3, [pc, #132]	; (8003ea8 <HAL_RCC_OscConfig+0x778>)
 8003e22:	68da      	ldr	r2, [r3, #12]
 8003e24:	4b21      	ldr	r3, [pc, #132]	; (8003eac <HAL_RCC_OscConfig+0x77c>)
 8003e26:	4013      	ands	r3, r2
 8003e28:	687a      	ldr	r2, [r7, #4]
 8003e2a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003e2c:	687a      	ldr	r2, [r7, #4]
 8003e2e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003e30:	3a01      	subs	r2, #1
 8003e32:	0112      	lsls	r2, r2, #4
 8003e34:	4311      	orrs	r1, r2
 8003e36:	687a      	ldr	r2, [r7, #4]
 8003e38:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003e3a:	0212      	lsls	r2, r2, #8
 8003e3c:	4311      	orrs	r1, r2
 8003e3e:	687a      	ldr	r2, [r7, #4]
 8003e40:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003e42:	0852      	lsrs	r2, r2, #1
 8003e44:	3a01      	subs	r2, #1
 8003e46:	0552      	lsls	r2, r2, #21
 8003e48:	4311      	orrs	r1, r2
 8003e4a:	687a      	ldr	r2, [r7, #4]
 8003e4c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003e4e:	0852      	lsrs	r2, r2, #1
 8003e50:	3a01      	subs	r2, #1
 8003e52:	0652      	lsls	r2, r2, #25
 8003e54:	4311      	orrs	r1, r2
 8003e56:	687a      	ldr	r2, [r7, #4]
 8003e58:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003e5a:	06d2      	lsls	r2, r2, #27
 8003e5c:	430a      	orrs	r2, r1
 8003e5e:	4912      	ldr	r1, [pc, #72]	; (8003ea8 <HAL_RCC_OscConfig+0x778>)
 8003e60:	4313      	orrs	r3, r2
 8003e62:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003e64:	4b10      	ldr	r3, [pc, #64]	; (8003ea8 <HAL_RCC_OscConfig+0x778>)
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	4a0f      	ldr	r2, [pc, #60]	; (8003ea8 <HAL_RCC_OscConfig+0x778>)
 8003e6a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003e6e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003e70:	4b0d      	ldr	r3, [pc, #52]	; (8003ea8 <HAL_RCC_OscConfig+0x778>)
 8003e72:	68db      	ldr	r3, [r3, #12]
 8003e74:	4a0c      	ldr	r2, [pc, #48]	; (8003ea8 <HAL_RCC_OscConfig+0x778>)
 8003e76:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003e7a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003e7c:	f7fe f806 	bl	8001e8c <HAL_GetTick>
 8003e80:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e82:	e008      	b.n	8003e96 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e84:	f7fe f802 	bl	8001e8c <HAL_GetTick>
 8003e88:	4602      	mov	r2, r0
 8003e8a:	693b      	ldr	r3, [r7, #16]
 8003e8c:	1ad3      	subs	r3, r2, r3
 8003e8e:	2b02      	cmp	r3, #2
 8003e90:	d901      	bls.n	8003e96 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8003e92:	2303      	movs	r3, #3
 8003e94:	e058      	b.n	8003f48 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e96:	4b04      	ldr	r3, [pc, #16]	; (8003ea8 <HAL_RCC_OscConfig+0x778>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d0f0      	beq.n	8003e84 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003ea2:	e050      	b.n	8003f46 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003ea4:	2301      	movs	r3, #1
 8003ea6:	e04f      	b.n	8003f48 <HAL_RCC_OscConfig+0x818>
 8003ea8:	40021000 	.word	0x40021000
 8003eac:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003eb0:	4b27      	ldr	r3, [pc, #156]	; (8003f50 <HAL_RCC_OscConfig+0x820>)
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d144      	bne.n	8003f46 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003ebc:	4b24      	ldr	r3, [pc, #144]	; (8003f50 <HAL_RCC_OscConfig+0x820>)
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	4a23      	ldr	r2, [pc, #140]	; (8003f50 <HAL_RCC_OscConfig+0x820>)
 8003ec2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003ec6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003ec8:	4b21      	ldr	r3, [pc, #132]	; (8003f50 <HAL_RCC_OscConfig+0x820>)
 8003eca:	68db      	ldr	r3, [r3, #12]
 8003ecc:	4a20      	ldr	r2, [pc, #128]	; (8003f50 <HAL_RCC_OscConfig+0x820>)
 8003ece:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003ed2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003ed4:	f7fd ffda 	bl	8001e8c <HAL_GetTick>
 8003ed8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003eda:	e008      	b.n	8003eee <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003edc:	f7fd ffd6 	bl	8001e8c <HAL_GetTick>
 8003ee0:	4602      	mov	r2, r0
 8003ee2:	693b      	ldr	r3, [r7, #16]
 8003ee4:	1ad3      	subs	r3, r2, r3
 8003ee6:	2b02      	cmp	r3, #2
 8003ee8:	d901      	bls.n	8003eee <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8003eea:	2303      	movs	r3, #3
 8003eec:	e02c      	b.n	8003f48 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003eee:	4b18      	ldr	r3, [pc, #96]	; (8003f50 <HAL_RCC_OscConfig+0x820>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d0f0      	beq.n	8003edc <HAL_RCC_OscConfig+0x7ac>
 8003efa:	e024      	b.n	8003f46 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003efc:	69bb      	ldr	r3, [r7, #24]
 8003efe:	2b0c      	cmp	r3, #12
 8003f00:	d01f      	beq.n	8003f42 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f02:	4b13      	ldr	r3, [pc, #76]	; (8003f50 <HAL_RCC_OscConfig+0x820>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	4a12      	ldr	r2, [pc, #72]	; (8003f50 <HAL_RCC_OscConfig+0x820>)
 8003f08:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003f0c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f0e:	f7fd ffbd 	bl	8001e8c <HAL_GetTick>
 8003f12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f14:	e008      	b.n	8003f28 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f16:	f7fd ffb9 	bl	8001e8c <HAL_GetTick>
 8003f1a:	4602      	mov	r2, r0
 8003f1c:	693b      	ldr	r3, [r7, #16]
 8003f1e:	1ad3      	subs	r3, r2, r3
 8003f20:	2b02      	cmp	r3, #2
 8003f22:	d901      	bls.n	8003f28 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8003f24:	2303      	movs	r3, #3
 8003f26:	e00f      	b.n	8003f48 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f28:	4b09      	ldr	r3, [pc, #36]	; (8003f50 <HAL_RCC_OscConfig+0x820>)
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d1f0      	bne.n	8003f16 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8003f34:	4b06      	ldr	r3, [pc, #24]	; (8003f50 <HAL_RCC_OscConfig+0x820>)
 8003f36:	68da      	ldr	r2, [r3, #12]
 8003f38:	4905      	ldr	r1, [pc, #20]	; (8003f50 <HAL_RCC_OscConfig+0x820>)
 8003f3a:	4b06      	ldr	r3, [pc, #24]	; (8003f54 <HAL_RCC_OscConfig+0x824>)
 8003f3c:	4013      	ands	r3, r2
 8003f3e:	60cb      	str	r3, [r1, #12]
 8003f40:	e001      	b.n	8003f46 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003f42:	2301      	movs	r3, #1
 8003f44:	e000      	b.n	8003f48 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8003f46:	2300      	movs	r3, #0
}
 8003f48:	4618      	mov	r0, r3
 8003f4a:	3720      	adds	r7, #32
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	bd80      	pop	{r7, pc}
 8003f50:	40021000 	.word	0x40021000
 8003f54:	feeefffc 	.word	0xfeeefffc

08003f58 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b084      	sub	sp, #16
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
 8003f60:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d101      	bne.n	8003f6c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003f68:	2301      	movs	r3, #1
 8003f6a:	e0e7      	b.n	800413c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003f6c:	4b75      	ldr	r3, [pc, #468]	; (8004144 <HAL_RCC_ClockConfig+0x1ec>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f003 0307 	and.w	r3, r3, #7
 8003f74:	683a      	ldr	r2, [r7, #0]
 8003f76:	429a      	cmp	r2, r3
 8003f78:	d910      	bls.n	8003f9c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f7a:	4b72      	ldr	r3, [pc, #456]	; (8004144 <HAL_RCC_ClockConfig+0x1ec>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f023 0207 	bic.w	r2, r3, #7
 8003f82:	4970      	ldr	r1, [pc, #448]	; (8004144 <HAL_RCC_ClockConfig+0x1ec>)
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	4313      	orrs	r3, r2
 8003f88:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f8a:	4b6e      	ldr	r3, [pc, #440]	; (8004144 <HAL_RCC_ClockConfig+0x1ec>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f003 0307 	and.w	r3, r3, #7
 8003f92:	683a      	ldr	r2, [r7, #0]
 8003f94:	429a      	cmp	r2, r3
 8003f96:	d001      	beq.n	8003f9c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003f98:	2301      	movs	r3, #1
 8003f9a:	e0cf      	b.n	800413c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f003 0302 	and.w	r3, r3, #2
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d010      	beq.n	8003fca <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	689a      	ldr	r2, [r3, #8]
 8003fac:	4b66      	ldr	r3, [pc, #408]	; (8004148 <HAL_RCC_ClockConfig+0x1f0>)
 8003fae:	689b      	ldr	r3, [r3, #8]
 8003fb0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003fb4:	429a      	cmp	r2, r3
 8003fb6:	d908      	bls.n	8003fca <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003fb8:	4b63      	ldr	r3, [pc, #396]	; (8004148 <HAL_RCC_ClockConfig+0x1f0>)
 8003fba:	689b      	ldr	r3, [r3, #8]
 8003fbc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	689b      	ldr	r3, [r3, #8]
 8003fc4:	4960      	ldr	r1, [pc, #384]	; (8004148 <HAL_RCC_ClockConfig+0x1f0>)
 8003fc6:	4313      	orrs	r3, r2
 8003fc8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f003 0301 	and.w	r3, r3, #1
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d04c      	beq.n	8004070 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	685b      	ldr	r3, [r3, #4]
 8003fda:	2b03      	cmp	r3, #3
 8003fdc:	d107      	bne.n	8003fee <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003fde:	4b5a      	ldr	r3, [pc, #360]	; (8004148 <HAL_RCC_ClockConfig+0x1f0>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d121      	bne.n	800402e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003fea:	2301      	movs	r3, #1
 8003fec:	e0a6      	b.n	800413c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	685b      	ldr	r3, [r3, #4]
 8003ff2:	2b02      	cmp	r3, #2
 8003ff4:	d107      	bne.n	8004006 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003ff6:	4b54      	ldr	r3, [pc, #336]	; (8004148 <HAL_RCC_ClockConfig+0x1f0>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d115      	bne.n	800402e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004002:	2301      	movs	r3, #1
 8004004:	e09a      	b.n	800413c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	685b      	ldr	r3, [r3, #4]
 800400a:	2b00      	cmp	r3, #0
 800400c:	d107      	bne.n	800401e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800400e:	4b4e      	ldr	r3, [pc, #312]	; (8004148 <HAL_RCC_ClockConfig+0x1f0>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f003 0302 	and.w	r3, r3, #2
 8004016:	2b00      	cmp	r3, #0
 8004018:	d109      	bne.n	800402e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800401a:	2301      	movs	r3, #1
 800401c:	e08e      	b.n	800413c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800401e:	4b4a      	ldr	r3, [pc, #296]	; (8004148 <HAL_RCC_ClockConfig+0x1f0>)
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004026:	2b00      	cmp	r3, #0
 8004028:	d101      	bne.n	800402e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800402a:	2301      	movs	r3, #1
 800402c:	e086      	b.n	800413c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800402e:	4b46      	ldr	r3, [pc, #280]	; (8004148 <HAL_RCC_ClockConfig+0x1f0>)
 8004030:	689b      	ldr	r3, [r3, #8]
 8004032:	f023 0203 	bic.w	r2, r3, #3
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	685b      	ldr	r3, [r3, #4]
 800403a:	4943      	ldr	r1, [pc, #268]	; (8004148 <HAL_RCC_ClockConfig+0x1f0>)
 800403c:	4313      	orrs	r3, r2
 800403e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004040:	f7fd ff24 	bl	8001e8c <HAL_GetTick>
 8004044:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004046:	e00a      	b.n	800405e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004048:	f7fd ff20 	bl	8001e8c <HAL_GetTick>
 800404c:	4602      	mov	r2, r0
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	1ad3      	subs	r3, r2, r3
 8004052:	f241 3288 	movw	r2, #5000	; 0x1388
 8004056:	4293      	cmp	r3, r2
 8004058:	d901      	bls.n	800405e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800405a:	2303      	movs	r3, #3
 800405c:	e06e      	b.n	800413c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800405e:	4b3a      	ldr	r3, [pc, #232]	; (8004148 <HAL_RCC_ClockConfig+0x1f0>)
 8004060:	689b      	ldr	r3, [r3, #8]
 8004062:	f003 020c 	and.w	r2, r3, #12
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	685b      	ldr	r3, [r3, #4]
 800406a:	009b      	lsls	r3, r3, #2
 800406c:	429a      	cmp	r2, r3
 800406e:	d1eb      	bne.n	8004048 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f003 0302 	and.w	r3, r3, #2
 8004078:	2b00      	cmp	r3, #0
 800407a:	d010      	beq.n	800409e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	689a      	ldr	r2, [r3, #8]
 8004080:	4b31      	ldr	r3, [pc, #196]	; (8004148 <HAL_RCC_ClockConfig+0x1f0>)
 8004082:	689b      	ldr	r3, [r3, #8]
 8004084:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004088:	429a      	cmp	r2, r3
 800408a:	d208      	bcs.n	800409e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800408c:	4b2e      	ldr	r3, [pc, #184]	; (8004148 <HAL_RCC_ClockConfig+0x1f0>)
 800408e:	689b      	ldr	r3, [r3, #8]
 8004090:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	689b      	ldr	r3, [r3, #8]
 8004098:	492b      	ldr	r1, [pc, #172]	; (8004148 <HAL_RCC_ClockConfig+0x1f0>)
 800409a:	4313      	orrs	r3, r2
 800409c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800409e:	4b29      	ldr	r3, [pc, #164]	; (8004144 <HAL_RCC_ClockConfig+0x1ec>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f003 0307 	and.w	r3, r3, #7
 80040a6:	683a      	ldr	r2, [r7, #0]
 80040a8:	429a      	cmp	r2, r3
 80040aa:	d210      	bcs.n	80040ce <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040ac:	4b25      	ldr	r3, [pc, #148]	; (8004144 <HAL_RCC_ClockConfig+0x1ec>)
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f023 0207 	bic.w	r2, r3, #7
 80040b4:	4923      	ldr	r1, [pc, #140]	; (8004144 <HAL_RCC_ClockConfig+0x1ec>)
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	4313      	orrs	r3, r2
 80040ba:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80040bc:	4b21      	ldr	r3, [pc, #132]	; (8004144 <HAL_RCC_ClockConfig+0x1ec>)
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f003 0307 	and.w	r3, r3, #7
 80040c4:	683a      	ldr	r2, [r7, #0]
 80040c6:	429a      	cmp	r2, r3
 80040c8:	d001      	beq.n	80040ce <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80040ca:	2301      	movs	r3, #1
 80040cc:	e036      	b.n	800413c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f003 0304 	and.w	r3, r3, #4
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d008      	beq.n	80040ec <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80040da:	4b1b      	ldr	r3, [pc, #108]	; (8004148 <HAL_RCC_ClockConfig+0x1f0>)
 80040dc:	689b      	ldr	r3, [r3, #8]
 80040de:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	68db      	ldr	r3, [r3, #12]
 80040e6:	4918      	ldr	r1, [pc, #96]	; (8004148 <HAL_RCC_ClockConfig+0x1f0>)
 80040e8:	4313      	orrs	r3, r2
 80040ea:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f003 0308 	and.w	r3, r3, #8
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d009      	beq.n	800410c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80040f8:	4b13      	ldr	r3, [pc, #76]	; (8004148 <HAL_RCC_ClockConfig+0x1f0>)
 80040fa:	689b      	ldr	r3, [r3, #8]
 80040fc:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	691b      	ldr	r3, [r3, #16]
 8004104:	00db      	lsls	r3, r3, #3
 8004106:	4910      	ldr	r1, [pc, #64]	; (8004148 <HAL_RCC_ClockConfig+0x1f0>)
 8004108:	4313      	orrs	r3, r2
 800410a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800410c:	f000 f824 	bl	8004158 <HAL_RCC_GetSysClockFreq>
 8004110:	4602      	mov	r2, r0
 8004112:	4b0d      	ldr	r3, [pc, #52]	; (8004148 <HAL_RCC_ClockConfig+0x1f0>)
 8004114:	689b      	ldr	r3, [r3, #8]
 8004116:	091b      	lsrs	r3, r3, #4
 8004118:	f003 030f 	and.w	r3, r3, #15
 800411c:	490b      	ldr	r1, [pc, #44]	; (800414c <HAL_RCC_ClockConfig+0x1f4>)
 800411e:	5ccb      	ldrb	r3, [r1, r3]
 8004120:	f003 031f 	and.w	r3, r3, #31
 8004124:	fa22 f303 	lsr.w	r3, r2, r3
 8004128:	4a09      	ldr	r2, [pc, #36]	; (8004150 <HAL_RCC_ClockConfig+0x1f8>)
 800412a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800412c:	4b09      	ldr	r3, [pc, #36]	; (8004154 <HAL_RCC_ClockConfig+0x1fc>)
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	4618      	mov	r0, r3
 8004132:	f7fd fe5b 	bl	8001dec <HAL_InitTick>
 8004136:	4603      	mov	r3, r0
 8004138:	72fb      	strb	r3, [r7, #11]

  return status;
 800413a:	7afb      	ldrb	r3, [r7, #11]
}
 800413c:	4618      	mov	r0, r3
 800413e:	3710      	adds	r7, #16
 8004140:	46bd      	mov	sp, r7
 8004142:	bd80      	pop	{r7, pc}
 8004144:	40022000 	.word	0x40022000
 8004148:	40021000 	.word	0x40021000
 800414c:	0800781c 	.word	0x0800781c
 8004150:	20000004 	.word	0x20000004
 8004154:	20000008 	.word	0x20000008

08004158 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004158:	b480      	push	{r7}
 800415a:	b089      	sub	sp, #36	; 0x24
 800415c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800415e:	2300      	movs	r3, #0
 8004160:	61fb      	str	r3, [r7, #28]
 8004162:	2300      	movs	r3, #0
 8004164:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004166:	4b3e      	ldr	r3, [pc, #248]	; (8004260 <HAL_RCC_GetSysClockFreq+0x108>)
 8004168:	689b      	ldr	r3, [r3, #8]
 800416a:	f003 030c 	and.w	r3, r3, #12
 800416e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004170:	4b3b      	ldr	r3, [pc, #236]	; (8004260 <HAL_RCC_GetSysClockFreq+0x108>)
 8004172:	68db      	ldr	r3, [r3, #12]
 8004174:	f003 0303 	and.w	r3, r3, #3
 8004178:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800417a:	693b      	ldr	r3, [r7, #16]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d005      	beq.n	800418c <HAL_RCC_GetSysClockFreq+0x34>
 8004180:	693b      	ldr	r3, [r7, #16]
 8004182:	2b0c      	cmp	r3, #12
 8004184:	d121      	bne.n	80041ca <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	2b01      	cmp	r3, #1
 800418a:	d11e      	bne.n	80041ca <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800418c:	4b34      	ldr	r3, [pc, #208]	; (8004260 <HAL_RCC_GetSysClockFreq+0x108>)
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f003 0308 	and.w	r3, r3, #8
 8004194:	2b00      	cmp	r3, #0
 8004196:	d107      	bne.n	80041a8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004198:	4b31      	ldr	r3, [pc, #196]	; (8004260 <HAL_RCC_GetSysClockFreq+0x108>)
 800419a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800419e:	0a1b      	lsrs	r3, r3, #8
 80041a0:	f003 030f 	and.w	r3, r3, #15
 80041a4:	61fb      	str	r3, [r7, #28]
 80041a6:	e005      	b.n	80041b4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80041a8:	4b2d      	ldr	r3, [pc, #180]	; (8004260 <HAL_RCC_GetSysClockFreq+0x108>)
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	091b      	lsrs	r3, r3, #4
 80041ae:	f003 030f 	and.w	r3, r3, #15
 80041b2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80041b4:	4a2b      	ldr	r2, [pc, #172]	; (8004264 <HAL_RCC_GetSysClockFreq+0x10c>)
 80041b6:	69fb      	ldr	r3, [r7, #28]
 80041b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80041bc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80041be:	693b      	ldr	r3, [r7, #16]
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d10d      	bne.n	80041e0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80041c4:	69fb      	ldr	r3, [r7, #28]
 80041c6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80041c8:	e00a      	b.n	80041e0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80041ca:	693b      	ldr	r3, [r7, #16]
 80041cc:	2b04      	cmp	r3, #4
 80041ce:	d102      	bne.n	80041d6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80041d0:	4b25      	ldr	r3, [pc, #148]	; (8004268 <HAL_RCC_GetSysClockFreq+0x110>)
 80041d2:	61bb      	str	r3, [r7, #24]
 80041d4:	e004      	b.n	80041e0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80041d6:	693b      	ldr	r3, [r7, #16]
 80041d8:	2b08      	cmp	r3, #8
 80041da:	d101      	bne.n	80041e0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80041dc:	4b23      	ldr	r3, [pc, #140]	; (800426c <HAL_RCC_GetSysClockFreq+0x114>)
 80041de:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80041e0:	693b      	ldr	r3, [r7, #16]
 80041e2:	2b0c      	cmp	r3, #12
 80041e4:	d134      	bne.n	8004250 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80041e6:	4b1e      	ldr	r3, [pc, #120]	; (8004260 <HAL_RCC_GetSysClockFreq+0x108>)
 80041e8:	68db      	ldr	r3, [r3, #12]
 80041ea:	f003 0303 	and.w	r3, r3, #3
 80041ee:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80041f0:	68bb      	ldr	r3, [r7, #8]
 80041f2:	2b02      	cmp	r3, #2
 80041f4:	d003      	beq.n	80041fe <HAL_RCC_GetSysClockFreq+0xa6>
 80041f6:	68bb      	ldr	r3, [r7, #8]
 80041f8:	2b03      	cmp	r3, #3
 80041fa:	d003      	beq.n	8004204 <HAL_RCC_GetSysClockFreq+0xac>
 80041fc:	e005      	b.n	800420a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80041fe:	4b1a      	ldr	r3, [pc, #104]	; (8004268 <HAL_RCC_GetSysClockFreq+0x110>)
 8004200:	617b      	str	r3, [r7, #20]
      break;
 8004202:	e005      	b.n	8004210 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004204:	4b19      	ldr	r3, [pc, #100]	; (800426c <HAL_RCC_GetSysClockFreq+0x114>)
 8004206:	617b      	str	r3, [r7, #20]
      break;
 8004208:	e002      	b.n	8004210 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800420a:	69fb      	ldr	r3, [r7, #28]
 800420c:	617b      	str	r3, [r7, #20]
      break;
 800420e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004210:	4b13      	ldr	r3, [pc, #76]	; (8004260 <HAL_RCC_GetSysClockFreq+0x108>)
 8004212:	68db      	ldr	r3, [r3, #12]
 8004214:	091b      	lsrs	r3, r3, #4
 8004216:	f003 0307 	and.w	r3, r3, #7
 800421a:	3301      	adds	r3, #1
 800421c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800421e:	4b10      	ldr	r3, [pc, #64]	; (8004260 <HAL_RCC_GetSysClockFreq+0x108>)
 8004220:	68db      	ldr	r3, [r3, #12]
 8004222:	0a1b      	lsrs	r3, r3, #8
 8004224:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004228:	697a      	ldr	r2, [r7, #20]
 800422a:	fb03 f202 	mul.w	r2, r3, r2
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	fbb2 f3f3 	udiv	r3, r2, r3
 8004234:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004236:	4b0a      	ldr	r3, [pc, #40]	; (8004260 <HAL_RCC_GetSysClockFreq+0x108>)
 8004238:	68db      	ldr	r3, [r3, #12]
 800423a:	0e5b      	lsrs	r3, r3, #25
 800423c:	f003 0303 	and.w	r3, r3, #3
 8004240:	3301      	adds	r3, #1
 8004242:	005b      	lsls	r3, r3, #1
 8004244:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004246:	697a      	ldr	r2, [r7, #20]
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	fbb2 f3f3 	udiv	r3, r2, r3
 800424e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004250:	69bb      	ldr	r3, [r7, #24]
}
 8004252:	4618      	mov	r0, r3
 8004254:	3724      	adds	r7, #36	; 0x24
 8004256:	46bd      	mov	sp, r7
 8004258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425c:	4770      	bx	lr
 800425e:	bf00      	nop
 8004260:	40021000 	.word	0x40021000
 8004264:	08007834 	.word	0x08007834
 8004268:	00f42400 	.word	0x00f42400
 800426c:	007a1200 	.word	0x007a1200

08004270 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004270:	b480      	push	{r7}
 8004272:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004274:	4b03      	ldr	r3, [pc, #12]	; (8004284 <HAL_RCC_GetHCLKFreq+0x14>)
 8004276:	681b      	ldr	r3, [r3, #0]
}
 8004278:	4618      	mov	r0, r3
 800427a:	46bd      	mov	sp, r7
 800427c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004280:	4770      	bx	lr
 8004282:	bf00      	nop
 8004284:	20000004 	.word	0x20000004

08004288 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800428c:	f7ff fff0 	bl	8004270 <HAL_RCC_GetHCLKFreq>
 8004290:	4602      	mov	r2, r0
 8004292:	4b06      	ldr	r3, [pc, #24]	; (80042ac <HAL_RCC_GetPCLK1Freq+0x24>)
 8004294:	689b      	ldr	r3, [r3, #8]
 8004296:	0a1b      	lsrs	r3, r3, #8
 8004298:	f003 0307 	and.w	r3, r3, #7
 800429c:	4904      	ldr	r1, [pc, #16]	; (80042b0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800429e:	5ccb      	ldrb	r3, [r1, r3]
 80042a0:	f003 031f 	and.w	r3, r3, #31
 80042a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80042a8:	4618      	mov	r0, r3
 80042aa:	bd80      	pop	{r7, pc}
 80042ac:	40021000 	.word	0x40021000
 80042b0:	0800782c 	.word	0x0800782c

080042b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80042b8:	f7ff ffda 	bl	8004270 <HAL_RCC_GetHCLKFreq>
 80042bc:	4602      	mov	r2, r0
 80042be:	4b06      	ldr	r3, [pc, #24]	; (80042d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80042c0:	689b      	ldr	r3, [r3, #8]
 80042c2:	0adb      	lsrs	r3, r3, #11
 80042c4:	f003 0307 	and.w	r3, r3, #7
 80042c8:	4904      	ldr	r1, [pc, #16]	; (80042dc <HAL_RCC_GetPCLK2Freq+0x28>)
 80042ca:	5ccb      	ldrb	r3, [r1, r3]
 80042cc:	f003 031f 	and.w	r3, r3, #31
 80042d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80042d4:	4618      	mov	r0, r3
 80042d6:	bd80      	pop	{r7, pc}
 80042d8:	40021000 	.word	0x40021000
 80042dc:	0800782c 	.word	0x0800782c

080042e0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b086      	sub	sp, #24
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80042e8:	2300      	movs	r3, #0
 80042ea:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80042ec:	4b2a      	ldr	r3, [pc, #168]	; (8004398 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80042ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d003      	beq.n	8004300 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80042f8:	f7ff f9b6 	bl	8003668 <HAL_PWREx_GetVoltageRange>
 80042fc:	6178      	str	r0, [r7, #20]
 80042fe:	e014      	b.n	800432a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004300:	4b25      	ldr	r3, [pc, #148]	; (8004398 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004302:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004304:	4a24      	ldr	r2, [pc, #144]	; (8004398 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004306:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800430a:	6593      	str	r3, [r2, #88]	; 0x58
 800430c:	4b22      	ldr	r3, [pc, #136]	; (8004398 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800430e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004310:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004314:	60fb      	str	r3, [r7, #12]
 8004316:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004318:	f7ff f9a6 	bl	8003668 <HAL_PWREx_GetVoltageRange>
 800431c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800431e:	4b1e      	ldr	r3, [pc, #120]	; (8004398 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004320:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004322:	4a1d      	ldr	r2, [pc, #116]	; (8004398 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004324:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004328:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800432a:	697b      	ldr	r3, [r7, #20]
 800432c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004330:	d10b      	bne.n	800434a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	2b80      	cmp	r3, #128	; 0x80
 8004336:	d919      	bls.n	800436c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2ba0      	cmp	r3, #160	; 0xa0
 800433c:	d902      	bls.n	8004344 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800433e:	2302      	movs	r3, #2
 8004340:	613b      	str	r3, [r7, #16]
 8004342:	e013      	b.n	800436c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004344:	2301      	movs	r3, #1
 8004346:	613b      	str	r3, [r7, #16]
 8004348:	e010      	b.n	800436c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	2b80      	cmp	r3, #128	; 0x80
 800434e:	d902      	bls.n	8004356 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004350:	2303      	movs	r3, #3
 8004352:	613b      	str	r3, [r7, #16]
 8004354:	e00a      	b.n	800436c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	2b80      	cmp	r3, #128	; 0x80
 800435a:	d102      	bne.n	8004362 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800435c:	2302      	movs	r3, #2
 800435e:	613b      	str	r3, [r7, #16]
 8004360:	e004      	b.n	800436c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	2b70      	cmp	r3, #112	; 0x70
 8004366:	d101      	bne.n	800436c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004368:	2301      	movs	r3, #1
 800436a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800436c:	4b0b      	ldr	r3, [pc, #44]	; (800439c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f023 0207 	bic.w	r2, r3, #7
 8004374:	4909      	ldr	r1, [pc, #36]	; (800439c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004376:	693b      	ldr	r3, [r7, #16]
 8004378:	4313      	orrs	r3, r2
 800437a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800437c:	4b07      	ldr	r3, [pc, #28]	; (800439c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f003 0307 	and.w	r3, r3, #7
 8004384:	693a      	ldr	r2, [r7, #16]
 8004386:	429a      	cmp	r2, r3
 8004388:	d001      	beq.n	800438e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800438a:	2301      	movs	r3, #1
 800438c:	e000      	b.n	8004390 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800438e:	2300      	movs	r3, #0
}
 8004390:	4618      	mov	r0, r3
 8004392:	3718      	adds	r7, #24
 8004394:	46bd      	mov	sp, r7
 8004396:	bd80      	pop	{r7, pc}
 8004398:	40021000 	.word	0x40021000
 800439c:	40022000 	.word	0x40022000

080043a0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b086      	sub	sp, #24
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80043a8:	2300      	movs	r3, #0
 80043aa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80043ac:	2300      	movs	r3, #0
 80043ae:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d031      	beq.n	8004420 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043c0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80043c4:	d01a      	beq.n	80043fc <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80043c6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80043ca:	d814      	bhi.n	80043f6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d009      	beq.n	80043e4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80043d0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80043d4:	d10f      	bne.n	80043f6 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80043d6:	4b5d      	ldr	r3, [pc, #372]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80043d8:	68db      	ldr	r3, [r3, #12]
 80043da:	4a5c      	ldr	r2, [pc, #368]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80043dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043e0:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80043e2:	e00c      	b.n	80043fe <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	3304      	adds	r3, #4
 80043e8:	2100      	movs	r1, #0
 80043ea:	4618      	mov	r0, r3
 80043ec:	f000 fa44 	bl	8004878 <RCCEx_PLLSAI1_Config>
 80043f0:	4603      	mov	r3, r0
 80043f2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80043f4:	e003      	b.n	80043fe <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80043f6:	2301      	movs	r3, #1
 80043f8:	74fb      	strb	r3, [r7, #19]
      break;
 80043fa:	e000      	b.n	80043fe <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80043fc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80043fe:	7cfb      	ldrb	r3, [r7, #19]
 8004400:	2b00      	cmp	r3, #0
 8004402:	d10b      	bne.n	800441c <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004404:	4b51      	ldr	r3, [pc, #324]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004406:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800440a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004412:	494e      	ldr	r1, [pc, #312]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004414:	4313      	orrs	r3, r2
 8004416:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800441a:	e001      	b.n	8004420 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800441c:	7cfb      	ldrb	r3, [r7, #19]
 800441e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004428:	2b00      	cmp	r3, #0
 800442a:	f000 809e 	beq.w	800456a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800442e:	2300      	movs	r3, #0
 8004430:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004432:	4b46      	ldr	r3, [pc, #280]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004434:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004436:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800443a:	2b00      	cmp	r3, #0
 800443c:	d101      	bne.n	8004442 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800443e:	2301      	movs	r3, #1
 8004440:	e000      	b.n	8004444 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8004442:	2300      	movs	r3, #0
 8004444:	2b00      	cmp	r3, #0
 8004446:	d00d      	beq.n	8004464 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004448:	4b40      	ldr	r3, [pc, #256]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800444a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800444c:	4a3f      	ldr	r2, [pc, #252]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800444e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004452:	6593      	str	r3, [r2, #88]	; 0x58
 8004454:	4b3d      	ldr	r3, [pc, #244]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004456:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004458:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800445c:	60bb      	str	r3, [r7, #8]
 800445e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004460:	2301      	movs	r3, #1
 8004462:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004464:	4b3a      	ldr	r3, [pc, #232]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	4a39      	ldr	r2, [pc, #228]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800446a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800446e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004470:	f7fd fd0c 	bl	8001e8c <HAL_GetTick>
 8004474:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004476:	e009      	b.n	800448c <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004478:	f7fd fd08 	bl	8001e8c <HAL_GetTick>
 800447c:	4602      	mov	r2, r0
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	1ad3      	subs	r3, r2, r3
 8004482:	2b02      	cmp	r3, #2
 8004484:	d902      	bls.n	800448c <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8004486:	2303      	movs	r3, #3
 8004488:	74fb      	strb	r3, [r7, #19]
        break;
 800448a:	e005      	b.n	8004498 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800448c:	4b30      	ldr	r3, [pc, #192]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004494:	2b00      	cmp	r3, #0
 8004496:	d0ef      	beq.n	8004478 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8004498:	7cfb      	ldrb	r3, [r7, #19]
 800449a:	2b00      	cmp	r3, #0
 800449c:	d15a      	bne.n	8004554 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800449e:	4b2b      	ldr	r3, [pc, #172]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80044a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044a4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044a8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80044aa:	697b      	ldr	r3, [r7, #20]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d01e      	beq.n	80044ee <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80044b4:	697a      	ldr	r2, [r7, #20]
 80044b6:	429a      	cmp	r2, r3
 80044b8:	d019      	beq.n	80044ee <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80044ba:	4b24      	ldr	r3, [pc, #144]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80044bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044c4:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80044c6:	4b21      	ldr	r3, [pc, #132]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80044c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044cc:	4a1f      	ldr	r2, [pc, #124]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80044ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044d2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80044d6:	4b1d      	ldr	r3, [pc, #116]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80044d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044dc:	4a1b      	ldr	r2, [pc, #108]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80044de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80044e2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80044e6:	4a19      	ldr	r2, [pc, #100]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80044e8:	697b      	ldr	r3, [r7, #20]
 80044ea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80044ee:	697b      	ldr	r3, [r7, #20]
 80044f0:	f003 0301 	and.w	r3, r3, #1
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d016      	beq.n	8004526 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044f8:	f7fd fcc8 	bl	8001e8c <HAL_GetTick>
 80044fc:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80044fe:	e00b      	b.n	8004518 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004500:	f7fd fcc4 	bl	8001e8c <HAL_GetTick>
 8004504:	4602      	mov	r2, r0
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	1ad3      	subs	r3, r2, r3
 800450a:	f241 3288 	movw	r2, #5000	; 0x1388
 800450e:	4293      	cmp	r3, r2
 8004510:	d902      	bls.n	8004518 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8004512:	2303      	movs	r3, #3
 8004514:	74fb      	strb	r3, [r7, #19]
            break;
 8004516:	e006      	b.n	8004526 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004518:	4b0c      	ldr	r3, [pc, #48]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800451a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800451e:	f003 0302 	and.w	r3, r3, #2
 8004522:	2b00      	cmp	r3, #0
 8004524:	d0ec      	beq.n	8004500 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8004526:	7cfb      	ldrb	r3, [r7, #19]
 8004528:	2b00      	cmp	r3, #0
 800452a:	d10b      	bne.n	8004544 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800452c:	4b07      	ldr	r3, [pc, #28]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800452e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004532:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800453a:	4904      	ldr	r1, [pc, #16]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800453c:	4313      	orrs	r3, r2
 800453e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004542:	e009      	b.n	8004558 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004544:	7cfb      	ldrb	r3, [r7, #19]
 8004546:	74bb      	strb	r3, [r7, #18]
 8004548:	e006      	b.n	8004558 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800454a:	bf00      	nop
 800454c:	40021000 	.word	0x40021000
 8004550:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004554:	7cfb      	ldrb	r3, [r7, #19]
 8004556:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004558:	7c7b      	ldrb	r3, [r7, #17]
 800455a:	2b01      	cmp	r3, #1
 800455c:	d105      	bne.n	800456a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800455e:	4b9e      	ldr	r3, [pc, #632]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004560:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004562:	4a9d      	ldr	r2, [pc, #628]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004564:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004568:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f003 0301 	and.w	r3, r3, #1
 8004572:	2b00      	cmp	r3, #0
 8004574:	d00a      	beq.n	800458c <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004576:	4b98      	ldr	r3, [pc, #608]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004578:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800457c:	f023 0203 	bic.w	r2, r3, #3
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	6a1b      	ldr	r3, [r3, #32]
 8004584:	4994      	ldr	r1, [pc, #592]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004586:	4313      	orrs	r3, r2
 8004588:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f003 0302 	and.w	r3, r3, #2
 8004594:	2b00      	cmp	r3, #0
 8004596:	d00a      	beq.n	80045ae <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004598:	4b8f      	ldr	r3, [pc, #572]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800459a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800459e:	f023 020c 	bic.w	r2, r3, #12
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045a6:	498c      	ldr	r1, [pc, #560]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80045a8:	4313      	orrs	r3, r2
 80045aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f003 0304 	and.w	r3, r3, #4
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d00a      	beq.n	80045d0 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80045ba:	4b87      	ldr	r3, [pc, #540]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80045bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045c0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045c8:	4983      	ldr	r1, [pc, #524]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80045ca:	4313      	orrs	r3, r2
 80045cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f003 0308 	and.w	r3, r3, #8
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d00a      	beq.n	80045f2 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80045dc:	4b7e      	ldr	r3, [pc, #504]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80045de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045e2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045ea:	497b      	ldr	r1, [pc, #492]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80045ec:	4313      	orrs	r3, r2
 80045ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f003 0320 	and.w	r3, r3, #32
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d00a      	beq.n	8004614 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80045fe:	4b76      	ldr	r3, [pc, #472]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004600:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004604:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800460c:	4972      	ldr	r1, [pc, #456]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800460e:	4313      	orrs	r3, r2
 8004610:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800461c:	2b00      	cmp	r3, #0
 800461e:	d00a      	beq.n	8004636 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004620:	4b6d      	ldr	r3, [pc, #436]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004622:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004626:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800462e:	496a      	ldr	r1, [pc, #424]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004630:	4313      	orrs	r3, r2
 8004632:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800463e:	2b00      	cmp	r3, #0
 8004640:	d00a      	beq.n	8004658 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004642:	4b65      	ldr	r3, [pc, #404]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004644:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004648:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004650:	4961      	ldr	r1, [pc, #388]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004652:	4313      	orrs	r3, r2
 8004654:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004660:	2b00      	cmp	r3, #0
 8004662:	d00a      	beq.n	800467a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004664:	4b5c      	ldr	r3, [pc, #368]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004666:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800466a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004672:	4959      	ldr	r1, [pc, #356]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004674:	4313      	orrs	r3, r2
 8004676:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004682:	2b00      	cmp	r3, #0
 8004684:	d00a      	beq.n	800469c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004686:	4b54      	ldr	r3, [pc, #336]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004688:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800468c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004694:	4950      	ldr	r1, [pc, #320]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004696:	4313      	orrs	r3, r2
 8004698:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d00a      	beq.n	80046be <HAL_RCCEx_PeriphCLKConfig+0x31e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80046a8:	4b4b      	ldr	r3, [pc, #300]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80046aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046ae:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046b6:	4948      	ldr	r1, [pc, #288]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80046b8:	4313      	orrs	r3, r2
 80046ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d00a      	beq.n	80046e0 <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80046ca:	4b43      	ldr	r3, [pc, #268]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80046cc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80046d0:	f023 0203 	bic.w	r2, r3, #3
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046d8:	493f      	ldr	r1, [pc, #252]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80046da:	4313      	orrs	r3, r2
 80046dc:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d028      	beq.n	800473e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80046ec:	4b3a      	ldr	r3, [pc, #232]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80046ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046f2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046fa:	4937      	ldr	r1, [pc, #220]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80046fc:	4313      	orrs	r3, r2
 80046fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004706:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800470a:	d106      	bne.n	800471a <HAL_RCCEx_PeriphCLKConfig+0x37a>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800470c:	4b32      	ldr	r3, [pc, #200]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800470e:	68db      	ldr	r3, [r3, #12]
 8004710:	4a31      	ldr	r2, [pc, #196]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004712:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004716:	60d3      	str	r3, [r2, #12]
 8004718:	e011      	b.n	800473e <HAL_RCCEx_PeriphCLKConfig+0x39e>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800471e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004722:	d10c      	bne.n	800473e <HAL_RCCEx_PeriphCLKConfig+0x39e>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	3304      	adds	r3, #4
 8004728:	2101      	movs	r1, #1
 800472a:	4618      	mov	r0, r3
 800472c:	f000 f8a4 	bl	8004878 <RCCEx_PLLSAI1_Config>
 8004730:	4603      	mov	r3, r0
 8004732:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004734:	7cfb      	ldrb	r3, [r7, #19]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d001      	beq.n	800473e <HAL_RCCEx_PeriphCLKConfig+0x39e>
        {
          /* set overall return value */
          status = ret;
 800473a:	7cfb      	ldrb	r3, [r7, #19]
 800473c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004746:	2b00      	cmp	r3, #0
 8004748:	d028      	beq.n	800479c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800474a:	4b23      	ldr	r3, [pc, #140]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800474c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004750:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004758:	491f      	ldr	r1, [pc, #124]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800475a:	4313      	orrs	r3, r2
 800475c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004764:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004768:	d106      	bne.n	8004778 <HAL_RCCEx_PeriphCLKConfig+0x3d8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800476a:	4b1b      	ldr	r3, [pc, #108]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800476c:	68db      	ldr	r3, [r3, #12]
 800476e:	4a1a      	ldr	r2, [pc, #104]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004770:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004774:	60d3      	str	r3, [r2, #12]
 8004776:	e011      	b.n	800479c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800477c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004780:	d10c      	bne.n	800479c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	3304      	adds	r3, #4
 8004786:	2101      	movs	r1, #1
 8004788:	4618      	mov	r0, r3
 800478a:	f000 f875 	bl	8004878 <RCCEx_PLLSAI1_Config>
 800478e:	4603      	mov	r3, r0
 8004790:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004792:	7cfb      	ldrb	r3, [r7, #19]
 8004794:	2b00      	cmp	r3, #0
 8004796:	d001      	beq.n	800479c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
      {
        /* set overall return value */
        status = ret;
 8004798:	7cfb      	ldrb	r3, [r7, #19]
 800479a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d02b      	beq.n	8004800 <HAL_RCCEx_PeriphCLKConfig+0x460>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80047a8:	4b0b      	ldr	r3, [pc, #44]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80047aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047ae:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047b6:	4908      	ldr	r1, [pc, #32]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80047b8:	4313      	orrs	r3, r2
 80047ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047c2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80047c6:	d109      	bne.n	80047dc <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80047c8:	4b03      	ldr	r3, [pc, #12]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80047ca:	68db      	ldr	r3, [r3, #12]
 80047cc:	4a02      	ldr	r2, [pc, #8]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80047ce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80047d2:	60d3      	str	r3, [r2, #12]
 80047d4:	e014      	b.n	8004800 <HAL_RCCEx_PeriphCLKConfig+0x460>
 80047d6:	bf00      	nop
 80047d8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047e0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80047e4:	d10c      	bne.n	8004800 <HAL_RCCEx_PeriphCLKConfig+0x460>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	3304      	adds	r3, #4
 80047ea:	2101      	movs	r1, #1
 80047ec:	4618      	mov	r0, r3
 80047ee:	f000 f843 	bl	8004878 <RCCEx_PLLSAI1_Config>
 80047f2:	4603      	mov	r3, r0
 80047f4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80047f6:	7cfb      	ldrb	r3, [r7, #19]
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d001      	beq.n	8004800 <HAL_RCCEx_PeriphCLKConfig+0x460>
      {
        /* set overall return value */
        status = ret;
 80047fc:	7cfb      	ldrb	r3, [r7, #19]
 80047fe:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004808:	2b00      	cmp	r3, #0
 800480a:	d01c      	beq.n	8004846 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800480c:	4b19      	ldr	r3, [pc, #100]	; (8004874 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 800480e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004812:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800481a:	4916      	ldr	r1, [pc, #88]	; (8004874 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 800481c:	4313      	orrs	r3, r2
 800481e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004826:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800482a:	d10c      	bne.n	8004846 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	3304      	adds	r3, #4
 8004830:	2102      	movs	r1, #2
 8004832:	4618      	mov	r0, r3
 8004834:	f000 f820 	bl	8004878 <RCCEx_PLLSAI1_Config>
 8004838:	4603      	mov	r3, r0
 800483a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800483c:	7cfb      	ldrb	r3, [r7, #19]
 800483e:	2b00      	cmp	r3, #0
 8004840:	d001      	beq.n	8004846 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
      {
        /* set overall return value */
        status = ret;
 8004842:	7cfb      	ldrb	r3, [r7, #19]
 8004844:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800484e:	2b00      	cmp	r3, #0
 8004850:	d00a      	beq.n	8004868 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004852:	4b08      	ldr	r3, [pc, #32]	; (8004874 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8004854:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004858:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004860:	4904      	ldr	r1, [pc, #16]	; (8004874 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8004862:	4313      	orrs	r3, r2
 8004864:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004868:	7cbb      	ldrb	r3, [r7, #18]
}
 800486a:	4618      	mov	r0, r3
 800486c:	3718      	adds	r7, #24
 800486e:	46bd      	mov	sp, r7
 8004870:	bd80      	pop	{r7, pc}
 8004872:	bf00      	nop
 8004874:	40021000 	.word	0x40021000

08004878 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004878:	b580      	push	{r7, lr}
 800487a:	b084      	sub	sp, #16
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
 8004880:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004882:	2300      	movs	r3, #0
 8004884:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004886:	4b74      	ldr	r3, [pc, #464]	; (8004a58 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004888:	68db      	ldr	r3, [r3, #12]
 800488a:	f003 0303 	and.w	r3, r3, #3
 800488e:	2b00      	cmp	r3, #0
 8004890:	d018      	beq.n	80048c4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004892:	4b71      	ldr	r3, [pc, #452]	; (8004a58 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004894:	68db      	ldr	r3, [r3, #12]
 8004896:	f003 0203 	and.w	r2, r3, #3
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	429a      	cmp	r2, r3
 80048a0:	d10d      	bne.n	80048be <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
       ||
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d009      	beq.n	80048be <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80048aa:	4b6b      	ldr	r3, [pc, #428]	; (8004a58 <RCCEx_PLLSAI1_Config+0x1e0>)
 80048ac:	68db      	ldr	r3, [r3, #12]
 80048ae:	091b      	lsrs	r3, r3, #4
 80048b0:	f003 0307 	and.w	r3, r3, #7
 80048b4:	1c5a      	adds	r2, r3, #1
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	685b      	ldr	r3, [r3, #4]
       ||
 80048ba:	429a      	cmp	r2, r3
 80048bc:	d047      	beq.n	800494e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80048be:	2301      	movs	r3, #1
 80048c0:	73fb      	strb	r3, [r7, #15]
 80048c2:	e044      	b.n	800494e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	2b03      	cmp	r3, #3
 80048ca:	d018      	beq.n	80048fe <RCCEx_PLLSAI1_Config+0x86>
 80048cc:	2b03      	cmp	r3, #3
 80048ce:	d825      	bhi.n	800491c <RCCEx_PLLSAI1_Config+0xa4>
 80048d0:	2b01      	cmp	r3, #1
 80048d2:	d002      	beq.n	80048da <RCCEx_PLLSAI1_Config+0x62>
 80048d4:	2b02      	cmp	r3, #2
 80048d6:	d009      	beq.n	80048ec <RCCEx_PLLSAI1_Config+0x74>
 80048d8:	e020      	b.n	800491c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80048da:	4b5f      	ldr	r3, [pc, #380]	; (8004a58 <RCCEx_PLLSAI1_Config+0x1e0>)
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f003 0302 	and.w	r3, r3, #2
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d11d      	bne.n	8004922 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80048e6:	2301      	movs	r3, #1
 80048e8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80048ea:	e01a      	b.n	8004922 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80048ec:	4b5a      	ldr	r3, [pc, #360]	; (8004a58 <RCCEx_PLLSAI1_Config+0x1e0>)
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d116      	bne.n	8004926 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80048f8:	2301      	movs	r3, #1
 80048fa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80048fc:	e013      	b.n	8004926 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80048fe:	4b56      	ldr	r3, [pc, #344]	; (8004a58 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004906:	2b00      	cmp	r3, #0
 8004908:	d10f      	bne.n	800492a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800490a:	4b53      	ldr	r3, [pc, #332]	; (8004a58 <RCCEx_PLLSAI1_Config+0x1e0>)
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004912:	2b00      	cmp	r3, #0
 8004914:	d109      	bne.n	800492a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004916:	2301      	movs	r3, #1
 8004918:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800491a:	e006      	b.n	800492a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800491c:	2301      	movs	r3, #1
 800491e:	73fb      	strb	r3, [r7, #15]
      break;
 8004920:	e004      	b.n	800492c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004922:	bf00      	nop
 8004924:	e002      	b.n	800492c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004926:	bf00      	nop
 8004928:	e000      	b.n	800492c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800492a:	bf00      	nop
    }

    if(status == HAL_OK)
 800492c:	7bfb      	ldrb	r3, [r7, #15]
 800492e:	2b00      	cmp	r3, #0
 8004930:	d10d      	bne.n	800494e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004932:	4b49      	ldr	r3, [pc, #292]	; (8004a58 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004934:	68db      	ldr	r3, [r3, #12]
 8004936:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6819      	ldr	r1, [r3, #0]
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	685b      	ldr	r3, [r3, #4]
 8004942:	3b01      	subs	r3, #1
 8004944:	011b      	lsls	r3, r3, #4
 8004946:	430b      	orrs	r3, r1
 8004948:	4943      	ldr	r1, [pc, #268]	; (8004a58 <RCCEx_PLLSAI1_Config+0x1e0>)
 800494a:	4313      	orrs	r3, r2
 800494c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800494e:	7bfb      	ldrb	r3, [r7, #15]
 8004950:	2b00      	cmp	r3, #0
 8004952:	d17c      	bne.n	8004a4e <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004954:	4b40      	ldr	r3, [pc, #256]	; (8004a58 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	4a3f      	ldr	r2, [pc, #252]	; (8004a58 <RCCEx_PLLSAI1_Config+0x1e0>)
 800495a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800495e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004960:	f7fd fa94 	bl	8001e8c <HAL_GetTick>
 8004964:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004966:	e009      	b.n	800497c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004968:	f7fd fa90 	bl	8001e8c <HAL_GetTick>
 800496c:	4602      	mov	r2, r0
 800496e:	68bb      	ldr	r3, [r7, #8]
 8004970:	1ad3      	subs	r3, r2, r3
 8004972:	2b02      	cmp	r3, #2
 8004974:	d902      	bls.n	800497c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004976:	2303      	movs	r3, #3
 8004978:	73fb      	strb	r3, [r7, #15]
        break;
 800497a:	e005      	b.n	8004988 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800497c:	4b36      	ldr	r3, [pc, #216]	; (8004a58 <RCCEx_PLLSAI1_Config+0x1e0>)
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004984:	2b00      	cmp	r3, #0
 8004986:	d1ef      	bne.n	8004968 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004988:	7bfb      	ldrb	r3, [r7, #15]
 800498a:	2b00      	cmp	r3, #0
 800498c:	d15f      	bne.n	8004a4e <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	2b00      	cmp	r3, #0
 8004992:	d110      	bne.n	80049b6 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004994:	4b30      	ldr	r3, [pc, #192]	; (8004a58 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004996:	691b      	ldr	r3, [r3, #16]
 8004998:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 800499c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80049a0:	687a      	ldr	r2, [r7, #4]
 80049a2:	6892      	ldr	r2, [r2, #8]
 80049a4:	0211      	lsls	r1, r2, #8
 80049a6:	687a      	ldr	r2, [r7, #4]
 80049a8:	68d2      	ldr	r2, [r2, #12]
 80049aa:	06d2      	lsls	r2, r2, #27
 80049ac:	430a      	orrs	r2, r1
 80049ae:	492a      	ldr	r1, [pc, #168]	; (8004a58 <RCCEx_PLLSAI1_Config+0x1e0>)
 80049b0:	4313      	orrs	r3, r2
 80049b2:	610b      	str	r3, [r1, #16]
 80049b4:	e027      	b.n	8004a06 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	2b01      	cmp	r3, #1
 80049ba:	d112      	bne.n	80049e2 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80049bc:	4b26      	ldr	r3, [pc, #152]	; (8004a58 <RCCEx_PLLSAI1_Config+0x1e0>)
 80049be:	691b      	ldr	r3, [r3, #16]
 80049c0:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80049c4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80049c8:	687a      	ldr	r2, [r7, #4]
 80049ca:	6892      	ldr	r2, [r2, #8]
 80049cc:	0211      	lsls	r1, r2, #8
 80049ce:	687a      	ldr	r2, [r7, #4]
 80049d0:	6912      	ldr	r2, [r2, #16]
 80049d2:	0852      	lsrs	r2, r2, #1
 80049d4:	3a01      	subs	r2, #1
 80049d6:	0552      	lsls	r2, r2, #21
 80049d8:	430a      	orrs	r2, r1
 80049da:	491f      	ldr	r1, [pc, #124]	; (8004a58 <RCCEx_PLLSAI1_Config+0x1e0>)
 80049dc:	4313      	orrs	r3, r2
 80049de:	610b      	str	r3, [r1, #16]
 80049e0:	e011      	b.n	8004a06 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80049e2:	4b1d      	ldr	r3, [pc, #116]	; (8004a58 <RCCEx_PLLSAI1_Config+0x1e0>)
 80049e4:	691b      	ldr	r3, [r3, #16]
 80049e6:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80049ea:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80049ee:	687a      	ldr	r2, [r7, #4]
 80049f0:	6892      	ldr	r2, [r2, #8]
 80049f2:	0211      	lsls	r1, r2, #8
 80049f4:	687a      	ldr	r2, [r7, #4]
 80049f6:	6952      	ldr	r2, [r2, #20]
 80049f8:	0852      	lsrs	r2, r2, #1
 80049fa:	3a01      	subs	r2, #1
 80049fc:	0652      	lsls	r2, r2, #25
 80049fe:	430a      	orrs	r2, r1
 8004a00:	4915      	ldr	r1, [pc, #84]	; (8004a58 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a02:	4313      	orrs	r3, r2
 8004a04:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004a06:	4b14      	ldr	r3, [pc, #80]	; (8004a58 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	4a13      	ldr	r2, [pc, #76]	; (8004a58 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a0c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004a10:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a12:	f7fd fa3b 	bl	8001e8c <HAL_GetTick>
 8004a16:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004a18:	e009      	b.n	8004a2e <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004a1a:	f7fd fa37 	bl	8001e8c <HAL_GetTick>
 8004a1e:	4602      	mov	r2, r0
 8004a20:	68bb      	ldr	r3, [r7, #8]
 8004a22:	1ad3      	subs	r3, r2, r3
 8004a24:	2b02      	cmp	r3, #2
 8004a26:	d902      	bls.n	8004a2e <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8004a28:	2303      	movs	r3, #3
 8004a2a:	73fb      	strb	r3, [r7, #15]
          break;
 8004a2c:	e005      	b.n	8004a3a <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004a2e:	4b0a      	ldr	r3, [pc, #40]	; (8004a58 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d0ef      	beq.n	8004a1a <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8004a3a:	7bfb      	ldrb	r3, [r7, #15]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d106      	bne.n	8004a4e <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004a40:	4b05      	ldr	r3, [pc, #20]	; (8004a58 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a42:	691a      	ldr	r2, [r3, #16]
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	699b      	ldr	r3, [r3, #24]
 8004a48:	4903      	ldr	r1, [pc, #12]	; (8004a58 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a4a:	4313      	orrs	r3, r2
 8004a4c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004a4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a50:	4618      	mov	r0, r3
 8004a52:	3710      	adds	r7, #16
 8004a54:	46bd      	mov	sp, r7
 8004a56:	bd80      	pop	{r7, pc}
 8004a58:	40021000 	.word	0x40021000

08004a5c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b082      	sub	sp, #8
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d101      	bne.n	8004a6e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004a6a:	2301      	movs	r3, #1
 8004a6c:	e049      	b.n	8004b02 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a74:	b2db      	uxtb	r3, r3
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d106      	bne.n	8004a88 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004a82:	6878      	ldr	r0, [r7, #4]
 8004a84:	f7fc ffc2 	bl	8001a0c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2202      	movs	r2, #2
 8004a8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681a      	ldr	r2, [r3, #0]
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	3304      	adds	r3, #4
 8004a98:	4619      	mov	r1, r3
 8004a9a:	4610      	mov	r0, r2
 8004a9c:	f000 fe0a 	bl	80056b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2201      	movs	r2, #1
 8004aa4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2201      	movs	r2, #1
 8004aac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2201      	movs	r2, #1
 8004ab4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2201      	movs	r2, #1
 8004abc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2201      	movs	r2, #1
 8004ac4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2201      	movs	r2, #1
 8004acc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2201      	movs	r2, #1
 8004ad4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2201      	movs	r2, #1
 8004adc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2201      	movs	r2, #1
 8004ae4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2201      	movs	r2, #1
 8004aec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2201      	movs	r2, #1
 8004af4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2201      	movs	r2, #1
 8004afc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004b00:	2300      	movs	r3, #0
}
 8004b02:	4618      	mov	r0, r3
 8004b04:	3708      	adds	r7, #8
 8004b06:	46bd      	mov	sp, r7
 8004b08:	bd80      	pop	{r7, pc}
	...

08004b0c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004b0c:	b480      	push	{r7}
 8004b0e:	b085      	sub	sp, #20
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b1a:	b2db      	uxtb	r3, r3
 8004b1c:	2b01      	cmp	r3, #1
 8004b1e:	d001      	beq.n	8004b24 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004b20:	2301      	movs	r3, #1
 8004b22:	e040      	b.n	8004ba6 <HAL_TIM_Base_Start_IT+0x9a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2202      	movs	r2, #2
 8004b28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	68da      	ldr	r2, [r3, #12]
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f042 0201 	orr.w	r2, r2, #1
 8004b3a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	4a1c      	ldr	r2, [pc, #112]	; (8004bb4 <HAL_TIM_Base_Start_IT+0xa8>)
 8004b42:	4293      	cmp	r3, r2
 8004b44:	d00e      	beq.n	8004b64 <HAL_TIM_Base_Start_IT+0x58>
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b4e:	d009      	beq.n	8004b64 <HAL_TIM_Base_Start_IT+0x58>
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	4a18      	ldr	r2, [pc, #96]	; (8004bb8 <HAL_TIM_Base_Start_IT+0xac>)
 8004b56:	4293      	cmp	r3, r2
 8004b58:	d004      	beq.n	8004b64 <HAL_TIM_Base_Start_IT+0x58>
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	4a17      	ldr	r2, [pc, #92]	; (8004bbc <HAL_TIM_Base_Start_IT+0xb0>)
 8004b60:	4293      	cmp	r3, r2
 8004b62:	d115      	bne.n	8004b90 <HAL_TIM_Base_Start_IT+0x84>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	689a      	ldr	r2, [r3, #8]
 8004b6a:	4b15      	ldr	r3, [pc, #84]	; (8004bc0 <HAL_TIM_Base_Start_IT+0xb4>)
 8004b6c:	4013      	ands	r3, r2
 8004b6e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	2b06      	cmp	r3, #6
 8004b74:	d015      	beq.n	8004ba2 <HAL_TIM_Base_Start_IT+0x96>
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b7c:	d011      	beq.n	8004ba2 <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	681a      	ldr	r2, [r3, #0]
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f042 0201 	orr.w	r2, r2, #1
 8004b8c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b8e:	e008      	b.n	8004ba2 <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	681a      	ldr	r2, [r3, #0]
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f042 0201 	orr.w	r2, r2, #1
 8004b9e:	601a      	str	r2, [r3, #0]
 8004ba0:	e000      	b.n	8004ba4 <HAL_TIM_Base_Start_IT+0x98>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ba2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004ba4:	2300      	movs	r3, #0
}
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	3714      	adds	r7, #20
 8004baa:	46bd      	mov	sp, r7
 8004bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb0:	4770      	bx	lr
 8004bb2:	bf00      	nop
 8004bb4:	40012c00 	.word	0x40012c00
 8004bb8:	40000400 	.word	0x40000400
 8004bbc:	40014000 	.word	0x40014000
 8004bc0:	00010007 	.word	0x00010007

08004bc4 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8004bc4:	b480      	push	{r7}
 8004bc6:	b083      	sub	sp, #12
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	68da      	ldr	r2, [r3, #12]
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f022 0201 	bic.w	r2, r2, #1
 8004bda:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	6a1a      	ldr	r2, [r3, #32]
 8004be2:	f241 1311 	movw	r3, #4369	; 0x1111
 8004be6:	4013      	ands	r3, r2
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d10f      	bne.n	8004c0c <HAL_TIM_Base_Stop_IT+0x48>
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	6a1a      	ldr	r2, [r3, #32]
 8004bf2:	f240 4344 	movw	r3, #1092	; 0x444
 8004bf6:	4013      	ands	r3, r2
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d107      	bne.n	8004c0c <HAL_TIM_Base_Stop_IT+0x48>
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	681a      	ldr	r2, [r3, #0]
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f022 0201 	bic.w	r2, r2, #1
 8004c0a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2201      	movs	r2, #1
 8004c10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8004c14:	2300      	movs	r3, #0
}
 8004c16:	4618      	mov	r0, r3
 8004c18:	370c      	adds	r7, #12
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c20:	4770      	bx	lr

08004c22 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8004c22:	b580      	push	{r7, lr}
 8004c24:	b082      	sub	sp, #8
 8004c26:	af00      	add	r7, sp, #0
 8004c28:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d101      	bne.n	8004c34 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8004c30:	2301      	movs	r3, #1
 8004c32:	e049      	b.n	8004cc8 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c3a:	b2db      	uxtb	r3, r3
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d106      	bne.n	8004c4e <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2200      	movs	r2, #0
 8004c44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8004c48:	6878      	ldr	r0, [r7, #4]
 8004c4a:	f000 f841 	bl	8004cd0 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	2202      	movs	r2, #2
 8004c52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681a      	ldr	r2, [r3, #0]
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	3304      	adds	r3, #4
 8004c5e:	4619      	mov	r1, r3
 8004c60:	4610      	mov	r0, r2
 8004c62:	f000 fd27 	bl	80056b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	2201      	movs	r2, #1
 8004c6a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	2201      	movs	r2, #1
 8004c72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	2201      	movs	r2, #1
 8004c7a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	2201      	movs	r2, #1
 8004c82:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2201      	movs	r2, #1
 8004c8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	2201      	movs	r2, #1
 8004c92:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	2201      	movs	r2, #1
 8004c9a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	2201      	movs	r2, #1
 8004ca2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	2201      	movs	r2, #1
 8004caa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	2201      	movs	r2, #1
 8004cb2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	2201      	movs	r2, #1
 8004cba:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	2201      	movs	r2, #1
 8004cc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004cc6:	2300      	movs	r3, #0
}
 8004cc8:	4618      	mov	r0, r3
 8004cca:	3708      	adds	r7, #8
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	bd80      	pop	{r7, pc}

08004cd0 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8004cd0:	b480      	push	{r7}
 8004cd2:	b083      	sub	sp, #12
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8004cd8:	bf00      	nop
 8004cda:	370c      	adds	r7, #12
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce2:	4770      	bx	lr

08004ce4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	b082      	sub	sp, #8
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d101      	bne.n	8004cf6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004cf2:	2301      	movs	r3, #1
 8004cf4:	e049      	b.n	8004d8a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cfc:	b2db      	uxtb	r3, r3
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d106      	bne.n	8004d10 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2200      	movs	r2, #0
 8004d06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004d0a:	6878      	ldr	r0, [r7, #4]
 8004d0c:	f000 f841 	bl	8004d92 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2202      	movs	r2, #2
 8004d14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681a      	ldr	r2, [r3, #0]
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	3304      	adds	r3, #4
 8004d20:	4619      	mov	r1, r3
 8004d22:	4610      	mov	r0, r2
 8004d24:	f000 fcc6 	bl	80056b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2201      	movs	r2, #1
 8004d2c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2201      	movs	r2, #1
 8004d34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2201      	movs	r2, #1
 8004d3c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2201      	movs	r2, #1
 8004d44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2201      	movs	r2, #1
 8004d4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2201      	movs	r2, #1
 8004d54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2201      	movs	r2, #1
 8004d5c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2201      	movs	r2, #1
 8004d64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2201      	movs	r2, #1
 8004d6c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2201      	movs	r2, #1
 8004d74:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2201      	movs	r2, #1
 8004d7c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2201      	movs	r2, #1
 8004d84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004d88:	2300      	movs	r3, #0
}
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	3708      	adds	r7, #8
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	bd80      	pop	{r7, pc}

08004d92 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004d92:	b480      	push	{r7}
 8004d94:	b083      	sub	sp, #12
 8004d96:	af00      	add	r7, sp, #0
 8004d98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004d9a:	bf00      	nop
 8004d9c:	370c      	adds	r7, #12
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da4:	4770      	bx	lr
	...

08004da8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004da8:	b580      	push	{r7, lr}
 8004daa:	b084      	sub	sp, #16
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
 8004db0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d109      	bne.n	8004dcc <HAL_TIM_PWM_Start+0x24>
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004dbe:	b2db      	uxtb	r3, r3
 8004dc0:	2b01      	cmp	r3, #1
 8004dc2:	bf14      	ite	ne
 8004dc4:	2301      	movne	r3, #1
 8004dc6:	2300      	moveq	r3, #0
 8004dc8:	b2db      	uxtb	r3, r3
 8004dca:	e03c      	b.n	8004e46 <HAL_TIM_PWM_Start+0x9e>
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	2b04      	cmp	r3, #4
 8004dd0:	d109      	bne.n	8004de6 <HAL_TIM_PWM_Start+0x3e>
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004dd8:	b2db      	uxtb	r3, r3
 8004dda:	2b01      	cmp	r3, #1
 8004ddc:	bf14      	ite	ne
 8004dde:	2301      	movne	r3, #1
 8004de0:	2300      	moveq	r3, #0
 8004de2:	b2db      	uxtb	r3, r3
 8004de4:	e02f      	b.n	8004e46 <HAL_TIM_PWM_Start+0x9e>
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	2b08      	cmp	r3, #8
 8004dea:	d109      	bne.n	8004e00 <HAL_TIM_PWM_Start+0x58>
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004df2:	b2db      	uxtb	r3, r3
 8004df4:	2b01      	cmp	r3, #1
 8004df6:	bf14      	ite	ne
 8004df8:	2301      	movne	r3, #1
 8004dfa:	2300      	moveq	r3, #0
 8004dfc:	b2db      	uxtb	r3, r3
 8004dfe:	e022      	b.n	8004e46 <HAL_TIM_PWM_Start+0x9e>
 8004e00:	683b      	ldr	r3, [r7, #0]
 8004e02:	2b0c      	cmp	r3, #12
 8004e04:	d109      	bne.n	8004e1a <HAL_TIM_PWM_Start+0x72>
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004e0c:	b2db      	uxtb	r3, r3
 8004e0e:	2b01      	cmp	r3, #1
 8004e10:	bf14      	ite	ne
 8004e12:	2301      	movne	r3, #1
 8004e14:	2300      	moveq	r3, #0
 8004e16:	b2db      	uxtb	r3, r3
 8004e18:	e015      	b.n	8004e46 <HAL_TIM_PWM_Start+0x9e>
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	2b10      	cmp	r3, #16
 8004e1e:	d109      	bne.n	8004e34 <HAL_TIM_PWM_Start+0x8c>
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004e26:	b2db      	uxtb	r3, r3
 8004e28:	2b01      	cmp	r3, #1
 8004e2a:	bf14      	ite	ne
 8004e2c:	2301      	movne	r3, #1
 8004e2e:	2300      	moveq	r3, #0
 8004e30:	b2db      	uxtb	r3, r3
 8004e32:	e008      	b.n	8004e46 <HAL_TIM_PWM_Start+0x9e>
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004e3a:	b2db      	uxtb	r3, r3
 8004e3c:	2b01      	cmp	r3, #1
 8004e3e:	bf14      	ite	ne
 8004e40:	2301      	movne	r3, #1
 8004e42:	2300      	moveq	r3, #0
 8004e44:	b2db      	uxtb	r3, r3
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d001      	beq.n	8004e4e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004e4a:	2301      	movs	r3, #1
 8004e4c:	e083      	b.n	8004f56 <HAL_TIM_PWM_Start+0x1ae>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d104      	bne.n	8004e5e <HAL_TIM_PWM_Start+0xb6>
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2202      	movs	r2, #2
 8004e58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004e5c:	e023      	b.n	8004ea6 <HAL_TIM_PWM_Start+0xfe>
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	2b04      	cmp	r3, #4
 8004e62:	d104      	bne.n	8004e6e <HAL_TIM_PWM_Start+0xc6>
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2202      	movs	r2, #2
 8004e68:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004e6c:	e01b      	b.n	8004ea6 <HAL_TIM_PWM_Start+0xfe>
 8004e6e:	683b      	ldr	r3, [r7, #0]
 8004e70:	2b08      	cmp	r3, #8
 8004e72:	d104      	bne.n	8004e7e <HAL_TIM_PWM_Start+0xd6>
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2202      	movs	r2, #2
 8004e78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004e7c:	e013      	b.n	8004ea6 <HAL_TIM_PWM_Start+0xfe>
 8004e7e:	683b      	ldr	r3, [r7, #0]
 8004e80:	2b0c      	cmp	r3, #12
 8004e82:	d104      	bne.n	8004e8e <HAL_TIM_PWM_Start+0xe6>
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2202      	movs	r2, #2
 8004e88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004e8c:	e00b      	b.n	8004ea6 <HAL_TIM_PWM_Start+0xfe>
 8004e8e:	683b      	ldr	r3, [r7, #0]
 8004e90:	2b10      	cmp	r3, #16
 8004e92:	d104      	bne.n	8004e9e <HAL_TIM_PWM_Start+0xf6>
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2202      	movs	r2, #2
 8004e98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004e9c:	e003      	b.n	8004ea6 <HAL_TIM_PWM_Start+0xfe>
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	2202      	movs	r2, #2
 8004ea2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	2201      	movs	r2, #1
 8004eac:	6839      	ldr	r1, [r7, #0]
 8004eae:	4618      	mov	r0, r3
 8004eb0:	f000 ff86 	bl	8005dc0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	4a29      	ldr	r2, [pc, #164]	; (8004f60 <HAL_TIM_PWM_Start+0x1b8>)
 8004eba:	4293      	cmp	r3, r2
 8004ebc:	d009      	beq.n	8004ed2 <HAL_TIM_PWM_Start+0x12a>
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	4a28      	ldr	r2, [pc, #160]	; (8004f64 <HAL_TIM_PWM_Start+0x1bc>)
 8004ec4:	4293      	cmp	r3, r2
 8004ec6:	d004      	beq.n	8004ed2 <HAL_TIM_PWM_Start+0x12a>
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	4a26      	ldr	r2, [pc, #152]	; (8004f68 <HAL_TIM_PWM_Start+0x1c0>)
 8004ece:	4293      	cmp	r3, r2
 8004ed0:	d101      	bne.n	8004ed6 <HAL_TIM_PWM_Start+0x12e>
 8004ed2:	2301      	movs	r3, #1
 8004ed4:	e000      	b.n	8004ed8 <HAL_TIM_PWM_Start+0x130>
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d007      	beq.n	8004eec <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004eea:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	4a1b      	ldr	r2, [pc, #108]	; (8004f60 <HAL_TIM_PWM_Start+0x1b8>)
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d00e      	beq.n	8004f14 <HAL_TIM_PWM_Start+0x16c>
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004efe:	d009      	beq.n	8004f14 <HAL_TIM_PWM_Start+0x16c>
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	4a19      	ldr	r2, [pc, #100]	; (8004f6c <HAL_TIM_PWM_Start+0x1c4>)
 8004f06:	4293      	cmp	r3, r2
 8004f08:	d004      	beq.n	8004f14 <HAL_TIM_PWM_Start+0x16c>
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	4a15      	ldr	r2, [pc, #84]	; (8004f64 <HAL_TIM_PWM_Start+0x1bc>)
 8004f10:	4293      	cmp	r3, r2
 8004f12:	d115      	bne.n	8004f40 <HAL_TIM_PWM_Start+0x198>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	689a      	ldr	r2, [r3, #8]
 8004f1a:	4b15      	ldr	r3, [pc, #84]	; (8004f70 <HAL_TIM_PWM_Start+0x1c8>)
 8004f1c:	4013      	ands	r3, r2
 8004f1e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	2b06      	cmp	r3, #6
 8004f24:	d015      	beq.n	8004f52 <HAL_TIM_PWM_Start+0x1aa>
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f2c:	d011      	beq.n	8004f52 <HAL_TIM_PWM_Start+0x1aa>
    {
      __HAL_TIM_ENABLE(htim);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	681a      	ldr	r2, [r3, #0]
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f042 0201 	orr.w	r2, r2, #1
 8004f3c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f3e:	e008      	b.n	8004f52 <HAL_TIM_PWM_Start+0x1aa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	681a      	ldr	r2, [r3, #0]
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f042 0201 	orr.w	r2, r2, #1
 8004f4e:	601a      	str	r2, [r3, #0]
 8004f50:	e000      	b.n	8004f54 <HAL_TIM_PWM_Start+0x1ac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f52:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004f54:	2300      	movs	r3, #0
}
 8004f56:	4618      	mov	r0, r3
 8004f58:	3710      	adds	r7, #16
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	bd80      	pop	{r7, pc}
 8004f5e:	bf00      	nop
 8004f60:	40012c00 	.word	0x40012c00
 8004f64:	40014000 	.word	0x40014000
 8004f68:	40014400 	.word	0x40014400
 8004f6c:	40000400 	.word	0x40000400
 8004f70:	00010007 	.word	0x00010007

08004f74 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004f74:	b580      	push	{r7, lr}
 8004f76:	b082      	sub	sp, #8
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	691b      	ldr	r3, [r3, #16]
 8004f82:	f003 0302 	and.w	r3, r3, #2
 8004f86:	2b02      	cmp	r3, #2
 8004f88:	d122      	bne.n	8004fd0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	68db      	ldr	r3, [r3, #12]
 8004f90:	f003 0302 	and.w	r3, r3, #2
 8004f94:	2b02      	cmp	r3, #2
 8004f96:	d11b      	bne.n	8004fd0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f06f 0202 	mvn.w	r2, #2
 8004fa0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	2201      	movs	r2, #1
 8004fa6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	699b      	ldr	r3, [r3, #24]
 8004fae:	f003 0303 	and.w	r3, r3, #3
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d003      	beq.n	8004fbe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004fb6:	6878      	ldr	r0, [r7, #4]
 8004fb8:	f000 fb5d 	bl	8005676 <HAL_TIM_IC_CaptureCallback>
 8004fbc:	e005      	b.n	8004fca <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004fbe:	6878      	ldr	r0, [r7, #4]
 8004fc0:	f000 fb4f 	bl	8005662 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004fc4:	6878      	ldr	r0, [r7, #4]
 8004fc6:	f000 fb60 	bl	800568a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	2200      	movs	r2, #0
 8004fce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	691b      	ldr	r3, [r3, #16]
 8004fd6:	f003 0304 	and.w	r3, r3, #4
 8004fda:	2b04      	cmp	r3, #4
 8004fdc:	d122      	bne.n	8005024 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	68db      	ldr	r3, [r3, #12]
 8004fe4:	f003 0304 	and.w	r3, r3, #4
 8004fe8:	2b04      	cmp	r3, #4
 8004fea:	d11b      	bne.n	8005024 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f06f 0204 	mvn.w	r2, #4
 8004ff4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	2202      	movs	r2, #2
 8004ffa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	699b      	ldr	r3, [r3, #24]
 8005002:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005006:	2b00      	cmp	r3, #0
 8005008:	d003      	beq.n	8005012 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800500a:	6878      	ldr	r0, [r7, #4]
 800500c:	f000 fb33 	bl	8005676 <HAL_TIM_IC_CaptureCallback>
 8005010:	e005      	b.n	800501e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005012:	6878      	ldr	r0, [r7, #4]
 8005014:	f000 fb25 	bl	8005662 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005018:	6878      	ldr	r0, [r7, #4]
 800501a:	f000 fb36 	bl	800568a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	2200      	movs	r2, #0
 8005022:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	691b      	ldr	r3, [r3, #16]
 800502a:	f003 0308 	and.w	r3, r3, #8
 800502e:	2b08      	cmp	r3, #8
 8005030:	d122      	bne.n	8005078 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	68db      	ldr	r3, [r3, #12]
 8005038:	f003 0308 	and.w	r3, r3, #8
 800503c:	2b08      	cmp	r3, #8
 800503e:	d11b      	bne.n	8005078 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f06f 0208 	mvn.w	r2, #8
 8005048:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	2204      	movs	r2, #4
 800504e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	69db      	ldr	r3, [r3, #28]
 8005056:	f003 0303 	and.w	r3, r3, #3
 800505a:	2b00      	cmp	r3, #0
 800505c:	d003      	beq.n	8005066 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800505e:	6878      	ldr	r0, [r7, #4]
 8005060:	f000 fb09 	bl	8005676 <HAL_TIM_IC_CaptureCallback>
 8005064:	e005      	b.n	8005072 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005066:	6878      	ldr	r0, [r7, #4]
 8005068:	f000 fafb 	bl	8005662 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800506c:	6878      	ldr	r0, [r7, #4]
 800506e:	f000 fb0c 	bl	800568a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	2200      	movs	r2, #0
 8005076:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	691b      	ldr	r3, [r3, #16]
 800507e:	f003 0310 	and.w	r3, r3, #16
 8005082:	2b10      	cmp	r3, #16
 8005084:	d122      	bne.n	80050cc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	68db      	ldr	r3, [r3, #12]
 800508c:	f003 0310 	and.w	r3, r3, #16
 8005090:	2b10      	cmp	r3, #16
 8005092:	d11b      	bne.n	80050cc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f06f 0210 	mvn.w	r2, #16
 800509c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	2208      	movs	r2, #8
 80050a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	69db      	ldr	r3, [r3, #28]
 80050aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d003      	beq.n	80050ba <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80050b2:	6878      	ldr	r0, [r7, #4]
 80050b4:	f000 fadf 	bl	8005676 <HAL_TIM_IC_CaptureCallback>
 80050b8:	e005      	b.n	80050c6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80050ba:	6878      	ldr	r0, [r7, #4]
 80050bc:	f000 fad1 	bl	8005662 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050c0:	6878      	ldr	r0, [r7, #4]
 80050c2:	f000 fae2 	bl	800568a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	2200      	movs	r2, #0
 80050ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	691b      	ldr	r3, [r3, #16]
 80050d2:	f003 0301 	and.w	r3, r3, #1
 80050d6:	2b01      	cmp	r3, #1
 80050d8:	d10e      	bne.n	80050f8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	68db      	ldr	r3, [r3, #12]
 80050e0:	f003 0301 	and.w	r3, r3, #1
 80050e4:	2b01      	cmp	r3, #1
 80050e6:	d107      	bne.n	80050f8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f06f 0201 	mvn.w	r2, #1
 80050f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80050f2:	6878      	ldr	r0, [r7, #4]
 80050f4:	f7fc fa88 	bl	8001608 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	691b      	ldr	r3, [r3, #16]
 80050fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005102:	2b80      	cmp	r3, #128	; 0x80
 8005104:	d10e      	bne.n	8005124 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	68db      	ldr	r3, [r3, #12]
 800510c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005110:	2b80      	cmp	r3, #128	; 0x80
 8005112:	d107      	bne.n	8005124 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800511c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800511e:	6878      	ldr	r0, [r7, #4]
 8005120:	f000 ff64 	bl	8005fec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	691b      	ldr	r3, [r3, #16]
 800512a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800512e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005132:	d10e      	bne.n	8005152 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	68db      	ldr	r3, [r3, #12]
 800513a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800513e:	2b80      	cmp	r3, #128	; 0x80
 8005140:	d107      	bne.n	8005152 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800514a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800514c:	6878      	ldr	r0, [r7, #4]
 800514e:	f000 ff57 	bl	8006000 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	691b      	ldr	r3, [r3, #16]
 8005158:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800515c:	2b40      	cmp	r3, #64	; 0x40
 800515e:	d10e      	bne.n	800517e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	68db      	ldr	r3, [r3, #12]
 8005166:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800516a:	2b40      	cmp	r3, #64	; 0x40
 800516c:	d107      	bne.n	800517e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005176:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005178:	6878      	ldr	r0, [r7, #4]
 800517a:	f000 fa90 	bl	800569e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	691b      	ldr	r3, [r3, #16]
 8005184:	f003 0320 	and.w	r3, r3, #32
 8005188:	2b20      	cmp	r3, #32
 800518a:	d10e      	bne.n	80051aa <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	68db      	ldr	r3, [r3, #12]
 8005192:	f003 0320 	and.w	r3, r3, #32
 8005196:	2b20      	cmp	r3, #32
 8005198:	d107      	bne.n	80051aa <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f06f 0220 	mvn.w	r2, #32
 80051a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80051a4:	6878      	ldr	r0, [r7, #4]
 80051a6:	f000 ff17 	bl	8005fd8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80051aa:	bf00      	nop
 80051ac:	3708      	adds	r7, #8
 80051ae:	46bd      	mov	sp, r7
 80051b0:	bd80      	pop	{r7, pc}
	...

080051b4 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80051b4:	b580      	push	{r7, lr}
 80051b6:	b086      	sub	sp, #24
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	60f8      	str	r0, [r7, #12]
 80051bc:	60b9      	str	r1, [r7, #8]
 80051be:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80051c0:	2300      	movs	r3, #0
 80051c2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80051ca:	2b01      	cmp	r3, #1
 80051cc:	d101      	bne.n	80051d2 <HAL_TIM_OC_ConfigChannel+0x1e>
 80051ce:	2302      	movs	r3, #2
 80051d0:	e066      	b.n	80052a0 <HAL_TIM_OC_ConfigChannel+0xec>
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	2201      	movs	r2, #1
 80051d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	2b14      	cmp	r3, #20
 80051de:	d857      	bhi.n	8005290 <HAL_TIM_OC_ConfigChannel+0xdc>
 80051e0:	a201      	add	r2, pc, #4	; (adr r2, 80051e8 <HAL_TIM_OC_ConfigChannel+0x34>)
 80051e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051e6:	bf00      	nop
 80051e8:	0800523d 	.word	0x0800523d
 80051ec:	08005291 	.word	0x08005291
 80051f0:	08005291 	.word	0x08005291
 80051f4:	08005291 	.word	0x08005291
 80051f8:	0800524b 	.word	0x0800524b
 80051fc:	08005291 	.word	0x08005291
 8005200:	08005291 	.word	0x08005291
 8005204:	08005291 	.word	0x08005291
 8005208:	08005259 	.word	0x08005259
 800520c:	08005291 	.word	0x08005291
 8005210:	08005291 	.word	0x08005291
 8005214:	08005291 	.word	0x08005291
 8005218:	08005267 	.word	0x08005267
 800521c:	08005291 	.word	0x08005291
 8005220:	08005291 	.word	0x08005291
 8005224:	08005291 	.word	0x08005291
 8005228:	08005275 	.word	0x08005275
 800522c:	08005291 	.word	0x08005291
 8005230:	08005291 	.word	0x08005291
 8005234:	08005291 	.word	0x08005291
 8005238:	08005283 	.word	0x08005283
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	68b9      	ldr	r1, [r7, #8]
 8005242:	4618      	mov	r0, r3
 8005244:	f000 faa4 	bl	8005790 <TIM_OC1_SetConfig>
      break;
 8005248:	e025      	b.n	8005296 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	68b9      	ldr	r1, [r7, #8]
 8005250:	4618      	mov	r0, r3
 8005252:	f000 fb19 	bl	8005888 <TIM_OC2_SetConfig>
      break;
 8005256:	e01e      	b.n	8005296 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	68b9      	ldr	r1, [r7, #8]
 800525e:	4618      	mov	r0, r3
 8005260:	f000 fb8c 	bl	800597c <TIM_OC3_SetConfig>
      break;
 8005264:	e017      	b.n	8005296 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	68b9      	ldr	r1, [r7, #8]
 800526c:	4618      	mov	r0, r3
 800526e:	f000 fbfd 	bl	8005a6c <TIM_OC4_SetConfig>
      break;
 8005272:	e010      	b.n	8005296 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	68b9      	ldr	r1, [r7, #8]
 800527a:	4618      	mov	r0, r3
 800527c:	f000 fc54 	bl	8005b28 <TIM_OC5_SetConfig>
      break;
 8005280:	e009      	b.n	8005296 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	68b9      	ldr	r1, [r7, #8]
 8005288:	4618      	mov	r0, r3
 800528a:	f000 fca5 	bl	8005bd8 <TIM_OC6_SetConfig>
      break;
 800528e:	e002      	b.n	8005296 <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 8005290:	2301      	movs	r3, #1
 8005292:	75fb      	strb	r3, [r7, #23]
      break;
 8005294:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	2200      	movs	r2, #0
 800529a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800529e:	7dfb      	ldrb	r3, [r7, #23]
}
 80052a0:	4618      	mov	r0, r3
 80052a2:	3718      	adds	r7, #24
 80052a4:	46bd      	mov	sp, r7
 80052a6:	bd80      	pop	{r7, pc}

080052a8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80052a8:	b580      	push	{r7, lr}
 80052aa:	b086      	sub	sp, #24
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	60f8      	str	r0, [r7, #12]
 80052b0:	60b9      	str	r1, [r7, #8]
 80052b2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80052b4:	2300      	movs	r3, #0
 80052b6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80052be:	2b01      	cmp	r3, #1
 80052c0:	d101      	bne.n	80052c6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80052c2:	2302      	movs	r3, #2
 80052c4:	e0ff      	b.n	80054c6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	2201      	movs	r2, #1
 80052ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	2b14      	cmp	r3, #20
 80052d2:	f200 80f0 	bhi.w	80054b6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80052d6:	a201      	add	r2, pc, #4	; (adr r2, 80052dc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80052d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052dc:	08005331 	.word	0x08005331
 80052e0:	080054b7 	.word	0x080054b7
 80052e4:	080054b7 	.word	0x080054b7
 80052e8:	080054b7 	.word	0x080054b7
 80052ec:	08005371 	.word	0x08005371
 80052f0:	080054b7 	.word	0x080054b7
 80052f4:	080054b7 	.word	0x080054b7
 80052f8:	080054b7 	.word	0x080054b7
 80052fc:	080053b3 	.word	0x080053b3
 8005300:	080054b7 	.word	0x080054b7
 8005304:	080054b7 	.word	0x080054b7
 8005308:	080054b7 	.word	0x080054b7
 800530c:	080053f3 	.word	0x080053f3
 8005310:	080054b7 	.word	0x080054b7
 8005314:	080054b7 	.word	0x080054b7
 8005318:	080054b7 	.word	0x080054b7
 800531c:	08005435 	.word	0x08005435
 8005320:	080054b7 	.word	0x080054b7
 8005324:	080054b7 	.word	0x080054b7
 8005328:	080054b7 	.word	0x080054b7
 800532c:	08005475 	.word	0x08005475
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	68b9      	ldr	r1, [r7, #8]
 8005336:	4618      	mov	r0, r3
 8005338:	f000 fa2a 	bl	8005790 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	699a      	ldr	r2, [r3, #24]
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f042 0208 	orr.w	r2, r2, #8
 800534a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	699a      	ldr	r2, [r3, #24]
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f022 0204 	bic.w	r2, r2, #4
 800535a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	6999      	ldr	r1, [r3, #24]
 8005362:	68bb      	ldr	r3, [r7, #8]
 8005364:	691a      	ldr	r2, [r3, #16]
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	430a      	orrs	r2, r1
 800536c:	619a      	str	r2, [r3, #24]
      break;
 800536e:	e0a5      	b.n	80054bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	68b9      	ldr	r1, [r7, #8]
 8005376:	4618      	mov	r0, r3
 8005378:	f000 fa86 	bl	8005888 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	699a      	ldr	r2, [r3, #24]
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800538a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	699a      	ldr	r2, [r3, #24]
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800539a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	6999      	ldr	r1, [r3, #24]
 80053a2:	68bb      	ldr	r3, [r7, #8]
 80053a4:	691b      	ldr	r3, [r3, #16]
 80053a6:	021a      	lsls	r2, r3, #8
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	430a      	orrs	r2, r1
 80053ae:	619a      	str	r2, [r3, #24]
      break;
 80053b0:	e084      	b.n	80054bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	68b9      	ldr	r1, [r7, #8]
 80053b8:	4618      	mov	r0, r3
 80053ba:	f000 fadf 	bl	800597c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	69da      	ldr	r2, [r3, #28]
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f042 0208 	orr.w	r2, r2, #8
 80053cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	69da      	ldr	r2, [r3, #28]
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f022 0204 	bic.w	r2, r2, #4
 80053dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	69d9      	ldr	r1, [r3, #28]
 80053e4:	68bb      	ldr	r3, [r7, #8]
 80053e6:	691a      	ldr	r2, [r3, #16]
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	430a      	orrs	r2, r1
 80053ee:	61da      	str	r2, [r3, #28]
      break;
 80053f0:	e064      	b.n	80054bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	68b9      	ldr	r1, [r7, #8]
 80053f8:	4618      	mov	r0, r3
 80053fa:	f000 fb37 	bl	8005a6c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	69da      	ldr	r2, [r3, #28]
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800540c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	69da      	ldr	r2, [r3, #28]
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800541c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	69d9      	ldr	r1, [r3, #28]
 8005424:	68bb      	ldr	r3, [r7, #8]
 8005426:	691b      	ldr	r3, [r3, #16]
 8005428:	021a      	lsls	r2, r3, #8
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	430a      	orrs	r2, r1
 8005430:	61da      	str	r2, [r3, #28]
      break;
 8005432:	e043      	b.n	80054bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	68b9      	ldr	r1, [r7, #8]
 800543a:	4618      	mov	r0, r3
 800543c:	f000 fb74 	bl	8005b28 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f042 0208 	orr.w	r2, r2, #8
 800544e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f022 0204 	bic.w	r2, r2, #4
 800545e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005466:	68bb      	ldr	r3, [r7, #8]
 8005468:	691a      	ldr	r2, [r3, #16]
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	430a      	orrs	r2, r1
 8005470:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005472:	e023      	b.n	80054bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	68b9      	ldr	r1, [r7, #8]
 800547a:	4618      	mov	r0, r3
 800547c:	f000 fbac 	bl	8005bd8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800548e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800549e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80054a6:	68bb      	ldr	r3, [r7, #8]
 80054a8:	691b      	ldr	r3, [r3, #16]
 80054aa:	021a      	lsls	r2, r3, #8
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	430a      	orrs	r2, r1
 80054b2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80054b4:	e002      	b.n	80054bc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80054b6:	2301      	movs	r3, #1
 80054b8:	75fb      	strb	r3, [r7, #23]
      break;
 80054ba:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	2200      	movs	r2, #0
 80054c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80054c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80054c6:	4618      	mov	r0, r3
 80054c8:	3718      	adds	r7, #24
 80054ca:	46bd      	mov	sp, r7
 80054cc:	bd80      	pop	{r7, pc}
 80054ce:	bf00      	nop

080054d0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80054d0:	b580      	push	{r7, lr}
 80054d2:	b084      	sub	sp, #16
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]
 80054d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80054da:	2300      	movs	r3, #0
 80054dc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80054e4:	2b01      	cmp	r3, #1
 80054e6:	d101      	bne.n	80054ec <HAL_TIM_ConfigClockSource+0x1c>
 80054e8:	2302      	movs	r3, #2
 80054ea:	e0b6      	b.n	800565a <HAL_TIM_ConfigClockSource+0x18a>
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2201      	movs	r2, #1
 80054f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2202      	movs	r2, #2
 80054f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	689b      	ldr	r3, [r3, #8]
 8005502:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005504:	68bb      	ldr	r3, [r7, #8]
 8005506:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800550a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800550e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005510:	68bb      	ldr	r3, [r7, #8]
 8005512:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005516:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	68ba      	ldr	r2, [r7, #8]
 800551e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005520:	683b      	ldr	r3, [r7, #0]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005528:	d03e      	beq.n	80055a8 <HAL_TIM_ConfigClockSource+0xd8>
 800552a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800552e:	f200 8087 	bhi.w	8005640 <HAL_TIM_ConfigClockSource+0x170>
 8005532:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005536:	f000 8086 	beq.w	8005646 <HAL_TIM_ConfigClockSource+0x176>
 800553a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800553e:	d87f      	bhi.n	8005640 <HAL_TIM_ConfigClockSource+0x170>
 8005540:	2b70      	cmp	r3, #112	; 0x70
 8005542:	d01a      	beq.n	800557a <HAL_TIM_ConfigClockSource+0xaa>
 8005544:	2b70      	cmp	r3, #112	; 0x70
 8005546:	d87b      	bhi.n	8005640 <HAL_TIM_ConfigClockSource+0x170>
 8005548:	2b60      	cmp	r3, #96	; 0x60
 800554a:	d050      	beq.n	80055ee <HAL_TIM_ConfigClockSource+0x11e>
 800554c:	2b60      	cmp	r3, #96	; 0x60
 800554e:	d877      	bhi.n	8005640 <HAL_TIM_ConfigClockSource+0x170>
 8005550:	2b50      	cmp	r3, #80	; 0x50
 8005552:	d03c      	beq.n	80055ce <HAL_TIM_ConfigClockSource+0xfe>
 8005554:	2b50      	cmp	r3, #80	; 0x50
 8005556:	d873      	bhi.n	8005640 <HAL_TIM_ConfigClockSource+0x170>
 8005558:	2b40      	cmp	r3, #64	; 0x40
 800555a:	d058      	beq.n	800560e <HAL_TIM_ConfigClockSource+0x13e>
 800555c:	2b40      	cmp	r3, #64	; 0x40
 800555e:	d86f      	bhi.n	8005640 <HAL_TIM_ConfigClockSource+0x170>
 8005560:	2b30      	cmp	r3, #48	; 0x30
 8005562:	d064      	beq.n	800562e <HAL_TIM_ConfigClockSource+0x15e>
 8005564:	2b30      	cmp	r3, #48	; 0x30
 8005566:	d86b      	bhi.n	8005640 <HAL_TIM_ConfigClockSource+0x170>
 8005568:	2b20      	cmp	r3, #32
 800556a:	d060      	beq.n	800562e <HAL_TIM_ConfigClockSource+0x15e>
 800556c:	2b20      	cmp	r3, #32
 800556e:	d867      	bhi.n	8005640 <HAL_TIM_ConfigClockSource+0x170>
 8005570:	2b00      	cmp	r3, #0
 8005572:	d05c      	beq.n	800562e <HAL_TIM_ConfigClockSource+0x15e>
 8005574:	2b10      	cmp	r3, #16
 8005576:	d05a      	beq.n	800562e <HAL_TIM_ConfigClockSource+0x15e>
 8005578:	e062      	b.n	8005640 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	6818      	ldr	r0, [r3, #0]
 800557e:	683b      	ldr	r3, [r7, #0]
 8005580:	6899      	ldr	r1, [r3, #8]
 8005582:	683b      	ldr	r3, [r7, #0]
 8005584:	685a      	ldr	r2, [r3, #4]
 8005586:	683b      	ldr	r3, [r7, #0]
 8005588:	68db      	ldr	r3, [r3, #12]
 800558a:	f000 fbf9 	bl	8005d80 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	689b      	ldr	r3, [r3, #8]
 8005594:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005596:	68bb      	ldr	r3, [r7, #8]
 8005598:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800559c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	68ba      	ldr	r2, [r7, #8]
 80055a4:	609a      	str	r2, [r3, #8]
      break;
 80055a6:	e04f      	b.n	8005648 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	6818      	ldr	r0, [r3, #0]
 80055ac:	683b      	ldr	r3, [r7, #0]
 80055ae:	6899      	ldr	r1, [r3, #8]
 80055b0:	683b      	ldr	r3, [r7, #0]
 80055b2:	685a      	ldr	r2, [r3, #4]
 80055b4:	683b      	ldr	r3, [r7, #0]
 80055b6:	68db      	ldr	r3, [r3, #12]
 80055b8:	f000 fbe2 	bl	8005d80 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	689a      	ldr	r2, [r3, #8]
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80055ca:	609a      	str	r2, [r3, #8]
      break;
 80055cc:	e03c      	b.n	8005648 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	6818      	ldr	r0, [r3, #0]
 80055d2:	683b      	ldr	r3, [r7, #0]
 80055d4:	6859      	ldr	r1, [r3, #4]
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	68db      	ldr	r3, [r3, #12]
 80055da:	461a      	mov	r2, r3
 80055dc:	f000 fb56 	bl	8005c8c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	2150      	movs	r1, #80	; 0x50
 80055e6:	4618      	mov	r0, r3
 80055e8:	f000 fbaf 	bl	8005d4a <TIM_ITRx_SetConfig>
      break;
 80055ec:	e02c      	b.n	8005648 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	6818      	ldr	r0, [r3, #0]
 80055f2:	683b      	ldr	r3, [r7, #0]
 80055f4:	6859      	ldr	r1, [r3, #4]
 80055f6:	683b      	ldr	r3, [r7, #0]
 80055f8:	68db      	ldr	r3, [r3, #12]
 80055fa:	461a      	mov	r2, r3
 80055fc:	f000 fb75 	bl	8005cea <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	2160      	movs	r1, #96	; 0x60
 8005606:	4618      	mov	r0, r3
 8005608:	f000 fb9f 	bl	8005d4a <TIM_ITRx_SetConfig>
      break;
 800560c:	e01c      	b.n	8005648 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	6818      	ldr	r0, [r3, #0]
 8005612:	683b      	ldr	r3, [r7, #0]
 8005614:	6859      	ldr	r1, [r3, #4]
 8005616:	683b      	ldr	r3, [r7, #0]
 8005618:	68db      	ldr	r3, [r3, #12]
 800561a:	461a      	mov	r2, r3
 800561c:	f000 fb36 	bl	8005c8c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	2140      	movs	r1, #64	; 0x40
 8005626:	4618      	mov	r0, r3
 8005628:	f000 fb8f 	bl	8005d4a <TIM_ITRx_SetConfig>
      break;
 800562c:	e00c      	b.n	8005648 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681a      	ldr	r2, [r3, #0]
 8005632:	683b      	ldr	r3, [r7, #0]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	4619      	mov	r1, r3
 8005638:	4610      	mov	r0, r2
 800563a:	f000 fb86 	bl	8005d4a <TIM_ITRx_SetConfig>
      break;
 800563e:	e003      	b.n	8005648 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8005640:	2301      	movs	r3, #1
 8005642:	73fb      	strb	r3, [r7, #15]
      break;
 8005644:	e000      	b.n	8005648 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8005646:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2201      	movs	r2, #1
 800564c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2200      	movs	r2, #0
 8005654:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005658:	7bfb      	ldrb	r3, [r7, #15]
}
 800565a:	4618      	mov	r0, r3
 800565c:	3710      	adds	r7, #16
 800565e:	46bd      	mov	sp, r7
 8005660:	bd80      	pop	{r7, pc}

08005662 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005662:	b480      	push	{r7}
 8005664:	b083      	sub	sp, #12
 8005666:	af00      	add	r7, sp, #0
 8005668:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800566a:	bf00      	nop
 800566c:	370c      	adds	r7, #12
 800566e:	46bd      	mov	sp, r7
 8005670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005674:	4770      	bx	lr

08005676 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005676:	b480      	push	{r7}
 8005678:	b083      	sub	sp, #12
 800567a:	af00      	add	r7, sp, #0
 800567c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800567e:	bf00      	nop
 8005680:	370c      	adds	r7, #12
 8005682:	46bd      	mov	sp, r7
 8005684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005688:	4770      	bx	lr

0800568a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800568a:	b480      	push	{r7}
 800568c:	b083      	sub	sp, #12
 800568e:	af00      	add	r7, sp, #0
 8005690:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005692:	bf00      	nop
 8005694:	370c      	adds	r7, #12
 8005696:	46bd      	mov	sp, r7
 8005698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569c:	4770      	bx	lr

0800569e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800569e:	b480      	push	{r7}
 80056a0:	b083      	sub	sp, #12
 80056a2:	af00      	add	r7, sp, #0
 80056a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80056a6:	bf00      	nop
 80056a8:	370c      	adds	r7, #12
 80056aa:	46bd      	mov	sp, r7
 80056ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b0:	4770      	bx	lr
	...

080056b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80056b4:	b480      	push	{r7}
 80056b6:	b085      	sub	sp, #20
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	6078      	str	r0, [r7, #4]
 80056bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	4a2e      	ldr	r2, [pc, #184]	; (8005780 <TIM_Base_SetConfig+0xcc>)
 80056c8:	4293      	cmp	r3, r2
 80056ca:	d007      	beq.n	80056dc <TIM_Base_SetConfig+0x28>
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056d2:	d003      	beq.n	80056dc <TIM_Base_SetConfig+0x28>
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	4a2b      	ldr	r2, [pc, #172]	; (8005784 <TIM_Base_SetConfig+0xd0>)
 80056d8:	4293      	cmp	r3, r2
 80056da:	d108      	bne.n	80056ee <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80056e4:	683b      	ldr	r3, [r7, #0]
 80056e6:	685b      	ldr	r3, [r3, #4]
 80056e8:	68fa      	ldr	r2, [r7, #12]
 80056ea:	4313      	orrs	r3, r2
 80056ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	4a23      	ldr	r2, [pc, #140]	; (8005780 <TIM_Base_SetConfig+0xcc>)
 80056f2:	4293      	cmp	r3, r2
 80056f4:	d00f      	beq.n	8005716 <TIM_Base_SetConfig+0x62>
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056fc:	d00b      	beq.n	8005716 <TIM_Base_SetConfig+0x62>
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	4a20      	ldr	r2, [pc, #128]	; (8005784 <TIM_Base_SetConfig+0xd0>)
 8005702:	4293      	cmp	r3, r2
 8005704:	d007      	beq.n	8005716 <TIM_Base_SetConfig+0x62>
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	4a1f      	ldr	r2, [pc, #124]	; (8005788 <TIM_Base_SetConfig+0xd4>)
 800570a:	4293      	cmp	r3, r2
 800570c:	d003      	beq.n	8005716 <TIM_Base_SetConfig+0x62>
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	4a1e      	ldr	r2, [pc, #120]	; (800578c <TIM_Base_SetConfig+0xd8>)
 8005712:	4293      	cmp	r3, r2
 8005714:	d108      	bne.n	8005728 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800571c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800571e:	683b      	ldr	r3, [r7, #0]
 8005720:	68db      	ldr	r3, [r3, #12]
 8005722:	68fa      	ldr	r2, [r7, #12]
 8005724:	4313      	orrs	r3, r2
 8005726:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800572e:	683b      	ldr	r3, [r7, #0]
 8005730:	695b      	ldr	r3, [r3, #20]
 8005732:	4313      	orrs	r3, r2
 8005734:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	68fa      	ldr	r2, [r7, #12]
 800573a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800573c:	683b      	ldr	r3, [r7, #0]
 800573e:	689a      	ldr	r2, [r3, #8]
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005744:	683b      	ldr	r3, [r7, #0]
 8005746:	681a      	ldr	r2, [r3, #0]
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	4a0c      	ldr	r2, [pc, #48]	; (8005780 <TIM_Base_SetConfig+0xcc>)
 8005750:	4293      	cmp	r3, r2
 8005752:	d007      	beq.n	8005764 <TIM_Base_SetConfig+0xb0>
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	4a0c      	ldr	r2, [pc, #48]	; (8005788 <TIM_Base_SetConfig+0xd4>)
 8005758:	4293      	cmp	r3, r2
 800575a:	d003      	beq.n	8005764 <TIM_Base_SetConfig+0xb0>
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	4a0b      	ldr	r2, [pc, #44]	; (800578c <TIM_Base_SetConfig+0xd8>)
 8005760:	4293      	cmp	r3, r2
 8005762:	d103      	bne.n	800576c <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005764:	683b      	ldr	r3, [r7, #0]
 8005766:	691a      	ldr	r2, [r3, #16]
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2201      	movs	r2, #1
 8005770:	615a      	str	r2, [r3, #20]
}
 8005772:	bf00      	nop
 8005774:	3714      	adds	r7, #20
 8005776:	46bd      	mov	sp, r7
 8005778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577c:	4770      	bx	lr
 800577e:	bf00      	nop
 8005780:	40012c00 	.word	0x40012c00
 8005784:	40000400 	.word	0x40000400
 8005788:	40014000 	.word	0x40014000
 800578c:	40014400 	.word	0x40014400

08005790 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005790:	b480      	push	{r7}
 8005792:	b087      	sub	sp, #28
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]
 8005798:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	6a1b      	ldr	r3, [r3, #32]
 800579e:	f023 0201 	bic.w	r2, r3, #1
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	6a1b      	ldr	r3, [r3, #32]
 80057aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	685b      	ldr	r3, [r3, #4]
 80057b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	699b      	ldr	r3, [r3, #24]
 80057b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80057be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	f023 0303 	bic.w	r3, r3, #3
 80057ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80057cc:	683b      	ldr	r3, [r7, #0]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	68fa      	ldr	r2, [r7, #12]
 80057d2:	4313      	orrs	r3, r2
 80057d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80057d6:	697b      	ldr	r3, [r7, #20]
 80057d8:	f023 0302 	bic.w	r3, r3, #2
 80057dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80057de:	683b      	ldr	r3, [r7, #0]
 80057e0:	689b      	ldr	r3, [r3, #8]
 80057e2:	697a      	ldr	r2, [r7, #20]
 80057e4:	4313      	orrs	r3, r2
 80057e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	4a24      	ldr	r2, [pc, #144]	; (800587c <TIM_OC1_SetConfig+0xec>)
 80057ec:	4293      	cmp	r3, r2
 80057ee:	d007      	beq.n	8005800 <TIM_OC1_SetConfig+0x70>
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	4a23      	ldr	r2, [pc, #140]	; (8005880 <TIM_OC1_SetConfig+0xf0>)
 80057f4:	4293      	cmp	r3, r2
 80057f6:	d003      	beq.n	8005800 <TIM_OC1_SetConfig+0x70>
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	4a22      	ldr	r2, [pc, #136]	; (8005884 <TIM_OC1_SetConfig+0xf4>)
 80057fc:	4293      	cmp	r3, r2
 80057fe:	d10c      	bne.n	800581a <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005800:	697b      	ldr	r3, [r7, #20]
 8005802:	f023 0308 	bic.w	r3, r3, #8
 8005806:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005808:	683b      	ldr	r3, [r7, #0]
 800580a:	68db      	ldr	r3, [r3, #12]
 800580c:	697a      	ldr	r2, [r7, #20]
 800580e:	4313      	orrs	r3, r2
 8005810:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005812:	697b      	ldr	r3, [r7, #20]
 8005814:	f023 0304 	bic.w	r3, r3, #4
 8005818:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	4a17      	ldr	r2, [pc, #92]	; (800587c <TIM_OC1_SetConfig+0xec>)
 800581e:	4293      	cmp	r3, r2
 8005820:	d007      	beq.n	8005832 <TIM_OC1_SetConfig+0xa2>
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	4a16      	ldr	r2, [pc, #88]	; (8005880 <TIM_OC1_SetConfig+0xf0>)
 8005826:	4293      	cmp	r3, r2
 8005828:	d003      	beq.n	8005832 <TIM_OC1_SetConfig+0xa2>
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	4a15      	ldr	r2, [pc, #84]	; (8005884 <TIM_OC1_SetConfig+0xf4>)
 800582e:	4293      	cmp	r3, r2
 8005830:	d111      	bne.n	8005856 <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005832:	693b      	ldr	r3, [r7, #16]
 8005834:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005838:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800583a:	693b      	ldr	r3, [r7, #16]
 800583c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005840:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005842:	683b      	ldr	r3, [r7, #0]
 8005844:	695b      	ldr	r3, [r3, #20]
 8005846:	693a      	ldr	r2, [r7, #16]
 8005848:	4313      	orrs	r3, r2
 800584a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800584c:	683b      	ldr	r3, [r7, #0]
 800584e:	699b      	ldr	r3, [r3, #24]
 8005850:	693a      	ldr	r2, [r7, #16]
 8005852:	4313      	orrs	r3, r2
 8005854:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	693a      	ldr	r2, [r7, #16]
 800585a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	68fa      	ldr	r2, [r7, #12]
 8005860:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005862:	683b      	ldr	r3, [r7, #0]
 8005864:	685a      	ldr	r2, [r3, #4]
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	697a      	ldr	r2, [r7, #20]
 800586e:	621a      	str	r2, [r3, #32]
}
 8005870:	bf00      	nop
 8005872:	371c      	adds	r7, #28
 8005874:	46bd      	mov	sp, r7
 8005876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587a:	4770      	bx	lr
 800587c:	40012c00 	.word	0x40012c00
 8005880:	40014000 	.word	0x40014000
 8005884:	40014400 	.word	0x40014400

08005888 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005888:	b480      	push	{r7}
 800588a:	b087      	sub	sp, #28
 800588c:	af00      	add	r7, sp, #0
 800588e:	6078      	str	r0, [r7, #4]
 8005890:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	6a1b      	ldr	r3, [r3, #32]
 8005896:	f023 0210 	bic.w	r2, r3, #16
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	6a1b      	ldr	r3, [r3, #32]
 80058a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	685b      	ldr	r3, [r3, #4]
 80058a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	699b      	ldr	r3, [r3, #24]
 80058ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80058b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80058ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80058c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80058c4:	683b      	ldr	r3, [r7, #0]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	021b      	lsls	r3, r3, #8
 80058ca:	68fa      	ldr	r2, [r7, #12]
 80058cc:	4313      	orrs	r3, r2
 80058ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80058d0:	697b      	ldr	r3, [r7, #20]
 80058d2:	f023 0320 	bic.w	r3, r3, #32
 80058d6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	689b      	ldr	r3, [r3, #8]
 80058dc:	011b      	lsls	r3, r3, #4
 80058de:	697a      	ldr	r2, [r7, #20]
 80058e0:	4313      	orrs	r3, r2
 80058e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	4a22      	ldr	r2, [pc, #136]	; (8005970 <TIM_OC2_SetConfig+0xe8>)
 80058e8:	4293      	cmp	r3, r2
 80058ea:	d10d      	bne.n	8005908 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80058ec:	697b      	ldr	r3, [r7, #20]
 80058ee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80058f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80058f4:	683b      	ldr	r3, [r7, #0]
 80058f6:	68db      	ldr	r3, [r3, #12]
 80058f8:	011b      	lsls	r3, r3, #4
 80058fa:	697a      	ldr	r2, [r7, #20]
 80058fc:	4313      	orrs	r3, r2
 80058fe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005900:	697b      	ldr	r3, [r7, #20]
 8005902:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005906:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	4a19      	ldr	r2, [pc, #100]	; (8005970 <TIM_OC2_SetConfig+0xe8>)
 800590c:	4293      	cmp	r3, r2
 800590e:	d007      	beq.n	8005920 <TIM_OC2_SetConfig+0x98>
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	4a18      	ldr	r2, [pc, #96]	; (8005974 <TIM_OC2_SetConfig+0xec>)
 8005914:	4293      	cmp	r3, r2
 8005916:	d003      	beq.n	8005920 <TIM_OC2_SetConfig+0x98>
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	4a17      	ldr	r2, [pc, #92]	; (8005978 <TIM_OC2_SetConfig+0xf0>)
 800591c:	4293      	cmp	r3, r2
 800591e:	d113      	bne.n	8005948 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005920:	693b      	ldr	r3, [r7, #16]
 8005922:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005926:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005928:	693b      	ldr	r3, [r7, #16]
 800592a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800592e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005930:	683b      	ldr	r3, [r7, #0]
 8005932:	695b      	ldr	r3, [r3, #20]
 8005934:	009b      	lsls	r3, r3, #2
 8005936:	693a      	ldr	r2, [r7, #16]
 8005938:	4313      	orrs	r3, r2
 800593a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800593c:	683b      	ldr	r3, [r7, #0]
 800593e:	699b      	ldr	r3, [r3, #24]
 8005940:	009b      	lsls	r3, r3, #2
 8005942:	693a      	ldr	r2, [r7, #16]
 8005944:	4313      	orrs	r3, r2
 8005946:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	693a      	ldr	r2, [r7, #16]
 800594c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	68fa      	ldr	r2, [r7, #12]
 8005952:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005954:	683b      	ldr	r3, [r7, #0]
 8005956:	685a      	ldr	r2, [r3, #4]
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	697a      	ldr	r2, [r7, #20]
 8005960:	621a      	str	r2, [r3, #32]
}
 8005962:	bf00      	nop
 8005964:	371c      	adds	r7, #28
 8005966:	46bd      	mov	sp, r7
 8005968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596c:	4770      	bx	lr
 800596e:	bf00      	nop
 8005970:	40012c00 	.word	0x40012c00
 8005974:	40014000 	.word	0x40014000
 8005978:	40014400 	.word	0x40014400

0800597c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800597c:	b480      	push	{r7}
 800597e:	b087      	sub	sp, #28
 8005980:	af00      	add	r7, sp, #0
 8005982:	6078      	str	r0, [r7, #4]
 8005984:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	6a1b      	ldr	r3, [r3, #32]
 800598a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	6a1b      	ldr	r3, [r3, #32]
 8005996:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	685b      	ldr	r3, [r3, #4]
 800599c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	69db      	ldr	r3, [r3, #28]
 80059a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80059aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	f023 0303 	bic.w	r3, r3, #3
 80059b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80059b8:	683b      	ldr	r3, [r7, #0]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	68fa      	ldr	r2, [r7, #12]
 80059be:	4313      	orrs	r3, r2
 80059c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80059c2:	697b      	ldr	r3, [r7, #20]
 80059c4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80059c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80059ca:	683b      	ldr	r3, [r7, #0]
 80059cc:	689b      	ldr	r3, [r3, #8]
 80059ce:	021b      	lsls	r3, r3, #8
 80059d0:	697a      	ldr	r2, [r7, #20]
 80059d2:	4313      	orrs	r3, r2
 80059d4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	4a21      	ldr	r2, [pc, #132]	; (8005a60 <TIM_OC3_SetConfig+0xe4>)
 80059da:	4293      	cmp	r3, r2
 80059dc:	d10d      	bne.n	80059fa <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80059de:	697b      	ldr	r3, [r7, #20]
 80059e0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80059e4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80059e6:	683b      	ldr	r3, [r7, #0]
 80059e8:	68db      	ldr	r3, [r3, #12]
 80059ea:	021b      	lsls	r3, r3, #8
 80059ec:	697a      	ldr	r2, [r7, #20]
 80059ee:	4313      	orrs	r3, r2
 80059f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80059f2:	697b      	ldr	r3, [r7, #20]
 80059f4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80059f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	4a18      	ldr	r2, [pc, #96]	; (8005a60 <TIM_OC3_SetConfig+0xe4>)
 80059fe:	4293      	cmp	r3, r2
 8005a00:	d007      	beq.n	8005a12 <TIM_OC3_SetConfig+0x96>
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	4a17      	ldr	r2, [pc, #92]	; (8005a64 <TIM_OC3_SetConfig+0xe8>)
 8005a06:	4293      	cmp	r3, r2
 8005a08:	d003      	beq.n	8005a12 <TIM_OC3_SetConfig+0x96>
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	4a16      	ldr	r2, [pc, #88]	; (8005a68 <TIM_OC3_SetConfig+0xec>)
 8005a0e:	4293      	cmp	r3, r2
 8005a10:	d113      	bne.n	8005a3a <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005a12:	693b      	ldr	r3, [r7, #16]
 8005a14:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005a18:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005a1a:	693b      	ldr	r3, [r7, #16]
 8005a1c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005a20:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005a22:	683b      	ldr	r3, [r7, #0]
 8005a24:	695b      	ldr	r3, [r3, #20]
 8005a26:	011b      	lsls	r3, r3, #4
 8005a28:	693a      	ldr	r2, [r7, #16]
 8005a2a:	4313      	orrs	r3, r2
 8005a2c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005a2e:	683b      	ldr	r3, [r7, #0]
 8005a30:	699b      	ldr	r3, [r3, #24]
 8005a32:	011b      	lsls	r3, r3, #4
 8005a34:	693a      	ldr	r2, [r7, #16]
 8005a36:	4313      	orrs	r3, r2
 8005a38:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	693a      	ldr	r2, [r7, #16]
 8005a3e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	68fa      	ldr	r2, [r7, #12]
 8005a44:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005a46:	683b      	ldr	r3, [r7, #0]
 8005a48:	685a      	ldr	r2, [r3, #4]
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	697a      	ldr	r2, [r7, #20]
 8005a52:	621a      	str	r2, [r3, #32]
}
 8005a54:	bf00      	nop
 8005a56:	371c      	adds	r7, #28
 8005a58:	46bd      	mov	sp, r7
 8005a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5e:	4770      	bx	lr
 8005a60:	40012c00 	.word	0x40012c00
 8005a64:	40014000 	.word	0x40014000
 8005a68:	40014400 	.word	0x40014400

08005a6c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005a6c:	b480      	push	{r7}
 8005a6e:	b087      	sub	sp, #28
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	6078      	str	r0, [r7, #4]
 8005a74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	6a1b      	ldr	r3, [r3, #32]
 8005a7a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	6a1b      	ldr	r3, [r3, #32]
 8005a86:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	685b      	ldr	r3, [r3, #4]
 8005a8c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	69db      	ldr	r3, [r3, #28]
 8005a92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005a9a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005aa6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005aa8:	683b      	ldr	r3, [r7, #0]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	021b      	lsls	r3, r3, #8
 8005aae:	68fa      	ldr	r2, [r7, #12]
 8005ab0:	4313      	orrs	r3, r2
 8005ab2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005ab4:	693b      	ldr	r3, [r7, #16]
 8005ab6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005aba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005abc:	683b      	ldr	r3, [r7, #0]
 8005abe:	689b      	ldr	r3, [r3, #8]
 8005ac0:	031b      	lsls	r3, r3, #12
 8005ac2:	693a      	ldr	r2, [r7, #16]
 8005ac4:	4313      	orrs	r3, r2
 8005ac6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	4a14      	ldr	r2, [pc, #80]	; (8005b1c <TIM_OC4_SetConfig+0xb0>)
 8005acc:	4293      	cmp	r3, r2
 8005ace:	d007      	beq.n	8005ae0 <TIM_OC4_SetConfig+0x74>
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	4a13      	ldr	r2, [pc, #76]	; (8005b20 <TIM_OC4_SetConfig+0xb4>)
 8005ad4:	4293      	cmp	r3, r2
 8005ad6:	d003      	beq.n	8005ae0 <TIM_OC4_SetConfig+0x74>
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	4a12      	ldr	r2, [pc, #72]	; (8005b24 <TIM_OC4_SetConfig+0xb8>)
 8005adc:	4293      	cmp	r3, r2
 8005ade:	d109      	bne.n	8005af4 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005ae0:	697b      	ldr	r3, [r7, #20]
 8005ae2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005ae6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005ae8:	683b      	ldr	r3, [r7, #0]
 8005aea:	695b      	ldr	r3, [r3, #20]
 8005aec:	019b      	lsls	r3, r3, #6
 8005aee:	697a      	ldr	r2, [r7, #20]
 8005af0:	4313      	orrs	r3, r2
 8005af2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	697a      	ldr	r2, [r7, #20]
 8005af8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	68fa      	ldr	r2, [r7, #12]
 8005afe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005b00:	683b      	ldr	r3, [r7, #0]
 8005b02:	685a      	ldr	r2, [r3, #4]
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	693a      	ldr	r2, [r7, #16]
 8005b0c:	621a      	str	r2, [r3, #32]
}
 8005b0e:	bf00      	nop
 8005b10:	371c      	adds	r7, #28
 8005b12:	46bd      	mov	sp, r7
 8005b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b18:	4770      	bx	lr
 8005b1a:	bf00      	nop
 8005b1c:	40012c00 	.word	0x40012c00
 8005b20:	40014000 	.word	0x40014000
 8005b24:	40014400 	.word	0x40014400

08005b28 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005b28:	b480      	push	{r7}
 8005b2a:	b087      	sub	sp, #28
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	6078      	str	r0, [r7, #4]
 8005b30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	6a1b      	ldr	r3, [r3, #32]
 8005b36:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	6a1b      	ldr	r3, [r3, #32]
 8005b42:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	685b      	ldr	r3, [r3, #4]
 8005b48:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005b56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b5a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005b5c:	683b      	ldr	r3, [r7, #0]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	68fa      	ldr	r2, [r7, #12]
 8005b62:	4313      	orrs	r3, r2
 8005b64:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005b66:	693b      	ldr	r3, [r7, #16]
 8005b68:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005b6c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005b6e:	683b      	ldr	r3, [r7, #0]
 8005b70:	689b      	ldr	r3, [r3, #8]
 8005b72:	041b      	lsls	r3, r3, #16
 8005b74:	693a      	ldr	r2, [r7, #16]
 8005b76:	4313      	orrs	r3, r2
 8005b78:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	4a13      	ldr	r2, [pc, #76]	; (8005bcc <TIM_OC5_SetConfig+0xa4>)
 8005b7e:	4293      	cmp	r3, r2
 8005b80:	d007      	beq.n	8005b92 <TIM_OC5_SetConfig+0x6a>
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	4a12      	ldr	r2, [pc, #72]	; (8005bd0 <TIM_OC5_SetConfig+0xa8>)
 8005b86:	4293      	cmp	r3, r2
 8005b88:	d003      	beq.n	8005b92 <TIM_OC5_SetConfig+0x6a>
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	4a11      	ldr	r2, [pc, #68]	; (8005bd4 <TIM_OC5_SetConfig+0xac>)
 8005b8e:	4293      	cmp	r3, r2
 8005b90:	d109      	bne.n	8005ba6 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005b92:	697b      	ldr	r3, [r7, #20]
 8005b94:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005b98:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005b9a:	683b      	ldr	r3, [r7, #0]
 8005b9c:	695b      	ldr	r3, [r3, #20]
 8005b9e:	021b      	lsls	r3, r3, #8
 8005ba0:	697a      	ldr	r2, [r7, #20]
 8005ba2:	4313      	orrs	r3, r2
 8005ba4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	697a      	ldr	r2, [r7, #20]
 8005baa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	68fa      	ldr	r2, [r7, #12]
 8005bb0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005bb2:	683b      	ldr	r3, [r7, #0]
 8005bb4:	685a      	ldr	r2, [r3, #4]
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	693a      	ldr	r2, [r7, #16]
 8005bbe:	621a      	str	r2, [r3, #32]
}
 8005bc0:	bf00      	nop
 8005bc2:	371c      	adds	r7, #28
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bca:	4770      	bx	lr
 8005bcc:	40012c00 	.word	0x40012c00
 8005bd0:	40014000 	.word	0x40014000
 8005bd4:	40014400 	.word	0x40014400

08005bd8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005bd8:	b480      	push	{r7}
 8005bda:	b087      	sub	sp, #28
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
 8005be0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	6a1b      	ldr	r3, [r3, #32]
 8005be6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	6a1b      	ldr	r3, [r3, #32]
 8005bf2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	685b      	ldr	r3, [r3, #4]
 8005bf8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005c06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c0a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005c0c:	683b      	ldr	r3, [r7, #0]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	021b      	lsls	r3, r3, #8
 8005c12:	68fa      	ldr	r2, [r7, #12]
 8005c14:	4313      	orrs	r3, r2
 8005c16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005c18:	693b      	ldr	r3, [r7, #16]
 8005c1a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005c1e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005c20:	683b      	ldr	r3, [r7, #0]
 8005c22:	689b      	ldr	r3, [r3, #8]
 8005c24:	051b      	lsls	r3, r3, #20
 8005c26:	693a      	ldr	r2, [r7, #16]
 8005c28:	4313      	orrs	r3, r2
 8005c2a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	4a14      	ldr	r2, [pc, #80]	; (8005c80 <TIM_OC6_SetConfig+0xa8>)
 8005c30:	4293      	cmp	r3, r2
 8005c32:	d007      	beq.n	8005c44 <TIM_OC6_SetConfig+0x6c>
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	4a13      	ldr	r2, [pc, #76]	; (8005c84 <TIM_OC6_SetConfig+0xac>)
 8005c38:	4293      	cmp	r3, r2
 8005c3a:	d003      	beq.n	8005c44 <TIM_OC6_SetConfig+0x6c>
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	4a12      	ldr	r2, [pc, #72]	; (8005c88 <TIM_OC6_SetConfig+0xb0>)
 8005c40:	4293      	cmp	r3, r2
 8005c42:	d109      	bne.n	8005c58 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005c44:	697b      	ldr	r3, [r7, #20]
 8005c46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005c4a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005c4c:	683b      	ldr	r3, [r7, #0]
 8005c4e:	695b      	ldr	r3, [r3, #20]
 8005c50:	029b      	lsls	r3, r3, #10
 8005c52:	697a      	ldr	r2, [r7, #20]
 8005c54:	4313      	orrs	r3, r2
 8005c56:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	697a      	ldr	r2, [r7, #20]
 8005c5c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	68fa      	ldr	r2, [r7, #12]
 8005c62:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005c64:	683b      	ldr	r3, [r7, #0]
 8005c66:	685a      	ldr	r2, [r3, #4]
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	693a      	ldr	r2, [r7, #16]
 8005c70:	621a      	str	r2, [r3, #32]
}
 8005c72:	bf00      	nop
 8005c74:	371c      	adds	r7, #28
 8005c76:	46bd      	mov	sp, r7
 8005c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7c:	4770      	bx	lr
 8005c7e:	bf00      	nop
 8005c80:	40012c00 	.word	0x40012c00
 8005c84:	40014000 	.word	0x40014000
 8005c88:	40014400 	.word	0x40014400

08005c8c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005c8c:	b480      	push	{r7}
 8005c8e:	b087      	sub	sp, #28
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	60f8      	str	r0, [r7, #12]
 8005c94:	60b9      	str	r1, [r7, #8]
 8005c96:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	6a1b      	ldr	r3, [r3, #32]
 8005c9c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	6a1b      	ldr	r3, [r3, #32]
 8005ca2:	f023 0201 	bic.w	r2, r3, #1
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	699b      	ldr	r3, [r3, #24]
 8005cae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005cb0:	693b      	ldr	r3, [r7, #16]
 8005cb2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005cb6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	011b      	lsls	r3, r3, #4
 8005cbc:	693a      	ldr	r2, [r7, #16]
 8005cbe:	4313      	orrs	r3, r2
 8005cc0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005cc2:	697b      	ldr	r3, [r7, #20]
 8005cc4:	f023 030a 	bic.w	r3, r3, #10
 8005cc8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005cca:	697a      	ldr	r2, [r7, #20]
 8005ccc:	68bb      	ldr	r3, [r7, #8]
 8005cce:	4313      	orrs	r3, r2
 8005cd0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	693a      	ldr	r2, [r7, #16]
 8005cd6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	697a      	ldr	r2, [r7, #20]
 8005cdc:	621a      	str	r2, [r3, #32]
}
 8005cde:	bf00      	nop
 8005ce0:	371c      	adds	r7, #28
 8005ce2:	46bd      	mov	sp, r7
 8005ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce8:	4770      	bx	lr

08005cea <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005cea:	b480      	push	{r7}
 8005cec:	b087      	sub	sp, #28
 8005cee:	af00      	add	r7, sp, #0
 8005cf0:	60f8      	str	r0, [r7, #12]
 8005cf2:	60b9      	str	r1, [r7, #8]
 8005cf4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	6a1b      	ldr	r3, [r3, #32]
 8005cfa:	f023 0210 	bic.w	r2, r3, #16
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	699b      	ldr	r3, [r3, #24]
 8005d06:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	6a1b      	ldr	r3, [r3, #32]
 8005d0c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005d0e:	697b      	ldr	r3, [r7, #20]
 8005d10:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005d14:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	031b      	lsls	r3, r3, #12
 8005d1a:	697a      	ldr	r2, [r7, #20]
 8005d1c:	4313      	orrs	r3, r2
 8005d1e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005d20:	693b      	ldr	r3, [r7, #16]
 8005d22:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005d26:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005d28:	68bb      	ldr	r3, [r7, #8]
 8005d2a:	011b      	lsls	r3, r3, #4
 8005d2c:	693a      	ldr	r2, [r7, #16]
 8005d2e:	4313      	orrs	r3, r2
 8005d30:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	697a      	ldr	r2, [r7, #20]
 8005d36:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	693a      	ldr	r2, [r7, #16]
 8005d3c:	621a      	str	r2, [r3, #32]
}
 8005d3e:	bf00      	nop
 8005d40:	371c      	adds	r7, #28
 8005d42:	46bd      	mov	sp, r7
 8005d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d48:	4770      	bx	lr

08005d4a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005d4a:	b480      	push	{r7}
 8005d4c:	b085      	sub	sp, #20
 8005d4e:	af00      	add	r7, sp, #0
 8005d50:	6078      	str	r0, [r7, #4]
 8005d52:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	689b      	ldr	r3, [r3, #8]
 8005d58:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d60:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005d62:	683a      	ldr	r2, [r7, #0]
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	4313      	orrs	r3, r2
 8005d68:	f043 0307 	orr.w	r3, r3, #7
 8005d6c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	68fa      	ldr	r2, [r7, #12]
 8005d72:	609a      	str	r2, [r3, #8]
}
 8005d74:	bf00      	nop
 8005d76:	3714      	adds	r7, #20
 8005d78:	46bd      	mov	sp, r7
 8005d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7e:	4770      	bx	lr

08005d80 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005d80:	b480      	push	{r7}
 8005d82:	b087      	sub	sp, #28
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	60f8      	str	r0, [r7, #12]
 8005d88:	60b9      	str	r1, [r7, #8]
 8005d8a:	607a      	str	r2, [r7, #4]
 8005d8c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	689b      	ldr	r3, [r3, #8]
 8005d92:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005d94:	697b      	ldr	r3, [r7, #20]
 8005d96:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005d9a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005d9c:	683b      	ldr	r3, [r7, #0]
 8005d9e:	021a      	lsls	r2, r3, #8
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	431a      	orrs	r2, r3
 8005da4:	68bb      	ldr	r3, [r7, #8]
 8005da6:	4313      	orrs	r3, r2
 8005da8:	697a      	ldr	r2, [r7, #20]
 8005daa:	4313      	orrs	r3, r2
 8005dac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	697a      	ldr	r2, [r7, #20]
 8005db2:	609a      	str	r2, [r3, #8]
}
 8005db4:	bf00      	nop
 8005db6:	371c      	adds	r7, #28
 8005db8:	46bd      	mov	sp, r7
 8005dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dbe:	4770      	bx	lr

08005dc0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005dc0:	b480      	push	{r7}
 8005dc2:	b087      	sub	sp, #28
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	60f8      	str	r0, [r7, #12]
 8005dc8:	60b9      	str	r1, [r7, #8]
 8005dca:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005dcc:	68bb      	ldr	r3, [r7, #8]
 8005dce:	f003 031f 	and.w	r3, r3, #31
 8005dd2:	2201      	movs	r2, #1
 8005dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8005dd8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	6a1a      	ldr	r2, [r3, #32]
 8005dde:	697b      	ldr	r3, [r7, #20]
 8005de0:	43db      	mvns	r3, r3
 8005de2:	401a      	ands	r2, r3
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	6a1a      	ldr	r2, [r3, #32]
 8005dec:	68bb      	ldr	r3, [r7, #8]
 8005dee:	f003 031f 	and.w	r3, r3, #31
 8005df2:	6879      	ldr	r1, [r7, #4]
 8005df4:	fa01 f303 	lsl.w	r3, r1, r3
 8005df8:	431a      	orrs	r2, r3
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	621a      	str	r2, [r3, #32]
}
 8005dfe:	bf00      	nop
 8005e00:	371c      	adds	r7, #28
 8005e02:	46bd      	mov	sp, r7
 8005e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e08:	4770      	bx	lr
	...

08005e0c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005e0c:	b480      	push	{r7}
 8005e0e:	b085      	sub	sp, #20
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]
 8005e14:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e1c:	2b01      	cmp	r3, #1
 8005e1e:	d101      	bne.n	8005e24 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005e20:	2302      	movs	r3, #2
 8005e22:	e054      	b.n	8005ece <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2201      	movs	r2, #1
 8005e28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2202      	movs	r2, #2
 8005e30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	685b      	ldr	r3, [r3, #4]
 8005e3a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	689b      	ldr	r3, [r3, #8]
 8005e42:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	4a24      	ldr	r2, [pc, #144]	; (8005edc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005e4a:	4293      	cmp	r3, r2
 8005e4c:	d108      	bne.n	8005e60 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005e54:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005e56:	683b      	ldr	r3, [r7, #0]
 8005e58:	685b      	ldr	r3, [r3, #4]
 8005e5a:	68fa      	ldr	r2, [r7, #12]
 8005e5c:	4313      	orrs	r3, r2
 8005e5e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e66:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005e68:	683b      	ldr	r3, [r7, #0]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	68fa      	ldr	r2, [r7, #12]
 8005e6e:	4313      	orrs	r3, r2
 8005e70:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	68fa      	ldr	r2, [r7, #12]
 8005e78:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	4a17      	ldr	r2, [pc, #92]	; (8005edc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005e80:	4293      	cmp	r3, r2
 8005e82:	d00e      	beq.n	8005ea2 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e8c:	d009      	beq.n	8005ea2 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	4a13      	ldr	r2, [pc, #76]	; (8005ee0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005e94:	4293      	cmp	r3, r2
 8005e96:	d004      	beq.n	8005ea2 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	4a11      	ldr	r2, [pc, #68]	; (8005ee4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005e9e:	4293      	cmp	r3, r2
 8005ea0:	d10c      	bne.n	8005ebc <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005ea2:	68bb      	ldr	r3, [r7, #8]
 8005ea4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005ea8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005eaa:	683b      	ldr	r3, [r7, #0]
 8005eac:	689b      	ldr	r3, [r3, #8]
 8005eae:	68ba      	ldr	r2, [r7, #8]
 8005eb0:	4313      	orrs	r3, r2
 8005eb2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	68ba      	ldr	r2, [r7, #8]
 8005eba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	2201      	movs	r2, #1
 8005ec0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	2200      	movs	r2, #0
 8005ec8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005ecc:	2300      	movs	r3, #0
}
 8005ece:	4618      	mov	r0, r3
 8005ed0:	3714      	adds	r7, #20
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed8:	4770      	bx	lr
 8005eda:	bf00      	nop
 8005edc:	40012c00 	.word	0x40012c00
 8005ee0:	40000400 	.word	0x40000400
 8005ee4:	40014000 	.word	0x40014000

08005ee8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005ee8:	b480      	push	{r7}
 8005eea:	b085      	sub	sp, #20
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	6078      	str	r0, [r7, #4]
 8005ef0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005ef2:	2300      	movs	r3, #0
 8005ef4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005efc:	2b01      	cmp	r3, #1
 8005efe:	d101      	bne.n	8005f04 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005f00:	2302      	movs	r3, #2
 8005f02:	e060      	b.n	8005fc6 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2201      	movs	r2, #1
 8005f08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005f12:	683b      	ldr	r3, [r7, #0]
 8005f14:	68db      	ldr	r3, [r3, #12]
 8005f16:	4313      	orrs	r3, r2
 8005f18:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005f20:	683b      	ldr	r3, [r7, #0]
 8005f22:	689b      	ldr	r3, [r3, #8]
 8005f24:	4313      	orrs	r3, r2
 8005f26:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005f2e:	683b      	ldr	r3, [r7, #0]
 8005f30:	685b      	ldr	r3, [r3, #4]
 8005f32:	4313      	orrs	r3, r2
 8005f34:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005f3c:	683b      	ldr	r3, [r7, #0]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	4313      	orrs	r3, r2
 8005f42:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005f4a:	683b      	ldr	r3, [r7, #0]
 8005f4c:	691b      	ldr	r3, [r3, #16]
 8005f4e:	4313      	orrs	r3, r2
 8005f50:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005f58:	683b      	ldr	r3, [r7, #0]
 8005f5a:	695b      	ldr	r3, [r3, #20]
 8005f5c:	4313      	orrs	r3, r2
 8005f5e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005f66:	683b      	ldr	r3, [r7, #0]
 8005f68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f6a:	4313      	orrs	r3, r2
 8005f6c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8005f74:	683b      	ldr	r3, [r7, #0]
 8005f76:	699b      	ldr	r3, [r3, #24]
 8005f78:	041b      	lsls	r3, r3, #16
 8005f7a:	4313      	orrs	r3, r2
 8005f7c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	4a14      	ldr	r2, [pc, #80]	; (8005fd4 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8005f84:	4293      	cmp	r3, r2
 8005f86:	d115      	bne.n	8005fb4 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8005f8e:	683b      	ldr	r3, [r7, #0]
 8005f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f92:	051b      	lsls	r3, r3, #20
 8005f94:	4313      	orrs	r3, r2
 8005f96:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005f9e:	683b      	ldr	r3, [r7, #0]
 8005fa0:	69db      	ldr	r3, [r3, #28]
 8005fa2:	4313      	orrs	r3, r2
 8005fa4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005fac:	683b      	ldr	r3, [r7, #0]
 8005fae:	6a1b      	ldr	r3, [r3, #32]
 8005fb0:	4313      	orrs	r3, r2
 8005fb2:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	68fa      	ldr	r2, [r7, #12]
 8005fba:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2200      	movs	r2, #0
 8005fc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005fc4:	2300      	movs	r3, #0
}
 8005fc6:	4618      	mov	r0, r3
 8005fc8:	3714      	adds	r7, #20
 8005fca:	46bd      	mov	sp, r7
 8005fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd0:	4770      	bx	lr
 8005fd2:	bf00      	nop
 8005fd4:	40012c00 	.word	0x40012c00

08005fd8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005fd8:	b480      	push	{r7}
 8005fda:	b083      	sub	sp, #12
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005fe0:	bf00      	nop
 8005fe2:	370c      	adds	r7, #12
 8005fe4:	46bd      	mov	sp, r7
 8005fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fea:	4770      	bx	lr

08005fec <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005fec:	b480      	push	{r7}
 8005fee:	b083      	sub	sp, #12
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005ff4:	bf00      	nop
 8005ff6:	370c      	adds	r7, #12
 8005ff8:	46bd      	mov	sp, r7
 8005ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffe:	4770      	bx	lr

08006000 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006000:	b480      	push	{r7}
 8006002:	b083      	sub	sp, #12
 8006004:	af00      	add	r7, sp, #0
 8006006:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006008:	bf00      	nop
 800600a:	370c      	adds	r7, #12
 800600c:	46bd      	mov	sp, r7
 800600e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006012:	4770      	bx	lr

08006014 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006014:	b580      	push	{r7, lr}
 8006016:	b082      	sub	sp, #8
 8006018:	af00      	add	r7, sp, #0
 800601a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2b00      	cmp	r3, #0
 8006020:	d101      	bne.n	8006026 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006022:	2301      	movs	r3, #1
 8006024:	e040      	b.n	80060a8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800602a:	2b00      	cmp	r3, #0
 800602c:	d106      	bne.n	800603c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	2200      	movs	r2, #0
 8006032:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006036:	6878      	ldr	r0, [r7, #4]
 8006038:	f7fb fde4 	bl	8001c04 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	2224      	movs	r2, #36	; 0x24
 8006040:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	681a      	ldr	r2, [r3, #0]
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	f022 0201 	bic.w	r2, r2, #1
 8006050:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006052:	6878      	ldr	r0, [r7, #4]
 8006054:	f000 fc18 	bl	8006888 <UART_SetConfig>
 8006058:	4603      	mov	r3, r0
 800605a:	2b01      	cmp	r3, #1
 800605c:	d101      	bne.n	8006062 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800605e:	2301      	movs	r3, #1
 8006060:	e022      	b.n	80060a8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006066:	2b00      	cmp	r3, #0
 8006068:	d002      	beq.n	8006070 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800606a:	6878      	ldr	r0, [r7, #4]
 800606c:	f000 fe92 	bl	8006d94 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	685a      	ldr	r2, [r3, #4]
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800607e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	689a      	ldr	r2, [r3, #8]
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800608e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	681a      	ldr	r2, [r3, #0]
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	f042 0201 	orr.w	r2, r2, #1
 800609e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80060a0:	6878      	ldr	r0, [r7, #4]
 80060a2:	f000 ff19 	bl	8006ed8 <UART_CheckIdleState>
 80060a6:	4603      	mov	r3, r0
}
 80060a8:	4618      	mov	r0, r3
 80060aa:	3708      	adds	r7, #8
 80060ac:	46bd      	mov	sp, r7
 80060ae:	bd80      	pop	{r7, pc}

080060b0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80060b0:	b580      	push	{r7, lr}
 80060b2:	b08a      	sub	sp, #40	; 0x28
 80060b4:	af02      	add	r7, sp, #8
 80060b6:	60f8      	str	r0, [r7, #12]
 80060b8:	60b9      	str	r1, [r7, #8]
 80060ba:	603b      	str	r3, [r7, #0]
 80060bc:	4613      	mov	r3, r2
 80060be:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80060c4:	2b20      	cmp	r3, #32
 80060c6:	f040 8082 	bne.w	80061ce <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80060ca:	68bb      	ldr	r3, [r7, #8]
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d002      	beq.n	80060d6 <HAL_UART_Transmit+0x26>
 80060d0:	88fb      	ldrh	r3, [r7, #6]
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d101      	bne.n	80060da <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80060d6:	2301      	movs	r3, #1
 80060d8:	e07a      	b.n	80061d0 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80060e0:	2b01      	cmp	r3, #1
 80060e2:	d101      	bne.n	80060e8 <HAL_UART_Transmit+0x38>
 80060e4:	2302      	movs	r3, #2
 80060e6:	e073      	b.n	80061d0 <HAL_UART_Transmit+0x120>
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	2201      	movs	r2, #1
 80060ec:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	2200      	movs	r2, #0
 80060f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	2221      	movs	r2, #33	; 0x21
 80060fc:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80060fe:	f7fb fec5 	bl	8001e8c <HAL_GetTick>
 8006102:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	88fa      	ldrh	r2, [r7, #6]
 8006108:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	88fa      	ldrh	r2, [r7, #6]
 8006110:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	689b      	ldr	r3, [r3, #8]
 8006118:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800611c:	d108      	bne.n	8006130 <HAL_UART_Transmit+0x80>
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	691b      	ldr	r3, [r3, #16]
 8006122:	2b00      	cmp	r3, #0
 8006124:	d104      	bne.n	8006130 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8006126:	2300      	movs	r3, #0
 8006128:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800612a:	68bb      	ldr	r3, [r7, #8]
 800612c:	61bb      	str	r3, [r7, #24]
 800612e:	e003      	b.n	8006138 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8006130:	68bb      	ldr	r3, [r7, #8]
 8006132:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006134:	2300      	movs	r3, #0
 8006136:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	2200      	movs	r2, #0
 800613c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8006140:	e02d      	b.n	800619e <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006142:	683b      	ldr	r3, [r7, #0]
 8006144:	9300      	str	r3, [sp, #0]
 8006146:	697b      	ldr	r3, [r7, #20]
 8006148:	2200      	movs	r2, #0
 800614a:	2180      	movs	r1, #128	; 0x80
 800614c:	68f8      	ldr	r0, [r7, #12]
 800614e:	f000 ff0c 	bl	8006f6a <UART_WaitOnFlagUntilTimeout>
 8006152:	4603      	mov	r3, r0
 8006154:	2b00      	cmp	r3, #0
 8006156:	d001      	beq.n	800615c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8006158:	2303      	movs	r3, #3
 800615a:	e039      	b.n	80061d0 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 800615c:	69fb      	ldr	r3, [r7, #28]
 800615e:	2b00      	cmp	r3, #0
 8006160:	d10b      	bne.n	800617a <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006162:	69bb      	ldr	r3, [r7, #24]
 8006164:	881a      	ldrh	r2, [r3, #0]
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800616e:	b292      	uxth	r2, r2
 8006170:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006172:	69bb      	ldr	r3, [r7, #24]
 8006174:	3302      	adds	r3, #2
 8006176:	61bb      	str	r3, [r7, #24]
 8006178:	e008      	b.n	800618c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800617a:	69fb      	ldr	r3, [r7, #28]
 800617c:	781a      	ldrb	r2, [r3, #0]
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	b292      	uxth	r2, r2
 8006184:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006186:	69fb      	ldr	r3, [r7, #28]
 8006188:	3301      	adds	r3, #1
 800618a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006192:	b29b      	uxth	r3, r3
 8006194:	3b01      	subs	r3, #1
 8006196:	b29a      	uxth	r2, r3
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80061a4:	b29b      	uxth	r3, r3
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d1cb      	bne.n	8006142 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80061aa:	683b      	ldr	r3, [r7, #0]
 80061ac:	9300      	str	r3, [sp, #0]
 80061ae:	697b      	ldr	r3, [r7, #20]
 80061b0:	2200      	movs	r2, #0
 80061b2:	2140      	movs	r1, #64	; 0x40
 80061b4:	68f8      	ldr	r0, [r7, #12]
 80061b6:	f000 fed8 	bl	8006f6a <UART_WaitOnFlagUntilTimeout>
 80061ba:	4603      	mov	r3, r0
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d001      	beq.n	80061c4 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80061c0:	2303      	movs	r3, #3
 80061c2:	e005      	b.n	80061d0 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	2220      	movs	r2, #32
 80061c8:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80061ca:	2300      	movs	r3, #0
 80061cc:	e000      	b.n	80061d0 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80061ce:	2302      	movs	r3, #2
  }
}
 80061d0:	4618      	mov	r0, r3
 80061d2:	3720      	adds	r7, #32
 80061d4:	46bd      	mov	sp, r7
 80061d6:	bd80      	pop	{r7, pc}

080061d8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80061d8:	b580      	push	{r7, lr}
 80061da:	b08a      	sub	sp, #40	; 0x28
 80061dc:	af00      	add	r7, sp, #0
 80061de:	60f8      	str	r0, [r7, #12]
 80061e0:	60b9      	str	r1, [r7, #8]
 80061e2:	4613      	mov	r3, r2
 80061e4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80061ea:	2b20      	cmp	r3, #32
 80061ec:	d142      	bne.n	8006274 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 80061ee:	68bb      	ldr	r3, [r7, #8]
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d002      	beq.n	80061fa <HAL_UART_Receive_IT+0x22>
 80061f4:	88fb      	ldrh	r3, [r7, #6]
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d101      	bne.n	80061fe <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 80061fa:	2301      	movs	r3, #1
 80061fc:	e03b      	b.n	8006276 <HAL_UART_Receive_IT+0x9e>
    }

    __HAL_LOCK(huart);
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8006204:	2b01      	cmp	r3, #1
 8006206:	d101      	bne.n	800620c <HAL_UART_Receive_IT+0x34>
 8006208:	2302      	movs	r3, #2
 800620a:	e034      	b.n	8006276 <HAL_UART_Receive_IT+0x9e>
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	2201      	movs	r2, #1
 8006210:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	2200      	movs	r2, #0
 8006218:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	4a18      	ldr	r2, [pc, #96]	; (8006280 <HAL_UART_Receive_IT+0xa8>)
 8006220:	4293      	cmp	r3, r2
 8006222:	d01f      	beq.n	8006264 <HAL_UART_Receive_IT+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	685b      	ldr	r3, [r3, #4]
 800622a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800622e:	2b00      	cmp	r3, #0
 8006230:	d018      	beq.n	8006264 <HAL_UART_Receive_IT+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006238:	697b      	ldr	r3, [r7, #20]
 800623a:	e853 3f00 	ldrex	r3, [r3]
 800623e:	613b      	str	r3, [r7, #16]
   return(result);
 8006240:	693b      	ldr	r3, [r7, #16]
 8006242:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006246:	627b      	str	r3, [r7, #36]	; 0x24
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	461a      	mov	r2, r3
 800624e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006250:	623b      	str	r3, [r7, #32]
 8006252:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006254:	69f9      	ldr	r1, [r7, #28]
 8006256:	6a3a      	ldr	r2, [r7, #32]
 8006258:	e841 2300 	strex	r3, r2, [r1]
 800625c:	61bb      	str	r3, [r7, #24]
   return(result);
 800625e:	69bb      	ldr	r3, [r7, #24]
 8006260:	2b00      	cmp	r3, #0
 8006262:	d1e6      	bne.n	8006232 <HAL_UART_Receive_IT+0x5a>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006264:	88fb      	ldrh	r3, [r7, #6]
 8006266:	461a      	mov	r2, r3
 8006268:	68b9      	ldr	r1, [r7, #8]
 800626a:	68f8      	ldr	r0, [r7, #12]
 800626c:	f000 ff42 	bl	80070f4 <UART_Start_Receive_IT>
 8006270:	4603      	mov	r3, r0
 8006272:	e000      	b.n	8006276 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8006274:	2302      	movs	r3, #2
  }
}
 8006276:	4618      	mov	r0, r3
 8006278:	3728      	adds	r7, #40	; 0x28
 800627a:	46bd      	mov	sp, r7
 800627c:	bd80      	pop	{r7, pc}
 800627e:	bf00      	nop
 8006280:	40008000 	.word	0x40008000

08006284 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006284:	b580      	push	{r7, lr}
 8006286:	b0ba      	sub	sp, #232	; 0xe8
 8006288:	af00      	add	r7, sp, #0
 800628a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	69db      	ldr	r3, [r3, #28]
 8006292:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	689b      	ldr	r3, [r3, #8]
 80062a6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80062aa:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80062ae:	f640 030f 	movw	r3, #2063	; 0x80f
 80062b2:	4013      	ands	r3, r2
 80062b4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80062b8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d115      	bne.n	80062ec <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80062c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80062c4:	f003 0320 	and.w	r3, r3, #32
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d00f      	beq.n	80062ec <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80062cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80062d0:	f003 0320 	and.w	r3, r3, #32
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d009      	beq.n	80062ec <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80062dc:	2b00      	cmp	r3, #0
 80062de:	f000 82a6 	beq.w	800682e <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80062e6:	6878      	ldr	r0, [r7, #4]
 80062e8:	4798      	blx	r3
      }
      return;
 80062ea:	e2a0      	b.n	800682e <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80062ec:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	f000 8117 	beq.w	8006524 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80062f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80062fa:	f003 0301 	and.w	r3, r3, #1
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d106      	bne.n	8006310 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8006302:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8006306:	4b85      	ldr	r3, [pc, #532]	; (800651c <HAL_UART_IRQHandler+0x298>)
 8006308:	4013      	ands	r3, r2
 800630a:	2b00      	cmp	r3, #0
 800630c:	f000 810a 	beq.w	8006524 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006310:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006314:	f003 0301 	and.w	r3, r3, #1
 8006318:	2b00      	cmp	r3, #0
 800631a:	d011      	beq.n	8006340 <HAL_UART_IRQHandler+0xbc>
 800631c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006320:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006324:	2b00      	cmp	r3, #0
 8006326:	d00b      	beq.n	8006340 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	2201      	movs	r2, #1
 800632e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006336:	f043 0201 	orr.w	r2, r3, #1
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006340:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006344:	f003 0302 	and.w	r3, r3, #2
 8006348:	2b00      	cmp	r3, #0
 800634a:	d011      	beq.n	8006370 <HAL_UART_IRQHandler+0xec>
 800634c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006350:	f003 0301 	and.w	r3, r3, #1
 8006354:	2b00      	cmp	r3, #0
 8006356:	d00b      	beq.n	8006370 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	2202      	movs	r2, #2
 800635e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006366:	f043 0204 	orr.w	r2, r3, #4
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006370:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006374:	f003 0304 	and.w	r3, r3, #4
 8006378:	2b00      	cmp	r3, #0
 800637a:	d011      	beq.n	80063a0 <HAL_UART_IRQHandler+0x11c>
 800637c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006380:	f003 0301 	and.w	r3, r3, #1
 8006384:	2b00      	cmp	r3, #0
 8006386:	d00b      	beq.n	80063a0 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	2204      	movs	r2, #4
 800638e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006396:	f043 0202 	orr.w	r2, r3, #2
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80063a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063a4:	f003 0308 	and.w	r3, r3, #8
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d017      	beq.n	80063dc <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80063ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80063b0:	f003 0320 	and.w	r3, r3, #32
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d105      	bne.n	80063c4 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80063b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80063bc:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d00b      	beq.n	80063dc <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	2208      	movs	r2, #8
 80063ca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80063d2:	f043 0208 	orr.w	r2, r3, #8
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80063dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d012      	beq.n	800640e <HAL_UART_IRQHandler+0x18a>
 80063e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80063ec:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d00c      	beq.n	800640e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80063fc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006404:	f043 0220 	orr.w	r2, r3, #32
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006414:	2b00      	cmp	r3, #0
 8006416:	f000 820c 	beq.w	8006832 <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800641a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800641e:	f003 0320 	and.w	r3, r3, #32
 8006422:	2b00      	cmp	r3, #0
 8006424:	d00d      	beq.n	8006442 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006426:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800642a:	f003 0320 	and.w	r3, r3, #32
 800642e:	2b00      	cmp	r3, #0
 8006430:	d007      	beq.n	8006442 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006436:	2b00      	cmp	r3, #0
 8006438:	d003      	beq.n	8006442 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800643e:	6878      	ldr	r0, [r7, #4]
 8006440:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006448:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	689b      	ldr	r3, [r3, #8]
 8006452:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006456:	2b40      	cmp	r3, #64	; 0x40
 8006458:	d005      	beq.n	8006466 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800645a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800645e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006462:	2b00      	cmp	r3, #0
 8006464:	d04f      	beq.n	8006506 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006466:	6878      	ldr	r0, [r7, #4]
 8006468:	f000 ff0e 	bl	8007288 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	689b      	ldr	r3, [r3, #8]
 8006472:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006476:	2b40      	cmp	r3, #64	; 0x40
 8006478:	d141      	bne.n	80064fe <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	3308      	adds	r3, #8
 8006480:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006484:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006488:	e853 3f00 	ldrex	r3, [r3]
 800648c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006490:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006494:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006498:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	3308      	adds	r3, #8
 80064a2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80064a6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80064aa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064ae:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80064b2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80064b6:	e841 2300 	strex	r3, r2, [r1]
 80064ba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80064be:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d1d9      	bne.n	800647a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d013      	beq.n	80064f6 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064d2:	4a13      	ldr	r2, [pc, #76]	; (8006520 <HAL_UART_IRQHandler+0x29c>)
 80064d4:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064da:	4618      	mov	r0, r3
 80064dc:	f7fc fed9 	bl	8003292 <HAL_DMA_Abort_IT>
 80064e0:	4603      	mov	r3, r0
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d017      	beq.n	8006516 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064ec:	687a      	ldr	r2, [r7, #4]
 80064ee:	6f12      	ldr	r2, [r2, #112]	; 0x70
 80064f0:	4610      	mov	r0, r2
 80064f2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064f4:	e00f      	b.n	8006516 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80064f6:	6878      	ldr	r0, [r7, #4]
 80064f8:	f000 f9b0 	bl	800685c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064fc:	e00b      	b.n	8006516 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80064fe:	6878      	ldr	r0, [r7, #4]
 8006500:	f000 f9ac 	bl	800685c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006504:	e007      	b.n	8006516 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006506:	6878      	ldr	r0, [r7, #4]
 8006508:	f000 f9a8 	bl	800685c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	2200      	movs	r2, #0
 8006510:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8006514:	e18d      	b.n	8006832 <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006516:	bf00      	nop
    return;
 8006518:	e18b      	b.n	8006832 <HAL_UART_IRQHandler+0x5ae>
 800651a:	bf00      	nop
 800651c:	04000120 	.word	0x04000120
 8006520:	0800734f 	.word	0x0800734f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006528:	2b01      	cmp	r3, #1
 800652a:	f040 8146 	bne.w	80067ba <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800652e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006532:	f003 0310 	and.w	r3, r3, #16
 8006536:	2b00      	cmp	r3, #0
 8006538:	f000 813f 	beq.w	80067ba <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800653c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006540:	f003 0310 	and.w	r3, r3, #16
 8006544:	2b00      	cmp	r3, #0
 8006546:	f000 8138 	beq.w	80067ba <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	2210      	movs	r2, #16
 8006550:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	689b      	ldr	r3, [r3, #8]
 8006558:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800655c:	2b40      	cmp	r3, #64	; 0x40
 800655e:	f040 80b4 	bne.w	80066ca <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	685b      	ldr	r3, [r3, #4]
 800656a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800656e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006572:	2b00      	cmp	r3, #0
 8006574:	f000 815f 	beq.w	8006836 <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800657e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006582:	429a      	cmp	r2, r3
 8006584:	f080 8157 	bcs.w	8006836 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800658e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	f003 0320 	and.w	r3, r3, #32
 800659e:	2b00      	cmp	r3, #0
 80065a0:	f040 8085 	bne.w	80066ae <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065ac:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80065b0:	e853 3f00 	ldrex	r3, [r3]
 80065b4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80065b8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80065bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80065c0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	461a      	mov	r2, r3
 80065ca:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80065ce:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80065d2:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065d6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80065da:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80065de:	e841 2300 	strex	r3, r2, [r1]
 80065e2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80065e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d1da      	bne.n	80065a4 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	3308      	adds	r3, #8
 80065f4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065f6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80065f8:	e853 3f00 	ldrex	r3, [r3]
 80065fc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80065fe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006600:	f023 0301 	bic.w	r3, r3, #1
 8006604:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	3308      	adds	r3, #8
 800660e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006612:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006616:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006618:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800661a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800661e:	e841 2300 	strex	r3, r2, [r1]
 8006622:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006624:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006626:	2b00      	cmp	r3, #0
 8006628:	d1e1      	bne.n	80065ee <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	3308      	adds	r3, #8
 8006630:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006632:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006634:	e853 3f00 	ldrex	r3, [r3]
 8006638:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800663a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800663c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006640:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	3308      	adds	r3, #8
 800664a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800664e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006650:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006652:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006654:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006656:	e841 2300 	strex	r3, r2, [r1]
 800665a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800665c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800665e:	2b00      	cmp	r3, #0
 8006660:	d1e3      	bne.n	800662a <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	2220      	movs	r2, #32
 8006666:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	2200      	movs	r2, #0
 800666c:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006674:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006676:	e853 3f00 	ldrex	r3, [r3]
 800667a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800667c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800667e:	f023 0310 	bic.w	r3, r3, #16
 8006682:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	461a      	mov	r2, r3
 800668c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006690:	65bb      	str	r3, [r7, #88]	; 0x58
 8006692:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006694:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006696:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006698:	e841 2300 	strex	r3, r2, [r1]
 800669c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800669e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d1e4      	bne.n	800666e <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066a8:	4618      	mov	r0, r3
 80066aa:	f7fc fdb4 	bl	8003216 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80066ba:	b29b      	uxth	r3, r3
 80066bc:	1ad3      	subs	r3, r2, r3
 80066be:	b29b      	uxth	r3, r3
 80066c0:	4619      	mov	r1, r3
 80066c2:	6878      	ldr	r0, [r7, #4]
 80066c4:	f000 f8d4 	bl	8006870 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80066c8:	e0b5      	b.n	8006836 <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80066d6:	b29b      	uxth	r3, r3
 80066d8:	1ad3      	subs	r3, r2, r3
 80066da:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80066e4:	b29b      	uxth	r3, r3
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	f000 80a7 	beq.w	800683a <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 80066ec:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	f000 80a2 	beq.w	800683a <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066fe:	e853 3f00 	ldrex	r3, [r3]
 8006702:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006704:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006706:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800670a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	461a      	mov	r2, r3
 8006714:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006718:	647b      	str	r3, [r7, #68]	; 0x44
 800671a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800671c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800671e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006720:	e841 2300 	strex	r3, r2, [r1]
 8006724:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006726:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006728:	2b00      	cmp	r3, #0
 800672a:	d1e4      	bne.n	80066f6 <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	3308      	adds	r3, #8
 8006732:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006736:	e853 3f00 	ldrex	r3, [r3]
 800673a:	623b      	str	r3, [r7, #32]
   return(result);
 800673c:	6a3b      	ldr	r3, [r7, #32]
 800673e:	f023 0301 	bic.w	r3, r3, #1
 8006742:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	3308      	adds	r3, #8
 800674c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006750:	633a      	str	r2, [r7, #48]	; 0x30
 8006752:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006754:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006756:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006758:	e841 2300 	strex	r3, r2, [r1]
 800675c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800675e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006760:	2b00      	cmp	r3, #0
 8006762:	d1e3      	bne.n	800672c <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	2220      	movs	r2, #32
 8006768:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	2200      	movs	r2, #0
 800676e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	2200      	movs	r2, #0
 8006774:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800677c:	693b      	ldr	r3, [r7, #16]
 800677e:	e853 3f00 	ldrex	r3, [r3]
 8006782:	60fb      	str	r3, [r7, #12]
   return(result);
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	f023 0310 	bic.w	r3, r3, #16
 800678a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	461a      	mov	r2, r3
 8006794:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006798:	61fb      	str	r3, [r7, #28]
 800679a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800679c:	69b9      	ldr	r1, [r7, #24]
 800679e:	69fa      	ldr	r2, [r7, #28]
 80067a0:	e841 2300 	strex	r3, r2, [r1]
 80067a4:	617b      	str	r3, [r7, #20]
   return(result);
 80067a6:	697b      	ldr	r3, [r7, #20]
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d1e4      	bne.n	8006776 <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80067ac:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80067b0:	4619      	mov	r1, r3
 80067b2:	6878      	ldr	r0, [r7, #4]
 80067b4:	f000 f85c 	bl	8006870 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80067b8:	e03f      	b.n	800683a <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80067ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80067be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d00e      	beq.n	80067e4 <HAL_UART_IRQHandler+0x560>
 80067c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80067ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d008      	beq.n	80067e4 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80067da:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80067dc:	6878      	ldr	r0, [r7, #4]
 80067de:	f000 ffbd 	bl	800775c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80067e2:	e02d      	b.n	8006840 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 80067e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80067e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d00e      	beq.n	800680e <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80067f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80067f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d008      	beq.n	800680e <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006800:	2b00      	cmp	r3, #0
 8006802:	d01c      	beq.n	800683e <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006808:	6878      	ldr	r0, [r7, #4]
 800680a:	4798      	blx	r3
    }
    return;
 800680c:	e017      	b.n	800683e <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800680e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006812:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006816:	2b00      	cmp	r3, #0
 8006818:	d012      	beq.n	8006840 <HAL_UART_IRQHandler+0x5bc>
 800681a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800681e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006822:	2b00      	cmp	r3, #0
 8006824:	d00c      	beq.n	8006840 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 8006826:	6878      	ldr	r0, [r7, #4]
 8006828:	f000 fda7 	bl	800737a <UART_EndTransmit_IT>
    return;
 800682c:	e008      	b.n	8006840 <HAL_UART_IRQHandler+0x5bc>
      return;
 800682e:	bf00      	nop
 8006830:	e006      	b.n	8006840 <HAL_UART_IRQHandler+0x5bc>
    return;
 8006832:	bf00      	nop
 8006834:	e004      	b.n	8006840 <HAL_UART_IRQHandler+0x5bc>
      return;
 8006836:	bf00      	nop
 8006838:	e002      	b.n	8006840 <HAL_UART_IRQHandler+0x5bc>
      return;
 800683a:	bf00      	nop
 800683c:	e000      	b.n	8006840 <HAL_UART_IRQHandler+0x5bc>
    return;
 800683e:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8006840:	37e8      	adds	r7, #232	; 0xe8
 8006842:	46bd      	mov	sp, r7
 8006844:	bd80      	pop	{r7, pc}
 8006846:	bf00      	nop

08006848 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006848:	b480      	push	{r7}
 800684a:	b083      	sub	sp, #12
 800684c:	af00      	add	r7, sp, #0
 800684e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006850:	bf00      	nop
 8006852:	370c      	adds	r7, #12
 8006854:	46bd      	mov	sp, r7
 8006856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800685a:	4770      	bx	lr

0800685c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800685c:	b480      	push	{r7}
 800685e:	b083      	sub	sp, #12
 8006860:	af00      	add	r7, sp, #0
 8006862:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006864:	bf00      	nop
 8006866:	370c      	adds	r7, #12
 8006868:	46bd      	mov	sp, r7
 800686a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686e:	4770      	bx	lr

08006870 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006870:	b480      	push	{r7}
 8006872:	b083      	sub	sp, #12
 8006874:	af00      	add	r7, sp, #0
 8006876:	6078      	str	r0, [r7, #4]
 8006878:	460b      	mov	r3, r1
 800687a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800687c:	bf00      	nop
 800687e:	370c      	adds	r7, #12
 8006880:	46bd      	mov	sp, r7
 8006882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006886:	4770      	bx	lr

08006888 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006888:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800688c:	b08a      	sub	sp, #40	; 0x28
 800688e:	af00      	add	r7, sp, #0
 8006890:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006892:	2300      	movs	r3, #0
 8006894:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	689a      	ldr	r2, [r3, #8]
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	691b      	ldr	r3, [r3, #16]
 80068a0:	431a      	orrs	r2, r3
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	695b      	ldr	r3, [r3, #20]
 80068a6:	431a      	orrs	r2, r3
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	69db      	ldr	r3, [r3, #28]
 80068ac:	4313      	orrs	r3, r2
 80068ae:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	681a      	ldr	r2, [r3, #0]
 80068b6:	4ba5      	ldr	r3, [pc, #660]	; (8006b4c <UART_SetConfig+0x2c4>)
 80068b8:	4013      	ands	r3, r2
 80068ba:	68fa      	ldr	r2, [r7, #12]
 80068bc:	6812      	ldr	r2, [r2, #0]
 80068be:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80068c0:	430b      	orrs	r3, r1
 80068c2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	685b      	ldr	r3, [r3, #4]
 80068ca:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	68da      	ldr	r2, [r3, #12]
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	430a      	orrs	r2, r1
 80068d8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	699b      	ldr	r3, [r3, #24]
 80068de:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	4a9a      	ldr	r2, [pc, #616]	; (8006b50 <UART_SetConfig+0x2c8>)
 80068e6:	4293      	cmp	r3, r2
 80068e8:	d004      	beq.n	80068f4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	6a1b      	ldr	r3, [r3, #32]
 80068ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068f0:	4313      	orrs	r3, r2
 80068f2:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	689b      	ldr	r3, [r3, #8]
 80068fa:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006904:	430a      	orrs	r2, r1
 8006906:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	4a91      	ldr	r2, [pc, #580]	; (8006b54 <UART_SetConfig+0x2cc>)
 800690e:	4293      	cmp	r3, r2
 8006910:	d126      	bne.n	8006960 <UART_SetConfig+0xd8>
 8006912:	4b91      	ldr	r3, [pc, #580]	; (8006b58 <UART_SetConfig+0x2d0>)
 8006914:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006918:	f003 0303 	and.w	r3, r3, #3
 800691c:	2b03      	cmp	r3, #3
 800691e:	d81b      	bhi.n	8006958 <UART_SetConfig+0xd0>
 8006920:	a201      	add	r2, pc, #4	; (adr r2, 8006928 <UART_SetConfig+0xa0>)
 8006922:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006926:	bf00      	nop
 8006928:	08006939 	.word	0x08006939
 800692c:	08006949 	.word	0x08006949
 8006930:	08006941 	.word	0x08006941
 8006934:	08006951 	.word	0x08006951
 8006938:	2301      	movs	r3, #1
 800693a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800693e:	e0d6      	b.n	8006aee <UART_SetConfig+0x266>
 8006940:	2302      	movs	r3, #2
 8006942:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006946:	e0d2      	b.n	8006aee <UART_SetConfig+0x266>
 8006948:	2304      	movs	r3, #4
 800694a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800694e:	e0ce      	b.n	8006aee <UART_SetConfig+0x266>
 8006950:	2308      	movs	r3, #8
 8006952:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006956:	e0ca      	b.n	8006aee <UART_SetConfig+0x266>
 8006958:	2310      	movs	r3, #16
 800695a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800695e:	e0c6      	b.n	8006aee <UART_SetConfig+0x266>
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	4a7d      	ldr	r2, [pc, #500]	; (8006b5c <UART_SetConfig+0x2d4>)
 8006966:	4293      	cmp	r3, r2
 8006968:	d138      	bne.n	80069dc <UART_SetConfig+0x154>
 800696a:	4b7b      	ldr	r3, [pc, #492]	; (8006b58 <UART_SetConfig+0x2d0>)
 800696c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006970:	f003 030c 	and.w	r3, r3, #12
 8006974:	2b0c      	cmp	r3, #12
 8006976:	d82d      	bhi.n	80069d4 <UART_SetConfig+0x14c>
 8006978:	a201      	add	r2, pc, #4	; (adr r2, 8006980 <UART_SetConfig+0xf8>)
 800697a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800697e:	bf00      	nop
 8006980:	080069b5 	.word	0x080069b5
 8006984:	080069d5 	.word	0x080069d5
 8006988:	080069d5 	.word	0x080069d5
 800698c:	080069d5 	.word	0x080069d5
 8006990:	080069c5 	.word	0x080069c5
 8006994:	080069d5 	.word	0x080069d5
 8006998:	080069d5 	.word	0x080069d5
 800699c:	080069d5 	.word	0x080069d5
 80069a0:	080069bd 	.word	0x080069bd
 80069a4:	080069d5 	.word	0x080069d5
 80069a8:	080069d5 	.word	0x080069d5
 80069ac:	080069d5 	.word	0x080069d5
 80069b0:	080069cd 	.word	0x080069cd
 80069b4:	2300      	movs	r3, #0
 80069b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80069ba:	e098      	b.n	8006aee <UART_SetConfig+0x266>
 80069bc:	2302      	movs	r3, #2
 80069be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80069c2:	e094      	b.n	8006aee <UART_SetConfig+0x266>
 80069c4:	2304      	movs	r3, #4
 80069c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80069ca:	e090      	b.n	8006aee <UART_SetConfig+0x266>
 80069cc:	2308      	movs	r3, #8
 80069ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80069d2:	e08c      	b.n	8006aee <UART_SetConfig+0x266>
 80069d4:	2310      	movs	r3, #16
 80069d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80069da:	e088      	b.n	8006aee <UART_SetConfig+0x266>
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	4a5f      	ldr	r2, [pc, #380]	; (8006b60 <UART_SetConfig+0x2d8>)
 80069e2:	4293      	cmp	r3, r2
 80069e4:	d125      	bne.n	8006a32 <UART_SetConfig+0x1aa>
 80069e6:	4b5c      	ldr	r3, [pc, #368]	; (8006b58 <UART_SetConfig+0x2d0>)
 80069e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80069ec:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80069f0:	2b30      	cmp	r3, #48	; 0x30
 80069f2:	d016      	beq.n	8006a22 <UART_SetConfig+0x19a>
 80069f4:	2b30      	cmp	r3, #48	; 0x30
 80069f6:	d818      	bhi.n	8006a2a <UART_SetConfig+0x1a2>
 80069f8:	2b20      	cmp	r3, #32
 80069fa:	d00a      	beq.n	8006a12 <UART_SetConfig+0x18a>
 80069fc:	2b20      	cmp	r3, #32
 80069fe:	d814      	bhi.n	8006a2a <UART_SetConfig+0x1a2>
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d002      	beq.n	8006a0a <UART_SetConfig+0x182>
 8006a04:	2b10      	cmp	r3, #16
 8006a06:	d008      	beq.n	8006a1a <UART_SetConfig+0x192>
 8006a08:	e00f      	b.n	8006a2a <UART_SetConfig+0x1a2>
 8006a0a:	2300      	movs	r3, #0
 8006a0c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a10:	e06d      	b.n	8006aee <UART_SetConfig+0x266>
 8006a12:	2302      	movs	r3, #2
 8006a14:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a18:	e069      	b.n	8006aee <UART_SetConfig+0x266>
 8006a1a:	2304      	movs	r3, #4
 8006a1c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a20:	e065      	b.n	8006aee <UART_SetConfig+0x266>
 8006a22:	2308      	movs	r3, #8
 8006a24:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a28:	e061      	b.n	8006aee <UART_SetConfig+0x266>
 8006a2a:	2310      	movs	r3, #16
 8006a2c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a30:	e05d      	b.n	8006aee <UART_SetConfig+0x266>
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	4a4b      	ldr	r2, [pc, #300]	; (8006b64 <UART_SetConfig+0x2dc>)
 8006a38:	4293      	cmp	r3, r2
 8006a3a:	d125      	bne.n	8006a88 <UART_SetConfig+0x200>
 8006a3c:	4b46      	ldr	r3, [pc, #280]	; (8006b58 <UART_SetConfig+0x2d0>)
 8006a3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a42:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006a46:	2bc0      	cmp	r3, #192	; 0xc0
 8006a48:	d016      	beq.n	8006a78 <UART_SetConfig+0x1f0>
 8006a4a:	2bc0      	cmp	r3, #192	; 0xc0
 8006a4c:	d818      	bhi.n	8006a80 <UART_SetConfig+0x1f8>
 8006a4e:	2b80      	cmp	r3, #128	; 0x80
 8006a50:	d00a      	beq.n	8006a68 <UART_SetConfig+0x1e0>
 8006a52:	2b80      	cmp	r3, #128	; 0x80
 8006a54:	d814      	bhi.n	8006a80 <UART_SetConfig+0x1f8>
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d002      	beq.n	8006a60 <UART_SetConfig+0x1d8>
 8006a5a:	2b40      	cmp	r3, #64	; 0x40
 8006a5c:	d008      	beq.n	8006a70 <UART_SetConfig+0x1e8>
 8006a5e:	e00f      	b.n	8006a80 <UART_SetConfig+0x1f8>
 8006a60:	2300      	movs	r3, #0
 8006a62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a66:	e042      	b.n	8006aee <UART_SetConfig+0x266>
 8006a68:	2302      	movs	r3, #2
 8006a6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a6e:	e03e      	b.n	8006aee <UART_SetConfig+0x266>
 8006a70:	2304      	movs	r3, #4
 8006a72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a76:	e03a      	b.n	8006aee <UART_SetConfig+0x266>
 8006a78:	2308      	movs	r3, #8
 8006a7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a7e:	e036      	b.n	8006aee <UART_SetConfig+0x266>
 8006a80:	2310      	movs	r3, #16
 8006a82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a86:	e032      	b.n	8006aee <UART_SetConfig+0x266>
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	4a30      	ldr	r2, [pc, #192]	; (8006b50 <UART_SetConfig+0x2c8>)
 8006a8e:	4293      	cmp	r3, r2
 8006a90:	d12a      	bne.n	8006ae8 <UART_SetConfig+0x260>
 8006a92:	4b31      	ldr	r3, [pc, #196]	; (8006b58 <UART_SetConfig+0x2d0>)
 8006a94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a98:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006a9c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006aa0:	d01a      	beq.n	8006ad8 <UART_SetConfig+0x250>
 8006aa2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006aa6:	d81b      	bhi.n	8006ae0 <UART_SetConfig+0x258>
 8006aa8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006aac:	d00c      	beq.n	8006ac8 <UART_SetConfig+0x240>
 8006aae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006ab2:	d815      	bhi.n	8006ae0 <UART_SetConfig+0x258>
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d003      	beq.n	8006ac0 <UART_SetConfig+0x238>
 8006ab8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006abc:	d008      	beq.n	8006ad0 <UART_SetConfig+0x248>
 8006abe:	e00f      	b.n	8006ae0 <UART_SetConfig+0x258>
 8006ac0:	2300      	movs	r3, #0
 8006ac2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006ac6:	e012      	b.n	8006aee <UART_SetConfig+0x266>
 8006ac8:	2302      	movs	r3, #2
 8006aca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006ace:	e00e      	b.n	8006aee <UART_SetConfig+0x266>
 8006ad0:	2304      	movs	r3, #4
 8006ad2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006ad6:	e00a      	b.n	8006aee <UART_SetConfig+0x266>
 8006ad8:	2308      	movs	r3, #8
 8006ada:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006ade:	e006      	b.n	8006aee <UART_SetConfig+0x266>
 8006ae0:	2310      	movs	r3, #16
 8006ae2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006ae6:	e002      	b.n	8006aee <UART_SetConfig+0x266>
 8006ae8:	2310      	movs	r3, #16
 8006aea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	4a17      	ldr	r2, [pc, #92]	; (8006b50 <UART_SetConfig+0x2c8>)
 8006af4:	4293      	cmp	r3, r2
 8006af6:	f040 808b 	bne.w	8006c10 <UART_SetConfig+0x388>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006afa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006afe:	2b08      	cmp	r3, #8
 8006b00:	d834      	bhi.n	8006b6c <UART_SetConfig+0x2e4>
 8006b02:	a201      	add	r2, pc, #4	; (adr r2, 8006b08 <UART_SetConfig+0x280>)
 8006b04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b08:	08006b2d 	.word	0x08006b2d
 8006b0c:	08006b6d 	.word	0x08006b6d
 8006b10:	08006b35 	.word	0x08006b35
 8006b14:	08006b6d 	.word	0x08006b6d
 8006b18:	08006b3b 	.word	0x08006b3b
 8006b1c:	08006b6d 	.word	0x08006b6d
 8006b20:	08006b6d 	.word	0x08006b6d
 8006b24:	08006b6d 	.word	0x08006b6d
 8006b28:	08006b43 	.word	0x08006b43
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006b2c:	f7fd fbac 	bl	8004288 <HAL_RCC_GetPCLK1Freq>
 8006b30:	61f8      	str	r0, [r7, #28]
        break;
 8006b32:	e021      	b.n	8006b78 <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006b34:	4b0c      	ldr	r3, [pc, #48]	; (8006b68 <UART_SetConfig+0x2e0>)
 8006b36:	61fb      	str	r3, [r7, #28]
        break;
 8006b38:	e01e      	b.n	8006b78 <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006b3a:	f7fd fb0d 	bl	8004158 <HAL_RCC_GetSysClockFreq>
 8006b3e:	61f8      	str	r0, [r7, #28]
        break;
 8006b40:	e01a      	b.n	8006b78 <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006b42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006b46:	61fb      	str	r3, [r7, #28]
        break;
 8006b48:	e016      	b.n	8006b78 <UART_SetConfig+0x2f0>
 8006b4a:	bf00      	nop
 8006b4c:	efff69f3 	.word	0xefff69f3
 8006b50:	40008000 	.word	0x40008000
 8006b54:	40013800 	.word	0x40013800
 8006b58:	40021000 	.word	0x40021000
 8006b5c:	40004400 	.word	0x40004400
 8006b60:	40004800 	.word	0x40004800
 8006b64:	40004c00 	.word	0x40004c00
 8006b68:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8006b6c:	2300      	movs	r3, #0
 8006b6e:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006b70:	2301      	movs	r3, #1
 8006b72:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006b76:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006b78:	69fb      	ldr	r3, [r7, #28]
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	f000 80fa 	beq.w	8006d74 <UART_SetConfig+0x4ec>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	685a      	ldr	r2, [r3, #4]
 8006b84:	4613      	mov	r3, r2
 8006b86:	005b      	lsls	r3, r3, #1
 8006b88:	4413      	add	r3, r2
 8006b8a:	69fa      	ldr	r2, [r7, #28]
 8006b8c:	429a      	cmp	r2, r3
 8006b8e:	d305      	bcc.n	8006b9c <UART_SetConfig+0x314>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	685b      	ldr	r3, [r3, #4]
 8006b94:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006b96:	69fa      	ldr	r2, [r7, #28]
 8006b98:	429a      	cmp	r2, r3
 8006b9a:	d903      	bls.n	8006ba4 <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 8006b9c:	2301      	movs	r3, #1
 8006b9e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006ba2:	e0e7      	b.n	8006d74 <UART_SetConfig+0x4ec>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006ba4:	69fb      	ldr	r3, [r7, #28]
 8006ba6:	2200      	movs	r2, #0
 8006ba8:	461c      	mov	r4, r3
 8006baa:	4615      	mov	r5, r2
 8006bac:	f04f 0200 	mov.w	r2, #0
 8006bb0:	f04f 0300 	mov.w	r3, #0
 8006bb4:	022b      	lsls	r3, r5, #8
 8006bb6:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8006bba:	0222      	lsls	r2, r4, #8
 8006bbc:	68f9      	ldr	r1, [r7, #12]
 8006bbe:	6849      	ldr	r1, [r1, #4]
 8006bc0:	0849      	lsrs	r1, r1, #1
 8006bc2:	2000      	movs	r0, #0
 8006bc4:	4688      	mov	r8, r1
 8006bc6:	4681      	mov	r9, r0
 8006bc8:	eb12 0a08 	adds.w	sl, r2, r8
 8006bcc:	eb43 0b09 	adc.w	fp, r3, r9
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	685b      	ldr	r3, [r3, #4]
 8006bd4:	2200      	movs	r2, #0
 8006bd6:	603b      	str	r3, [r7, #0]
 8006bd8:	607a      	str	r2, [r7, #4]
 8006bda:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006bde:	4650      	mov	r0, sl
 8006be0:	4659      	mov	r1, fp
 8006be2:	f7f9 fee5 	bl	80009b0 <__aeabi_uldivmod>
 8006be6:	4602      	mov	r2, r0
 8006be8:	460b      	mov	r3, r1
 8006bea:	4613      	mov	r3, r2
 8006bec:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006bee:	69bb      	ldr	r3, [r7, #24]
 8006bf0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006bf4:	d308      	bcc.n	8006c08 <UART_SetConfig+0x380>
 8006bf6:	69bb      	ldr	r3, [r7, #24]
 8006bf8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006bfc:	d204      	bcs.n	8006c08 <UART_SetConfig+0x380>
        {
          huart->Instance->BRR = usartdiv;
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	69ba      	ldr	r2, [r7, #24]
 8006c04:	60da      	str	r2, [r3, #12]
 8006c06:	e0b5      	b.n	8006d74 <UART_SetConfig+0x4ec>
        }
        else
        {
          ret = HAL_ERROR;
 8006c08:	2301      	movs	r3, #1
 8006c0a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006c0e:	e0b1      	b.n	8006d74 <UART_SetConfig+0x4ec>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	69db      	ldr	r3, [r3, #28]
 8006c14:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006c18:	d15d      	bne.n	8006cd6 <UART_SetConfig+0x44e>
  {
    switch (clocksource)
 8006c1a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006c1e:	2b08      	cmp	r3, #8
 8006c20:	d827      	bhi.n	8006c72 <UART_SetConfig+0x3ea>
 8006c22:	a201      	add	r2, pc, #4	; (adr r2, 8006c28 <UART_SetConfig+0x3a0>)
 8006c24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c28:	08006c4d 	.word	0x08006c4d
 8006c2c:	08006c55 	.word	0x08006c55
 8006c30:	08006c5d 	.word	0x08006c5d
 8006c34:	08006c73 	.word	0x08006c73
 8006c38:	08006c63 	.word	0x08006c63
 8006c3c:	08006c73 	.word	0x08006c73
 8006c40:	08006c73 	.word	0x08006c73
 8006c44:	08006c73 	.word	0x08006c73
 8006c48:	08006c6b 	.word	0x08006c6b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006c4c:	f7fd fb1c 	bl	8004288 <HAL_RCC_GetPCLK1Freq>
 8006c50:	61f8      	str	r0, [r7, #28]
        break;
 8006c52:	e014      	b.n	8006c7e <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006c54:	f7fd fb2e 	bl	80042b4 <HAL_RCC_GetPCLK2Freq>
 8006c58:	61f8      	str	r0, [r7, #28]
        break;
 8006c5a:	e010      	b.n	8006c7e <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006c5c:	4b4c      	ldr	r3, [pc, #304]	; (8006d90 <UART_SetConfig+0x508>)
 8006c5e:	61fb      	str	r3, [r7, #28]
        break;
 8006c60:	e00d      	b.n	8006c7e <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006c62:	f7fd fa79 	bl	8004158 <HAL_RCC_GetSysClockFreq>
 8006c66:	61f8      	str	r0, [r7, #28]
        break;
 8006c68:	e009      	b.n	8006c7e <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006c6a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006c6e:	61fb      	str	r3, [r7, #28]
        break;
 8006c70:	e005      	b.n	8006c7e <UART_SetConfig+0x3f6>
      default:
        pclk = 0U;
 8006c72:	2300      	movs	r3, #0
 8006c74:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006c76:	2301      	movs	r3, #1
 8006c78:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006c7c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006c7e:	69fb      	ldr	r3, [r7, #28]
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d077      	beq.n	8006d74 <UART_SetConfig+0x4ec>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006c84:	69fb      	ldr	r3, [r7, #28]
 8006c86:	005a      	lsls	r2, r3, #1
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	685b      	ldr	r3, [r3, #4]
 8006c8c:	085b      	lsrs	r3, r3, #1
 8006c8e:	441a      	add	r2, r3
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	685b      	ldr	r3, [r3, #4]
 8006c94:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c98:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006c9a:	69bb      	ldr	r3, [r7, #24]
 8006c9c:	2b0f      	cmp	r3, #15
 8006c9e:	d916      	bls.n	8006cce <UART_SetConfig+0x446>
 8006ca0:	69bb      	ldr	r3, [r7, #24]
 8006ca2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ca6:	d212      	bcs.n	8006cce <UART_SetConfig+0x446>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006ca8:	69bb      	ldr	r3, [r7, #24]
 8006caa:	b29b      	uxth	r3, r3
 8006cac:	f023 030f 	bic.w	r3, r3, #15
 8006cb0:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006cb2:	69bb      	ldr	r3, [r7, #24]
 8006cb4:	085b      	lsrs	r3, r3, #1
 8006cb6:	b29b      	uxth	r3, r3
 8006cb8:	f003 0307 	and.w	r3, r3, #7
 8006cbc:	b29a      	uxth	r2, r3
 8006cbe:	8afb      	ldrh	r3, [r7, #22]
 8006cc0:	4313      	orrs	r3, r2
 8006cc2:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	8afa      	ldrh	r2, [r7, #22]
 8006cca:	60da      	str	r2, [r3, #12]
 8006ccc:	e052      	b.n	8006d74 <UART_SetConfig+0x4ec>
      }
      else
      {
        ret = HAL_ERROR;
 8006cce:	2301      	movs	r3, #1
 8006cd0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006cd4:	e04e      	b.n	8006d74 <UART_SetConfig+0x4ec>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006cd6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006cda:	2b08      	cmp	r3, #8
 8006cdc:	d827      	bhi.n	8006d2e <UART_SetConfig+0x4a6>
 8006cde:	a201      	add	r2, pc, #4	; (adr r2, 8006ce4 <UART_SetConfig+0x45c>)
 8006ce0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ce4:	08006d09 	.word	0x08006d09
 8006ce8:	08006d11 	.word	0x08006d11
 8006cec:	08006d19 	.word	0x08006d19
 8006cf0:	08006d2f 	.word	0x08006d2f
 8006cf4:	08006d1f 	.word	0x08006d1f
 8006cf8:	08006d2f 	.word	0x08006d2f
 8006cfc:	08006d2f 	.word	0x08006d2f
 8006d00:	08006d2f 	.word	0x08006d2f
 8006d04:	08006d27 	.word	0x08006d27
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006d08:	f7fd fabe 	bl	8004288 <HAL_RCC_GetPCLK1Freq>
 8006d0c:	61f8      	str	r0, [r7, #28]
        break;
 8006d0e:	e014      	b.n	8006d3a <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006d10:	f7fd fad0 	bl	80042b4 <HAL_RCC_GetPCLK2Freq>
 8006d14:	61f8      	str	r0, [r7, #28]
        break;
 8006d16:	e010      	b.n	8006d3a <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006d18:	4b1d      	ldr	r3, [pc, #116]	; (8006d90 <UART_SetConfig+0x508>)
 8006d1a:	61fb      	str	r3, [r7, #28]
        break;
 8006d1c:	e00d      	b.n	8006d3a <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006d1e:	f7fd fa1b 	bl	8004158 <HAL_RCC_GetSysClockFreq>
 8006d22:	61f8      	str	r0, [r7, #28]
        break;
 8006d24:	e009      	b.n	8006d3a <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006d26:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006d2a:	61fb      	str	r3, [r7, #28]
        break;
 8006d2c:	e005      	b.n	8006d3a <UART_SetConfig+0x4b2>
      default:
        pclk = 0U;
 8006d2e:	2300      	movs	r3, #0
 8006d30:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006d32:	2301      	movs	r3, #1
 8006d34:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006d38:	bf00      	nop
    }

    if (pclk != 0U)
 8006d3a:	69fb      	ldr	r3, [r7, #28]
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d019      	beq.n	8006d74 <UART_SetConfig+0x4ec>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	685b      	ldr	r3, [r3, #4]
 8006d44:	085a      	lsrs	r2, r3, #1
 8006d46:	69fb      	ldr	r3, [r7, #28]
 8006d48:	441a      	add	r2, r3
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	685b      	ldr	r3, [r3, #4]
 8006d4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d52:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006d54:	69bb      	ldr	r3, [r7, #24]
 8006d56:	2b0f      	cmp	r3, #15
 8006d58:	d909      	bls.n	8006d6e <UART_SetConfig+0x4e6>
 8006d5a:	69bb      	ldr	r3, [r7, #24]
 8006d5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d60:	d205      	bcs.n	8006d6e <UART_SetConfig+0x4e6>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006d62:	69bb      	ldr	r3, [r7, #24]
 8006d64:	b29a      	uxth	r2, r3
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	60da      	str	r2, [r3, #12]
 8006d6c:	e002      	b.n	8006d74 <UART_SetConfig+0x4ec>
      }
      else
      {
        ret = HAL_ERROR;
 8006d6e:	2301      	movs	r3, #1
 8006d70:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	2200      	movs	r2, #0
 8006d78:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	2200      	movs	r2, #0
 8006d7e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006d80:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8006d84:	4618      	mov	r0, r3
 8006d86:	3728      	adds	r7, #40	; 0x28
 8006d88:	46bd      	mov	sp, r7
 8006d8a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006d8e:	bf00      	nop
 8006d90:	00f42400 	.word	0x00f42400

08006d94 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006d94:	b480      	push	{r7}
 8006d96:	b083      	sub	sp, #12
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006da0:	f003 0301 	and.w	r3, r3, #1
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d00a      	beq.n	8006dbe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	685b      	ldr	r3, [r3, #4]
 8006dae:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	430a      	orrs	r2, r1
 8006dbc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dc2:	f003 0302 	and.w	r3, r3, #2
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d00a      	beq.n	8006de0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	685b      	ldr	r3, [r3, #4]
 8006dd0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	430a      	orrs	r2, r1
 8006dde:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006de4:	f003 0304 	and.w	r3, r3, #4
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d00a      	beq.n	8006e02 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	685b      	ldr	r3, [r3, #4]
 8006df2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	430a      	orrs	r2, r1
 8006e00:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e06:	f003 0308 	and.w	r3, r3, #8
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d00a      	beq.n	8006e24 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	685b      	ldr	r3, [r3, #4]
 8006e14:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	430a      	orrs	r2, r1
 8006e22:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e28:	f003 0310 	and.w	r3, r3, #16
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d00a      	beq.n	8006e46 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	689b      	ldr	r3, [r3, #8]
 8006e36:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	430a      	orrs	r2, r1
 8006e44:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e4a:	f003 0320 	and.w	r3, r3, #32
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d00a      	beq.n	8006e68 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	689b      	ldr	r3, [r3, #8]
 8006e58:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	430a      	orrs	r2, r1
 8006e66:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d01a      	beq.n	8006eaa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	685b      	ldr	r3, [r3, #4]
 8006e7a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	430a      	orrs	r2, r1
 8006e88:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e8e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006e92:	d10a      	bne.n	8006eaa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	685b      	ldr	r3, [r3, #4]
 8006e9a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	430a      	orrs	r2, r1
 8006ea8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d00a      	beq.n	8006ecc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	685b      	ldr	r3, [r3, #4]
 8006ebc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	430a      	orrs	r2, r1
 8006eca:	605a      	str	r2, [r3, #4]
  }
}
 8006ecc:	bf00      	nop
 8006ece:	370c      	adds	r7, #12
 8006ed0:	46bd      	mov	sp, r7
 8006ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed6:	4770      	bx	lr

08006ed8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006ed8:	b580      	push	{r7, lr}
 8006eda:	b086      	sub	sp, #24
 8006edc:	af02      	add	r7, sp, #8
 8006ede:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	2200      	movs	r2, #0
 8006ee4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006ee8:	f7fa ffd0 	bl	8001e8c <HAL_GetTick>
 8006eec:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	f003 0308 	and.w	r3, r3, #8
 8006ef8:	2b08      	cmp	r3, #8
 8006efa:	d10e      	bne.n	8006f1a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006efc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006f00:	9300      	str	r3, [sp, #0]
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	2200      	movs	r2, #0
 8006f06:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006f0a:	6878      	ldr	r0, [r7, #4]
 8006f0c:	f000 f82d 	bl	8006f6a <UART_WaitOnFlagUntilTimeout>
 8006f10:	4603      	mov	r3, r0
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d001      	beq.n	8006f1a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006f16:	2303      	movs	r3, #3
 8006f18:	e023      	b.n	8006f62 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	f003 0304 	and.w	r3, r3, #4
 8006f24:	2b04      	cmp	r3, #4
 8006f26:	d10e      	bne.n	8006f46 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006f28:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006f2c:	9300      	str	r3, [sp, #0]
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	2200      	movs	r2, #0
 8006f32:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006f36:	6878      	ldr	r0, [r7, #4]
 8006f38:	f000 f817 	bl	8006f6a <UART_WaitOnFlagUntilTimeout>
 8006f3c:	4603      	mov	r3, r0
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d001      	beq.n	8006f46 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006f42:	2303      	movs	r3, #3
 8006f44:	e00d      	b.n	8006f62 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	2220      	movs	r2, #32
 8006f4a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	2220      	movs	r2, #32
 8006f50:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	2200      	movs	r2, #0
 8006f56:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	2200      	movs	r2, #0
 8006f5c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8006f60:	2300      	movs	r3, #0
}
 8006f62:	4618      	mov	r0, r3
 8006f64:	3710      	adds	r7, #16
 8006f66:	46bd      	mov	sp, r7
 8006f68:	bd80      	pop	{r7, pc}

08006f6a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006f6a:	b580      	push	{r7, lr}
 8006f6c:	b09c      	sub	sp, #112	; 0x70
 8006f6e:	af00      	add	r7, sp, #0
 8006f70:	60f8      	str	r0, [r7, #12]
 8006f72:	60b9      	str	r1, [r7, #8]
 8006f74:	603b      	str	r3, [r7, #0]
 8006f76:	4613      	mov	r3, r2
 8006f78:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006f7a:	e0a5      	b.n	80070c8 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006f7c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006f7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f82:	f000 80a1 	beq.w	80070c8 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006f86:	f7fa ff81 	bl	8001e8c <HAL_GetTick>
 8006f8a:	4602      	mov	r2, r0
 8006f8c:	683b      	ldr	r3, [r7, #0]
 8006f8e:	1ad3      	subs	r3, r2, r3
 8006f90:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006f92:	429a      	cmp	r2, r3
 8006f94:	d302      	bcc.n	8006f9c <UART_WaitOnFlagUntilTimeout+0x32>
 8006f96:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d13e      	bne.n	800701a <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fa2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006fa4:	e853 3f00 	ldrex	r3, [r3]
 8006fa8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006faa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006fac:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006fb0:	667b      	str	r3, [r7, #100]	; 0x64
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	461a      	mov	r2, r3
 8006fb8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006fba:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006fbc:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fbe:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006fc0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006fc2:	e841 2300 	strex	r3, r2, [r1]
 8006fc6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006fc8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d1e6      	bne.n	8006f9c <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	3308      	adds	r3, #8
 8006fd4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006fd8:	e853 3f00 	ldrex	r3, [r3]
 8006fdc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006fde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fe0:	f023 0301 	bic.w	r3, r3, #1
 8006fe4:	663b      	str	r3, [r7, #96]	; 0x60
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	3308      	adds	r3, #8
 8006fec:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006fee:	64ba      	str	r2, [r7, #72]	; 0x48
 8006ff0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ff2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006ff4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006ff6:	e841 2300 	strex	r3, r2, [r1]
 8006ffa:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006ffc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d1e5      	bne.n	8006fce <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	2220      	movs	r2, #32
 8007006:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	2220      	movs	r2, #32
 800700c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	2200      	movs	r2, #0
 8007012:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8007016:	2303      	movs	r3, #3
 8007018:	e067      	b.n	80070ea <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	f003 0304 	and.w	r3, r3, #4
 8007024:	2b00      	cmp	r3, #0
 8007026:	d04f      	beq.n	80070c8 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	69db      	ldr	r3, [r3, #28]
 800702e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007032:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007036:	d147      	bne.n	80070c8 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007040:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007048:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800704a:	e853 3f00 	ldrex	r3, [r3]
 800704e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007052:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007056:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	461a      	mov	r2, r3
 800705e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007060:	637b      	str	r3, [r7, #52]	; 0x34
 8007062:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007064:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007066:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007068:	e841 2300 	strex	r3, r2, [r1]
 800706c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800706e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007070:	2b00      	cmp	r3, #0
 8007072:	d1e6      	bne.n	8007042 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	3308      	adds	r3, #8
 800707a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800707c:	697b      	ldr	r3, [r7, #20]
 800707e:	e853 3f00 	ldrex	r3, [r3]
 8007082:	613b      	str	r3, [r7, #16]
   return(result);
 8007084:	693b      	ldr	r3, [r7, #16]
 8007086:	f023 0301 	bic.w	r3, r3, #1
 800708a:	66bb      	str	r3, [r7, #104]	; 0x68
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	3308      	adds	r3, #8
 8007092:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007094:	623a      	str	r2, [r7, #32]
 8007096:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007098:	69f9      	ldr	r1, [r7, #28]
 800709a:	6a3a      	ldr	r2, [r7, #32]
 800709c:	e841 2300 	strex	r3, r2, [r1]
 80070a0:	61bb      	str	r3, [r7, #24]
   return(result);
 80070a2:	69bb      	ldr	r3, [r7, #24]
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d1e5      	bne.n	8007074 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	2220      	movs	r2, #32
 80070ac:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	2220      	movs	r2, #32
 80070b2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	2220      	movs	r2, #32
 80070b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	2200      	movs	r2, #0
 80070c0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80070c4:	2303      	movs	r3, #3
 80070c6:	e010      	b.n	80070ea <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	69da      	ldr	r2, [r3, #28]
 80070ce:	68bb      	ldr	r3, [r7, #8]
 80070d0:	4013      	ands	r3, r2
 80070d2:	68ba      	ldr	r2, [r7, #8]
 80070d4:	429a      	cmp	r2, r3
 80070d6:	bf0c      	ite	eq
 80070d8:	2301      	moveq	r3, #1
 80070da:	2300      	movne	r3, #0
 80070dc:	b2db      	uxtb	r3, r3
 80070de:	461a      	mov	r2, r3
 80070e0:	79fb      	ldrb	r3, [r7, #7]
 80070e2:	429a      	cmp	r2, r3
 80070e4:	f43f af4a 	beq.w	8006f7c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80070e8:	2300      	movs	r3, #0
}
 80070ea:	4618      	mov	r0, r3
 80070ec:	3770      	adds	r7, #112	; 0x70
 80070ee:	46bd      	mov	sp, r7
 80070f0:	bd80      	pop	{r7, pc}
	...

080070f4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80070f4:	b480      	push	{r7}
 80070f6:	b097      	sub	sp, #92	; 0x5c
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	60f8      	str	r0, [r7, #12]
 80070fc:	60b9      	str	r1, [r7, #8]
 80070fe:	4613      	mov	r3, r2
 8007100:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	68ba      	ldr	r2, [r7, #8]
 8007106:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	88fa      	ldrh	r2, [r7, #6]
 800710c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	88fa      	ldrh	r2, [r7, #6]
 8007114:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	2200      	movs	r2, #0
 800711c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	689b      	ldr	r3, [r3, #8]
 8007122:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007126:	d10e      	bne.n	8007146 <UART_Start_Receive_IT+0x52>
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	691b      	ldr	r3, [r3, #16]
 800712c:	2b00      	cmp	r3, #0
 800712e:	d105      	bne.n	800713c <UART_Start_Receive_IT+0x48>
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	f240 12ff 	movw	r2, #511	; 0x1ff
 8007136:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800713a:	e02d      	b.n	8007198 <UART_Start_Receive_IT+0xa4>
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	22ff      	movs	r2, #255	; 0xff
 8007140:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007144:	e028      	b.n	8007198 <UART_Start_Receive_IT+0xa4>
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	689b      	ldr	r3, [r3, #8]
 800714a:	2b00      	cmp	r3, #0
 800714c:	d10d      	bne.n	800716a <UART_Start_Receive_IT+0x76>
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	691b      	ldr	r3, [r3, #16]
 8007152:	2b00      	cmp	r3, #0
 8007154:	d104      	bne.n	8007160 <UART_Start_Receive_IT+0x6c>
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	22ff      	movs	r2, #255	; 0xff
 800715a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800715e:	e01b      	b.n	8007198 <UART_Start_Receive_IT+0xa4>
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	227f      	movs	r2, #127	; 0x7f
 8007164:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007168:	e016      	b.n	8007198 <UART_Start_Receive_IT+0xa4>
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	689b      	ldr	r3, [r3, #8]
 800716e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007172:	d10d      	bne.n	8007190 <UART_Start_Receive_IT+0x9c>
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	691b      	ldr	r3, [r3, #16]
 8007178:	2b00      	cmp	r3, #0
 800717a:	d104      	bne.n	8007186 <UART_Start_Receive_IT+0x92>
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	227f      	movs	r2, #127	; 0x7f
 8007180:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007184:	e008      	b.n	8007198 <UART_Start_Receive_IT+0xa4>
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	223f      	movs	r2, #63	; 0x3f
 800718a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800718e:	e003      	b.n	8007198 <UART_Start_Receive_IT+0xa4>
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	2200      	movs	r2, #0
 8007194:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	2200      	movs	r2, #0
 800719c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	2222      	movs	r2, #34	; 0x22
 80071a4:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	3308      	adds	r3, #8
 80071ac:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80071b0:	e853 3f00 	ldrex	r3, [r3]
 80071b4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80071b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071b8:	f043 0301 	orr.w	r3, r3, #1
 80071bc:	657b      	str	r3, [r7, #84]	; 0x54
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	3308      	adds	r3, #8
 80071c4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80071c6:	64ba      	str	r2, [r7, #72]	; 0x48
 80071c8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071ca:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80071cc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80071ce:	e841 2300 	strex	r3, r2, [r1]
 80071d2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80071d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d1e5      	bne.n	80071a6 <UART_Start_Receive_IT+0xb2>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	689b      	ldr	r3, [r3, #8]
 80071de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80071e2:	d107      	bne.n	80071f4 <UART_Start_Receive_IT+0x100>
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	691b      	ldr	r3, [r3, #16]
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d103      	bne.n	80071f4 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	4a24      	ldr	r2, [pc, #144]	; (8007280 <UART_Start_Receive_IT+0x18c>)
 80071f0:	665a      	str	r2, [r3, #100]	; 0x64
 80071f2:	e002      	b.n	80071fa <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	4a23      	ldr	r2, [pc, #140]	; (8007284 <UART_Start_Receive_IT+0x190>)
 80071f8:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	2200      	movs	r2, #0
 80071fe:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	691b      	ldr	r3, [r3, #16]
 8007206:	2b00      	cmp	r3, #0
 8007208:	d019      	beq.n	800723e <UART_Start_Receive_IT+0x14a>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007210:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007212:	e853 3f00 	ldrex	r3, [r3]
 8007216:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800721a:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800721e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	461a      	mov	r2, r3
 8007226:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007228:	637b      	str	r3, [r7, #52]	; 0x34
 800722a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800722c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800722e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007230:	e841 2300 	strex	r3, r2, [r1]
 8007234:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007236:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007238:	2b00      	cmp	r3, #0
 800723a:	d1e6      	bne.n	800720a <UART_Start_Receive_IT+0x116>
 800723c:	e018      	b.n	8007270 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007244:	697b      	ldr	r3, [r7, #20]
 8007246:	e853 3f00 	ldrex	r3, [r3]
 800724a:	613b      	str	r3, [r7, #16]
   return(result);
 800724c:	693b      	ldr	r3, [r7, #16]
 800724e:	f043 0320 	orr.w	r3, r3, #32
 8007252:	653b      	str	r3, [r7, #80]	; 0x50
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	461a      	mov	r2, r3
 800725a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800725c:	623b      	str	r3, [r7, #32]
 800725e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007260:	69f9      	ldr	r1, [r7, #28]
 8007262:	6a3a      	ldr	r2, [r7, #32]
 8007264:	e841 2300 	strex	r3, r2, [r1]
 8007268:	61bb      	str	r3, [r7, #24]
   return(result);
 800726a:	69bb      	ldr	r3, [r7, #24]
 800726c:	2b00      	cmp	r3, #0
 800726e:	d1e6      	bne.n	800723e <UART_Start_Receive_IT+0x14a>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8007270:	2300      	movs	r3, #0
}
 8007272:	4618      	mov	r0, r3
 8007274:	375c      	adds	r7, #92	; 0x5c
 8007276:	46bd      	mov	sp, r7
 8007278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800727c:	4770      	bx	lr
 800727e:	bf00      	nop
 8007280:	0800752f 	.word	0x0800752f
 8007284:	080073cf 	.word	0x080073cf

08007288 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007288:	b480      	push	{r7}
 800728a:	b095      	sub	sp, #84	; 0x54
 800728c:	af00      	add	r7, sp, #0
 800728e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007296:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007298:	e853 3f00 	ldrex	r3, [r3]
 800729c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800729e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072a0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80072a4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	461a      	mov	r2, r3
 80072ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80072ae:	643b      	str	r3, [r7, #64]	; 0x40
 80072b0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072b2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80072b4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80072b6:	e841 2300 	strex	r3, r2, [r1]
 80072ba:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80072bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d1e6      	bne.n	8007290 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	3308      	adds	r3, #8
 80072c8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072ca:	6a3b      	ldr	r3, [r7, #32]
 80072cc:	e853 3f00 	ldrex	r3, [r3]
 80072d0:	61fb      	str	r3, [r7, #28]
   return(result);
 80072d2:	69fb      	ldr	r3, [r7, #28]
 80072d4:	f023 0301 	bic.w	r3, r3, #1
 80072d8:	64bb      	str	r3, [r7, #72]	; 0x48
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	3308      	adds	r3, #8
 80072e0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80072e2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80072e4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072e6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80072e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80072ea:	e841 2300 	strex	r3, r2, [r1]
 80072ee:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80072f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d1e5      	bne.n	80072c2 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80072fa:	2b01      	cmp	r3, #1
 80072fc:	d118      	bne.n	8007330 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	e853 3f00 	ldrex	r3, [r3]
 800730a:	60bb      	str	r3, [r7, #8]
   return(result);
 800730c:	68bb      	ldr	r3, [r7, #8]
 800730e:	f023 0310 	bic.w	r3, r3, #16
 8007312:	647b      	str	r3, [r7, #68]	; 0x44
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	461a      	mov	r2, r3
 800731a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800731c:	61bb      	str	r3, [r7, #24]
 800731e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007320:	6979      	ldr	r1, [r7, #20]
 8007322:	69ba      	ldr	r2, [r7, #24]
 8007324:	e841 2300 	strex	r3, r2, [r1]
 8007328:	613b      	str	r3, [r7, #16]
   return(result);
 800732a:	693b      	ldr	r3, [r7, #16]
 800732c:	2b00      	cmp	r3, #0
 800732e:	d1e6      	bne.n	80072fe <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	2220      	movs	r2, #32
 8007334:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	2200      	movs	r2, #0
 800733a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	2200      	movs	r2, #0
 8007340:	665a      	str	r2, [r3, #100]	; 0x64
}
 8007342:	bf00      	nop
 8007344:	3754      	adds	r7, #84	; 0x54
 8007346:	46bd      	mov	sp, r7
 8007348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800734c:	4770      	bx	lr

0800734e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800734e:	b580      	push	{r7, lr}
 8007350:	b084      	sub	sp, #16
 8007352:	af00      	add	r7, sp, #0
 8007354:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800735a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	2200      	movs	r2, #0
 8007360:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	2200      	movs	r2, #0
 8007368:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800736c:	68f8      	ldr	r0, [r7, #12]
 800736e:	f7ff fa75 	bl	800685c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007372:	bf00      	nop
 8007374:	3710      	adds	r7, #16
 8007376:	46bd      	mov	sp, r7
 8007378:	bd80      	pop	{r7, pc}

0800737a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800737a:	b580      	push	{r7, lr}
 800737c:	b088      	sub	sp, #32
 800737e:	af00      	add	r7, sp, #0
 8007380:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	e853 3f00 	ldrex	r3, [r3]
 800738e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007390:	68bb      	ldr	r3, [r7, #8]
 8007392:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007396:	61fb      	str	r3, [r7, #28]
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	461a      	mov	r2, r3
 800739e:	69fb      	ldr	r3, [r7, #28]
 80073a0:	61bb      	str	r3, [r7, #24]
 80073a2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073a4:	6979      	ldr	r1, [r7, #20]
 80073a6:	69ba      	ldr	r2, [r7, #24]
 80073a8:	e841 2300 	strex	r3, r2, [r1]
 80073ac:	613b      	str	r3, [r7, #16]
   return(result);
 80073ae:	693b      	ldr	r3, [r7, #16]
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d1e6      	bne.n	8007382 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	2220      	movs	r2, #32
 80073b8:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	2200      	movs	r2, #0
 80073be:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80073c0:	6878      	ldr	r0, [r7, #4]
 80073c2:	f7ff fa41 	bl	8006848 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80073c6:	bf00      	nop
 80073c8:	3720      	adds	r7, #32
 80073ca:	46bd      	mov	sp, r7
 80073cc:	bd80      	pop	{r7, pc}

080073ce <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80073ce:	b580      	push	{r7, lr}
 80073d0:	b096      	sub	sp, #88	; 0x58
 80073d2:	af00      	add	r7, sp, #0
 80073d4:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80073dc:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80073e4:	2b22      	cmp	r3, #34	; 0x22
 80073e6:	f040 8094 	bne.w	8007512 <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80073f0:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80073f4:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80073f8:	b2d9      	uxtb	r1, r3
 80073fa:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80073fe:	b2da      	uxtb	r2, r3
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007404:	400a      	ands	r2, r1
 8007406:	b2d2      	uxtb	r2, r2
 8007408:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800740e:	1c5a      	adds	r2, r3, #1
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800741a:	b29b      	uxth	r3, r3
 800741c:	3b01      	subs	r3, #1
 800741e:	b29a      	uxth	r2, r3
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800742c:	b29b      	uxth	r3, r3
 800742e:	2b00      	cmp	r3, #0
 8007430:	d179      	bne.n	8007526 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007438:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800743a:	e853 3f00 	ldrex	r3, [r3]
 800743e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007440:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007442:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007446:	653b      	str	r3, [r7, #80]	; 0x50
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	461a      	mov	r2, r3
 800744e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007450:	647b      	str	r3, [r7, #68]	; 0x44
 8007452:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007454:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007456:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007458:	e841 2300 	strex	r3, r2, [r1]
 800745c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800745e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007460:	2b00      	cmp	r3, #0
 8007462:	d1e6      	bne.n	8007432 <UART_RxISR_8BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	3308      	adds	r3, #8
 800746a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800746c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800746e:	e853 3f00 	ldrex	r3, [r3]
 8007472:	623b      	str	r3, [r7, #32]
   return(result);
 8007474:	6a3b      	ldr	r3, [r7, #32]
 8007476:	f023 0301 	bic.w	r3, r3, #1
 800747a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	3308      	adds	r3, #8
 8007482:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007484:	633a      	str	r2, [r7, #48]	; 0x30
 8007486:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007488:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800748a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800748c:	e841 2300 	strex	r3, r2, [r1]
 8007490:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007492:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007494:	2b00      	cmp	r3, #0
 8007496:	d1e5      	bne.n	8007464 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	2220      	movs	r2, #32
 800749c:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	2200      	movs	r2, #0
 80074a2:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80074a8:	2b01      	cmp	r3, #1
 80074aa:	d12e      	bne.n	800750a <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	2200      	movs	r2, #0
 80074b0:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074b8:	693b      	ldr	r3, [r7, #16]
 80074ba:	e853 3f00 	ldrex	r3, [r3]
 80074be:	60fb      	str	r3, [r7, #12]
   return(result);
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	f023 0310 	bic.w	r3, r3, #16
 80074c6:	64bb      	str	r3, [r7, #72]	; 0x48
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	461a      	mov	r2, r3
 80074ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80074d0:	61fb      	str	r3, [r7, #28]
 80074d2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074d4:	69b9      	ldr	r1, [r7, #24]
 80074d6:	69fa      	ldr	r2, [r7, #28]
 80074d8:	e841 2300 	strex	r3, r2, [r1]
 80074dc:	617b      	str	r3, [r7, #20]
   return(result);
 80074de:	697b      	ldr	r3, [r7, #20]
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d1e6      	bne.n	80074b2 <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	69db      	ldr	r3, [r3, #28]
 80074ea:	f003 0310 	and.w	r3, r3, #16
 80074ee:	2b10      	cmp	r3, #16
 80074f0:	d103      	bne.n	80074fa <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	2210      	movs	r2, #16
 80074f8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007500:	4619      	mov	r1, r3
 8007502:	6878      	ldr	r0, [r7, #4]
 8007504:	f7ff f9b4 	bl	8006870 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007508:	e00d      	b.n	8007526 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800750a:	6878      	ldr	r0, [r7, #4]
 800750c:	f7f9 ffee 	bl	80014ec <HAL_UART_RxCpltCallback>
}
 8007510:	e009      	b.n	8007526 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	8b1b      	ldrh	r3, [r3, #24]
 8007518:	b29a      	uxth	r2, r3
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	f042 0208 	orr.w	r2, r2, #8
 8007522:	b292      	uxth	r2, r2
 8007524:	831a      	strh	r2, [r3, #24]
}
 8007526:	bf00      	nop
 8007528:	3758      	adds	r7, #88	; 0x58
 800752a:	46bd      	mov	sp, r7
 800752c:	bd80      	pop	{r7, pc}

0800752e <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800752e:	b580      	push	{r7, lr}
 8007530:	b096      	sub	sp, #88	; 0x58
 8007532:	af00      	add	r7, sp, #0
 8007534:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800753c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007544:	2b22      	cmp	r3, #34	; 0x22
 8007546:	f040 8094 	bne.w	8007672 <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007550:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007558:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800755a:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800755e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8007562:	4013      	ands	r3, r2
 8007564:	b29a      	uxth	r2, r3
 8007566:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007568:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800756e:	1c9a      	adds	r2, r3, #2
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800757a:	b29b      	uxth	r3, r3
 800757c:	3b01      	subs	r3, #1
 800757e:	b29a      	uxth	r2, r3
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800758c:	b29b      	uxth	r3, r3
 800758e:	2b00      	cmp	r3, #0
 8007590:	d179      	bne.n	8007686 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007598:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800759a:	e853 3f00 	ldrex	r3, [r3]
 800759e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80075a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075a2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80075a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	461a      	mov	r2, r3
 80075ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80075b0:	643b      	str	r3, [r7, #64]	; 0x40
 80075b2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075b4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80075b6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80075b8:	e841 2300 	strex	r3, r2, [r1]
 80075bc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80075be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d1e6      	bne.n	8007592 <UART_RxISR_16BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	3308      	adds	r3, #8
 80075ca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075cc:	6a3b      	ldr	r3, [r7, #32]
 80075ce:	e853 3f00 	ldrex	r3, [r3]
 80075d2:	61fb      	str	r3, [r7, #28]
   return(result);
 80075d4:	69fb      	ldr	r3, [r7, #28]
 80075d6:	f023 0301 	bic.w	r3, r3, #1
 80075da:	64bb      	str	r3, [r7, #72]	; 0x48
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	3308      	adds	r3, #8
 80075e2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80075e4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80075e6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075e8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80075ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80075ec:	e841 2300 	strex	r3, r2, [r1]
 80075f0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80075f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d1e5      	bne.n	80075c4 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	2220      	movs	r2, #32
 80075fc:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	2200      	movs	r2, #0
 8007602:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007608:	2b01      	cmp	r3, #1
 800760a:	d12e      	bne.n	800766a <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	2200      	movs	r2, #0
 8007610:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	e853 3f00 	ldrex	r3, [r3]
 800761e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007620:	68bb      	ldr	r3, [r7, #8]
 8007622:	f023 0310 	bic.w	r3, r3, #16
 8007626:	647b      	str	r3, [r7, #68]	; 0x44
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	461a      	mov	r2, r3
 800762e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007630:	61bb      	str	r3, [r7, #24]
 8007632:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007634:	6979      	ldr	r1, [r7, #20]
 8007636:	69ba      	ldr	r2, [r7, #24]
 8007638:	e841 2300 	strex	r3, r2, [r1]
 800763c:	613b      	str	r3, [r7, #16]
   return(result);
 800763e:	693b      	ldr	r3, [r7, #16]
 8007640:	2b00      	cmp	r3, #0
 8007642:	d1e6      	bne.n	8007612 <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	69db      	ldr	r3, [r3, #28]
 800764a:	f003 0310 	and.w	r3, r3, #16
 800764e:	2b10      	cmp	r3, #16
 8007650:	d103      	bne.n	800765a <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	2210      	movs	r2, #16
 8007658:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007660:	4619      	mov	r1, r3
 8007662:	6878      	ldr	r0, [r7, #4]
 8007664:	f7ff f904 	bl	8006870 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007668:	e00d      	b.n	8007686 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800766a:	6878      	ldr	r0, [r7, #4]
 800766c:	f7f9 ff3e 	bl	80014ec <HAL_UART_RxCpltCallback>
}
 8007670:	e009      	b.n	8007686 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	8b1b      	ldrh	r3, [r3, #24]
 8007678:	b29a      	uxth	r2, r3
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	f042 0208 	orr.w	r2, r2, #8
 8007682:	b292      	uxth	r2, r2
 8007684:	831a      	strh	r2, [r3, #24]
}
 8007686:	bf00      	nop
 8007688:	3758      	adds	r7, #88	; 0x58
 800768a:	46bd      	mov	sp, r7
 800768c:	bd80      	pop	{r7, pc}

0800768e <HAL_RS485Ex_Init>:
  *       oversampling rate).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RS485Ex_Init(UART_HandleTypeDef *huart, uint32_t Polarity, uint32_t AssertionTime,
                                   uint32_t DeassertionTime)
{
 800768e:	b580      	push	{r7, lr}
 8007690:	b086      	sub	sp, #24
 8007692:	af00      	add	r7, sp, #0
 8007694:	60f8      	str	r0, [r7, #12]
 8007696:	60b9      	str	r1, [r7, #8]
 8007698:	607a      	str	r2, [r7, #4]
 800769a:	603b      	str	r3, [r7, #0]
  uint32_t temp;

  /* Check the UART handle allocation */
  if (huart == NULL)
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d101      	bne.n	80076a6 <HAL_RS485Ex_Init+0x18>
  {
    return HAL_ERROR;
 80076a2:	2301      	movs	r3, #1
 80076a4:	e056      	b.n	8007754 <HAL_RS485Ex_Init+0xc6>
  assert_param(IS_UART_ASSERTIONTIME(AssertionTime));

  /* Check the Driver Enable deassertion time */
  assert_param(IS_UART_DEASSERTIONTIME(DeassertionTime));

  if (huart->gState == HAL_UART_STATE_RESET)
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d106      	bne.n	80076bc <HAL_RS485Ex_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	2200      	movs	r2, #0
 80076b2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_UART_MspInit(huart);
 80076b6:	68f8      	ldr	r0, [r7, #12]
 80076b8:	f7fa faa4 	bl	8001c04 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	2224      	movs	r2, #36	; 0x24
 80076c0:	679a      	str	r2, [r3, #120]	; 0x78

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	681a      	ldr	r2, [r3, #0]
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	f022 0201 	bic.w	r2, r2, #1
 80076d0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80076d2:	68f8      	ldr	r0, [r7, #12]
 80076d4:	f7ff f8d8 	bl	8006888 <UART_SetConfig>
 80076d8:	4603      	mov	r3, r0
 80076da:	2b01      	cmp	r3, #1
 80076dc:	d101      	bne.n	80076e2 <HAL_RS485Ex_Init+0x54>
  {
    return HAL_ERROR;
 80076de:	2301      	movs	r3, #1
 80076e0:	e038      	b.n	8007754 <HAL_RS485Ex_Init+0xc6>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d002      	beq.n	80076f0 <HAL_RS485Ex_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80076ea:	68f8      	ldr	r0, [r7, #12]
 80076ec:	f7ff fb52 	bl	8006d94 <UART_AdvFeatureConfig>
  }

  /* Enable the Driver Enable mode by setting the DEM bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	689a      	ldr	r2, [r3, #8]
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80076fe:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable polarity */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	689b      	ldr	r3, [r3, #8]
 8007706:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	68ba      	ldr	r2, [r7, #8]
 8007710:	430a      	orrs	r2, r1
 8007712:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable assertion and deassertion times */
  temp = (AssertionTime << UART_CR1_DEAT_ADDRESS_LSB_POS);
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	055b      	lsls	r3, r3, #21
 8007718:	617b      	str	r3, [r7, #20]
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 800771a:	683b      	ldr	r3, [r7, #0]
 800771c:	041b      	lsls	r3, r3, #16
 800771e:	697a      	ldr	r2, [r7, #20]
 8007720:	4313      	orrs	r3, r2
 8007722:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	f023 737f 	bic.w	r3, r3, #66846720	; 0x3fc0000
 800772e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8007732:	68fa      	ldr	r2, [r7, #12]
 8007734:	6812      	ldr	r2, [r2, #0]
 8007736:	6979      	ldr	r1, [r7, #20]
 8007738:	430b      	orrs	r3, r1
 800773a:	6013      	str	r3, [r2, #0]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	681a      	ldr	r2, [r3, #0]
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	f042 0201 	orr.w	r2, r2, #1
 800774a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800774c:	68f8      	ldr	r0, [r7, #12]
 800774e:	f7ff fbc3 	bl	8006ed8 <UART_CheckIdleState>
 8007752:	4603      	mov	r3, r0
}
 8007754:	4618      	mov	r0, r3
 8007756:	3718      	adds	r7, #24
 8007758:	46bd      	mov	sp, r7
 800775a:	bd80      	pop	{r7, pc}

0800775c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800775c:	b480      	push	{r7}
 800775e:	b083      	sub	sp, #12
 8007760:	af00      	add	r7, sp, #0
 8007762:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007764:	bf00      	nop
 8007766:	370c      	adds	r7, #12
 8007768:	46bd      	mov	sp, r7
 800776a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800776e:	4770      	bx	lr

08007770 <__libc_init_array>:
 8007770:	b570      	push	{r4, r5, r6, lr}
 8007772:	4d0d      	ldr	r5, [pc, #52]	; (80077a8 <__libc_init_array+0x38>)
 8007774:	4c0d      	ldr	r4, [pc, #52]	; (80077ac <__libc_init_array+0x3c>)
 8007776:	1b64      	subs	r4, r4, r5
 8007778:	10a4      	asrs	r4, r4, #2
 800777a:	2600      	movs	r6, #0
 800777c:	42a6      	cmp	r6, r4
 800777e:	d109      	bne.n	8007794 <__libc_init_array+0x24>
 8007780:	4d0b      	ldr	r5, [pc, #44]	; (80077b0 <__libc_init_array+0x40>)
 8007782:	4c0c      	ldr	r4, [pc, #48]	; (80077b4 <__libc_init_array+0x44>)
 8007784:	f000 f82e 	bl	80077e4 <_init>
 8007788:	1b64      	subs	r4, r4, r5
 800778a:	10a4      	asrs	r4, r4, #2
 800778c:	2600      	movs	r6, #0
 800778e:	42a6      	cmp	r6, r4
 8007790:	d105      	bne.n	800779e <__libc_init_array+0x2e>
 8007792:	bd70      	pop	{r4, r5, r6, pc}
 8007794:	f855 3b04 	ldr.w	r3, [r5], #4
 8007798:	4798      	blx	r3
 800779a:	3601      	adds	r6, #1
 800779c:	e7ee      	b.n	800777c <__libc_init_array+0xc>
 800779e:	f855 3b04 	ldr.w	r3, [r5], #4
 80077a2:	4798      	blx	r3
 80077a4:	3601      	adds	r6, #1
 80077a6:	e7f2      	b.n	800778e <__libc_init_array+0x1e>
 80077a8:	0800786c 	.word	0x0800786c
 80077ac:	0800786c 	.word	0x0800786c
 80077b0:	0800786c 	.word	0x0800786c
 80077b4:	08007870 	.word	0x08007870

080077b8 <memcpy>:
 80077b8:	440a      	add	r2, r1
 80077ba:	4291      	cmp	r1, r2
 80077bc:	f100 33ff 	add.w	r3, r0, #4294967295
 80077c0:	d100      	bne.n	80077c4 <memcpy+0xc>
 80077c2:	4770      	bx	lr
 80077c4:	b510      	push	{r4, lr}
 80077c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80077ca:	f803 4f01 	strb.w	r4, [r3, #1]!
 80077ce:	4291      	cmp	r1, r2
 80077d0:	d1f9      	bne.n	80077c6 <memcpy+0xe>
 80077d2:	bd10      	pop	{r4, pc}

080077d4 <memset>:
 80077d4:	4402      	add	r2, r0
 80077d6:	4603      	mov	r3, r0
 80077d8:	4293      	cmp	r3, r2
 80077da:	d100      	bne.n	80077de <memset+0xa>
 80077dc:	4770      	bx	lr
 80077de:	f803 1b01 	strb.w	r1, [r3], #1
 80077e2:	e7f9      	b.n	80077d8 <memset+0x4>

080077e4 <_init>:
 80077e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077e6:	bf00      	nop
 80077e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80077ea:	bc08      	pop	{r3}
 80077ec:	469e      	mov	lr, r3
 80077ee:	4770      	bx	lr

080077f0 <_fini>:
 80077f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077f2:	bf00      	nop
 80077f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80077f6:	bc08      	pop	{r3}
 80077f8:	469e      	mov	lr, r3
 80077fa:	4770      	bx	lr
